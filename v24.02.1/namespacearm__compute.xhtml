<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Copyright (c) 2017-2024 Arm Limited.  
<a href="namespacearm__compute.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1assembly__utils"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1assembly__utils.xhtml">assembly_utils</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cl__direct__conv"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cl__direct__conv.xhtml">cl_direct_conv</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cl__dwc"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cl__dwc.xhtml">cl_dwc</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cl__gemm"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cl__gemm.xhtml">cl_gemm</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cl__indirect__conv"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cl__indirect__conv.xhtml">cl_indirect_conv</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cl__matmul"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cl__matmul.xhtml">cl_matmul</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cl__tuner"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cl__tuner.xhtml">cl_tuner</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">cpu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpuinfo"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml">cpuinfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1experimental"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1gpu"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1gpu.xhtml">gpu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph__utils"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph__utils.xhtml">graph_utils</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1helpers"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers.xhtml">helpers</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1io"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1io.xhtml">io</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1kernels"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1kernels.xhtml">kernels</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1logging"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1logging.xhtml">logging</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1misc"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc.xhtml">misc</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1mlgo"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1mlgo.xhtml">mlgo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1opencl"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1opencl.xhtml">opencl</a></td></tr>
<tr class="memdesc:namespacearm__compute_1_1opencl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to convert the 2D Fully Connected weights from NCHW to NHWC or vice versa. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1quantization"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml">quantization</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1scale__helpers"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1scale__helpers.xhtml">scale_helpers</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1scale__utils"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1scale__utils.xhtml">scale_utils</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1scheduler__utils"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1scheduler__utils.xhtml">scheduler_utils</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1softmax__helpers"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1softmax__helpers.xhtml">softmax_helpers</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1support"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support.xhtml">support</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utility"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml">utility</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1weights__transformations"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1weights__transformations.xhtml">weights_transformations</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1wrapper"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1wrapper.xhtml">wrapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_auto_padding.xhtml">AccessWindowAutoPadding</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dummy access window.  <a href="classarm__compute_1_1_access_window_auto_padding.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of a row access pattern.  <a href="classarm__compute_1_1_access_window_horizontal.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of a rectangular access pattern.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of a static rectangular access pattern.  <a href="classarm__compute_1_1_access_window_static.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml">AccessWindowTranspose</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of a XY-transpose access pattern.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_vertical.xhtml">AccessWindowVertical</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of a column access pattern.  <a href="classarm__compute_1_1_access_window_vertical.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activation Layer Information class.  <a href="classarm__compute_1_1_activation_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator.xhtml">Allocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default malloc allocator implementation.  <a href="classarm__compute_1_1_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default malloc allocator implementation.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_array.xhtml">Array</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the <a class="el" href="classarm__compute_1_1_i_array.xhtml" title="Array of type T.">IArray</a> interface which allocates a static number of T values <br  />
  <a href="classarm__compute_1_1_array.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Brain floating point representation class.  <a href="classarm__compute_1_1bfloat16.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_blob_info.xhtml">BlobInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Meta-data information for each blob.  <a href="structarm__compute_1_1_blob_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_blob_lifetime_manager.xhtml">BlobLifetimeManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Concrete class that tracks the lifetime of registered tensors and calculates the systems memory requirements in terms of blobs.  <a href="classarm__compute_1_1_blob_lifetime_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_blob_memory_pool.xhtml">BlobMemoryPool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blob memory pool.  <a href="classarm__compute_1_1_blob_memory_pool.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for 2D border size.  <a href="structarm__compute_1_1_border_size.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bounding Box Transform information class.  <a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">BoxWithNonMaximaSuppressionLimit Information class.  <a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to get the absolute value of an input tensor.  <a href="classarm__compute_1_1_c_l_abs_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml">CLActivationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_activation_kernel.xhtml">opencl::kernels::ClActivationKernel</a>.  <a href="classarm__compute_1_1_c_l_activation_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml">CLArgMinMaxLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to calculate the index of the minimum or maximum values in a tensor based on an axis.  <a href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer_kernel.xhtml">CLArgMinMaxLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the reduction operation kernel.  <a href="classarm__compute_1_1_c_l_arg_min_max_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">CLArithmeticAddition</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_saturated_arithmetic_kernel.xhtml">opencl::kernels::ClSaturatedArithmeticKernel</a> for addition.  <a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml">CLArithmeticDivision</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_saturated_arithmetic_kernel.xhtml">opencl::kernels::ClSaturatedArithmeticKernel</a> for division.  <a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml">CLArithmeticSubtraction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_saturated_arithmetic_kernel.xhtml">opencl::kernels::ClSaturatedArithmeticKernel</a> for subtraction.  <a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_c_l_array.xhtml" title="CLArray implementation">CLArray</a> implementation <br  />
  <a href="classarm__compute_1_1_c_l_array.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml">CLBatchNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml">CLNormalizationLayerKernel</a> and simulate a batch normalization layer.  <a href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml">CLBatchNormalizationLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the BatchNormalization layer kernel.  <a href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer.xhtml">CLBatchToSpaceLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml">CLBatchToSpaceLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_batch_to_space_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml">CLBatchToSpaceLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the batch to space kernel.  <a href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bitwise_and.xhtml">CLBitwiseAnd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform bitwise AND by running <a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml">CLBitwiseKernel</a>.  <a href="classarm__compute_1_1_c_l_bitwise_and.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml">CLBitwiseKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the bitwise operation kernel.  <a href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bitwise_not.xhtml">CLBitwiseNot</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform bitwise NOT by running <a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml">CLBitwiseKernel</a>.  <a href="classarm__compute_1_1_c_l_bitwise_not.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bitwise_or.xhtml">CLBitwiseOr</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform bitwise OR by running <a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml">CLBitwiseKernel</a>.  <a href="classarm__compute_1_1_c_l_bitwise_or.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bitwise_xor.xhtml">CLBitwiseXor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform bitwise XOR by running <a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml">CLBitwiseKernel</a>.  <a href="classarm__compute_1_1_c_l_bitwise_xor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform.xhtml">CLBoundingBoxTransform</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml">CLBoundingBoxTransformKernel</a>.  <a href="classarm__compute_1_1_c_l_bounding_box_transform.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml">CLBoundingBoxTransformKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the bounding box kernel.  <a href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_buffer_allocator.xhtml">CLBufferAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default OpenCL cl buffer allocator implementation.  <a href="classarm__compute_1_1_c_l_buffer_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_buffer_memory_region.xhtml">CLBufferMemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL buffer memory region implementation.  <a href="classarm__compute_1_1_c_l_buffer_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build options.  <a href="classarm__compute_1_1_c_l_build_options.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_cast.xhtml">CLCast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_cast_kernel.xhtml">opencl::kernels::ClCastKernel</a>.  <a href="classarm__compute_1_1_c_l_cast.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer.xhtml">CLChannelShuffleLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml">CLChannelShuffleLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_channel_shuffle_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml">CLChannelShuffleLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the channel shuffle kernel.  <a href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_coarse_s_v_m_memory_region.xhtml">CLCoarseSVMMemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL coarse-grain SVM memory region implementation.  <a href="classarm__compute_1_1_c_l_coarse_s_v_m_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Command buffer contains a list of commands that is constructed once and later enqueued multiple times.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_comparison.xhtml">CLComparison</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml">CLComparisonKernel</a>.  <a href="classarm__compute_1_1_c_l_comparison.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml">CLComparisonKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the comparison kernel.  <a href="classarm__compute_1_1_c_l_comparison_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml">CLComparisonKernel</a>.  <a href="classarm__compute_1_1_c_l_comparison_static.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml">CLCompatCommandBuffer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Command buffer implementation for platform without mutable dispatch command buffer extension.  <a href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml" title="CLCompileContext class.">CLCompileContext</a> class.  <a href="classarm__compute_1_1_c_l_compile_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_complex_pixel_wise_multiplication.xhtml">CLComplexPixelWiseMultiplication</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1_cl_complex_mul.xhtml">opencl::ClComplexMul</a>.  <a href="classarm__compute_1_1_c_l_complex_pixel_wise_multiplication.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_compute_all_anchors_kernel.xhtml">CLComputeAllAnchorsKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for Compute All Anchors kernel.  <a href="classarm__compute_1_1_c_l_compute_all_anchors_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_compute_mean_variance.xhtml">CLComputeMeanVariance</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for compute Mean and Variance per channel.  <a href="classarm__compute_1_1_c_l_compute_mean_variance.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml">CLConcatenateLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute concatenate tensors along a given axis.  <a href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_conv3_d.xhtml">CLConv3D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution3d layer.  <a href="classarm__compute_1_1_c_l_conv3_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml">CLConvertFullyConnectedWeights</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run an <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_convert_fully_connected_weights_kernel.xhtml">opencl::kernels::ClConvertFullyConnectedWeightsKernel</a>.  <a href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution layer.  <a href="classarm__compute_1_1_c_l_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_copy.xhtml">CLCopy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_copy_kernel.xhtml">opencl::kernels::ClCopyKernel</a>.  <a href="classarm__compute_1_1_c_l_copy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_crop.xhtml">CLCrop</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_crop_kernel.xhtml">opencl::kernels::ClCropKernel</a>.  <a href="classarm__compute_1_1_c_l_crop.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_crop_resize.xhtml">CLCropResize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to perform cropping and resizing.  <a href="classarm__compute_1_1_c_l_crop_resize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the deconvolution layer.  <a href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample.xhtml">CLDeconvolutionLayerUpsample</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute deconvolution upsample on OpenCL.  <a href="classarm__compute_1_1_c_l_deconvolution_layer_upsample.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel.xhtml">CLDeconvolutionLayerUpsampleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the Deconvolution layer kernel on OpenCL.  <a href="classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_deconvolution_reshape_output_kernel.xhtml">CLDeconvolutionReshapeOutputKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the OpenCL kernel to be used for reshaping the tensor before returning the result of deconvolution.  <a href="classarm__compute_1_1_c_l_deconvolution_reshape_output_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depth_convert_layer.xhtml">CLDepthConvertLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_cast_kernel.xhtml">opencl::kernels::ClCastKernel</a>.  <a href="classarm__compute_1_1_c_l_depth_convert_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer.xhtml">CLDepthToSpaceLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml">CLDepthToSpaceLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_depth_to_space_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml">CLDepthToSpaceLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the depth to space kernel.  <a href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to execute a depthwise convolution.  <a href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml">CLDepthwiseConvolutionLayerNativeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to run a MxN depthwise convolution.  <a href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_dequantization_layer.xhtml">CLDequantizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1_cl_dequantize.xhtml">opencl::ClDequantize</a> that dequantizes an input tensor.  <a href="classarm__compute_1_1_c_l_dequantization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml">CLDevice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL device type class.  <a href="classarm__compute_1_1_c_l_device.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_c_l_device_options.xhtml">CLDeviceOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL device options.  <a href="structarm__compute_1_1_c_l_device_options.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">CLDirectConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute direct convolution function:  <a href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml">CLDirectDeconvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the deconvolution layer.  <a href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_elementwise_max.xhtml">CLElementwiseMax</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_arithmetic_kernel.xhtml">opencl::kernels::ClArithmeticKernel</a> for max.  <a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_elementwise_min.xhtml">CLElementwiseMin</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_arithmetic_kernel.xhtml">opencl::kernels::ClArithmeticKernel</a> for min.  <a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_elementwise_power.xhtml">CLElementwisePower</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_arithmetic_kernel.xhtml">opencl::kernels::ClArithmeticKernel</a> for power.  <a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml">CLElementwiseSquaredDiff</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_arithmetic_kernel.xhtml">opencl::kernels::ClArithmeticKernel</a> for squared difference.  <a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform exponential on an input tensor.  <a href="classarm__compute_1_1_c_l_exp_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_f_f_t1_d.xhtml">CLFFT1D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute one dimensional FFT.  <a href="classarm__compute_1_1_c_l_f_f_t1_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_f_f_t2_d.xhtml">CLFFT2D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute two dimensional FFT.  <a href="classarm__compute_1_1_c_l_f_f_t2_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_f_f_t_convolution_layer.xhtml">CLFFTConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute FFT-based convolution on OpenCL.  <a href="classarm__compute_1_1_c_l_f_f_t_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_f_f_t_digit_reverse_kernel.xhtml">CLFFTDigitReverseKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the digit reverse operation kernel.  <a href="classarm__compute_1_1_c_l_f_f_t_digit_reverse_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_f_f_t_radix_stage_kernel.xhtml">CLFFTRadixStageKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the FFT radix stage kernel.  <a href="classarm__compute_1_1_c_l_f_f_t_radix_stage_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_f_f_t_scale_kernel.xhtml">CLFFTScaleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the inverse fft scale kernel.  <a href="classarm__compute_1_1_c_l_f_f_t_scale_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_fill.xhtml">CLFill</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_fill_kernel.xhtml">opencl::kernels::ClFillKernel</a>.  <a href="classarm__compute_1_1_c_l_fill.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml">CLFillBorderKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for filling the border of a kernel.  <a href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_fine_s_v_m_memory_region.xhtml">CLFineSVMMemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL fine-grain SVM memory region implementation.  <a href="classarm__compute_1_1_c_l_fine_s_v_m_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_flatten_layer.xhtml">CLFlattenLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute flatten.  <a href="classarm__compute_1_1_c_l_flatten_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_floor.xhtml">CLFloor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_floor_kernel.xhtml">opencl::kernels::ClFloorKernel</a>.  <a href="classarm__compute_1_1_c_l_floor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml">CLFullyConnectedLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a Fully Connected layer on OpenCL.  <a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization.xhtml">CLFuseBatchNormalization</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to fuse the batch normalization node to a preceding convolution node.  <a href="classarm__compute_1_1_c_l_fuse_batch_normalization.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization_kernel.xhtml">CLFuseBatchNormalizationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL kernel to fuse the batch normalization node to a preceding convolution node.  <a href="classarm__compute_1_1_c_l_fuse_batch_normalization_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_gather.xhtml">CLGather</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_gather_kernel.xhtml">CLGatherKernel</a>.  <a href="classarm__compute_1_1_c_l_gather.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_gather_kernel.xhtml">CLGatherKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform tensor reshaping.  <a href="classarm__compute_1_1_c_l_gather_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMM on OpenCL.  <a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution layer.  <a href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml">CLGEMMDeconvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the deconvolution layer through a call to GEMM.  <a href="classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle for loading and retrieving GEMM heuristics.  <a href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_c_l_g_e_m_m_kernel_selection_params.xhtml">CLGEMMKernelSelectionParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL GEMM kernel selection parameters.  <a href="structarm__compute_1_1_c_l_g_e_m_m_kernel_selection_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml">CLGEMMLowpMatrixMultiplyCore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpMatrixMultiplyCore on OpenCL.  <a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml">CLGEMMLowpOutputStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpQuantizeDown kernels on CL.  <a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml">CLGenerateProposalsLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to generate proposals for a RPN (Region Proposal Network)  <a href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_indirect_convolution_layer.xhtml">CLIndirectConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run the indirect convolution function.  <a href="classarm__compute_1_1_c_l_indirect_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer.xhtml">CLInstanceNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform a Instance normalization.  <a href="classarm__compute_1_1_c_l_instance_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer_kernel.xhtml">CLInstanceNormalizationLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for performing an instance normalization.  <a href="classarm__compute_1_1_c_l_instance_normalization_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class.">CLKernelLibrary</a> class.  <a href="classarm__compute_1_1_c_l_kernel_library.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer.xhtml">CLL2NormalizeLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform a L2 normalization on a given axis.  <a href="classarm__compute_1_1_c_l_l2_normalize_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml">CLL2NormalizeLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for performing a L2 normalize on a given axis given the square sum of it in this axis.  <a href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_logical_and.xhtml">CLLogicalAnd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_logical_binary_kernel.xhtml">arm_compute::opencl::kernels::ClLogicalBinaryKernel</a>.  <a href="classarm__compute_1_1_c_l_logical_and.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_logical_not.xhtml">CLLogicalNot</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to do logical NOT operation.  <a href="classarm__compute_1_1_c_l_logical_not.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_logical_or.xhtml">CLLogicalOr</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_logical_binary_kernel.xhtml">arm_compute::opencl::kernels::ClLogicalBinaryKernel</a>.  <a href="classarm__compute_1_1_c_l_logical_or.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform elementwise log on an input tensor.  <a href="classarm__compute_1_1_c_l_log_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function performs a single time step in a Long Short-Term <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> (LSTM) layer.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml">CLLSTMLayerQuantized</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml">CLLSTMLayerQuantized</a>.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_mat_mul.xhtml">CLMatMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute MatMul (Matrix Multiplication) on OpenCL.  <a href="classarm__compute_1_1_c_l_mat_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_max_unpooling_layer.xhtml">CLMaxUnpoolingLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to perform MaxUnpooling.  <a href="classarm__compute_1_1_c_l_max_unpooling_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_max_unpooling_layer_kernel.xhtml">CLMaxUnpoolingLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the pooling layer kernel.  <a href="classarm__compute_1_1_c_l_max_unpooling_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml">CLMeanStdDevNormalizationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to normalize the input 2D tensor across the first dimension with respect to mean and standard deviation of the same dimension.  <a href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml">CLMeanStdDevNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute mean and standard deviation normalization by calling <a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml">CLMeanStdDevNormalizationKernel</a>.  <a href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_memory.xhtml">CLMemory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL implementation of memory object.  <a href="classarm__compute_1_1_c_l_memory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml">CLMutableCommandBuffer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Command buffer implementaton based on CL mutable dispatch command buffer extension.  <a href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to negate an input tensor.  <a href="classarm__compute_1_1_c_l_neg_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_normalization_layer.xhtml">CLNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a normalization layer.  <a href="classarm__compute_1_1_c_l_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml">CLNormalizationLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the normalization layer kernel.  <a href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer.xhtml">CLNormalizePlanarYUVLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml">CLNormalizePlanarYUVLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml">CLNormalizePlanarYUVLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the NormalizePlanarYUV layer kernel.  <a href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pad_layer.xhtml">CLPadLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to pad a tensor.  <a href="classarm__compute_1_1_c_l_pad_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pad_layer_kernel.xhtml">CLPadLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the PadLayer function.  <a href="classarm__compute_1_1_c_l_pad_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_permute.xhtml">CLPermute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute an <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_permute_kernel.xhtml">opencl::kernels::ClPermuteKernel</a>.  <a href="classarm__compute_1_1_c_l_permute.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml">CLPixelWiseMultiplication</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1_cl_mul.xhtml">opencl::ClMul</a>.  <a href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pooling3d_layer.xhtml">CLPooling3dLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1_cl_pool3d.xhtml">opencl::ClPool3d</a>.  <a href="classarm__compute_1_1_c_l_pooling3d_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pooling_layer.xhtml">CLPoolingLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1_cl_pool2d.xhtml">opencl::ClPool2d</a>.  <a href="classarm__compute_1_1_c_l_pooling_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_p_relu_layer.xhtml">CLPReluLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_arithmetic_kernel.xhtml">opencl::kernels::ClArithmeticKernel</a> for PRELU.  <a href="classarm__compute_1_1_c_l_p_relu_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_prior_box_layer.xhtml">CLPriorBoxLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml">CLPriorBoxLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_prior_box_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml">CLPriorBoxLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the PriorBox layer kernel.  <a href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>.  <a href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer_normalization_kernel.xhtml">CLQLSTMLayerNormalizationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to do layer normalization.  <a href="classarm__compute_1_1_c_l_q_l_s_t_m_layer_normalization_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_c_l_quantization.xhtml">CLQuantization</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL quantization data.  <a href="structarm__compute_1_1_c_l_quantization.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_quantization_layer.xhtml">CLQuantizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a quantization layer.  <a href="classarm__compute_1_1_c_l_quantization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_range.xhtml">CLRange</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml">CLRangeKernel</a>.  <a href="classarm__compute_1_1_c_l_range.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml">CLRangeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> class for Range.  <a href="classarm__compute_1_1_c_l_range_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reduce_mean.xhtml">CLReduceMean</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform reduce operation.  <a href="classarm__compute_1_1_c_l_reduce_mean.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reduction_operation.xhtml">CLReductionOperation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform reduction operation.  <a href="classarm__compute_1_1_c_l_reduction_operation.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml">CLReductionOperationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the reduction operation kernel.  <a href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reorg_layer.xhtml">CLReorgLayer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reorg_layer_kernel.xhtml">CLReorgLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL kernel to perform a reorg layer.  <a href="classarm__compute_1_1_c_l_reorg_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reshape_layer.xhtml">CLReshapeLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_reshape_kernel.xhtml">opencl::kernels::ClReshapeKernel</a>.  <a href="classarm__compute_1_1_c_l_reshape_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reverse.xhtml">CLReverse</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_reverse_kernel.xhtml">CLReverseKernel</a>.  <a href="classarm__compute_1_1_c_l_reverse.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_reverse_kernel.xhtml">CLReverseKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the reverse kernel.  <a href="classarm__compute_1_1_c_l_reverse_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_r_n_n_layer.xhtml">CLRNNLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_r_n_n_layer.xhtml">CLRNNLayer</a>.  <a href="classarm__compute_1_1_c_l_r_n_n_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml">CLROIAlignLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml">CLROIAlignLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml">CLROIAlignLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the RoIAlign kernel.  <a href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer.xhtml">CLROIPoolingLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml">CLROIPoolingLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_r_o_i_pooling_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml">CLROIPoolingLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the ROI pooling layer kernel.  <a href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to get the round (to the nearest even) value of an input tensor.  <a href="classarm__compute_1_1_c_l_round_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform inverse square root on an input tensor.  <a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runtime context.  <a href="classarm__compute_1_1_c_l_runtime_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scale.xhtml">CLScale</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1opencl_1_1_cl_scale.xhtml">opencl::ClScale</a>.  <a href="classarm__compute_1_1_c_l_scale.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides global access to a CL context and command queue.  <a href="classarm__compute_1_1_c_l_scheduler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_select.xhtml">CLSelect</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_select.xhtml">CLSelect</a>.  <a href="classarm__compute_1_1_c_l_select.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_select_kernel.xhtml">CLSelectKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL interface for executing the select kernel.  <a href="classarm__compute_1_1_c_l_select_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to calculate sine of an input tensor.  <a href="classarm__compute_1_1_c_l_sin_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_slice.xhtml">CLSlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform tensor slicing.  <a href="classarm__compute_1_1_c_l_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml">CLSoftmaxLayerGeneric</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a SoftmaxLayer.  <a href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer.xhtml">CLSpaceToBatchLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to spatial divide a tensor.  <a href="classarm__compute_1_1_c_l_space_to_batch_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer_kernel.xhtml">CLSpaceToBatchLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the space to batch kernel.  <a href="classarm__compute_1_1_c_l_space_to_batch_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer.xhtml">CLSpaceToDepthLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml">CLSpaceToDepthLayerKernel</a>.  <a href="classarm__compute_1_1_c_l_space_to_depth_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml">CLSpaceToDepthLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the space to depth kernel.  <a href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_split.xhtml">CLSplit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to split a tensor along a given axis.  <a href="classarm__compute_1_1_c_l_split.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_stack_layer.xhtml">CLStackLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to stack tensors along an axis.  <a href="classarm__compute_1_1_c_l_stack_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_stack_layer_kernel.xhtml">CLStackLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL kernel to stacks a rank-R tensor into one with rank-(R+1) along the axis dimension.  <a href="classarm__compute_1_1_c_l_stack_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_strided_slice.xhtml">CLStridedSlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml">CLStridedSliceKernel</a>.  <a href="classarm__compute_1_1_c_l_strided_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml">CLStridedSliceKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform tensor strided slicing.  <a href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_sub_tensor.xhtml">CLSubTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the OpenCL sub-tensor interface.  <a href="classarm__compute_1_1_c_l_sub_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_symbols.xhtml">CLSymbols</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for loading OpenCL symbols.  <a href="classarm__compute_1_1_c_l_symbols.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the OpenCL tensor interface.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml">CLTensorAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of a CL memory tensor allocator.  <a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tile.xhtml">CLTile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_tile_kernel.xhtml">CLTileKernel</a>.  <a href="classarm__compute_1_1_c_l_tile.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tile_kernel.xhtml">CLTileKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL kernel to perform a Tile operation.  <a href="classarm__compute_1_1_c_l_tile_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_transpose.xhtml">CLTranspose</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute an <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_transpose_kernel.xhtml">opencl::kernels::ClTransposeKernel</a>.  <a href="classarm__compute_1_1_c_l_transpose.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the OpenCL tuner interface.  <a href="classarm__compute_1_1_c_l_tuner.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">&lt; OpenCL tuner parameters  <a href="classarm__compute_1_1_c_l_tuning_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_unstack.xhtml">CLUnstack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to unpack a rank-R tensor into rank-(R-1) tensors.  <a href="classarm__compute_1_1_c_l_unstack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml">CLWinogradConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute Winograd-based convolution on OpenCL.  <a href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">ComputeAnchors information class.  <a href="classarm__compute_1_1_compute_anchors_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the 2d Convolution function.  <a href="structarm__compute_1_1_conv2d_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the 3d Convolution function.  <a href="structarm__compute_1_1_conv3d_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> of an item.  <a href="classarm__compute_1_1_coordinates.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coordinate type.  <a href="structarm__compute_1_1_coordinates2_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_coordinates3_d.xhtml">Coordinates3D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coordinate type.  <a href="structarm__compute_1_1_coordinates3_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml">CPPBoxWithNonMaximaSuppressionLimit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml">CPPBoxWithNonMaximaSuppressionLimitKernel</a>.  <a href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml">CPPBoxWithNonMaximaSuppressionLimitKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP kernel to perform computation of BoxWithNonMaximaSuppressionLimit.  <a href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_output_layer.xhtml">CPPDetectionOutputLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP Function to generate the detection output based on location and confidence predictions by doing non maximum suppression.  <a href="classarm__compute_1_1_c_p_p_detection_output_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression.  <a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml">CPPNonMaximumSuppression</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP Function to perform non maximum suppression on the bounding boxes and scores.  <a href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_non_maximum_suppression_kernel.xhtml">CPPNonMaximumSuppressionKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP Function to perform non maximum suppression on the bounding boxes and scores.  <a href="classarm__compute_1_1_c_p_p_non_maximum_suppression_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_permute.xhtml">CPPPermute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml">CPPPermuteKernel</a>.  <a href="classarm__compute_1_1_c_p_p_permute.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml">CPPPermuteKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP kernel to perform tensor permutation.  <a href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml">CPPScheduler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++11 implementation of a pool of threads to automatically split a kernel's execution among several threads.  <a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_split.xhtml">CPPSplit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to split a tensor along a given axis.  <a href="classarm__compute_1_1_c_p_p_split.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v.xhtml">CPPTopKV</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml">CPPTopKVKernel</a>.  <a href="classarm__compute_1_1_c_p_p_top_k_v.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml">CPPTopKVKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP kernel to perform tensor TopKV operation.  <a href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_upsample.xhtml">CPPUpsample</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_upsample.xhtml">CPPUpsample</a>.  <a href="classarm__compute_1_1_c_p_p_upsample.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml">CPPUpsampleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPP kernel to perform tensor upsample.  <a href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">CpuMatMulSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings for MatMul Cpu implementation.  <a href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detection Output layer info.  <a href="classarm__compute_1_1_detection_output_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detection Output layer info.  <a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detection window used for the object detection.  <a href="structarm__compute_1_1_detection_window.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> with dimensionality.  <a href="classarm__compute_1_1_dimensions.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml">DirectConvComputeKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute descriptor used by the direct convolution kernel.  <a href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_direct_convolution_layer_output_stage_kernel_info.xhtml">DirectConvolutionLayerOutputStageKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the direct convolution layer output stage kernels.  <a href="structarm__compute_1_1_direct_convolution_layer_output_stage_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_d_w_c_compute_kernel_info.xhtml">DWCComputeKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute descriptor used by the depthwise convolution native kernel.  <a href="structarm__compute_1_1_d_w_c_compute_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1enable__bitwise__ops.xhtml">enable_bitwise_ops</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable bitwise operations by default.  <a href="structarm__compute_1_1enable__bitwise__ops.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1enable__bitwise__ops_3_01arm__compute_1_1_g_p_u_target_01_4.xhtml">enable_bitwise_ops&lt; arm_compute::GPUTarget &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable bitwise operations on GPUTarget enumerations.  <a href="structarm__compute_1_1enable__bitwise__ops_3_01arm__compute_1_1_g_p_u_target_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_erf_lut_entry.xhtml">ErfLutEntry</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lookup table for erf(x) calculation.  <a href="structarm__compute_1_1_erf_lut_entry.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the FFT1D function.  <a href="structarm__compute_1_1_f_f_t1_d_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the FFT2D function.  <a href="structarm__compute_1_1_f_f_t2_d_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_f_f_t_digit_reverse_kernel_info.xhtml">FFTDigitReverseKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor for FFT digit reverse kernels.  <a href="structarm__compute_1_1_f_f_t_digit_reverse_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_f_f_t_radix_stage_kernel_info.xhtml">FFTRadixStageKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the FFT core kernels.  <a href="structarm__compute_1_1_f_f_t_radix_stage_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_f_f_t_scale_kernel_info.xhtml">FFTScaleKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor for FFT scale kernels.  <a href="structarm__compute_1_1_f_f_t_scale_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fully connected layer info.  <a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">GEMM information class.  <a href="classarm__compute_1_1_g_e_m_m_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">GEMMKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the GEMM kernels.  <a href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">GEMM LHS (Left Hand Side) matrix information.  <a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">GEMMLowp output stage info.  <a href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_reduction_kernel_info.xhtml">GEMMLowpReductionKernelInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">GEMM reshape information class.  <a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">GEMM RHS (Right Hand Side) matrix information.  <a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate Proposals Information class.  <a href="classarm__compute_1_1_generate_proposals_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_gpu_mat_mul_settings.xhtml">GpuMatMulSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings for MatMul OpenCL implementation.  <a href="classarm__compute_1_1_gpu_mat_mul_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_access_window.xhtml">IAccessWindow</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface describing methods to update access window and padding based on kernel parameters.  <a href="classarm__compute_1_1_i_access_window.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_allocator.xhtml">IAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_allocator.xhtml" title="Default malloc allocator implementation.">Allocator</a> interface.  <a href="classarm__compute_1_1_i_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of type T.  <a href="classarm__compute_1_1_i_array.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_asset_manager.xhtml">IAssetManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asset manager interface.  <a href="classarm__compute_1_1_i_asset_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a>.  <a href="classarm__compute_1_1_i_c_l_array.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface for all the OpenCL kernels.  <a href="classarm__compute_1_1_i_c_l_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_memory_region.xhtml">ICLMemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL memory region interface.  <a href="classarm__compute_1_1_i_c_l_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple2_d_kernel.xhtml">ICLSimple2DKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output.  <a href="classarm__compute_1_1_i_c_l_simple2_d_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple3_d_kernel.xhtml">ICLSimple3DKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output.  <a href="classarm__compute_1_1_i_c_l_simple3_d_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for functions which have a single OpenCL kernel.  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_kernel.xhtml">ICLSimpleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output.  <a href="classarm__compute_1_1_i_c_l_simple_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_s_v_m_memory_region.xhtml">ICLSVMMemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL SVM memory region interface.  <a href="classarm__compute_1_1_i_c_l_s_v_m_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL tensor.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for tuning the OpenCL kernels.  <a href="classarm__compute_1_1_i_c_l_tuner.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_context.xhtml">IContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Context interface.  <a href="classarm__compute_1_1_i_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface for all kernels implemented in C++.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml">ICPPSimpleFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for functions which have a single CPP kernel.  <a href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_device.xhtml">IDevice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for device object.  <a href="classarm__compute_1_1_i_device.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all functions.  <a href="classarm__compute_1_1_i_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common information for all the kernels.  <a href="classarm__compute_1_1_i_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lifetime_manager.xhtml">ILifetimeManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for managing the lifetime of objects.  <a href="classarm__compute_1_1_i_lifetime_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory.xhtml">IMemory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> interface.  <a href="classarm__compute_1_1_i_memory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory_group.xhtml">IMemoryGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group interface.  <a href="classarm__compute_1_1_i_memory_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory_manageable.xhtml">IMemoryManageable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface of an object than can be memory managed.  <a href="classarm__compute_1_1_i_memory_manageable.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> manager interface to handle allocations of backing memory.  <a href="classarm__compute_1_1_i_memory_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory_pool.xhtml">IMemoryPool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> Pool Inteface.  <a href="classarm__compute_1_1_i_memory_pool.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory_region.xhtml">IMemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> region interface.  <a href="classarm__compute_1_1_i_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_n_e_simple_function.xhtml">INESimpleFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for functions which have a single CPU kernel.  <a href="classarm__compute_1_1_i_n_e_simple_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_n_e_simple_function_no_border.xhtml">INESimpleFunctionNoBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for functions which have a single CPU kernel and no border.  <a href="classarm__compute_1_1_i_n_e_simple_function_no_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_instance_normalization_layer_kernel_info.xhtml">InstanceNormalizationLayerKernelInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">IO formatting information class.  <a href="structarm__compute_1_1_i_o_format_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_operator.xhtml">IOperator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class specifying the operator interface.  <a href="classarm__compute_1_1_i_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_pool_manager.xhtml">IPoolManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> pool manager interface.  <a href="classarm__compute_1_1_i_pool_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_queue.xhtml">IQueue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class specifying the queue interface.  <a href="classarm__compute_1_1_i_queue.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Context interface.  <a href="classarm__compute_1_1_i_runtime_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> interface to run kernels.  <a href="classarm__compute_1_1_i_scheduler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_simple_lifetime_manager.xhtml">ISimpleLifetimeManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract class of the simple lifetime manager interface.  <a href="classarm__compute_1_1_i_simple_lifetime_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for CPU tensor.  <a href="classarm__compute_1_1_i_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to allocate tensors.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the tensor's metadata.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> packing service.  <a href="classarm__compute_1_1_i_tensor_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_v2.xhtml">ITensorV2</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class specifying the tensor interface.  <a href="classarm__compute_1_1_i_tensor_v2.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> updated by <a class="el" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a> for each window element.  <a href="classarm__compute_1_1_iterator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_transform_weights.xhtml">ITransformWeights</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Weights tensor transform interface In order to identify the different reshape functions, each reshape function has to generate a unique id.  <a href="classarm__compute_1_1_i_transform_weights.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_weights_manager.xhtml">IWeightsManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Weights manager interface to handle weights transformations.  <a href="classarm__compute_1_1_i_weights_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_kernel.xhtml">Kernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> class.  <a href="classarm__compute_1_1_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_l_u_t_info.xhtml">LUTInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_l_u_t_manager.xhtml">LUTManager</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">MatMulInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for holding information related to matrix multiplication function.  <a href="classarm__compute_1_1_mat_mul_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">MatMulKernelInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_memory.xhtml">Memory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU implementation of memory object.  <a href="classarm__compute_1_1_memory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_memory_group.xhtml">MemoryGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group.  <a href="classarm__compute_1_1_memory_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_memory_group_resource_scope.xhtml">MemoryGroupResourceScope</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group resources scope handling class.  <a href="classarm__compute_1_1_memory_group_resource_scope.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_memory_manager_on_demand.xhtml">MemoryManagerOnDemand</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">On-demand memory manager.  <a href="classarm__compute_1_1_memory_manager_on_demand.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_memory_region.xhtml">MemoryRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> region CPU implementation.  <a href="classarm__compute_1_1_memory_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_min_max_location_values.xhtml">MinMaxLocationValues</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Min and max values and locations.  <a href="structarm__compute_1_1_min_max_location_values.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml">cpu::kernels::CpuActivationKernel</a>.  <a href="classarm__compute_1_1_n_e_activation_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_add_mul_add.xhtml">NEAddMulAdd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute Add+Mul+Add fused operation.  <a href="classarm__compute_1_1_n_e_add_mul_add.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_arg_min_max_layer.xhtml">NEArgMinMaxLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to calculate the index of the minimum or maximum values in a tensor based on an axis.  <a href="classarm__compute_1_1_n_e_arg_min_max_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition.xhtml">NEArithmeticAddition</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml">cpu::kernels::CpuAddKernel</a>.  <a href="classarm__compute_1_1_n_e_arithmetic_addition.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction.xhtml">NEArithmeticSubtraction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml">cpu::kernels::CpuSubKernel</a>.  <a href="classarm__compute_1_1_n_e_arithmetic_subtraction.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml">NEBatchNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml">NENormalizationLayerKernel</a> and simulate a batch normalization layer.  <a href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml">NEBatchNormalizationLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the batch normalization layer kernel.  <a href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer.xhtml">NEBatchToSpaceLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml">NEBatchToSpaceLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_batch_to_space_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml">NEBatchToSpaceLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the batch to space kernel.  <a href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_and.xhtml">NEBitwiseAnd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml">NEBitwiseAndKernel</a>.  <a href="classarm__compute_1_1_n_e_bitwise_and.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml">NEBitwiseAndKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform bitwise AND between XY-planes of two tensors.  <a href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_not.xhtml">NEBitwiseNot</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml">NEBitwiseNotKernel</a>.  <a href="classarm__compute_1_1_n_e_bitwise_not.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml">NEBitwiseNotKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform bitwise NOT operation.  <a href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_or.xhtml">NEBitwiseOr</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml">NEBitwiseOrKernel</a>.  <a href="classarm__compute_1_1_n_e_bitwise_or.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml">NEBitwiseOrKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform bitwise inclusive OR between two tensors.  <a href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_xor.xhtml">NEBitwiseXor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml">NEBitwiseXorKernel</a>.  <a href="classarm__compute_1_1_n_e_bitwise_xor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml">NEBitwiseXorKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform bitwise exclusive OR (XOR) between two tensors.  <a href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform.xhtml">NEBoundingBoxTransform</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml">NEBoundingBoxTransformKernel</a>.  <a href="classarm__compute_1_1_n_e_bounding_box_transform.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml">NEBoundingBoxTransformKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the bounding box kernel.  <a href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_cast.xhtml">NECast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml">cpu::kernels::CpuCastKernel</a>.  <a href="classarm__compute_1_1_n_e_cast.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer.xhtml">NEChannelShuffleLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml">NEChannelShuffleLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_channel_shuffle_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml">NEChannelShuffleLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the channel shuffle kernel.  <a href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml">NECol2ImKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform col2im reshaping.  <a href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_complex_pixel_wise_multiplication.xhtml">NEComplexPixelWiseMultiplication</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_complex_mul.xhtml">cpu::CpuComplexMul</a>.  <a href="classarm__compute_1_1_n_e_complex_pixel_wise_multiplication.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml">NEComputeAllAnchorsKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for Compute All Anchors kernel.  <a href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_concatenate_layer.xhtml">NEConcatenateLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute concatenate tensors along a given axis.  <a href="classarm__compute_1_1_n_e_concatenate_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_conv3_d.xhtml">NEConv3D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a 3d convolution.  <a href="classarm__compute_1_1_n_e_conv3_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_convert_fully_connected_weights.xhtml">NEConvertFullyConnectedWeights</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml">cpu::kernels::CpuConvertFullyConnectedWeightsKernel</a>.  <a href="classarm__compute_1_1_n_e_convert_fully_connected_weights.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a convolution layer.  <a href="classarm__compute_1_1_n_e_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_copy.xhtml">NECopy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml">cpu::kernels::CpuCopyKernel</a>.  <a href="classarm__compute_1_1_n_e_copy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml">NECropKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform tensor cropping.  <a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_crop_resize.xhtml">NECropResize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to perform cropping and resizing.  <a href="classarm__compute_1_1_n_e_crop_resize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the deconvolution layer.  <a href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer.xhtml">NEDepthConvertLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml">cpu::kernels::CpuCastKernel</a>.  <a href="classarm__compute_1_1_n_e_depth_convert_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer.xhtml">NEDepthToSpaceLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml">NEDepthToSpaceLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_depth_to_space_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml">NEDepthToSpaceLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the depth to space kernel.  <a href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to execute a depthwise convolution.  <a href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml">NEDequantizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_dequantize.xhtml">cpu::CpuDequantize</a> that dequantizes an input tensor.  <a href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">NE Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression.  <a href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml">NEDirectConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the direct convolution.  <a href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison.xhtml">NEElementwiseComparison</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">cpu::kernels::CpuComparisonKernel</a>.  <a href="classarm__compute_1_1_n_e_elementwise_comparison.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">cpu::kernels::CpuComparisonKernel</a>.  <a href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_division.xhtml">NEElementwiseDivision</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for division.  <a href="classarm__compute_1_1_n_e_elementwise_division.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_max.xhtml">NEElementwiseMax</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for max.  <a href="classarm__compute_1_1_n_e_elementwise_max.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_min.xhtml">NEElementwiseMin</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for min.  <a href="classarm__compute_1_1_n_e_elementwise_min.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_power.xhtml">NEElementwisePower</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for power.  <a href="classarm__compute_1_1_n_e_elementwise_power.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_squared_diff.xhtml">NEElementwiseSquaredDiff</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for squared difference.  <a href="classarm__compute_1_1_n_e_elementwise_squared_diff.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform unary elementwise operations.  <a href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_f_f_t1_d.xhtml">NEFFT1D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute one dimensional FFT.  <a href="classarm__compute_1_1_n_e_f_f_t1_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_f_f_t2_d.xhtml">NEFFT2D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute two dimensional FFT.  <a href="classarm__compute_1_1_n_e_f_f_t2_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_f_f_t_convolution_layer.xhtml">NEFFTConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute FFT-based convolution on CPU.  <a href="classarm__compute_1_1_n_e_f_f_t_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_f_f_t_digit_reverse_kernel.xhtml">NEFFTDigitReverseKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the digit reverse operation kernel.  <a href="classarm__compute_1_1_n_e_f_f_t_digit_reverse_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_f_f_t_radix_stage_kernel.xhtml">NEFFTRadixStageKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the FFT kernel.  <a href="classarm__compute_1_1_n_e_f_f_t_radix_stage_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_f_f_t_scale_kernel.xhtml">NEFFTScaleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the inverse fft scale kernel.  <a href="classarm__compute_1_1_n_e_f_f_t_scale_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_fill.xhtml">NEFill</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml">cpu::kernels::CpuFillKernel</a>.  <a href="classarm__compute_1_1_n_e_fill.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_fill_border.xhtml">NEFillBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml">NEFillBorderKernel</a>.  <a href="classarm__compute_1_1_n_e_fill_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml">NEFillBorderKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to fill borders.  <a href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_flatten_layer.xhtml">NEFlattenLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute flatten layer kernel.  <a href="classarm__compute_1_1_n_e_flatten_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_floor.xhtml">NEFloor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml">cpu::kernels::CpuFloorKernel</a>.  <a href="classarm__compute_1_1_n_e_floor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml">NEFullyConnectedLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a Fully Connected layer.  <a href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization.xhtml">NEFuseBatchNormalization</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to fuse the batch normalization node to a preceding convolution node.  <a href="classarm__compute_1_1_n_e_fuse_batch_normalization.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml">NEFuseBatchNormalizationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenNE kernel to fuse the batch normalization node to a preceding convolution node.  <a href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_gather.xhtml">NEGather</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml">NEGatherKernel</a>.  <a href="classarm__compute_1_1_n_e_gather.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml">NEGatherKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform gather operation.  <a href="classarm__compute_1_1_n_e_gather_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m.xhtml">NEGEMM</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMM.  <a href="classarm__compute_1_1_n_e_g_e_m_m.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_conv2d.xhtml">NEGEMMConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution layer.  <a href="classarm__compute_1_1_n_e_g_e_m_m_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml">NEGEMMConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution layer.  <a href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml">NEGEMMLowpMatrixMultiplyCore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run Gemm on quantized types.  <a href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_output_stage.xhtml">NEGEMMLowpOutputStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpQuantizeDown kernels.  <a href="classarm__compute_1_1_n_e_g_e_m_m_lowp_output_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_generate_proposals_layer.xhtml">NEGenerateProposalsLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to generate proposals for a RPN (Region Proposal Network)  <a href="classarm__compute_1_1_n_e_generate_proposals_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer.xhtml">NEInstanceNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform a Instance normalization.  <a href="classarm__compute_1_1_n_e_instance_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml">NEInstanceNormalizationLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for performing an instance normalization.  <a href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer.xhtml">NEL2NormalizeLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform a L2 normalization on a given axis.  <a href="classarm__compute_1_1_n_e_l2_normalize_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml">NEL2NormalizeLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for performing a L2 normalize on a given axis given the square sum of it in this axis.  <a href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_logical_and.xhtml">NELogicalAnd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform logical AND.  <a href="classarm__compute_1_1_n_e_logical_and.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_logical_not.xhtml">NELogicalNot</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform logical NOT.  <a href="classarm__compute_1_1_n_e_logical_not.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_logical_or.xhtml">NELogicalOr</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform logical OR.  <a href="classarm__compute_1_1_n_e_logical_or.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer.xhtml">NELSTMLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer.xhtml">NELSTMLayer</a>.  <a href="classarm__compute_1_1_n_e_l_s_t_m_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml">NELSTMLayerQuantized</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml">NELSTMLayerQuantized</a>.  <a href="classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_mat_mul.xhtml">NEMatMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run the following operators:  <a href="classarm__compute_1_1_n_e_mat_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_max_unpooling_layer.xhtml">NEMaxUnpoolingLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to perform MaxUnpooling.  <a href="classarm__compute_1_1_n_e_max_unpooling_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml">NEMeanStdDevNormalizationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to normalize the input 2D tensor across the first dimension with respect to mean and standard deviation of the same dimension.  <a href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_layer.xhtml">NEMeanStdDevNormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute mean and standard deviation normalization by calling <a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml">NEMeanStdDevNormalizationKernel</a>.  <a href="classarm__compute_1_1_n_e_mean_std_dev_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_normalization_layer.xhtml">NENormalizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a normalization layer.  <a href="classarm__compute_1_1_n_e_normalization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml">NENormalizationLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the normalization layer kernel.  <a href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pad_layer.xhtml">NEPadLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to pad a tensor.  <a href="classarm__compute_1_1_n_e_pad_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pad_layer_kernel.xhtml">NEPadLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic kernel to pad the input tensor given padding information.  <a href="classarm__compute_1_1_n_e_pad_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_permute.xhtml">NEPermute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml">cpu::kernels::CpuPermuteKernel</a>.  <a href="classarm__compute_1_1_n_e_permute.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml">NEPixelWiseMultiplication</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_mul.xhtml">cpu::CpuMul</a>.  <a href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pooling3d_layer.xhtml">NEPooling3dLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a pooling 3d layer with the specified pooling operation.  <a href="classarm__compute_1_1_n_e_pooling3d_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml">NEPoolingLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a pooling layer with the specified pooling operation.  <a href="classarm__compute_1_1_n_e_pooling_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_p_relu_layer.xhtml">NEPReluLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for PRELU.  <a href="classarm__compute_1_1_n_e_p_relu_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_prior_box_layer.xhtml">NEPriorBoxLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml">NEPriorBoxLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_prior_box_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml">NEPriorBoxLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to calculate prior boxes.  <a href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer.xhtml">NEQLSTMLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer.xhtml">NEQLSTMLayer</a>.  <a href="classarm__compute_1_1_n_e_q_l_s_t_m_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer_normalization_kernel.xhtml">NEQLSTMLayerNormalizationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform layer normalization for QLSTM.  <a href="classarm__compute_1_1_n_e_q_l_s_t_m_layer_normalization_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_quantization_layer.xhtml">NEQuantizationLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run a quantization layer using <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_quantize.xhtml">cpu::CpuQuantize</a>.  <a href="classarm__compute_1_1_n_e_quantization_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_range.xhtml">NERange</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml">NERangeKernel</a>.  <a href="classarm__compute_1_1_n_e_range.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml">NERangeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> class for Range.  <a href="classarm__compute_1_1_n_e_range_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reduce_mean.xhtml">NEReduceMean</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform reduce operation.  <a href="classarm__compute_1_1_n_e_reduce_mean.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reduction_operation.xhtml">NEReductionOperation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a reduction operation.  <a href="classarm__compute_1_1_n_e_reduction_operation.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml">NEReductionOperationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform a reduction operation.  <a href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reorg_layer.xhtml">NEReorgLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml">NEReorgLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_reorg_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml">NEReorgLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform tensor re-organization.  <a href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reshape_layer.xhtml">NEReshapeLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml">cpu::kernels::CpuReshapeKernel</a>.  <a href="classarm__compute_1_1_n_e_reshape_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reverse.xhtml">NEReverse</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml">NEReverseKernel</a>.  <a href="classarm__compute_1_1_n_e_reverse.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml">NEReverseKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the reverse layer kernel.  <a href="classarm__compute_1_1_n_e_reverse_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_r_n_n_layer.xhtml">NERNNLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_r_n_n_layer.xhtml">NERNNLayer</a>.  <a href="classarm__compute_1_1_n_e_r_n_n_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer.xhtml">NEROIAlignLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml">NEROIAlignLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_r_o_i_align_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml">NEROIAlignLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the RoIAlign kernel.  <a href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer.xhtml">NEROIPoolingLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml">NEROIPoolingLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_r_o_i_pooling_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml">NEROIPoolingLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the ROI pooling layer kernel.  <a href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml">NEScale</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute Scale.  <a href="classarm__compute_1_1_n_e_scale.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_select.xhtml">NESelect</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_select.xhtml">NESelect</a>.  <a href="classarm__compute_1_1_n_e_select.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_select_kernel.xhtml">NESelectKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the select kernel.  <a href="classarm__compute_1_1_n_e_select_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_slice.xhtml">NESlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform tensor slicing.  <a href="classarm__compute_1_1_n_e_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml">NESoftmaxLayerGeneric</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a SoftmaxLayer and a Log SoftmaxLayer.  <a href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer.xhtml">NESpaceToBatchLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to spatial divide a tensor.  <a href="classarm__compute_1_1_n_e_space_to_batch_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer_kernel.xhtml">NESpaceToBatchLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the space to batch kernel.  <a href="classarm__compute_1_1_n_e_space_to_batch_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer.xhtml">NESpaceToDepthLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml">NESpaceToDepthLayerKernel</a>.  <a href="classarm__compute_1_1_n_e_space_to_depth_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml">NESpaceToDepthLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the space to depth kernel.  <a href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_split.xhtml">NESplit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to split a tensor along a given axis.  <a href="classarm__compute_1_1_n_e_split.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_stack_layer.xhtml">NEStackLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to stack tensors along an axis.  <a href="classarm__compute_1_1_n_e_stack_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_stack_layer_kernel.xhtml">NEStackLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic kernel to stack a rank-R tensor into one with rank-(R+1) along the axis dimension.  <a href="classarm__compute_1_1_n_e_stack_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_strided_slice.xhtml">NEStridedSlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml">NEStridedSliceKernel</a>.  <a href="classarm__compute_1_1_n_e_strided_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml">NEStridedSliceKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform tensor strided slicing.  <a href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_tile.xhtml">NETile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml">NETileKernel</a>.  <a href="classarm__compute_1_1_n_e_tile.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml">NETileKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic kernel to perform a tile operation.  <a href="classarm__compute_1_1_n_e_tile_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_transpose.xhtml">NETranspose</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml">cpu::kernels::CpuTransposeKernel</a>.  <a href="classarm__compute_1_1_n_e_transpose.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_unstack.xhtml">NEUnstack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to unpack a rank-R tensor into rank-(R-1) tensors.  <a href="classarm__compute_1_1_n_e_unstack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a convolution layer.  <a href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalization Layer Information class.  <a href="classarm__compute_1_1_normalization_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_offset_lifetime_manager.xhtml">OffsetLifetimeManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Concrete class that tracks the lifetime of registered tensors and calculates the systems memory requirements in terms of a single blob and a list of offsets.  <a href="classarm__compute_1_1_offset_lifetime_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_offset_memory_pool.xhtml">OffsetMemoryPool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Offset based memory pool.  <a href="classarm__compute_1_1_offset_memory_pool.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml">OMPScheduler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pool of threads to automatically split a kernel's execution among several threads.  <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding and stride information class.  <a href="structarm__compute_1_1_padding2_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding information for 3D operations like Conv3d.  <a href="structarm__compute_1_1_padding3_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class describing the value of a pixel for any image format.  <a href="classarm__compute_1_1_pixel_value.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pooling Layer Information struct.  <a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pooling Layer Information struct.  <a href="structarm__compute_1_1_pooling_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_pool_manager.xhtml">PoolManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> pool manager.  <a href="classarm__compute_1_1_pool_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">PriorBox layer info.  <a href="classarm__compute_1_1_prior_box_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> class.  <a href="classarm__compute_1_1_program.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml">Qasymm8QuantizationHelper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantization information.  <a href="classarm__compute_1_1_quantization_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_rectangle.xhtml">Rectangle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="structarm__compute_1_1_rectangle.xhtml" title="Rectangle type.">Rectangle</a> type.  <a href="structarm__compute_1_1_rectangle.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">ROI Pooling Layer Information class.  <a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_runtime_context.xhtml">RuntimeContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runtime context.  <a href="classarm__compute_1_1_runtime_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_scheduler.xhtml">Scheduler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configurable scheduler which supports multiple multithreading APIs and choosing between different schedulers at runtime.  <a href="classarm__compute_1_1_scheduler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_scheduler_factory.xhtml">SchedulerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> Factory.  <a href="classarm__compute_1_1_scheduler_factory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_semaphore.xhtml">Semaphore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Semamphore class.  <a href="classarm__compute_1_1_semaphore.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml">SingleThreadScheduler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pool of threads to automatically split a kernel's execution among several threads.  <a href="classarm__compute_1_1_single_thread_scheduler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for specifying the size of an image or rectangle.  <a href="classarm__compute_1_1_size2_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for specifying the size of a 3D shape or object.  <a href="classarm__compute_1_1_size3_d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor used by the softmax kernels.  <a href="structarm__compute_1_1_softmax_kernel_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> class.  <a href="classarm__compute_1_1_status.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to describe a number of elements in each dimension.  <a href="classarm__compute_1_1_steps.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> of an item in bytes.  <a href="classarm__compute_1_1_strides.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_sub_tensor.xhtml">SubTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the sub-tensor interface.  <a href="classarm__compute_1_1_sub_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml">SubTensorInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the sub tensor's metadata.  <a href="classarm__compute_1_1_sub_tensor_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor.xhtml">Tensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the tensor interface.  <a href="classarm__compute_1_1_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_accessor.xhtml">TensorAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> accessors to make it easier to interface with <a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a>.  <a href="classarm__compute_1_1_tensor_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml">TensorAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of a CPU memory tensor allocator.  <a href="classarm__compute_1_1_tensor_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the tensor's metadata.  <a href="classarm__compute_1_1_tensor_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_pack.xhtml">TensorPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> packing service.  <a href="classarm__compute_1_1_tensor_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shape of a tensor.  <a href="classarm__compute_1_1_tensor_shape.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Information about executing thread and CPU.  <a href="structarm__compute_1_1_thread_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantization info when assuming per layer quantization.  <a href="structarm__compute_1_1_uniform_quantization_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for valid region of a window.  <a href="structarm__compute_1_1_valid_region.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution Layer Weights Information class.  <a href="classarm__compute_1_1_weights_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describe a multidimensional execution window.  <a href="classarm__compute_1_1_window.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window_iterator.xhtml">WindowIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over a portion of a <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a>.  <a href="classarm__compute_1_1_window_iterator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Winograd information.  <a href="structarm__compute_1_1_winograd_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_workspace_data_element.xhtml">WorkspaceDataElement</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a72251c7a73b3c057ffca9f32ee3e19ea"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a72251c7a73b3c057ffca9f32ee3e19ea">ICLUInt8Array</a> = <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; cl_uchar &gt;</td></tr>
<tr class="memdesc:a72251c7a73b3c057ffca9f32ee3e19ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s.  <a href="namespacearm__compute.xhtml#a72251c7a73b3c057ffca9f32ee3e19ea">More...</a><br /></td></tr>
<tr class="separator:a72251c7a73b3c057ffca9f32ee3e19ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed5c7222c31a34327f00de37d8c4f4fc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aed5c7222c31a34327f00de37d8c4f4fc">ICLUInt16Array</a> = <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; cl_ushort &gt;</td></tr>
<tr class="memdesc:aed5c7222c31a34327f00de37d8c4f4fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s.  <a href="namespacearm__compute.xhtml#aed5c7222c31a34327f00de37d8c4f4fc">More...</a><br /></td></tr>
<tr class="separator:aed5c7222c31a34327f00de37d8c4f4fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b5f839e8d27c6351e8d58812dd46c97"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6b5f839e8d27c6351e8d58812dd46c97">ICLUInt32Array</a> = <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; cl_uint &gt;</td></tr>
<tr class="memdesc:a6b5f839e8d27c6351e8d58812dd46c97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s.  <a href="namespacearm__compute.xhtml#a6b5f839e8d27c6351e8d58812dd46c97">More...</a><br /></td></tr>
<tr class="separator:a6b5f839e8d27c6351e8d58812dd46c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67328fa21e30aecd0c27d6d2e63a2b9c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a67328fa21e30aecd0c27d6d2e63a2b9c">ICLInt16Array</a> = <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; cl_short &gt;</td></tr>
<tr class="memdesc:a67328fa21e30aecd0c27d6d2e63a2b9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s.  <a href="namespacearm__compute.xhtml#a67328fa21e30aecd0c27d6d2e63a2b9c">More...</a><br /></td></tr>
<tr class="separator:a67328fa21e30aecd0c27d6d2e63a2b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab95380ecf1c0253f6c785c0f59194066"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab95380ecf1c0253f6c785c0f59194066">ICLInt32Array</a> = <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; cl_int &gt;</td></tr>
<tr class="memdesc:ab95380ecf1c0253f6c785c0f59194066"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s.  <a href="namespacearm__compute.xhtml#ab95380ecf1c0253f6c785c0f59194066">More...</a><br /></td></tr>
<tr class="separator:ab95380ecf1c0253f6c785c0f59194066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a631bac7c033a0d341c631870f9755217"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a631bac7c033a0d341c631870f9755217">ICLFloatArray</a> = <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; cl_float &gt;</td></tr>
<tr class="memdesc:a631bac7c033a0d341c631870f9755217"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats.  <a href="namespacearm__compute.xhtml#a631bac7c033a0d341c631870f9755217">More...</a><br /></td></tr>
<tr class="separator:a631bac7c033a0d341c631870f9755217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab624675f6618d35eeb3e79fc7e21e0d4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab624675f6618d35eeb3e79fc7e21e0d4">ICLImage</a> = <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a></td></tr>
<tr class="separator:ab624675f6618d35eeb3e79fc7e21e0d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e2825fd61d349c5ca2f5313e3c8ea1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> = half_float::half</td></tr>
<tr class="memdesc:a73e2825fd61d349c5ca2f5313e3c8ea1"><td class="mdescLeft">&#160;</td><td class="mdescRight">16-bit floating point type  <a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">More...</a><br /></td></tr>
<tr class="separator:a73e2825fd61d349c5ca2f5313e3c8ea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33e65be485104e2e9e69fca551d6f492"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> = <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a></td></tr>
<tr class="memdesc:a33e65be485104e2e9e69fca551d6f492"><td class="mdescLeft">&#160;</td><td class="mdescRight">Permutation vector.  <a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">More...</a><br /></td></tr>
<tr class="separator:a33e65be485104e2e9e69fca551d6f492"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a276401fd5651e75431d3e1cc90601caa"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a276401fd5651e75431d3e1cc90601caa">IUInt8Array</a> = <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt; uint8_t &gt;</td></tr>
<tr class="memdesc:a276401fd5651e75431d3e1cc90601caa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s.  <a href="namespacearm__compute.xhtml#a276401fd5651e75431d3e1cc90601caa">More...</a><br /></td></tr>
<tr class="separator:a276401fd5651e75431d3e1cc90601caa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ffe8af91a934c926d102938db8d3ce1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1ffe8af91a934c926d102938db8d3ce1">IUInt16Array</a> = <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt; uint16_t &gt;</td></tr>
<tr class="memdesc:a1ffe8af91a934c926d102938db8d3ce1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s.  <a href="namespacearm__compute.xhtml#a1ffe8af91a934c926d102938db8d3ce1">More...</a><br /></td></tr>
<tr class="separator:a1ffe8af91a934c926d102938db8d3ce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9b2a6fa6e146437bfc8c0bee96e4760"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac9b2a6fa6e146437bfc8c0bee96e4760">IUInt32Array</a> = <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt; uint32_t &gt;</td></tr>
<tr class="memdesc:ac9b2a6fa6e146437bfc8c0bee96e4760"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s.  <a href="namespacearm__compute.xhtml#ac9b2a6fa6e146437bfc8c0bee96e4760">More...</a><br /></td></tr>
<tr class="separator:ac9b2a6fa6e146437bfc8c0bee96e4760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dd5e04cea002eae658fa2a899848ad7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1dd5e04cea002eae658fa2a899848ad7">IInt16Array</a> = <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt; int16_t &gt;</td></tr>
<tr class="memdesc:a1dd5e04cea002eae658fa2a899848ad7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s.  <a href="namespacearm__compute.xhtml#a1dd5e04cea002eae658fa2a899848ad7">More...</a><br /></td></tr>
<tr class="separator:a1dd5e04cea002eae658fa2a899848ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51fdf34dfc5c60b6f4f455f0a9cac457"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a51fdf34dfc5c60b6f4f455f0a9cac457">IInt32Array</a> = <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt; int32_t &gt;</td></tr>
<tr class="memdesc:a51fdf34dfc5c60b6f4f455f0a9cac457"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s.  <a href="namespacearm__compute.xhtml#a51fdf34dfc5c60b6f4f455f0a9cac457">More...</a><br /></td></tr>
<tr class="separator:a51fdf34dfc5c60b6f4f455f0a9cac457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a82a1928159e86b0778c3c14e8842be"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8a82a1928159e86b0778c3c14e8842be">IFloatArray</a> = <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt; float &gt;</td></tr>
<tr class="memdesc:a8a82a1928159e86b0778c3c14e8842be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats.  <a href="namespacearm__compute.xhtml#a8a82a1928159e86b0778c3c14e8842be">More...</a><br /></td></tr>
<tr class="separator:a8a82a1928159e86b0778c3c14e8842be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66b6c9e5773b956efa07dafa508ea41a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> = <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a></td></tr>
<tr class="separator:a66b6c9e5773b956efa07dafa508ea41a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af486d5eb4935eb5601d9c5fcc42be220"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> = int8_t</td></tr>
<tr class="memdesc:af486d5eb4935eb5601d9c5fcc42be220"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit signed quantized asymmetric scalar value  <a href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">More...</a><br /></td></tr>
<tr class="separator:af486d5eb4935eb5601d9c5fcc42be220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8938bcb3ec0f5f8d93285eb3a28b701"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> = uint8_t</td></tr>
<tr class="memdesc:ab8938bcb3ec0f5f8d93285eb3a28b701"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized asymmetric scalar value  <a href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">More...</a><br /></td></tr>
<tr class="separator:ab8938bcb3ec0f5f8d93285eb3a28b701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33d1899b4ff31e4a36f93fa618978196"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> = int16_t</td></tr>
<tr class="memdesc:a33d1899b4ff31e4a36f93fa618978196"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit quantized symmetric scalar value  <a href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">More...</a><br /></td></tr>
<tr class="separator:a33d1899b4ff31e4a36f93fa618978196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f2ec1184355233865bad39063cfa1c5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7f2ec1184355233865bad39063cfa1c5">qasymm16_t</a> = uint16_t</td></tr>
<tr class="memdesc:a7f2ec1184355233865bad39063cfa1c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit quantized asymmetric scalar value  <a href="namespacearm__compute.xhtml#a7f2ec1184355233865bad39063cfa1c5">More...</a><br /></td></tr>
<tr class="separator:a7f2ec1184355233865bad39063cfa1c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11916d4148a39a67794050373f54825a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a> = <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a></td></tr>
<tr class="memdesc:a11916d4148a39a67794050373f54825a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bidirectional strides.  <a href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">More...</a><br /></td></tr>
<tr class="separator:a11916d4148a39a67794050373f54825a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4467b302fc9ec312c40580336ab783da"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> = <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a></td></tr>
<tr class="memdesc:a4467b302fc9ec312c40580336ab783da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for 2D padding size.  <a href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">More...</a><br /></td></tr>
<tr class="separator:a4467b302fc9ec312c40580336ab783da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669b5d3c5994f9ae3be31df9a1014297"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> = std::pair&lt; uint32_t, uint32_t &gt;</td></tr>
<tr class="memdesc:a669b5d3c5994f9ae3be31df9a1014297"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding information as a pair of unsigned int start/end.  <a href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">More...</a><br /></td></tr>
<tr class="separator:a669b5d3c5994f9ae3be31df9a1014297"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1a1b012674e0f1de071a611391828ad"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> = std::vector&lt; <a class="el" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> &gt;</td></tr>
<tr class="memdesc:ac1a1b012674e0f1de071a611391828ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">List of padding information.  <a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">More...</a><br /></td></tr>
<tr class="separator:ac1a1b012674e0f1de071a611391828ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe9e10e5fdfd1e2665ac17c75c0cacd8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> = std::vector&lt; uint32_t &gt;</td></tr>
<tr class="memdesc:afe9e10e5fdfd1e2665ac17c75c0cacd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Information to produce a tiled version of a <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a>.  <a href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">More...</a><br /></td></tr>
<tr class="separator:afe9e10e5fdfd1e2665ac17c75c0cacd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2b075b5da72ec6bb14f90c202443eb0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a> = std::array&lt; float, 4 &gt;</td></tr>
<tr class="separator:aa2b075b5da72ec6bb14f90c202443eb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6550ea34c33d2e943476386d6ba8bed"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae6550ea34c33d2e943476386d6ba8bed">LabelBBox</a> = std::map&lt; int, std::vector&lt; <a class="el" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a> &gt; &gt;</td></tr>
<tr class="separator:ae6550ea34c33d2e943476386d6ba8bed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab23ca8084cb5fe052bc0b9022c3cb852"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab23ca8084cb5fe052bc0b9022c3cb852">CropInfo</a> = <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a></td></tr>
<tr class="memdesc:ab23ca8084cb5fe052bc0b9022c3cb852"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for holding information related to cropping.  <a href="namespacearm__compute.xhtml#ab23ca8084cb5fe052bc0b9022c3cb852">More...</a><br /></td></tr>
<tr class="separator:ab23ca8084cb5fe052bc0b9022c3cb852"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dbb5e00a3f397691eb782f03f65375c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9dbb5e00a3f397691eb782f03f65375c">UInt8Array</a> = <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt; uint8_t &gt;</td></tr>
<tr class="memdesc:a9dbb5e00a3f397691eb782f03f65375c"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s.  <a href="namespacearm__compute.xhtml#a9dbb5e00a3f397691eb782f03f65375c">More...</a><br /></td></tr>
<tr class="separator:a9dbb5e00a3f397691eb782f03f65375c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab91cb2269b2e58ed2cb6bd2ca831d434"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab91cb2269b2e58ed2cb6bd2ca831d434">UInt16Array</a> = <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt; uint16_t &gt;</td></tr>
<tr class="memdesc:ab91cb2269b2e58ed2cb6bd2ca831d434"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s.  <a href="namespacearm__compute.xhtml#ab91cb2269b2e58ed2cb6bd2ca831d434">More...</a><br /></td></tr>
<tr class="separator:ab91cb2269b2e58ed2cb6bd2ca831d434"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd6eb2619ccd5eee4963de3195785359"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acd6eb2619ccd5eee4963de3195785359">UInt32Array</a> = <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt; uint32_t &gt;</td></tr>
<tr class="memdesc:acd6eb2619ccd5eee4963de3195785359"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s.  <a href="namespacearm__compute.xhtml#acd6eb2619ccd5eee4963de3195785359">More...</a><br /></td></tr>
<tr class="separator:acd6eb2619ccd5eee4963de3195785359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69c19b38cbee8fa6680513f6ff76bbb3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a69c19b38cbee8fa6680513f6ff76bbb3">Int16Array</a> = <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt; int16_t &gt;</td></tr>
<tr class="memdesc:a69c19b38cbee8fa6680513f6ff76bbb3"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s.  <a href="namespacearm__compute.xhtml#a69c19b38cbee8fa6680513f6ff76bbb3">More...</a><br /></td></tr>
<tr class="separator:a69c19b38cbee8fa6680513f6ff76bbb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6af9862834629c287a81b16837b51e44"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6af9862834629c287a81b16837b51e44">Int32Array</a> = <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt; int32_t &gt;</td></tr>
<tr class="memdesc:a6af9862834629c287a81b16837b51e44"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s.  <a href="namespacearm__compute.xhtml#a6af9862834629c287a81b16837b51e44">More...</a><br /></td></tr>
<tr class="separator:a6af9862834629c287a81b16837b51e44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e06029aa1b68c0cdeb80656cc9353fe"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6e06029aa1b68c0cdeb80656cc9353fe">FloatArray</a> = <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt; float &gt;</td></tr>
<tr class="memdesc:a6e06029aa1b68c0cdeb80656cc9353fe"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats.  <a href="namespacearm__compute.xhtml#a6e06029aa1b68c0cdeb80656cc9353fe">More...</a><br /></td></tr>
<tr class="separator:a6e06029aa1b68c0cdeb80656cc9353fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa031694bb03711e09e25546ad2b643cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa031694bb03711e09e25546ad2b643cc">CLUInt8Array</a> = <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt; cl_uchar &gt;</td></tr>
<tr class="memdesc:aa031694bb03711e09e25546ad2b643cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s.  <a href="namespacearm__compute.xhtml#aa031694bb03711e09e25546ad2b643cc">More...</a><br /></td></tr>
<tr class="separator:aa031694bb03711e09e25546ad2b643cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b4c4a79c73a3f85ba89aff03fddefa7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7b4c4a79c73a3f85ba89aff03fddefa7">CLUInt16Array</a> = <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt; cl_ushort &gt;</td></tr>
<tr class="memdesc:a7b4c4a79c73a3f85ba89aff03fddefa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s.  <a href="namespacearm__compute.xhtml#a7b4c4a79c73a3f85ba89aff03fddefa7">More...</a><br /></td></tr>
<tr class="separator:a7b4c4a79c73a3f85ba89aff03fddefa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d7d89b7e990055dc95ed37dfb24da48"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1d7d89b7e990055dc95ed37dfb24da48">CLUInt32Array</a> = <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt; cl_uint &gt;</td></tr>
<tr class="memdesc:a1d7d89b7e990055dc95ed37dfb24da48"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s.  <a href="namespacearm__compute.xhtml#a1d7d89b7e990055dc95ed37dfb24da48">More...</a><br /></td></tr>
<tr class="separator:a1d7d89b7e990055dc95ed37dfb24da48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb8cb339705102066c915d18f0701ac"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5fb8cb339705102066c915d18f0701ac">CLInt16Array</a> = <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt; cl_short &gt;</td></tr>
<tr class="memdesc:a5fb8cb339705102066c915d18f0701ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s.  <a href="namespacearm__compute.xhtml#a5fb8cb339705102066c915d18f0701ac">More...</a><br /></td></tr>
<tr class="separator:a5fb8cb339705102066c915d18f0701ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a401a071524761c661a75969c951cf5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8a401a071524761c661a75969c951cf5">CLInt32Array</a> = <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt; cl_int &gt;</td></tr>
<tr class="memdesc:a8a401a071524761c661a75969c951cf5"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s.  <a href="namespacearm__compute.xhtml#a8a401a071524761c661a75969c951cf5">More...</a><br /></td></tr>
<tr class="separator:a8a401a071524761c661a75969c951cf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a193a4859b365f3ef4e0d73a1e6b12c85"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a193a4859b365f3ef4e0d73a1e6b12c85">CLFloatArray</a> = <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt; cl_float &gt;</td></tr>
<tr class="memdesc:a193a4859b365f3ef4e0d73a1e6b12c85"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats.  <a href="namespacearm__compute.xhtml#a193a4859b365f3ef4e0d73a1e6b12c85">More...</a><br /></td></tr>
<tr class="separator:a193a4859b365f3ef4e0d73a1e6b12c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae712f442eae2d56d17529ca6cb9cb77"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae712f442eae2d56d17529ca6cb9cb77">CLImage</a> = <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a></td></tr>
<tr class="memdesc:aae712f442eae2d56d17529ca6cb9cb77"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a>.  <a href="namespacearm__compute.xhtml#aae712f442eae2d56d17529ca6cb9cb77">More...</a><br /></td></tr>
<tr class="separator:aae712f442eae2d56d17529ca6cb9cb77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18e76ae589217a65f77b971de3f3f65a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a18e76ae589217a65f77b971de3f3f65a">CLEqual</a> = <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt;</td></tr>
<tr class="memdesc:a18e76ae589217a65f77b971de3f3f65a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run equal comparison.  <a href="namespacearm__compute.xhtml#a18e76ae589217a65f77b971de3f3f65a">More...</a><br /></td></tr>
<tr class="separator:a18e76ae589217a65f77b971de3f3f65a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea3e261c61344f44892f8be73cfc0301"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aea3e261c61344f44892f8be73cfc0301">CLNotEqual</a> = <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt;</td></tr>
<tr class="memdesc:aea3e261c61344f44892f8be73cfc0301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run not equal comparison.  <a href="namespacearm__compute.xhtml#aea3e261c61344f44892f8be73cfc0301">More...</a><br /></td></tr>
<tr class="separator:aea3e261c61344f44892f8be73cfc0301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9b18840e11edcbeafcd80d4c44b80cb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab9b18840e11edcbeafcd80d4c44b80cb">CLGreater</a> = <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt;</td></tr>
<tr class="memdesc:ab9b18840e11edcbeafcd80d4c44b80cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater comparison.  <a href="namespacearm__compute.xhtml#ab9b18840e11edcbeafcd80d4c44b80cb">More...</a><br /></td></tr>
<tr class="separator:ab9b18840e11edcbeafcd80d4c44b80cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade630074f2c9d58d64c399bd6b49bc56"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ade630074f2c9d58d64c399bd6b49bc56">CLGreaterEqual</a> = <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt;</td></tr>
<tr class="memdesc:ade630074f2c9d58d64c399bd6b49bc56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater-equal comparison.  <a href="namespacearm__compute.xhtml#ade630074f2c9d58d64c399bd6b49bc56">More...</a><br /></td></tr>
<tr class="separator:ade630074f2c9d58d64c399bd6b49bc56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c2c9a77f235807441eacdddd896d50c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8c2c9a77f235807441eacdddd896d50c">CLLess</a> = <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt;</td></tr>
<tr class="memdesc:a8c2c9a77f235807441eacdddd896d50c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less comparison.  <a href="namespacearm__compute.xhtml#a8c2c9a77f235807441eacdddd896d50c">More...</a><br /></td></tr>
<tr class="separator:a8c2c9a77f235807441eacdddd896d50c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a258b8c95199c121d8f2a9a540cd48e5e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a258b8c95199c121d8f2a9a540cd48e5e">CLLessEqual</a> = <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt;</td></tr>
<tr class="memdesc:a258b8c95199c121d8f2a9a540cd48e5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less-equal comparison.  <a href="namespacearm__compute.xhtml#a258b8c95199c121d8f2a9a540cd48e5e">More...</a><br /></td></tr>
<tr class="separator:a258b8c95199c121d8f2a9a540cd48e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30ce3b40394b4f2d1e4cc31db7183425"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a> = <a class="el" href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml">CLSoftmaxLayerGeneric</a>&lt; false &gt;</td></tr>
<tr class="separator:a30ce3b40394b4f2d1e4cc31db7183425"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02883dd85b75a6eb0d4878f266908dd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a> = <a class="el" href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml">CLSoftmaxLayerGeneric</a>&lt; true &gt;</td></tr>
<tr class="separator:aa02883dd85b75a6eb0d4878f266908dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fdefd8ed8639758d0aa6c68087d55e6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8fdefd8ed8639758d0aa6c68087d55e6">NEEqual</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt;</td></tr>
<tr class="memdesc:a8fdefd8ed8639758d0aa6c68087d55e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run equal comparison.  <a href="namespacearm__compute.xhtml#a8fdefd8ed8639758d0aa6c68087d55e6">More...</a><br /></td></tr>
<tr class="separator:a8fdefd8ed8639758d0aa6c68087d55e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a732ac47723cd850cc5ffa208bc3e3b00"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a732ac47723cd850cc5ffa208bc3e3b00">NENotEqual</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt;</td></tr>
<tr class="memdesc:a732ac47723cd850cc5ffa208bc3e3b00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run not equal comparison.  <a href="namespacearm__compute.xhtml#a732ac47723cd850cc5ffa208bc3e3b00">More...</a><br /></td></tr>
<tr class="separator:a732ac47723cd850cc5ffa208bc3e3b00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44f1c40220d4ac837899ef5ebf7aaee9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a44f1c40220d4ac837899ef5ebf7aaee9">NEGreater</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt;</td></tr>
<tr class="memdesc:a44f1c40220d4ac837899ef5ebf7aaee9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater comparison.  <a href="namespacearm__compute.xhtml#a44f1c40220d4ac837899ef5ebf7aaee9">More...</a><br /></td></tr>
<tr class="separator:a44f1c40220d4ac837899ef5ebf7aaee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa09ba119a3b8b2950581f7c80e9445b6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa09ba119a3b8b2950581f7c80e9445b6">NEGreaterEqual</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt;</td></tr>
<tr class="memdesc:aa09ba119a3b8b2950581f7c80e9445b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater-equal comparison.  <a href="namespacearm__compute.xhtml#aa09ba119a3b8b2950581f7c80e9445b6">More...</a><br /></td></tr>
<tr class="separator:aa09ba119a3b8b2950581f7c80e9445b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36ae4d66ca830f6aeef54964b0c31fd3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a36ae4d66ca830f6aeef54964b0c31fd3">NELess</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt;</td></tr>
<tr class="memdesc:a36ae4d66ca830f6aeef54964b0c31fd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less comparison.  <a href="namespacearm__compute.xhtml#a36ae4d66ca830f6aeef54964b0c31fd3">More...</a><br /></td></tr>
<tr class="separator:a36ae4d66ca830f6aeef54964b0c31fd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab10ab37a597594e7aabec4a067988d37"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab10ab37a597594e7aabec4a067988d37">NELessEqual</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt;</td></tr>
<tr class="memdesc:ab10ab37a597594e7aabec4a067988d37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less-equal comparison.  <a href="namespacearm__compute.xhtml#ab10ab37a597594e7aabec4a067988d37">More...</a><br /></td></tr>
<tr class="separator:ab10ab37a597594e7aabec4a067988d37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e94a7fdb862b6e539ec43ebf76b257b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6e94a7fdb862b6e539ec43ebf76b257b">NERsqrtLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">ElementWiseUnary::RSQRT</a> &gt;</td></tr>
<tr class="separator:a6e94a7fdb862b6e539ec43ebf76b257b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f7d99d5165740d6e36200eadfc9263c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4f7d99d5165740d6e36200eadfc9263c">NEExpLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">ElementWiseUnary::EXP</a> &gt;</td></tr>
<tr class="separator:a4f7d99d5165740d6e36200eadfc9263c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d885ce863280fc60b557fc82d7d29d7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7d885ce863280fc60b557fc82d7d29d7">NENegLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">ElementWiseUnary::NEG</a> &gt;</td></tr>
<tr class="separator:a7d885ce863280fc60b557fc82d7d29d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac37a58198a2b5ec75c812a493eb3f062"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac37a58198a2b5ec75c812a493eb3f062">NELogLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">ElementWiseUnary::LOG</a> &gt;</td></tr>
<tr class="separator:ac37a58198a2b5ec75c812a493eb3f062"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49760a5c85389eb323c487aed2cefdfa"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a49760a5c85389eb323c487aed2cefdfa">NEAbsLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ElementWiseUnary::ABS</a> &gt;</td></tr>
<tr class="separator:a49760a5c85389eb323c487aed2cefdfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a254488f92ef167b19bc9400d1eb2f0e6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a254488f92ef167b19bc9400d1eb2f0e6">NERoundLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ElementWiseUnary::ROUND</a> &gt;</td></tr>
<tr class="separator:a254488f92ef167b19bc9400d1eb2f0e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bebc82fea9931864bd0ec45fc85e75b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6bebc82fea9931864bd0ec45fc85e75b">NESinLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">ElementWiseUnary::SIN</a> &gt;</td></tr>
<tr class="separator:a6bebc82fea9931864bd0ec45fc85e75b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4df2143ca0a3bdbbbc54b440a52541cd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml">NESoftmaxLayerGeneric</a>&lt; false &gt;</td></tr>
<tr class="separator:a4df2143ca0a3bdbbbc54b440a52541cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4478c830368ed024dc47a2bf48978616"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4478c830368ed024dc47a2bf48978616">NELogSoftmaxLayer</a> = <a class="el" href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml">NESoftmaxLayerGeneric</a>&lt; true &gt;</td></tr>
<tr class="separator:a4478c830368ed024dc47a2bf48978616"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57e55f1c016e266be62837504de90e54"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a57e55f1c016e266be62837504de90e54">INEKernel</a> = <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a></td></tr>
<tr class="memdesc:a57e55f1c016e266be62837504de90e54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface for all kernels implemented in Neon.  <a href="namespacearm__compute.xhtml#a57e55f1c016e266be62837504de90e54">More...</a><br /></td></tr>
<tr class="separator:a57e55f1c016e266be62837504de90e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0604c803e41880a4a16408efc4e6a69b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0604c803e41880a4a16408efc4e6a69b">NEScheduler</a> = <a class="el" href="classarm__compute_1_1_scheduler.xhtml">Scheduler</a></td></tr>
<tr class="memdesc:a0604c803e41880a4a16408efc4e6a69b"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU <a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a>.  <a href="namespacearm__compute.xhtml#a0604c803e41880a4a16408efc4e6a69b">More...</a><br /></td></tr>
<tr class="separator:a0604c803e41880a4a16408efc4e6a69b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fb6a368d181ef193475f725c713430a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7fb6a368d181ef193475f725c713430a">Image</a> = <a class="el" href="classarm__compute_1_1_tensor.xhtml">Tensor</a></td></tr>
<tr class="memdesc:a7fb6a368d181ef193475f725c713430a"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a>.  <a href="namespacearm__compute.xhtml#a7fb6a368d181ef193475f725c713430a">More...</a><br /></td></tr>
<tr class="separator:a7fb6a368d181ef193475f725c713430a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43b7da220a8ead83acff98f218f7eb6b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a43b7da220a8ead83acff98f218f7eb6b">MemoryMappings</a> = std::map&lt; <a class="el" href="classarm__compute_1_1_i_memory.xhtml">IMemory</a> *, size_t &gt;</td></tr>
<tr class="memdesc:a43b7da220a8ead83acff98f218f7eb6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A map of (handle, index/offset), where handle is the memory handle of the object to provide the memory for and index/offset is the buffer/offset from the pool that should be used.  <a href="namespacearm__compute.xhtml#a43b7da220a8ead83acff98f218f7eb6b">More...</a><br /></td></tr>
<tr class="separator:a43b7da220a8ead83acff98f218f7eb6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2398d0f2ce77c10bbebf1f85317dde5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad2398d0f2ce77c10bbebf1f85317dde5">GroupMappings</a> = std::map&lt; size_t, <a class="el" href="namespacearm__compute.xhtml#a43b7da220a8ead83acff98f218f7eb6b">MemoryMappings</a> &gt;</td></tr>
<tr class="memdesc:ad2398d0f2ce77c10bbebf1f85317dde5"><td class="mdescLeft">&#160;</td><td class="mdescRight">A map of the groups and memory mappings.  <a href="namespacearm__compute.xhtml#ad2398d0f2ce77c10bbebf1f85317dde5">More...</a><br /></td></tr>
<tr class="separator:ad2398d0f2ce77c10bbebf1f85317dde5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6101731de6263a00ac29b35cf1a929d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac6101731de6263a00ac29b35cf1a929d">MemoryRequirements</a> = <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a></td></tr>
<tr class="separator:ac6101731de6263a00ac29b35cf1a929d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb5b96463d9758a928795ca117fa7312"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:afb5b96463d9758a928795ca117fa7312"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a> = std::vector&lt; <a class="el" href="structarm__compute_1_1_workspace_data_element.xhtml">WorkspaceDataElement</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt; &gt;</td></tr>
<tr class="separator:afb5b96463d9758a928795ca117fa7312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70ecc99f2f6b646579b58463dc026671"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">qasymm8x8_t</a> = uint8x8_t</td></tr>
<tr class="memdesc:a70ecc99f2f6b646579b58463dc026671"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized asymmetric vector with 8 elements  <a href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">More...</a><br /></td></tr>
<tr class="separator:a70ecc99f2f6b646579b58463dc026671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a805d740633d70a5f0b019d72c517e67d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">qasymm8x8x2_t</a> = uint8x8x2_t</td></tr>
<tr class="memdesc:a805d740633d70a5f0b019d72c517e67d"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized asymmetric vector with 16 elements  <a href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">More...</a><br /></td></tr>
<tr class="separator:a805d740633d70a5f0b019d72c517e67d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c6e16826765130b480af53eda3635be"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">qasymm8x8x3_t</a> = uint8x8x3_t</td></tr>
<tr class="memdesc:a0c6e16826765130b480af53eda3635be"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized asymmetric vector with 24 elements  <a href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">More...</a><br /></td></tr>
<tr class="separator:a0c6e16826765130b480af53eda3635be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41d3460ff424e2e21c629b3f27386a8b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">qasymm8x8x4_t</a> = uint8x8x4_t</td></tr>
<tr class="memdesc:a41d3460ff424e2e21c629b3f27386a8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized asymmetric vector with 32 elements  <a href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">More...</a><br /></td></tr>
<tr class="separator:a41d3460ff424e2e21c629b3f27386a8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e1832b8c58f07a98fc8d390b16ac27"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> = uint8x16_t</td></tr>
<tr class="memdesc:ac7e1832b8c58f07a98fc8d390b16ac27"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized asymmetric vector with 16 elements  <a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">More...</a><br /></td></tr>
<tr class="separator:ac7e1832b8c58f07a98fc8d390b16ac27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25af73d07023d565ec84adc58aedfb80"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a25af73d07023d565ec84adc58aedfb80">qasymm8x8_signed_t</a> = int8x8_t</td></tr>
<tr class="memdesc:a25af73d07023d565ec84adc58aedfb80"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized signed asymmetric vector with 8 elements  <a href="namespacearm__compute.xhtml#a25af73d07023d565ec84adc58aedfb80">More...</a><br /></td></tr>
<tr class="separator:a25af73d07023d565ec84adc58aedfb80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa972284529f4dd47b3ae1d5d68ab1b71"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa972284529f4dd47b3ae1d5d68ab1b71">qasymm8x8x2_signed_t</a> = int8x8x2_t</td></tr>
<tr class="memdesc:aa972284529f4dd47b3ae1d5d68ab1b71"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized signed asymmetric vector with 16 elements  <a href="namespacearm__compute.xhtml#aa972284529f4dd47b3ae1d5d68ab1b71">More...</a><br /></td></tr>
<tr class="separator:aa972284529f4dd47b3ae1d5d68ab1b71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf0890e0e5842a84a6af5800d2bdcd78"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaf0890e0e5842a84a6af5800d2bdcd78">qasymm8x8x3_signed_t</a> = int8x8x3_t</td></tr>
<tr class="memdesc:aaf0890e0e5842a84a6af5800d2bdcd78"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized signed asymmetric vector with 24 elements  <a href="namespacearm__compute.xhtml#aaf0890e0e5842a84a6af5800d2bdcd78">More...</a><br /></td></tr>
<tr class="separator:aaf0890e0e5842a84a6af5800d2bdcd78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f90599aecfeb44aed19db16d407c1c5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9f90599aecfeb44aed19db16d407c1c5">qasymm8x8x4_signed_t</a> = int8x8x4_t</td></tr>
<tr class="memdesc:a9f90599aecfeb44aed19db16d407c1c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized signed asymmetric vector with 32 elements  <a href="namespacearm__compute.xhtml#a9f90599aecfeb44aed19db16d407c1c5">More...</a><br /></td></tr>
<tr class="separator:a9f90599aecfeb44aed19db16d407c1c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc8234d074c193f521029e81cda80bb2"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> = int8x16_t</td></tr>
<tr class="memdesc:adc8234d074c193f521029e81cda80bb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized signed asymmetric vector with 16 elements  <a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">More...</a><br /></td></tr>
<tr class="separator:adc8234d074c193f521029e81cda80bb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a5eaeb85796337b6041e598afd4c4a3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7a5eaeb85796337b6041e598afd4c4a3">qsymm8_t</a> = int8_t</td></tr>
<tr class="memdesc:a7a5eaeb85796337b6041e598afd4c4a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit quantized symmetric scalar value  <a href="namespacearm__compute.xhtml#a7a5eaeb85796337b6041e598afd4c4a3">More...</a><br /></td></tr>
<tr class="separator:a7a5eaeb85796337b6041e598afd4c4a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cff22f3ad85935b271be7c660fea33c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4cff22f3ad85935b271be7c660fea33c">qsymm16x8_t</a> = int16x8_t</td></tr>
<tr class="memdesc:a4cff22f3ad85935b271be7c660fea33c"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit quantized symmetric vector with 8 elements  <a href="namespacearm__compute.xhtml#a4cff22f3ad85935b271be7c660fea33c">More...</a><br /></td></tr>
<tr class="separator:a4cff22f3ad85935b271be7c660fea33c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ad60d47682e81883cb85a8ca97f3460"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> = int16x8x2_t</td></tr>
<tr class="memdesc:a9ad60d47682e81883cb85a8ca97f3460"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit quantized symmetric vector with 16 elements  <a href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">More...</a><br /></td></tr>
<tr class="separator:a9ad60d47682e81883cb85a8ca97f3460"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4611b605e45ab401f02cab15c5e38715"><td class="memItemLeft" align="right" valign="top">typedef float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a></td></tr>
<tr class="separator:a4611b605e45ab401f02cab15c5e38715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabb6a8ca4bc000ffd3dde90bc2a6ca6a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aabb6a8ca4bc000ffd3dde90bc2a6ca6a">OperatorType</a> = <a class="el" href="classarm__compute_1_1opencl_1_1_cl_gemm.xhtml">opencl::ClGemm</a></td></tr>
<tr class="separator:aabb6a8ca4bc000ffd3dde90bc2a6ca6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acded863dbfdd730829d4188d67eefcf0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">Mutex</a> = std::mutex</td></tr>
<tr class="memdesc:acded863dbfdd730829d4188d67eefcf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper of Mutex data-object.  <a href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">More...</a><br /></td></tr>
<tr class="separator:acded863dbfdd730829d4188d67eefcf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18809773edf57d061fc2826abf0dab5e"><td class="memTemplParams" colspan="2">template&lt;typename Mutex &gt; </td></tr>
<tr class="memitem:a18809773edf57d061fc2826abf0dab5e"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">lock_guard</a> = std::lock_guard&lt; <a class="el" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">Mutex</a> &gt;</td></tr>
<tr class="memdesc:a18809773edf57d061fc2826abf0dab5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper of lock_guard data-object.  <a href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">More...</a><br /></td></tr>
<tr class="separator:a18809773edf57d061fc2826abf0dab5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83308d038c8dbe8b7d5525aa6cc2193a"><td class="memTemplParams" colspan="2">template&lt;typename Mutex &gt; </td></tr>
<tr class="memitem:a83308d038c8dbe8b7d5525aa6cc2193a"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a83308d038c8dbe8b7d5525aa6cc2193a">unique_lock</a> = std::unique_lock&lt; <a class="el" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">Mutex</a> &gt;</td></tr>
<tr class="memdesc:a83308d038c8dbe8b7d5525aa6cc2193a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper of lock_guard data-object.  <a href="namespacearm__compute.xhtml#a83308d038c8dbe8b7d5525aa6cc2193a">More...</a><br /></td></tr>
<tr class="separator:a83308d038c8dbe8b7d5525aa6cc2193a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a3a440b3893fa10608d4428958be1c52e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">CLVersion</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea06e5b2cbe2f75bb5eec32613499cf22a">CL10</a>, 
<a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea80e95ed62d0c47e4d8c0696d467d4db3">CL11</a>, 
<a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ead7beedb1bf6bfae8111da26424266675">CL12</a>, 
<a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">CL20</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">CL30</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>
<br />
 }</td></tr>
<tr class="memdesc:a3a440b3893fa10608d4428958be1c52e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available OpenCL Version.  <a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">More...</a><br /></td></tr>
<tr class="separator:a3a440b3893fa10608d4428958be1c52e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6df16a1b3b5af590a14f55e983d3428e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6d5ec5f6909788df3453f62a3bd6ad78">DEPTHWISE</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">DIRECT</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea92aed3228e2f4b29698517b9f0a3689e">ELEMENTWISE</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">GEMM</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eafd5dc07b8d30d1ad403905c85f9ba741">POOL</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7">WINOGRAD</a>
<br />
 }</td></tr>
<tr class="separator:a6df16a1b3b5af590a14f55e983d3428e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ce9b523fd4f3b5bbcadcd796183455a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">C0</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">C1</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">C2</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">C3</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>
<br />
 }</td></tr>
<tr class="memdesc:a1ce9b523fd4f3b5bbcadcd796183455a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available channels.  <a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">More...</a><br /></td></tr>
<tr class="separator:a1ce9b523fd4f3b5bbcadcd796183455a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4e88c89b3b7ea1735996cc4def22d58"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a115dca124dc6423c7a400b8a8a0270cc">S64</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a31d65cccd6593e4101db93fb878abcaa">U64</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, 
<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>
<br />
 }</td></tr>
<tr class="memdesc:ab4e88c89b3b7ea1735996cc4def22d58"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> colour formats.  <a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">More...</a><br /></td></tr>
<tr class="separator:ab4e88c89b3b7ea1735996cc4def22d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ed01ff3ff33333d8e19db4d2818bb6"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">F64</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">SIZET</a>
<br />
 }</td></tr>
<tr class="memdesc:ad8ed01ff3ff33333d8e19db4d2818bb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available data types.  <a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">More...</a><br /></td></tr>
<tr class="separator:ad8ed01ff3ff33333d8e19db4d2818bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1d5cce2d9e9a5d61c243e5c989112e0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">NCDHW</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">NDHWC</a>
<br />
 }</td></tr>
<tr class="memdesc:ad1d5cce2d9e9a5d61c243e5c989112e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">[DataLayout enum definition]  <a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">More...</a><br /></td></tr>
<tr class="separator:ad1d5cce2d9e9a5d61c243e5c989112e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74ce3f7420453d3446218ff3b7453e02"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>, 
<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>, 
<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">DEPTH</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">BATCHES</a>
<br />
 }</td></tr>
<tr class="memdesc:a74ce3f7420453d3446218ff3b7453e02"><td class="mdescLeft">&#160;</td><td class="mdescRight">[DataLayout enum definition]  <a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">More...</a><br /></td></tr>
<tr class="separator:a74ce3f7420453d3446218ff3b7453e02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fece1bd804e64f39f602d1c3969849a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> { <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>
 }</td></tr>
<tr class="memdesc:a1fece1bd804e64f39f602d1c3969849a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dimension rounding type when down-scaling on CNNs.  <a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">More...</a><br /></td></tr>
<tr class="separator:a1fece1bd804e64f39f602d1c3969849a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23ab0e5c6b5d13e084628686c4f282d5"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a> = 0x1, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">ANY</a> = 0x2, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541">OHWI</a> = 0x100100, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6">OHWIo2</a> = 0x100200, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd">OHWIo4</a> = 0x100400, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8">OHWIo8</a> = 0x100800, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9">OHWIo16</a> = 0x101000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10">OHWIo32</a> = 0x102000, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a">OHWIo64</a> = 0x104000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210">OHWIo128</a> = 0x108000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde">OHWIo4i2</a> = 0x200400, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27">OHWIo4i2_bf16</a> = 0x200410, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827">OHWIo8i2</a> = 0x200800, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d">OHWIo8i2_bf16</a> = 0x200810, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b">OHWIo16i2</a> = 0x201000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee">OHWIo16i2_bf16</a> = 0x201010, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4">OHWIo32i2</a> = 0x202000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1">OHWIo32i2_bf16</a> = 0x202010, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927">OHWIo64i2</a> = 0x204000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741">OHWIo64i2_bf16</a> = 0x204010, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9">OHWIo4i4</a> = 0x400400, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee">OHWIo4i4_bf16</a> = 0x400410, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8">OHWIo8i4</a> = 0x400800, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e">OHWIo8i4_bf16</a> = 0x400810, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0">OHWIo16i4</a> = 0x401000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096">OHWIo16i4_bf16</a> = 0x401010, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164">OHWIo32i4</a> = 0x402000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0">OHWIo32i4_bf16</a> = 0x402010, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121">OHWIo64i4</a> = 0x404000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb">OHWIo64i4_bf16</a> = 0x404010, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0">OHWIo2i8</a> = 0x800200, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31">OHWIo4i8</a> = 0x800400, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626">OHWIo8i8</a> = 0x800800, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f">OHWIo16i8</a> = 0x801000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7">OHWIo32i8</a> = 0x802000, 
<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f">OHWIo64i8</a> = 0x804000
<br />
 }</td></tr>
<tr class="memdesc:a23ab0e5c6b5d13e084628686c4f282d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory layouts for the weights tensor.  <a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">More...</a><br /></td></tr>
<tr class="separator:a23ab0e5c6b5d13e084628686c4f282d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa41d7415a5386798147cccae2333d5d4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CPUModel</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a667bcd647e7966b5e7c52522d5e895fa">X</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">GENERIC</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8">GENERIC_FP16</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7">GENERIC_FP16_DOT</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aecf3e2493afebcfefb0b9b86bd50ef0d">A53</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a33f91a7ec1c6be774d71fcd00ac81c92">A55r0</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca">A55r1</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a011d2705a24f3d97d766b9e9be3ebd35">A35</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aaf79f683ceaea4650b20e898d6c4c373">A73</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a0e5fac8daf1be975a2acfe603f6515ad">A76</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aafdba3a7b1ef15a36dd5459c291bfe1c">A510</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4abb7f5ae6220c9828e5ec91faf054197c">X1</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6">V1</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a73fa480cd41e810db6072274086e05ef">A64FX</a>, 
<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">N1</a>
<br />
 }</td></tr>
<tr class="memdesc:aa41d7415a5386798147cccae2333d5d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU models types.  <a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">More...</a><br /></td></tr>
<tr class="separator:aa41d7415a5386798147cccae2333d5d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59e56af19e754a6aa26a612ebf91d05f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">ErrorCode</a> { <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fae0aa021e21dddbd6d8cecec71e9cf564">OK</a>, 
<a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">RUNTIME_ERROR</a>, 
<a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7">UNSUPPORTED_EXTENSION_USE</a>
 }</td></tr>
<tr class="memdesc:a59e56af19e754a6aa26a612ebf91d05f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available error codes.  <a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">More...</a><br /></td></tr>
<tr class="separator:a59e56af19e754a6aa26a612ebf91d05f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08e287b5f0197ce8c7c84dde6db24828"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> : int32_t { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2">ACL_UNKNOWN</a> = -1, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a292ea0ca5cb39b9acea91a2c56fbbe60">ACL_SRC_DST</a> = 0, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a> = 0, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a> = 0, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a> = 1, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">ACL_SRC_2</a> = 2, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae4ed430701598bfaba04ee2dea5f0b0a">ACL_SRC_3</a> = 3, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aa5dda325fa2f2394df27cf813b3ffe47">ACL_SRC_4</a> = 4, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a17fc511e65612b716c9c2f34e096caea">ACL_SRC_5</a> = 5, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac2e09218cbf70ed9ba3923c4504d2924">ACL_SRC_6</a> = 6, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">ACL_SRC_END</a> = 6, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a> = 30, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a> = 30, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac4e3fbeb8c4b89ef5c98432e80418471">ACL_DST_1</a> = 31, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aedb025013d5c33ce9834fef9cfe70fcc">ACL_DST_2</a> = 32, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">ACL_DST_END</a> = 32, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc">ACL_INT</a> = 50, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a9be6b6e34915d1ad0cbe68911a25459a">ACL_INT_0</a> = 50, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a634a498326dcb5b1f977bc1653f64a70">ACL_INT_1</a> = 51, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828acc3b8583b5cb467f016926384c85295a">ACL_INT_2</a> = 52, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828acccf11c51785152d39207ba45ab1ab72">ACL_INT_3</a> = 53, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aff6d498c21961fa2f6228178fa16b179">ACL_INT_4</a> = 54, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ab1618b1c126db67c17a2eb6f1e6b237a">ACL_SRC_VEC</a> = 256, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a267aa0d9caec7b4f4b87a702e03dfcbc">ACL_DST_VEC</a> = 512, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5007ca2bff93e4fc849e1f147501a6ea">ACL_INT_VEC</a> = 1024, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785">ACL_BIAS</a> = ACL_SRC_2, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a8201f58586be83622450924f1339d95d">ACL_VEC_ROW_SUM</a> = ACL_SRC_3, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a93203bd138078ed3c19f335d84f9b3cd">ACL_VEC_COL_SUM</a> = ACL_SRC_4, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828afbaa09ed653f4ffe6c94c2bfaa36ddc7">ACL_SHIFTS</a> = ACL_SRC_5, 
<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a9da88e01e6f086c156eda117f84b89e0">ACL_MULTIPLIERS</a> = ACL_SRC_6
<br />
 }</td></tr>
<tr class="memdesc:a08e287b5f0197ce8c7c84dde6db24828"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory type.  <a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">More...</a><br /></td></tr>
<tr class="separator:a08e287b5f0197ce8c7c84dde6db24828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a735ac6c2a02e320969625308810444f3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a> = 0x101, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">GPU_ARCH_MASK</a> = 0xF00, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a34f809afe4f596c3c28e2f38e572253e">GPU_GENERATION_MASK</a> = 0x0F0, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a> = 0x100, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">BIFROST</a> = 0x200, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">VALHALL</a> = 0x300, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df">FIFTHGEN</a> = 0X400, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">T600</a> = 0x110, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">T700</a> = 0x120, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">T800</a> = 0x130, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">G71</a> = 0x210, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">G72</a> = 0x220, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">G51</a> = 0x221, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">G51BIG</a> = 0x222, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">G51LIT</a> = 0x223, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33">G31</a> = 0x224, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">G76</a> = 0x230, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb">G52</a> = 0x231, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837">G52LIT</a> = 0x232, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">G77</a> = 0x310, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15">G57</a> = 0x311, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029">G78</a> = 0x320, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c">G68</a> = 0x321, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89">G78AE</a> = 0x330, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff">G710</a> = 0x340, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010">G610</a> = 0x341, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8">G510</a> = 0x342, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20">G310</a> = 0x343, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e">G715</a> = 0x350, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a">G615</a> = 0x351, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96">G720</a> = 0x410, 
<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce">G620</a> = 0X411
<br />
 }</td></tr>
<tr class="memdesc:a735ac6c2a02e320969625308810444f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available GPU Targets.  <a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">More...</a><br /></td></tr>
<tr class="separator:a735ac6c2a02e320969625308810444f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad258d4c51629346fceac4679b3209ad9"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9">DeviceType</a> { <a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09">NEON</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">CL</a>
 }</td></tr>
<tr class="memdesc:ad258d4c51629346fceac4679b3209ad9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device types.  <a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9">More...</a><br /></td></tr>
<tr class="separator:ad258d4c51629346fceac4679b3209ad9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add6426cbf2e057a195846d4ba09a50be"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> { <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">TO_ZERO</a>, 
<a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>, 
<a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">TO_NEAREST_EVEN</a>
 }</td></tr>
<tr class="memdesc:add6426cbf2e057a195846d4ba09a50be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounding method.  <a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">More...</a><br /></td></tr>
<tr class="separator:add6426cbf2e057a195846d4ba09a50be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16a59381d4d74d17d86d69eb4d286d7b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> { <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">CENTER</a>, 
<a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">TOP_LEFT</a>
 }</td></tr>
<tr class="memdesc:a16a59381d4d74d17d86d69eb4d286d7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available Sampling Policies.  <a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">More...</a><br /></td></tr>
<tr class="separator:a16a59381d4d74d17d86d69eb4d286d7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a683661ae75dcb7aef16b9c9bde31517d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>, 
<a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84">GEMM_CONV2D</a>, 
<a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">DIRECT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06">INDIRECT</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8">WINOGRAD</a>, 
<a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28">FFT</a>
<br />
 }</td></tr>
<tr class="memdesc:a683661ae75dcb7aef16b9c9bde31517d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available ConvolutionMethod.  <a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">More...</a><br /></td></tr>
<tr class="separator:a683661ae75dcb7aef16b9c9bde31517d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0255421478a6f5ab8a2596d966411a5b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5b">DepthwiseConvolutionFunction</a> { <a class="el" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079">OPTIMIZED</a>, 
<a class="el" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5bac942dc2a9f958acddc67e11472d3ca0b">GENERIC</a>
 }</td></tr>
<tr class="memdesc:a0255421478a6f5ab8a2596d966411a5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available DepthwiseConvolutionFunction.  <a href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5b">More...</a><br /></td></tr>
<tr class="separator:a0255421478a6f5ab8a2596d966411a5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f66ec167e002c7c0549ff6c8a8939ad"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ad">DeconvolutionMethod</a> { <a class="el" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada4c5d06b02c97731aaa976179c62dcf76">DIRECT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6">UPSCALE_CONV2D</a>
 }</td></tr>
<tr class="memdesc:a6f66ec167e002c7c0549ff6c8a8939ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available DeconvolutionMethod.  <a href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ad">More...</a><br /></td></tr>
<tr class="separator:a6f66ec167e002c7c0549ff6c8a8939ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb7e3dd8a833840aaaf618bd43ead0ca"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> { <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d">CONVOLUTION</a>, 
<a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4">DEPTHWISECONVOLUTION</a>
 }</td></tr>
<tr class="memdesc:afb7e3dd8a833840aaaf618bd43ead0ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available FuseBatchNormalizationType.  <a href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">More...</a><br /></td></tr>
<tr class="separator:afb7e3dd8a833840aaaf618bd43ead0ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14d24d90ab4ba2956e92e27890ba4c91"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> { <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">REFLECT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">SYMMETRIC</a>
 }</td></tr>
<tr class="memdesc:a14d24d90ab4ba2956e92e27890ba4c91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding mode to use for PadLayer.  <a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">More...</a><br /></td></tr>
<tr class="separator:a14d24d90ab4ba2956e92e27890ba4c91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d299363c9fc33334c571fa29ca4f58c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">Equal</a>, 
<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">NotEqual</a>, 
<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">Greater</a>, 
<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">GreaterEqual</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">Less</a>, 
<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">LessEqual</a>
<br />
 }</td></tr>
<tr class="memdesc:a2d299363c9fc33334c571fa29ca4f58c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported comparison operations.  <a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">More...</a><br /></td></tr>
<tr class="separator:a2d299363c9fc33334c571fa29ca4f58c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a05537a472ee742404821851529327"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> { <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</a>, 
<a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">REPLICATE</a>
 }</td></tr>
<tr class="memdesc:a15a05537a472ee742404821851529327"><td class="mdescLeft">&#160;</td><td class="mdescRight">Methods available to handle borders.  <a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">More...</a><br /></td></tr>
<tr class="separator:a15a05537a472ee742404821851529327"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82b8ac759c804bc1fb4e2d21e178fb6f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> { <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">WRAP</a>, 
<a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">SATURATE</a>
 }</td></tr>
<tr class="memdesc:a82b8ac759c804bc1fb4e2d21e178fb6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Policy to handle integer overflow.  <a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">More...</a><br /></td></tr>
<tr class="separator:a82b8ac759c804bc1fb4e2d21e178fb6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a966a9c417ce5e94dca08d9b5e745c0c9"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> { <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">NEAREST_NEIGHBOR</a>, 
<a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">BILINEAR</a>, 
<a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">AREA</a>
 }</td></tr>
<tr class="memdesc:a966a9c417ce5e94dca08d9b5e745c0c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interpolation method.  <a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">More...</a><br /></td></tr>
<tr class="separator:a966a9c417ce5e94dca08d9b5e745c0c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d8a00f1d80a53ce8f75fa929c873202"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202">BilinearInterpolation</a> { <a class="el" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532">BILINEAR_OLD_NEW</a>, 
<a class="el" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64">BILINEAR_SCHARR</a>
 }</td></tr>
<tr class="memdesc:a2d8a00f1d80a53ce8f75fa929c873202"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bilinear Interpolation method used by LKTracker.  <a href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202">More...</a><br /></td></tr>
<tr class="separator:a2d8a00f1d80a53ce8f75fa929c873202"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5827eb9cb394e74af87f74bd354fb45b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">ARG_IDX_MAX</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">ARG_IDX_MIN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">MEAN_SUM</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">PROD</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">SUM_SQUARE</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">SUM</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">MIN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>
<br />
 }</td></tr>
<tr class="memdesc:a5827eb9cb394e74af87f74bd354fb45b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available reduction operations.  <a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">More...</a><br /></td></tr>
<tr class="separator:a5827eb9cb394e74af87f74bd354fb45b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23d9f0c01c9e120dfb828ee922b7a8ae"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ADD</a>, 
<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">SUB</a>, 
<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">DIV</a>, 
<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">MIN</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">MAX</a>, 
<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">SQUARED_DIFF</a>, 
<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">POWER</a>, 
<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">PRELU</a>
<br />
 }</td></tr>
<tr class="memdesc:a23d9f0c01c9e120dfb828ee922b7a8ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available element-wise operations.  <a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">More...</a><br /></td></tr>
<tr class="separator:a23d9f0c01c9e120dfb828ee922b7a8ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dad01b7eab116403241313417e0936d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">RSQRT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">EXP</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">NEG</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">SIN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ROUND</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680">LOGICAL_NOT</a>
<br />
 }</td></tr>
<tr class="memdesc:a5dad01b7eab116403241313417e0936d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available element wise unary operations.  <a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">More...</a><br /></td></tr>
<tr class="separator:a5dad01b7eab116403241313417e0936d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f8212fef242f87e34893c8db13fc16e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16e">BitwiseOperation</a> { <a class="el" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532">AND</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d">NOT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616">OR</a>, 
<a class="el" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d">XOR</a>
 }</td></tr>
<tr class="memdesc:a1f8212fef242f87e34893c8db13fc16e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available bitwise operations.  <a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16e">More...</a><br /></td></tr>
<tr class="separator:a1f8212fef242f87e34893c8db13fc16e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4bb8dabdbf8ad75e34220cc666b59ca"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> { <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">IN_MAP_1D</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">IN_MAP_2D</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">CROSS_MAP</a>
 }</td></tr>
<tr class="memdesc:ad4bb8dabdbf8ad75e34220cc666b59ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">The normalization type used for the normalization layer.  <a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">More...</a><br /></td></tr>
<tr class="separator:ad4bb8dabdbf8ad75e34220cc666b59ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9172da722f0a434e5cc07c0a3c115d93"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> { <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">MAX</a>, 
<a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">AVG</a>, 
<a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</a>
 }</td></tr>
<tr class="memdesc:a9172da722f0a434e5cc07c0a3c115d93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available pooling types.  <a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">More...</a><br /></td></tr>
<tr class="separator:a9172da722f0a434e5cc07c0a3c115d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a201391f6e13e2a1ac203256a77792718"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> { <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">LINEAR</a>, 
<a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9">GAUSSIAN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1">ORIGINAL</a>
 }</td></tr>
<tr class="memdesc:a201391f6e13e2a1ac203256a77792718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available non maxima suppression types.  <a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">More...</a><br /></td></tr>
<tr class="separator:a201391f6e13e2a1ac203256a77792718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad818ba0ecd4a87d8f1bb0d5b17f07830"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> { <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">CORNER</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">CENTER_SIZE</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">CORNER_SIZE</a>, 
<a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">TF_CENTER</a>
 }</td></tr>
<tr class="memdesc:ad818ba0ecd4a87d8f1bb0d5b17f07830"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available Detection Output code types.  <a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">More...</a><br /></td></tr>
<tr class="separator:ad818ba0ecd4a87d8f1bb0d5b17f07830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56297e0f7b215eea46c818cb7528d9ea"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">LOGISTIC</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">TANH</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">RELU</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">BOUNDED_RELU</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">LU_BOUNDED_RELU</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">LEAKY_RELU</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">SOFT_RELU</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">ELU</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">SQUARE</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">SQRT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">LINEAR</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">IDENTITY</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">HARD_SWISH</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadb3a79f92eca8147eb99ae7d25ee8a65">SWISH</a>, 
<a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6c83d4d579e33c2e1b09f2e9825fcbc6">GELU</a>
<br />
 }</td></tr>
<tr class="memdesc:a56297e0f7b215eea46c818cb7528d9ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available activation functions.  <a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">More...</a><br /></td></tr>
<tr class="separator:a56297e0f7b215eea46c818cb7528d9ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5558e2cc22f7f4771653d992c8ad8864"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> { <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">NONE</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">QUANTIZE_DOWN</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">QUANTIZE_DOWN_FIXEDPOINT</a>, 
<a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">QUANTIZE_DOWN_FLOAT</a>
 }</td></tr>
<tr class="memdesc:a5558e2cc22f7f4771653d992c8ad8864"><td class="mdescLeft">&#160;</td><td class="mdescRight">GEMMLowp output stage type.  <a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">More...</a><br /></td></tr>
<tr class="separator:a5558e2cc22f7f4771653d992c8ad8864"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae76ef5bd3ad69f7380ebb3ac6033ec5c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> { <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">EXHAUSTIVE</a>, 
<a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">NORMAL</a>, 
<a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">RAPID</a>
 }</td></tr>
<tr class="memdesc:ae76ef5bd3ad69f7380ebb3ac6033ec5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">&lt; OpenCL tuner modes  <a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">More...</a><br /></td></tr>
<tr class="separator:ae76ef5bd3ad69f7380ebb3ac6033ec5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7d2fe6b41e36d408375ad6bf9a612a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a> { <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aaf78504d96ba7177dc0c6784905ac8743">NATIVE</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">RESHAPED</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">RESHAPED_ONLY_RHS</a>, 
<a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa4361824f1748299245ef0ad0cb7d6111">RESHAPED_ONLY_RHS_MMUL</a>
 }</td></tr>
<tr class="memdesc:a6f7d2fe6b41e36d408375ad6bf9a612a"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL GEMM kernel types.  <a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">More...</a><br /></td></tr>
<tr class="separator:a6f7d2fe6b41e36d408375ad6bf9a612a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94eb95e47316e7dc5af7615592d26bdd"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> { <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">Native</a>, 
<a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1">Clvk</a>
 }</td></tr>
<tr class="memdesc:a94eb95e47316e7dc5af7615592d26bdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">List the possible OpenCL backends.  <a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">More...</a><br /></td></tr>
<tr class="separator:a94eb95e47316e7dc5af7615592d26bdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86a0c8e195c900a895c249662cfaa564"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">FFTDirection</a> { <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a67d2f6740a8eaebf4d5c6f79be8da481">Forward</a>, 
<a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a9f87f02f2da8f99c571b2a1c2a96132b">Inverse</a>
 }</td></tr>
<tr class="memdesc:a86a0c8e195c900a895c249662cfaa564"><td class="mdescLeft">&#160;</td><td class="mdescRight">FFT direction to use.  <a href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">More...</a><br /></td></tr>
<tr class="separator:a86a0c8e195c900a895c249662cfaa564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0a4d6be70322c742c12da1edccbb74d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74d">MappingType</a> { <a class="el" href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74daac354f9e7a5097598cdd933b42fd190e">BLOBS</a>, 
<a class="el" href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74da465202c26fd7181c6bc9a80648499073">OFFSETS</a>
 }</td></tr>
<tr class="memdesc:af0a4d6be70322c742c12da1edccbb74d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mapping type.  <a href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74d">More...</a><br /></td></tr>
<tr class="separator:af0a4d6be70322c742c12da1edccbb74d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae98a46f4ea1a43ca48acaf15d2eb7113"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">Success</a> = AclSuccess, 
<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1">RuntimeError</a> = AclRuntimeError, 
<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd">OutOfMemory</a> = AclOutOfMemory, 
<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee">Unimplemented</a> = AclUnimplemented, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7">UnsupportedTarget</a> = AclUnsupportedTarget, 
<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71">InvalidTarget</a> = AclInvalidTarget, 
<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">InvalidArgument</a> = AclInvalidArgument, 
<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85">UnsupportedConfig</a> = AclUnsupportedConfig, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60">InvalidObjectState</a> = AclInvalidObjectState
<br />
 }</td></tr>
<tr class="separator:ae98a46f4ea1a43ca48acaf15d2eb7113"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31488d29805a596498c0234ae392d35d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> { <a class="el" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e">Cpu</a> = AclTarget::AclCpu, 
<a class="el" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3">GpuOcl</a> = AclTarget::AclGpuOcl
 }</td></tr>
<tr class="separator:a31488d29805a596498c0234ae392d35d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad14b0c6d4ed8fcadff6dcf39c5cf17fd"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">ExecutionMode</a> { <a class="el" href="namespacearm__compute.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df">FastRerun</a> = AclPreferFastRerun, 
<a class="el" href="namespacearm__compute.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3">FastStart</a> = AclPreferFastStart
 }</td></tr>
<tr class="separator:ad14b0c6d4ed8fcadff6dcf39c5cf17fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2829e9ffdb98c900b4bf5af09c2bb85b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2829e9ffdb98c900b4bf5af09c2bb85b">ImportMemoryType</a> { <a class="el" href="namespacearm__compute.xhtml#a2829e9ffdb98c900b4bf5af09c2bb85ba596d9994cc5f04a23625d24d6b840246">HostPtr</a> = AclImportMemoryType::AclHostPtr
 }</td></tr>
<tr class="separator:a2829e9ffdb98c900b4bf5af09c2bb85b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41a1889b2fdf01056017b9f8b58dda6e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a> { <a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197">ReadOnly</a>, 
<a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5">WriteOnly</a>
 }</td></tr>
<tr class="memdesc:a41a1889b2fdf01056017b9f8b58dda6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL Image2D types.  <a href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">More...</a><br /></td></tr>
<tr class="separator:a41a1889b2fdf01056017b9f8b58dda6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cb8460f7fedf906ecab5621af891707"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707">LogicalOperation</a> { <a class="el" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>, 
<a class="el" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b">And</a>, 
<a class="el" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707a3a2d5fe857d8f9541136a124c2edec6c">Or</a>, 
<a class="el" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707aa74c05d080620f087c4e523977230666">Not</a>
 }</td></tr>
<tr class="memdesc:a8cb8460f7fedf906ecab5621af891707"><td class="mdescLeft">&#160;</td><td class="mdescRight">List of supported logical operations.  <a href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707">More...</a><br /></td></tr>
<tr class="separator:a8cb8460f7fedf906ecab5621af891707"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a545eeda2eaa3f5a54345ce8169e21184"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a545eeda2eaa3f5a54345ce8169e21184">get_cl_type_from_data_type</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a545eeda2eaa3f5a54345ce8169e21184"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a tensor data type to the appropriate OpenCL type.  <a href="namespacearm__compute.xhtml#a545eeda2eaa3f5a54345ce8169e21184">More...</a><br /></td></tr>
<tr class="separator:a545eeda2eaa3f5a54345ce8169e21184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad090aabdbbec665e3704af55ba7bd563"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad090aabdbbec665e3704af55ba7bd563">get_cl_promoted_type_from_data_type</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:ad090aabdbbec665e3704af55ba7bd563"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a tensor data type to the appropriate OpenCL promoted type.  <a href="namespacearm__compute.xhtml#ad090aabdbbec665e3704af55ba7bd563">More...</a><br /></td></tr>
<tr class="separator:ad090aabdbbec665e3704af55ba7bd563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a237044b76803b058edd1b23d599bcc6d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a237044b76803b058edd1b23d599bcc6d">get_cl_unsigned_type_from_element_size</a> (size_t element_size)</td></tr>
<tr class="memdesc:a237044b76803b058edd1b23d599bcc6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates the element size to an unsigned integer data type.  <a href="namespacearm__compute.xhtml#a237044b76803b058edd1b23d599bcc6d">More...</a><br /></td></tr>
<tr class="separator:a237044b76803b058edd1b23d599bcc6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18e791fbf74924fee2ddf8da7790bacf"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a18e791fbf74924fee2ddf8da7790bacf">get_cl_signed_type_from_element_size</a> (size_t element_size)</td></tr>
<tr class="memdesc:a18e791fbf74924fee2ddf8da7790bacf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates the element size to an signed integer data type.  <a href="namespacearm__compute.xhtml#a18e791fbf74924fee2ddf8da7790bacf">More...</a><br /></td></tr>
<tr class="separator:a18e791fbf74924fee2ddf8da7790bacf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70d221fbff7bff840ef4d3fdc701cf53"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a70d221fbff7bff840ef4d3fdc701cf53">get_cl_select_type_from_data_type</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a70d221fbff7bff840ef4d3fdc701cf53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a tensor data type to the appropriate OpenCL select type.  <a href="namespacearm__compute.xhtml#a70d221fbff7bff840ef4d3fdc701cf53">More...</a><br /></td></tr>
<tr class="separator:a70d221fbff7bff840ef4d3fdc701cf53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3539162ad0f550f626939e8b67ccfd"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ade3539162ad0f550f626939e8b67ccfd">get_cl_dot8_acc_type_from_data_type</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:ade3539162ad0f550f626939e8b67ccfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a tensor data type to the appropriate OpenCL dot8 accumulator type.  <a href="namespacearm__compute.xhtml#ade3539162ad0f550f626939e8b67ccfd">More...</a><br /></td></tr>
<tr class="separator:ade3539162ad0f550f626939e8b67ccfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab631f49c436b1f18beff3248c4b1a19e"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab631f49c436b1f18beff3248c4b1a19e">get_data_size_from_data_type</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:ab631f49c436b1f18beff3248c4b1a19e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of a data type in number of bits.  <a href="namespacearm__compute.xhtml#ab631f49c436b1f18beff3248c4b1a19e">More...</a><br /></td></tr>
<tr class="separator:ab631f49c436b1f18beff3248c4b1a19e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a281384aa081efe5819eedd6a7c2a429b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">get_target_from_device</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a281384aa081efe5819eedd6a7c2a429b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the GPU target from CL device.  <a href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">More...</a><br /></td></tr>
<tr class="separator:a281384aa081efe5819eedd6a7c2a429b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e62ce01a7a7af6c3d059bb8534cad45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">CLVersion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0e62ce01a7a7af6c3d059bb8534cad45">get_cl_version</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a0e62ce01a7a7af6c3d059bb8534cad45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the highest OpenCL version supported.  <a href="namespacearm__compute.xhtml#a0e62ce01a7a7af6c3d059bb8534cad45">More...</a><br /></td></tr>
<tr class="separator:a0e62ce01a7a7af6c3d059bb8534cad45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97428e76ac2940d45fc9772854b7fd8c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">get_cl_image_pitch_alignment</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a97428e76ac2940d45fc9772854b7fd8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the cl_image pitch alignment in pixels.  <a href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">More...</a><br /></td></tr>
<tr class="separator:a97428e76ac2940d45fc9772854b7fd8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a5bd4c63b9012c70e5defdc3b344606"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8a5bd4c63b9012c70e5defdc3b344606">get_cl_non_uniform_work_group_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a8a5bd4c63b9012c70e5defdc3b344606"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether non-uniform work group is supported.  <a href="namespacearm__compute.xhtml#a8a5bd4c63b9012c70e5defdc3b344606">More...</a><br /></td></tr>
<tr class="separator:a8a5bd4c63b9012c70e5defdc3b344606"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c4a5ca34ebb51d4e2e119a110e4c8f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a> (const cl::Device &amp;device, const char *extension_name)</td></tr>
<tr class="memdesc:a6c4a5ca34ebb51d4e2e119a110e4c8f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether a given extension is supported.  <a href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">More...</a><br /></td></tr>
<tr class="separator:a6c4a5ca34ebb51d4e2e119a110e4c8f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad3c9492d4158b574a89ab798d74e16"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2ad3c9492d4158b574a89ab798d74e16">fp16_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a2ad3c9492d4158b574a89ab798d74e16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether the cl_khr_fp16 extension is supported.  <a href="namespacearm__compute.xhtml#a2ad3c9492d4158b574a89ab798d74e16">More...</a><br /></td></tr>
<tr class="separator:a2ad3c9492d4158b574a89ab798d74e16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0019d1de2500c73f16b673d8a883a767"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0019d1de2500c73f16b673d8a883a767">arm_non_uniform_workgroup_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a0019d1de2500c73f16b673d8a883a767"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether the arm_non_uniform_work_group_size extension is supported.  <a href="namespacearm__compute.xhtml#a0019d1de2500c73f16b673d8a883a767">More...</a><br /></td></tr>
<tr class="separator:a0019d1de2500c73f16b673d8a883a767"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07e02c0066cf540a5a2665fa7d54934"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac07e02c0066cf540a5a2665fa7d54934">dot8_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:ac07e02c0066cf540a5a2665fa7d54934"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether the cl_arm_integer_dot_product_int8 extension is supported.  <a href="namespacearm__compute.xhtml#ac07e02c0066cf540a5a2665fa7d54934">More...</a><br /></td></tr>
<tr class="separator:ac07e02c0066cf540a5a2665fa7d54934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4878daab91c6d7173de20283766e0c2c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4878daab91c6d7173de20283766e0c2c">dot8_acc_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a4878daab91c6d7173de20283766e0c2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether the cl_arm_integer_dot_product_accumulate_int8 extension is supported.  <a href="namespacearm__compute.xhtml#a4878daab91c6d7173de20283766e0c2c">More...</a><br /></td></tr>
<tr class="separator:a4878daab91c6d7173de20283766e0c2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5aff064f09dd7f355aaaf7641bf7d3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7f5aff064f09dd7f355aaaf7641bf7d3">cl_winograd_convolution_layer_supported</a> (const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;output_tile, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_size, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout)</td></tr>
<tr class="memdesc:a7f5aff064f09dd7f355aaaf7641bf7d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function checks if the Winograd configuration (defined through the output tile, kernel size and the data layout) is supported on OpenCL.  <a href="namespacearm__compute.xhtml#a7f5aff064f09dd7f355aaaf7641bf7d3">More...</a><br /></td></tr>
<tr class="separator:a7f5aff064f09dd7f355aaaf7641bf7d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bd532ddb5d86290e40c0b482eb476f2"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1bd532ddb5d86290e40c0b482eb476f2">preferred_vector_width</a> (const cl::Device &amp;device, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a1bd532ddb5d86290e40c0b482eb476f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the preferred native vector width size for built-in scalar types that can be put into vectors.  <a href="namespacearm__compute.xhtml#a1bd532ddb5d86290e40c0b482eb476f2">More...</a><br /></td></tr>
<tr class="separator:a1bd532ddb5d86290e40c0b482eb476f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c0eeab3eb098f019ae72268636dcc59"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0c0eeab3eb098f019ae72268636dcc59">preferred_dummy_work_items_support</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a0c0eeab3eb098f019ae72268636dcc59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check if "dummy work-items" are preferred to have a power of two NDRange In case dummy work-items is enabled, it is OpenCL kernel responsibility to check if the work-item is out-of range or not.  <a href="namespacearm__compute.xhtml#a0c0eeab3eb098f019ae72268636dcc59">More...</a><br /></td></tr>
<tr class="separator:a0c0eeab3eb098f019ae72268636dcc59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a777eb2ab77bdf5aea2d25c31b4acee2c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">image2d_from_buffer_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a777eb2ab77bdf5aea2d25c31b4acee2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether the cl_khr_image2d_from_buffer extension is supported.  <a href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">More...</a><br /></td></tr>
<tr class="separator:a777eb2ab77bdf5aea2d25c31b4acee2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc51892eeef112d44a4f9bb0b988c9b9"><td class="memItemLeft" align="right" valign="top">cl::Kernel&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adc51892eeef112d44a4f9bb0b988c9b9">create_kernel</a> (const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;ctx, const std::string &amp;<a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, const std::set&lt; std::string &gt; &amp;build_opts=std::set&lt; std::string &gt;())</td></tr>
<tr class="memdesc:adc51892eeef112d44a4f9bb0b988c9b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an opencl kernel using a compile context.  <a href="namespacearm__compute.xhtml#adc51892eeef112d44a4f9bb0b988c9b9">More...</a><br /></td></tr>
<tr class="separator:adc51892eeef112d44a4f9bb0b988c9b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6832cb1809aaf22a65b2eca70f135230"><td class="memItemLeft" align="right" valign="top">cl::NDRange&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6832cb1809aaf22a65b2eca70f135230">create_lws_hint_parallel_implementations</a> (unsigned int input_dimension, unsigned int vector_size)</td></tr>
<tr class="memdesc:a6832cb1809aaf22a65b2eca70f135230"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a suitable LWS hint object for parallel implementations.  <a href="namespacearm__compute.xhtml#a6832cb1809aaf22a65b2eca70f135230">More...</a><br /></td></tr>
<tr class="separator:a6832cb1809aaf22a65b2eca70f135230"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad419ea339c7291b66d1cd9417b4f7330"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad419ea339c7291b66d1cd9417b4f7330">get_wbsm_support_info</a> (const cl::Device &amp;device)</td></tr>
<tr class="separator:ad419ea339c7291b66d1cd9417b4f7330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c10c7c992771d1048fd5fe2708ccdd9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c10c7c992771d1048fd5fe2708ccdd9">set_wbsm</a> (cl::Kernel &amp;kernel, cl_int wbsm_hint)</td></tr>
<tr class="separator:a3c10c7c992771d1048fd5fe2708ccdd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad1276bf6fb54ae42d709743edbe5a21"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aad1276bf6fb54ae42d709743edbe5a21">export_to_cl_image</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="separator:aad1276bf6fb54ae42d709743edbe5a21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab31871933f8428576d0589ff5f98224d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab31871933f8428576d0589ff5f98224d">set_unroll_with_pragma</a> (<a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;built_opts, std::initializer_list&lt; int &gt; values)</td></tr>
<tr class="separator:ab31871933f8428576d0589ff5f98224d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45b165e0796ef5e262fc5f05f03719c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45b165e0796ef5e262fc5f05f03719c1">arm_matrix_multiply_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:a45b165e0796ef5e262fc5f05f03719c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether the cl_arm_matrix_multiply extension is supported.  <a href="namespacearm__compute.xhtml#a45b165e0796ef5e262fc5f05f03719c1">More...</a><br /></td></tr>
<tr class="separator:a45b165e0796ef5e262fc5f05f03719c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3a72e82c5c3696bee9d2b9d87eeb2d4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa3a72e82c5c3696bee9d2b9d87eeb2d4">command_buffer_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:aa3a72e82c5c3696bee9d2b9d87eeb2d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether cl_khr_command_buffer extension is supported by the specified CL device.  <a href="namespacearm__compute.xhtml#aa3a72e82c5c3696bee9d2b9d87eeb2d4">More...</a><br /></td></tr>
<tr class="separator:aa3a72e82c5c3696bee9d2b9d87eeb2d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe482b248e77ce20f67b5f3190ee37c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe482b248e77ce20f67b5f3190ee37c4">command_buffer_mutable_dispatch_supported</a> (const cl::Device &amp;device)</td></tr>
<tr class="memdesc:afe482b248e77ce20f67b5f3190ee37c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether cl_khr_command_buffer_mutable_dispatch extension is supported by the specified CL device.  <a href="namespacearm__compute.xhtml#afe482b248e77ce20f67b5f3190ee37c4">More...</a><br /></td></tr>
<tr class="separator:afe482b248e77ce20f67b5f3190ee37c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f49decb4b0a74d5361686ab45db8961"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a> ()</td></tr>
<tr class="memdesc:a5f49decb4b0a74d5361686ab45db8961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if OpenCL is available.  <a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">More...</a><br /></td></tr>
<tr class="separator:a5f49decb4b0a74d5361686ab45db8961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a096590f2456b9e9bcb8db98175720b60"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a096590f2456b9e9bcb8db98175720b60"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a096590f2456b9e9bcb8db98175720b60">operator==</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;lhs, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a096590f2456b9e9bcb8db98175720b60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check that given dimensions are equal.  <a href="namespacearm__compute.xhtml#a096590f2456b9e9bcb8db98175720b60">More...</a><br /></td></tr>
<tr class="separator:a096590f2456b9e9bcb8db98175720b60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e3ff85e1f6c648dfbe264f54c147451"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4e3ff85e1f6c648dfbe264f54c147451"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4e3ff85e1f6c648dfbe264f54c147451">operator!=</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;lhs, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a4e3ff85e1f6c648dfbe264f54c147451"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check that given dimensions are not equal.  <a href="namespacearm__compute.xhtml#a4e3ff85e1f6c648dfbe264f54c147451">More...</a><br /></td></tr>
<tr class="separator:a4e3ff85e1f6c648dfbe264f54c147451"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a053a24bb37402fa4b4d8d5963976ba17"><td class="memTemplParams" colspan="2">template&lt;typename... T&gt; </td></tr>
<tr class="memitem:a053a24bb37402fa4b4d8d5963976ba17"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a053a24bb37402fa4b4d8d5963976ba17">ignore_unused</a> (T &amp;&amp;...)</td></tr>
<tr class="memdesc:a053a24bb37402fa4b4d8d5963976ba17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ignores unused arguments.  <a href="namespacearm__compute.xhtml#a053a24bb37402fa4b4d8d5963976ba17">More...</a><br /></td></tr>
<tr class="separator:a053a24bb37402fa4b4d8d5963976ba17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49cdbfceec3cb9949d00dbd1a17c5604"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a49cdbfceec3cb9949d00dbd1a17c5604">create_error</a> (<a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">ErrorCode</a> error_code, std::string msg)</td></tr>
<tr class="memdesc:a49cdbfceec3cb9949d00dbd1a17c5604"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an error containing the error message.  <a href="namespacearm__compute.xhtml#a49cdbfceec3cb9949d00dbd1a17c5604">More...</a><br /></td></tr>
<tr class="separator:a49cdbfceec3cb9949d00dbd1a17c5604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9b3e9f3ef6409e72c71aeacebf58f3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af9b3e9f3ef6409e72c71aeacebf58f3b">create_error_msg</a> (<a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">ErrorCode</a> error_code, const char *func, const char *file, int line, const char *msg)</td></tr>
<tr class="memdesc:af9b3e9f3ef6409e72c71aeacebf58f3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an error and the error message.  <a href="namespacearm__compute.xhtml#af9b3e9f3ef6409e72c71aeacebf58f3b">More...</a><br /></td></tr>
<tr class="separator:af9b3e9f3ef6409e72c71aeacebf58f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61e7f5901fd23f6009db8eac1a400be9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a61e7f5901fd23f6009db8eac1a400be9">throw_error</a> (<a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> err)</td></tr>
<tr class="memdesc:a61e7f5901fd23f6009db8eac1a400be9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Throw an std::runtime_error.  <a href="namespacearm__compute.xhtml#a61e7f5901fd23f6009db8eac1a400be9">More...</a><br /></td></tr>
<tr class="separator:a61e7f5901fd23f6009db8eac1a400be9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7795707992825c309fe846740dc8cf8"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af7795707992825c309fe846740dc8cf8">string_from_target</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target)</td></tr>
<tr class="memdesc:af7795707992825c309fe846740dc8cf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given gpu device target to string.  <a href="namespacearm__compute.xhtml#af7795707992825c309fe846740dc8cf8">More...</a><br /></td></tr>
<tr class="separator:af7795707992825c309fe846740dc8cf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dc6fb54ac0bbc7bf512fe0ca7414076"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">get_target_from_name</a> (const std::string &amp;device_name)</td></tr>
<tr class="memdesc:a0dc6fb54ac0bbc7bf512fe0ca7414076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the GPU target from a device name.  <a href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">More...</a><br /></td></tr>
<tr class="separator:a0dc6fb54ac0bbc7bf512fe0ca7414076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2355c2bf5d1950088937416baea24fe6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">get_arch_from_target</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target)</td></tr>
<tr class="memdesc:a2355c2bf5d1950088937416baea24fe6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the GPU arch.  <a href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">More...</a><br /></td></tr>
<tr class="separator:a2355c2bf5d1950088937416baea24fe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1da498e9b2c2d24883087f62c6bbe75d"><td class="memTemplParams" colspan="2">template&lt;typename... Args&gt; </td></tr>
<tr class="memitem:a1da498e9b2c2d24883087f62c6bbe75d"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1da498e9b2c2d24883087f62c6bbe75d">gpu_target_is_in</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target_to_check, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target, Args... targets)</td></tr>
<tr class="memdesc:a1da498e9b2c2d24883087f62c6bbe75d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to check whether a gpu target is equal to the provided targets.  <a href="namespacearm__compute.xhtml#a1da498e9b2c2d24883087f62c6bbe75d">More...</a><br /></td></tr>
<tr class="separator:a1da498e9b2c2d24883087f62c6bbe75d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab39ce9a593f7e12a4bf4cb47272b917"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aab39ce9a593f7e12a4bf4cb47272b917">gpu_target_is_in</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target_to_check, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target)</td></tr>
<tr class="memdesc:aab39ce9a593f7e12a4bf4cb47272b917"><td class="mdescLeft">&#160;</td><td class="mdescRight">Variant of gpu_target_is_in for comparing two targets.  <a href="namespacearm__compute.xhtml#aab39ce9a593f7e12a4bf4cb47272b917">More...</a><br /></td></tr>
<tr class="separator:aab39ce9a593f7e12a4bf4cb47272b917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c0dcc38187027dcb89cd9724bc5a823"><td class="memTemplParams" colspan="2">template&lt;typename L , typename... Ts&gt; </td></tr>
<tr class="memitem:a6c0dcc38187027dcb89cd9724bc5a823"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</td></tr>
<tr class="memdesc:a6c0dcc38187027dcb89cd9724bc5a823"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_functino for each element.  <a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">More...</a><br /></td></tr>
<tr class="separator:a6c0dcc38187027dcb89cd9724bc5a823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21c3e11887f3acf9284ca763372c7da0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a21c3e11887f3acf9284ca763372c7da0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a> (<a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dimensions, const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;perm)</td></tr>
<tr class="memdesc:a21c3e11887f3acf9284ca763372c7da0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Permutes given <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> according to a permutation vector.  <a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">More...</a><br /></td></tr>
<tr class="separator:a21c3e11887f3acf9284ca763372c7da0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5045aaec85553032a782c44ab8d26341"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5045aaec85553032a782c44ab8d26341">permute</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;perm)</td></tr>
<tr class="memdesc:a5045aaec85553032a782c44ab8d26341"><td class="mdescLeft">&#160;</td><td class="mdescRight">Permutes given <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> according to a permutation vector.  <a href="namespacearm__compute.xhtml#a5045aaec85553032a782c44ab8d26341">More...</a><br /></td></tr>
<tr class="separator:a5045aaec85553032a782c44ab8d26341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45509a321422cd1542958b5c33021bda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45509a321422cd1542958b5c33021bda">calculate_valid_region_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;src_info, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> interpolate_policy, <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> sampling_policy, bool border_undefined)</td></tr>
<tr class="memdesc:a45509a321422cd1542958b5c33021bda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to calculate the Valid Region for Scale.  <a href="namespacearm__compute.xhtml#a45509a321422cd1542958b5c33021bda">More...</a><br /></td></tr>
<tr class="separator:a45509a321422cd1542958b5c33021bda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34f2150f1c9f8a3ecb7298162124e5d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad34f2150f1c9f8a3ecb7298162124e5d">index2coords</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, int index)</td></tr>
<tr class="memdesc:ad34f2150f1c9f8a3ecb7298162124e5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a linear index into n-dimensional coordinates.  <a href="namespacearm__compute.xhtml#ad34f2150f1c9f8a3ecb7298162124e5d">More...</a><br /></td></tr>
<tr class="separator:ad34f2150f1c9f8a3ecb7298162124e5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad95e1c14c3007ca18950bf8f4c5a5c93"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad95e1c14c3007ca18950bf8f4c5a5c93">coords2index</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</td></tr>
<tr class="memdesc:ad95e1c14c3007ca18950bf8f4c5a5c93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert n-dimensional coordinates into a linear index.  <a href="namespacearm__compute.xhtml#ad95e1c14c3007ca18950bf8f4c5a5c93">More...</a><br /></td></tr>
<tr class="separator:ad95e1c14c3007ca18950bf8f4c5a5c93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79ff77f9b4506ad55c680f8849317b9f"><td class="memItemLeft" align="right" valign="top">const std::map&lt; <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>, std::vector&lt; <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a79ff77f9b4506ad55c680f8849317b9f">get_layout_map</a> ()</td></tr>
<tr class="memdesc:a79ff77f9b4506ad55c680f8849317b9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a static map used to find an index or dimension based on a data layout.  <a href="namespacearm__compute.xhtml#a79ff77f9b4506ad55c680f8849317b9f">More...</a><br /></td></tr>
<tr class="separator:a79ff77f9b4506ad55c680f8849317b9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfef6f05588c3d40195488620ab54b97"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;data_layout, const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &amp;data_layout_dimension)</td></tr>
<tr class="memdesc:adfef6f05588c3d40195488620ab54b97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the index of the given dimension.  <a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">More...</a><br /></td></tr>
<tr class="separator:adfef6f05588c3d40195488620ab54b97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad77109c62e70452196236fd03f7dd500"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad77109c62e70452196236fd03f7dd500">get_index_data_layout_dimension</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;data_layout, const size_t index)</td></tr>
<tr class="memdesc:ad77109c62e70452196236fd03f7dd500"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the DataLayoutDimension of a given index and layout.  <a href="namespacearm__compute.xhtml#ad77109c62e70452196236fd03f7dd500">More...</a><br /></td></tr>
<tr class="separator:ad77109c62e70452196236fd03f7dd500"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b0c016b53e97663b39c2f3875f46c24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">compute_winograd_convolution_tiles</a> (const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;in_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_size, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;output_tile_size, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="memdesc:a3b0c016b53e97663b39c2f3875f46c24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the number of output tiles required by Winograd Convolution layer.  <a href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">More...</a><br /></td></tr>
<tr class="separator:a3b0c016b53e97663b39c2f3875f46c24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb6881009f40f57d430752441ec5c4f4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aeb6881009f40f57d430752441ec5c4f4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">wrap_around</a> (T x, T m)</td></tr>
<tr class="memdesc:aeb6881009f40f57d430752441ec5c4f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrap-around a number within the range 0 &lt;= x &lt; m.  <a href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">More...</a><br /></td></tr>
<tr class="separator:aeb6881009f40f57d430752441ec5c4f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a519df47124aa903c7de8be2624640c1b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a519df47124aa903c7de8be2624640c1b">convert_negative_axis</a> (<a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coords, int max_value)</td></tr>
<tr class="memdesc:a519df47124aa903c7de8be2624640c1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert negative coordinates to positive in the range [0, num_dims_input].  <a href="namespacearm__compute.xhtml#a519df47124aa903c7de8be2624640c1b">More...</a><br /></td></tr>
<tr class="separator:a519df47124aa903c7de8be2624640c1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41c1523098580451b378f76b8c37a0f0"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a41c1523098580451b378f76b8c37a0f0">adjust_down</a> (int required, int available, int step)</td></tr>
<tr class="memdesc:a41c1523098580451b378f76b8c37a0f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decrease <code>required</code> in steps of <code>step</code> until it's less than <code>available</code>.  <a href="namespacearm__compute.xhtml#a41c1523098580451b378f76b8c37a0f0">More...</a><br /></td></tr>
<tr class="separator:a41c1523098580451b378f76b8c37a0f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2">adjust_up</a> (int required, int available, int step)</td></tr>
<tr class="memdesc:ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increase <code>required</code> in steps of <code>step</code> until it's greater than <code>available</code>.  <a href="namespacearm__compute.xhtml#ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2">More...</a><br /></td></tr>
<tr class="separator:ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f29397a1445e86018388adec5b1d410"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8f29397a1445e86018388adec5b1d410">operator==</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;lhs, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;rhs)</td></tr>
<tr class="memdesc:a8f29397a1445e86018388adec5b1d410"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two quantization info are equal.  <a href="namespacearm__compute.xhtml#a8f29397a1445e86018388adec5b1d410">More...</a><br /></td></tr>
<tr class="separator:a8f29397a1445e86018388adec5b1d410"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1724b70324f3f286b7c373c798ee1c6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac1724b70324f3f286b7c373c798ee1c6">operator!=</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;lhs, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;rhs)</td></tr>
<tr class="memdesc:ac1724b70324f3f286b7c373c798ee1c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two quantization info are not equal.  <a href="namespacearm__compute.xhtml#ac1724b70324f3f286b7c373c798ee1c6">More...</a><br /></td></tr>
<tr class="separator:ac1724b70324f3f286b7c373c798ee1c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd">operator==</a> (const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;lhs, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;rhs)</td></tr>
<tr class="memdesc:a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two quantization info are equal.  <a href="namespacearm__compute.xhtml#a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd">More...</a><br /></td></tr>
<tr class="separator:a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b0d2413cd8bcca4ec5f8326bd227773"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7b0d2413cd8bcca4ec5f8326bd227773">operator!=</a> (const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;lhs, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;rhs)</td></tr>
<tr class="memdesc:a7b0d2413cd8bcca4ec5f8326bd227773"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two quantization info are not equal.  <a href="namespacearm__compute.xhtml#a7b0d2413cd8bcca4ec5f8326bd227773">More...</a><br /></td></tr>
<tr class="separator:a7b0d2413cd8bcca4ec5f8326bd227773"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8cef8b31b552b532a14ab8815e06285"><td class="memTemplParams" colspan="2">template&lt;typename INFO_TYPE &gt; </td></tr>
<tr class="memitem:ab8cef8b31b552b532a14ab8815e06285"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a> (float value, const INFO_TYPE &amp;qinfo, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy=<a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>)</td></tr>
<tr class="memdesc:ab8cef8b31b552b532a14ab8815e06285"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given an unsigned 8-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">More...</a><br /></td></tr>
<tr class="separator:ab8cef8b31b552b532a14ab8815e06285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a464ea9027ae01e64014040d69302800f"><td class="memTemplParams" colspan="2">template&lt;typename INFO_TYPE &gt; </td></tr>
<tr class="memitem:a464ea9027ae01e64014040d69302800f"><td class="memTemplItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a> (float value, const INFO_TYPE &amp;qinfo, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy=<a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>)</td></tr>
<tr class="memdesc:a464ea9027ae01e64014040d69302800f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a signed 8-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">More...</a><br /></td></tr>
<tr class="separator:a464ea9027ae01e64014040d69302800f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea6dad9b7cd5d5028a50e2aceafa7d1d"><td class="memItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aea6dad9b7cd5d5028a50e2aceafa7d1d">quantize_qsymm8</a> (float value, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:aea6dad9b7cd5d5028a50e2aceafa7d1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a 8-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#aea6dad9b7cd5d5028a50e2aceafa7d1d">More...</a><br /></td></tr>
<tr class="separator:aea6dad9b7cd5d5028a50e2aceafa7d1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcbb8a7cd81427846571f9bef039f953"><td class="memItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adcbb8a7cd81427846571f9bef039f953">quantize_qsymm8_per_channel</a> (float value, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo, size_t channel_id=0)</td></tr>
<tr class="memdesc:adcbb8a7cd81427846571f9bef039f953"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a 8-bit symmetric per channel quantization scheme.  <a href="namespacearm__compute.xhtml#adcbb8a7cd81427846571f9bef039f953">More...</a><br /></td></tr>
<tr class="separator:adcbb8a7cd81427846571f9bef039f953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1d8253f8b422e143ab989ad2a4d29dd"><td class="memTemplParams" colspan="2">template&lt;typename INFO_TYPE &gt; </td></tr>
<tr class="memitem:ac1d8253f8b422e143ab989ad2a4d29dd"><td class="memTemplItemLeft" align="right" valign="top">float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a> (uint8_t value, const INFO_TYPE &amp;qinfo)</td></tr>
<tr class="memdesc:ac1d8253f8b422e143ab989ad2a4d29dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given an unsigned 8-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">More...</a><br /></td></tr>
<tr class="separator:ac1d8253f8b422e143ab989ad2a4d29dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><td class="memTemplParams" colspan="2">template&lt;typename INFO_TYPE &gt; </td></tr>
<tr class="memitem:afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><td class="memTemplItemLeft" align="right" valign="top">float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a> (int8_t value, const INFO_TYPE &amp;qinfo)</td></tr>
<tr class="memdesc:afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a signed 8-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">More...</a><br /></td></tr>
<tr class="separator:afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8005b943e23486a2000a7966d664df2"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab8005b943e23486a2000a7966d664df2">dequantize</a> (uint8_t value, float scale, int32_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:ab8005b943e23486a2000a7966d664df2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given an 8-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#ab8005b943e23486a2000a7966d664df2">More...</a><br /></td></tr>
<tr class="separator:ab8005b943e23486a2000a7966d664df2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7586ba11d82cc0232d4246a61a4a4f3"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af7586ba11d82cc0232d4246a61a4a4f3">dequantize_qsymm8</a> (int8_t value, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:af7586ba11d82cc0232d4246a61a4a4f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 8-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#af7586ba11d82cc0232d4246a61a4a4f3">More...</a><br /></td></tr>
<tr class="separator:af7586ba11d82cc0232d4246a61a4a4f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa29442a61be1fbce3b22c28f403acef2"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa29442a61be1fbce3b22c28f403acef2">dequantize</a> (int8_t value, float scale)</td></tr>
<tr class="memdesc:aa29442a61be1fbce3b22c28f403acef2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 8-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#aa29442a61be1fbce3b22c28f403acef2">More...</a><br /></td></tr>
<tr class="separator:aa29442a61be1fbce3b22c28f403acef2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22c3c5e2d63814320440a3ec9d73419c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a22c3c5e2d63814320440a3ec9d73419c">dequantize</a> (int16_t value, float scale)</td></tr>
<tr class="memdesc:a22c3c5e2d63814320440a3ec9d73419c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 16-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#a22c3c5e2d63814320440a3ec9d73419c">More...</a><br /></td></tr>
<tr class="separator:a22c3c5e2d63814320440a3ec9d73419c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf7db09d2dff587cd58187ed58eeec68"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acf7db09d2dff587cd58187ed58eeec68">dequantize</a> (uint16_t value, float scale, int32_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:acf7db09d2dff587cd58187ed58eeec68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 16-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#acf7db09d2dff587cd58187ed58eeec68">More...</a><br /></td></tr>
<tr class="separator:acf7db09d2dff587cd58187ed58eeec68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd9a9e4bfba3b2e6a35099618122d38e"><td class="memItemLeft" align="right" valign="top">int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a> (float value, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qinfo, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy=<a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>)</td></tr>
<tr class="memdesc:abd9a9e4bfba3b2e6a35099618122d38e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a 16-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">More...</a><br /></td></tr>
<tr class="separator:abd9a9e4bfba3b2e6a35099618122d38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae8583b382eaea109164f2f3e16380b1"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a> (int16_t value, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:aae8583b382eaea109164f2f3e16380b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 16-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">More...</a><br /></td></tr>
<tr class="separator:aae8583b382eaea109164f2f3e16380b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4a7d06572ce2a9c8c8fb3e37f1bb1d4"><td class="memItemLeft" align="right" valign="top">int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af4a7d06572ce2a9c8c8fb3e37f1bb1d4">quantize_qsymm16</a> (float value, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:af4a7d06572ce2a9c8c8fb3e37f1bb1d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a 16-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#af4a7d06572ce2a9c8c8fb3e37f1bb1d4">More...</a><br /></td></tr>
<tr class="separator:af4a7d06572ce2a9c8c8fb3e37f1bb1d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae7ed4b777e2220a1959b79a7834042c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae7ed4b777e2220a1959b79a7834042c">dequantize_qsymm16</a> (int16_t value, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:aae7ed4b777e2220a1959b79a7834042c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 16-bit symmetric quantization scheme.  <a href="namespacearm__compute.xhtml#aae7ed4b777e2220a1959b79a7834042c">More...</a><br /></td></tr>
<tr class="separator:aae7ed4b777e2220a1959b79a7834042c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fcdebf0b2654721ecdfa39b6bbd542d"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">quantize_qasymm16</a> (float value, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qinfo, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy=<a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>)</td></tr>
<tr class="memdesc:a3fcdebf0b2654721ecdfa39b6bbd542d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a 16-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">More...</a><br /></td></tr>
<tr class="separator:a3fcdebf0b2654721ecdfa39b6bbd542d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85310967abb447a1cb1167ba8f73eab0"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a> (uint16_t value, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:a85310967abb447a1cb1167ba8f73eab0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 16-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">More...</a><br /></td></tr>
<tr class="separator:a85310967abb447a1cb1167ba8f73eab0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ce67542f90c3e1adc608037ccdf9bdc"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2ce67542f90c3e1adc608037ccdf9bdc">quantize_qasymm16</a> (float value, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:a2ce67542f90c3e1adc608037ccdf9bdc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a value given a 16-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#a2ce67542f90c3e1adc608037ccdf9bdc">More...</a><br /></td></tr>
<tr class="separator:a2ce67542f90c3e1adc608037ccdf9bdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b09fc16ab06a02188334c4b1f43e2ff"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1b09fc16ab06a02188334c4b1f43e2ff">dequantize_qasymm16</a> (uint16_t value, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:a1b09fc16ab06a02188334c4b1f43e2ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a value given a 16-bit asymmetric quantization scheme.  <a href="namespacearm__compute.xhtml#a1b09fc16ab06a02188334c4b1f43e2ff">More...</a><br /></td></tr>
<tr class="separator:a1b09fc16ab06a02188334c4b1f43e2ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18ca89deea003cc240751b33f3b8d91f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a18ca89deea003cc240751b33f3b8d91f">compute_requantization_scale_offset</a> (const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;uqinfo_in, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;uqinfo_out)</td></tr>
<tr class="separator:a18ca89deea003cc240751b33f3b8d91f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaae2b6b1c3f4404121346a4c27b22647"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a> (float x, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:aaae2b6b1c3f4404121346a4c27b22647"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a rounded value of x.  <a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">More...</a><br /></td></tr>
<tr class="separator:aaae2b6b1c3f4404121346a4c27b22647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeda80c22c557b92bb84d4a1e86d62591"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aeda80c22c557b92bb84d4a1e86d62591">operator==</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;lhs, const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;rhs)</td></tr>
<tr class="memdesc:aeda80c22c557b92bb84d4a1e86d62591"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two tensor info are equal.  <a href="namespacearm__compute.xhtml#aeda80c22c557b92bb84d4a1e86d62591">More...</a><br /></td></tr>
<tr class="separator:aeda80c22c557b92bb84d4a1e86d62591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2382694e40b16992c526f074c53e669"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae2382694e40b16992c526f074c53e669">operator==</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;lhs, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;rhs)</td></tr>
<tr class="separator:ae2382694e40b16992c526f074c53e669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6504035918188c363f421a6677b185fd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6504035918188c363f421a6677b185fd">interleave_by</a> (const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> wf)</td></tr>
<tr class="separator:a6504035918188c363f421a6677b185fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af117513e1fddf0534bb90275f0a9db42"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af117513e1fddf0534bb90275f0a9db42">block_by</a> (const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> wf)</td></tr>
<tr class="separator:af117513e1fddf0534bb90275f0a9db42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10608f5b5910df56c8dd68f687bc5c54"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a10608f5b5910df56c8dd68f687bc5c54">is_fixed_format</a> (const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> &amp;wf)</td></tr>
<tr class="separator:a10608f5b5910df56c8dd68f687bc5c54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b5c2550292b008aa1f018a7623c6f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">is_fixed_format_fast_math</a> (const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> &amp;wf)</td></tr>
<tr class="separator:a36b5c2550292b008aa1f018a7623c6f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f2b06a162f0ca4e7bc8caac9525197f"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5f2b06a162f0ca4e7bc8caac9525197f">string_from_activation_func</a> (const <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> &amp;act)</td></tr>
<tr class="memdesc:a5f2b06a162f0ca4e7bc8caac9525197f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given activation function to a string.  <a href="namespacearm__compute.xhtml#a5f2b06a162f0ca4e7bc8caac9525197f">More...</a><br /></td></tr>
<tr class="separator:a5f2b06a162f0ca4e7bc8caac9525197f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b9e25c2e8731ca5488e7b3ccd66f58"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a56b9e25c2e8731ca5488e7b3ccd66f58">string_from_data_layout</a> (<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>)</td></tr>
<tr class="memdesc:a56b9e25c2e8731ca5488e7b3ccd66f58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a data layout identity into a string.  <a href="namespacearm__compute.xhtml#a56b9e25c2e8731ca5488e7b3ccd66f58">More...</a><br /></td></tr>
<tr class="separator:a56b9e25c2e8731ca5488e7b3ccd66f58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb7e0f23a4f2e63f39433f158dad47ab"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:abb7e0f23a4f2e63f39433f158dad47ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size in bytes of the data type.  <a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">More...</a><br /></td></tr>
<tr class="separator:abb7e0f23a4f2e63f39433f158dad47ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b06c0cd94808a77b697e79880b84b0"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a34b06c0cd94808a77b697e79880b84b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size in bytes of the data type.  <a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">More...</a><br /></td></tr>
<tr class="separator:a34b06c0cd94808a77b697e79880b84b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59846ef5ca75cd81cdb7e8a1ce08f9db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a59846ef5ca75cd81cdb7e8a1ce08f9db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the data type used by a given single-planar pixel format.  <a href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">More...</a><br /></td></tr>
<tr class="separator:a59846ef5ca75cd81cdb7e8a1ce08f9db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e4254e9c71fffafb79b99d972df8f81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5e4254e9c71fffafb79b99d972df8f81">get_promoted_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a5e4254e9c71fffafb79b99d972df8f81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the promoted data type of a given data type.  <a href="namespacearm__compute.xhtml#a5e4254e9c71fffafb79b99d972df8f81">More...</a><br /></td></tr>
<tr class="separator:a5e4254e9c71fffafb79b99d972df8f81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae69217acf0f0b5d4de030a09ad50a0bc"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">get_min_max</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:ae69217acf0f0b5d4de030a09ad50a0bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the mininum and maximum values a data type can take.  <a href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">More...</a><br /></td></tr>
<tr class="separator:ae69217acf0f0b5d4de030a09ad50a0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a142b55a483cadf4e1068a1a09a55e8e9"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a142b55a483cadf4e1068a1a09a55e8e9">string_from_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a142b55a483cadf4e1068a1a09a55e8e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a data type identity into a string.  <a href="namespacearm__compute.xhtml#a142b55a483cadf4e1068a1a09a55e8e9">More...</a><br /></td></tr>
<tr class="separator:a142b55a483cadf4e1068a1a09a55e8e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64e6501d564e950c3d527fb6b1f36f28"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a64e6501d564e950c3d527fb6b1f36f28">data_type_from_name</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)</td></tr>
<tr class="memdesc:a64e6501d564e950c3d527fb6b1f36f28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a string to DataType.  <a href="namespacearm__compute.xhtml#a64e6501d564e950c3d527fb6b1f36f28">More...</a><br /></td></tr>
<tr class="separator:a64e6501d564e950c3d527fb6b1f36f28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fcb9d70356ee46adad39332bb3065a2"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3fcb9d70356ee46adad39332bb3065a2">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;data_type)</td></tr>
<tr class="memdesc:a3fcb9d70356ee46adad39332bb3065a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Stream operator for <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>.  <a href="namespacearm__compute.xhtml#a3fcb9d70356ee46adad39332bb3065a2">More...</a><br /></td></tr>
<tr class="separator:a3fcb9d70356ee46adad39332bb3065a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5982a092e9eb743fce2d6392bdd8897"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:af5982a092e9eb743fce2d6392bdd8897"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a given data type is of floating point type.  <a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">More...</a><br /></td></tr>
<tr class="separator:af5982a092e9eb743fce2d6392bdd8897"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bee325b210f81bb89fe1f9e15badf9c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a0bee325b210f81bb89fe1f9e15badf9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a given data type is of quantized type.  <a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">More...</a><br /></td></tr>
<tr class="separator:a0bee325b210f81bb89fe1f9e15badf9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14f46283f316e7f0fad301d5c1507e9f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a14f46283f316e7f0fad301d5c1507e9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a given data type is of asymmetric quantized type.  <a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">More...</a><br /></td></tr>
<tr class="separator:a14f46283f316e7f0fad301d5c1507e9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab801dca7a1e1cfb228bb169e846b74f9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">is_data_type_quantized_asymmetric_signed</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:ab801dca7a1e1cfb228bb169e846b74f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a given data type is of asymmetric quantized signed type.  <a href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">More...</a><br /></td></tr>
<tr class="separator:ab801dca7a1e1cfb228bb169e846b74f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a922cd85c475c0d725fc030116ea57979"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a922cd85c475c0d725fc030116ea57979">is_data_type_quantized_symmetric</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a922cd85c475c0d725fc030116ea57979"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a given data type is of symmetric quantized type.  <a href="namespacearm__compute.xhtml#a922cd85c475c0d725fc030116ea57979">More...</a><br /></td></tr>
<tr class="separator:a922cd85c475c0d725fc030116ea57979"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84437d80241f6a31e1a07c231ee8e3ac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:a84437d80241f6a31e1a07c231ee8e3ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a given data type is of per channel type.  <a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">More...</a><br /></td></tr>
<tr class="separator:a84437d80241f6a31e1a07c231ee8e3ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afea13b8f36cd9e409d8ed686f1200ec3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afea13b8f36cd9e409d8ed686f1200ec3"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afea13b8f36cd9e409d8ed686f1200ec3">check_value_range</a> (T val, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> qinfo=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:afea13b8f36cd9e409d8ed686f1200ec3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the value can be represented by the given data type.  <a href="namespacearm__compute.xhtml#afea13b8f36cd9e409d8ed686f1200ec3">More...</a><br /></td></tr>
<tr class="separator:afea13b8f36cd9e409d8ed686f1200ec3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4843e0bfd09db1c440d48494d57f9ff4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4843e0bfd09db1c440d48494d57f9ff4">cpu_impl_dt</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;data_type)</td></tr>
<tr class="memdesc:a4843e0bfd09db1c440d48494d57f9ff4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the suffix string of CPU kernel implementation names based on the given data type.  <a href="namespacearm__compute.xhtml#a4843e0bfd09db1c440d48494d57f9ff4">More...</a><br /></td></tr>
<tr class="separator:a4843e0bfd09db1c440d48494d57f9ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4823543d67a2520c98669e2a5608ef6a"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4823543d67a2520c98669e2a5608ef6a">pixel_size_from_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a4823543d67a2520c98669e2a5608ef6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size in bytes of the pixel format.  <a href="namespacearm__compute.xhtml#a4823543d67a2520c98669e2a5608ef6a">More...</a><br /></td></tr>
<tr class="separator:a4823543d67a2520c98669e2a5608ef6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f6fe18760340bcec02d095b7099e923"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4f6fe18760340bcec02d095b7099e923">plane_idx_from_channel</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:a4f6fe18760340bcec02d095b7099e923"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the plane index of a given channel given an input format.  <a href="namespacearm__compute.xhtml#a4f6fe18760340bcec02d095b7099e923">More...</a><br /></td></tr>
<tr class="separator:a4f6fe18760340bcec02d095b7099e923"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afab149f8d8b0f6405303ee8056fa77d3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afab149f8d8b0f6405303ee8056fa77d3">channel_idx_from_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:afab149f8d8b0f6405303ee8056fa77d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the channel index of a given channel given an input format.  <a href="namespacearm__compute.xhtml#afab149f8d8b0f6405303ee8056fa77d3">More...</a><br /></td></tr>
<tr class="separator:afab149f8d8b0f6405303ee8056fa77d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a71659def659c8b1c164023a99a25a9"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2a71659def659c8b1c164023a99a25a9">num_planes_from_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a2a71659def659c8b1c164023a99a25a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of planes for a given format.  <a href="namespacearm__compute.xhtml#a2a71659def659c8b1c164023a99a25a9">More...</a><br /></td></tr>
<tr class="separator:a2a71659def659c8b1c164023a99a25a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab14153fb809c18823af3c9c8bc4286cb"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">num_channels_from_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:ab14153fb809c18823af3c9c8bc4286cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of channels for a given single-planar pixel format.  <a href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">More...</a><br /></td></tr>
<tr class="separator:ab14153fb809c18823af3c9c8bc4286cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b82da7b5e0f6192f415ac347c9e0555"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b82da7b5e0f6192f415ac347c9e0555">string_from_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a8b82da7b5e0f6192f415ac347c9e0555"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a tensor format into a string.  <a href="namespacearm__compute.xhtml#a8b82da7b5e0f6192f415ac347c9e0555">More...</a><br /></td></tr>
<tr class="separator:a8b82da7b5e0f6192f415ac347c9e0555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7be62dcb9603165af78bca6f2ca8ec15"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a> (unsigned int vec_size, size_t dim0)</td></tr>
<tr class="memdesc:a7be62dcb9603165af78bca6f2ca8ec15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the adjusted vector size in case it is less than the input's first dimension, getting rounded down to its closest valid vector size.  <a href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">More...</a><br /></td></tr>
<tr class="separator:a7be62dcb9603165af78bca6f2ca8ec15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e4a3ad379526db61e1ebf469b455f83"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3e4a3ad379526db61e1ebf469b455f83">string_from_interpolation_policy</a> (<a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy)</td></tr>
<tr class="memdesc:a3e4a3ad379526db61e1ebf469b455f83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given interpolation policy to a string.  <a href="namespacearm__compute.xhtml#a3e4a3ad379526db61e1ebf469b455f83">More...</a><br /></td></tr>
<tr class="separator:a3e4a3ad379526db61e1ebf469b455f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acac1575c0edd329ceb4a54d9fe8dcb08"><td class="memTemplParams" colspan="2">template&lt;typename S , typename T &gt; </td></tr>
<tr class="memitem:acac1575c0edd329ceb4a54d9fe8dcb08"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">DIV_CEIL</a> (S val, T m) -&gt; decltype((val+m - 1)/m)</td></tr>
<tr class="memdesc:acac1575c0edd329ceb4a54d9fe8dcb08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the rounded up quotient of val / m.  <a href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">More...</a><br /></td></tr>
<tr class="separator:acac1575c0edd329ceb4a54d9fe8dcb08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab237a0a375cf382d52b61653248d3d4a"><td class="memTemplParams" colspan="2">template&lt;typename S , typename T &gt; </td></tr>
<tr class="memitem:ab237a0a375cf382d52b61653248d3d4a"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a> (S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</td></tr>
<tr class="memdesc:ab237a0a375cf382d52b61653248d3d4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the smallest number larger or equal to value that is a multiple of divisor.  <a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">More...</a><br /></td></tr>
<tr class="separator:ab237a0a375cf382d52b61653248d3d4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23062881efd3855d61bae58f330c97db"><td class="memTemplParams" colspan="2">template&lt;typename S , typename T &gt; </td></tr>
<tr class="memitem:a23062881efd3855d61bae58f330c97db"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23062881efd3855d61bae58f330c97db">floor_to_multiple</a> (S value, T divisor) -&gt; decltype((value/divisor) *divisor)</td></tr>
<tr class="memdesc:a23062881efd3855d61bae58f330c97db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the largest number smaller or equal to value that is a multiple of divisor.  <a href="namespacearm__compute.xhtml#a23062881efd3855d61bae58f330c97db">More...</a><br /></td></tr>
<tr class="separator:a23062881efd3855d61bae58f330c97db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a7bb17a0a0414a7162f635776a02eb5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">lower_string</a> (const std::string &amp;val)</td></tr>
<tr class="memdesc:a0a7bb17a0a0414a7162f635776a02eb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lower a given string.  <a href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">More...</a><br /></td></tr>
<tr class="separator:a0a7bb17a0a0414a7162f635776a02eb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a58489d9f05d338f612832c0a4c9a8d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2a58489d9f05d338f612832c0a4c9a8d">upper_string</a> (const std::string &amp;val)</td></tr>
<tr class="memdesc:a2a58489d9f05d338f612832c0a4c9a8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Raise a given string to upper case.  <a href="namespacearm__compute.xhtml#a2a58489d9f05d338f612832c0a4c9a8d">More...</a><br /></td></tr>
<tr class="separator:a2a58489d9f05d338f612832c0a4c9a8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59cc7dde3c479fa90260c12c992f2cae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">float_to_string_with_full_precision</a> (float val)</td></tr>
<tr class="memdesc:a59cc7dde3c479fa90260c12c992f2cae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a string with the float in full precision.  <a href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">More...</a><br /></td></tr>
<tr class="separator:a59cc7dde3c479fa90260c12c992f2cae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5277640d2fd61696201c28a01c3de703"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">join</a> (const std::vector&lt; std::string &gt; strings, const std::string &amp;sep)</td></tr>
<tr class="memdesc:a5277640d2fd61696201c28a01c3de703"><td class="mdescLeft">&#160;</td><td class="mdescRight">Join a sequence of strings with separator <code>sep</code>.  <a href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">More...</a><br /></td></tr>
<tr class="separator:a5277640d2fd61696201c28a01c3de703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d288429eb20baf6da6109f3a21e6bb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">read_file</a> (const std::string &amp;filename, bool binary)</td></tr>
<tr class="memdesc:ae0d288429eb20baf6da6109f3a21e6bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load an entire file in memory.  <a href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">More...</a><br /></td></tr>
<tr class="separator:ae0d288429eb20baf6da6109f3a21e6bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcd35973f3a5d2d4d3015e155f185a81"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afcd35973f3a5d2d4d3015e155f185a81"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afcd35973f3a5d2d4d3015e155f185a81">permute_strides</a> (<a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dimensions, const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;perm)</td></tr>
<tr class="memdesc:afcd35973f3a5d2d4d3015e155f185a81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Permutes the given dimensions according the permutation vector.  <a href="namespacearm__compute.xhtml#afcd35973f3a5d2d4d3015e155f185a81">More...</a><br /></td></tr>
<tr class="separator:afcd35973f3a5d2d4d3015e155f185a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6d4f0b9fedd979c5b768f9b34fda9f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">calculate_same_pad</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> weights_shape, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout=<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation=<a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1u, 1u), const <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;rounding_type=<a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>)</td></tr>
<tr class="memdesc:aa6d4f0b9fedd979c5b768f9b34fda9f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate padding requirements in case of SAME padding.  <a href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">More...</a><br /></td></tr>
<tr class="separator:aa6d4f0b9fedd979c5b768f9b34fda9f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a0b7ff66a946db6252d2a4c40c04fa7"><td class="memItemLeft" align="right" valign="top">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1a0b7ff66a946db6252d2a4c40c04fa7">deconvolution_output_dimensions</a> (unsigned int in_width, unsigned int in_height, unsigned int kernel_width, unsigned int kernel_height, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</td></tr>
<tr class="memdesc:a1a0b7ff66a946db6252d2a4c40c04fa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns expected width and height of the deconvolution's output tensor.  <a href="namespacearm__compute.xhtml#a1a0b7ff66a946db6252d2a4c40c04fa7">More...</a><br /></td></tr>
<tr class="separator:a1a0b7ff66a946db6252d2a4c40c04fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a138beaeb1260b90cb03bc3f761628724"><td class="memItemLeft" align="right" valign="top">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a> (int width, int height, int kernel_width, int kernel_height, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation=<a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1U, 1U))</td></tr>
<tr class="memdesc:a138beaeb1260b90cb03bc3f761628724"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.  <a href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">More...</a><br /></td></tr>
<tr class="separator:a138beaeb1260b90cb03bc3f761628724"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d8da22845d57d4aacb55b7d5ae6c013"><td class="memItemLeft" align="right" valign="top">std::pair&lt; int, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">scaled_dimensions_signed</a> (int width, int height, int kernel_width, int kernel_height, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</td></tr>
<tr class="memdesc:a1d8da22845d57d4aacb55b7d5ae6c013"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns calculated width and height of output scaled tensor depending on dimensions rounding mode.  <a href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">More...</a><br /></td></tr>
<tr class="separator:a1d8da22845d57d4aacb55b7d5ae6c013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7058bee3ed710f07d96cb0d856de3bec"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; int, int, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">scaled_3d_dimensions_signed</a> (int width, int height, int depth, int kernel_width, int kernel_height, int kernel_depth, const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool3d_info)</td></tr>
<tr class="memdesc:a7058bee3ed710f07d96cb0d856de3bec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns calculated width, height and depth of output scaled tensor depending on dimensions rounding mode.  <a href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">More...</a><br /></td></tr>
<tr class="separator:a7058bee3ed710f07d96cb0d856de3bec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28029771f7c2cd8bbe2855303d38f71f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a28029771f7c2cd8bbe2855303d38f71f">needs_serialized_reduction</a> (<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> op, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, unsigned int axis)</td></tr>
<tr class="memdesc:a28029771f7c2cd8bbe2855303d38f71f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the given reduction operation should be handled in a serial way.  <a href="namespacearm__compute.xhtml#a28029771f7c2cd8bbe2855303d38f71f">More...</a><br /></td></tr>
<tr class="separator:a28029771f7c2cd8bbe2855303d38f71f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dcccbff6075b2fad30ebd2a0da6b995"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1dcccbff6075b2fad30ebd2a0da6b995">get_softmax_output_quantization_info</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> input_type, bool is_log)</td></tr>
<tr class="memdesc:a1dcccbff6075b2fad30ebd2a0da6b995"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns output quantization information for softmax layer.  <a href="namespacearm__compute.xhtml#a1dcccbff6075b2fad30ebd2a0da6b995">More...</a><br /></td></tr>
<tr class="separator:a1dcccbff6075b2fad30ebd2a0da6b995"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a549f4d59cb7f823d884ffe2424079c3a"><td class="memItemLeft" align="right" valign="top">std::pair&lt; int32_t, int32_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a549f4d59cb7f823d884ffe2424079c3a">get_quantized_activation_min_max</a> (const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> oq_info)</td></tr>
<tr class="memdesc:a549f4d59cb7f823d884ffe2424079c3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pair of minimum and maximum values for a quantized activation.  <a href="namespacearm__compute.xhtml#a549f4d59cb7f823d884ffe2424079c3a">More...</a><br /></td></tr>
<tr class="separator:a549f4d59cb7f823d884ffe2424079c3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0dfcd19fb6510cd3c303db6c4583ee6"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af0dfcd19fb6510cd3c303db6c4583ee6">string_from_channel</a> (<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:af0dfcd19fb6510cd3c303db6c4583ee6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a channel identity into a string.  <a href="namespacearm__compute.xhtml#af0dfcd19fb6510cd3c303db6c4583ee6">More...</a><br /></td></tr>
<tr class="separator:af0dfcd19fb6510cd3c303db6c4583ee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0204b49ec236bbaedb1cf96def276d4"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae0204b49ec236bbaedb1cf96def276d4">string_from_border_mode</a> (<a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode)</td></tr>
<tr class="memdesc:ae0204b49ec236bbaedb1cf96def276d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given border mode policy to a string.  <a href="namespacearm__compute.xhtml#ae0204b49ec236bbaedb1cf96def276d4">More...</a><br /></td></tr>
<tr class="separator:ae0204b49ec236bbaedb1cf96def276d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0569839ee85ad0e35edaaf3b4c80d706"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0569839ee85ad0e35edaaf3b4c80d706">string_from_norm_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a0569839ee85ad0e35edaaf3b4c80d706"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given normalization type to a string.  <a href="namespacearm__compute.xhtml#a0569839ee85ad0e35edaaf3b4c80d706">More...</a><br /></td></tr>
<tr class="separator:a0569839ee85ad0e35edaaf3b4c80d706"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1040394085749e4d02a0d4350493ec94"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1040394085749e4d02a0d4350493ec94">string_from_pooling_type</a> (<a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a1040394085749e4d02a0d4350493ec94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given pooling type to a string.  <a href="namespacearm__compute.xhtml#a1040394085749e4d02a0d4350493ec94">More...</a><br /></td></tr>
<tr class="separator:a1040394085749e4d02a0d4350493ec94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a598d7174a66371ea772d4101760c25"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1a598d7174a66371ea772d4101760c25">is_pool_region_entirely_outside_input</a> (const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a1a598d7174a66371ea772d4101760c25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the pool region is entirely outside the input tensor.  <a href="namespacearm__compute.xhtml#a1a598d7174a66371ea772d4101760c25">More...</a><br /></td></tr>
<tr class="separator:a1a598d7174a66371ea772d4101760c25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7664c9a93a7007e06a991bb22a42c08e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7664c9a93a7007e06a991bb22a42c08e">is_pool_3d_region_entirely_outside_input</a> (const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a7664c9a93a7007e06a991bb22a42c08e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the 3d pool region is entirely outside the input tensor.  <a href="namespacearm__compute.xhtml#a7664c9a93a7007e06a991bb22a42c08e">More...</a><br /></td></tr>
<tr class="separator:a7664c9a93a7007e06a991bb22a42c08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50502af31f1ab8754ec19be799352dd8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a50502af31f1ab8754ec19be799352dd8">is_symmetric</a> (const <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> &amp;info)</td></tr>
<tr class="memdesc:a50502af31f1ab8754ec19be799352dd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the 3D padding is symmetric i.e.  <a href="namespacearm__compute.xhtml#a50502af31f1ab8754ec19be799352dd8">More...</a><br /></td></tr>
<tr class="separator:a50502af31f1ab8754ec19be799352dd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a291164a04581bf953aa65ae87cc201a2"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a291164a04581bf953aa65ae87cc201a2">string_from_gemmlowp_output_stage</a> (<a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> <a class="el" href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a>)</td></tr>
<tr class="memdesc:a291164a04581bf953aa65ae87cc201a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates a given GEMMLowp output stage to a string.  <a href="namespacearm__compute.xhtml#a291164a04581bf953aa65ae87cc201a2">More...</a><br /></td></tr>
<tr class="separator:a291164a04581bf953aa65ae87cc201a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6eaf2181f8a8c418acaf3af76239997"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad6eaf2181f8a8c418acaf3af76239997">string_from_pixel_value</a> (const <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;value, const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ad6eaf2181f8a8c418acaf3af76239997"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> to a string, represented through the specific data type.  <a href="namespacearm__compute.xhtml#ad6eaf2181f8a8c418acaf3af76239997">More...</a><br /></td></tr>
<tr class="separator:ad6eaf2181f8a8c418acaf3af76239997"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a456cc0b26fb17eee9942c8970f1c71db"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *, <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a456cc0b26fb17eee9942c8970f1c71db">get_padding_info</a> (std::initializer_list&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * &gt; infos)</td></tr>
<tr class="memdesc:a456cc0b26fb17eee9942c8970f1c71db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores padding information before configuring a kernel.  <a href="namespacearm__compute.xhtml#a456cc0b26fb17eee9942c8970f1c71db">More...</a><br /></td></tr>
<tr class="separator:a456cc0b26fb17eee9942c8970f1c71db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f708f4acd49beb7d02d2ec9c2b7552f"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *, <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5f708f4acd49beb7d02d2ec9c2b7552f">get_padding_info</a> (std::initializer_list&lt; const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> * &gt; tensors)</td></tr>
<tr class="memdesc:a5f708f4acd49beb7d02d2ec9c2b7552f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores padding information before configuring a kernel.  <a href="namespacearm__compute.xhtml#a5f708f4acd49beb7d02d2ec9c2b7552f">More...</a><br /></td></tr>
<tr class="separator:a5f708f4acd49beb7d02d2ec9c2b7552f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d5ebe14ba3526c8e2ed3c6949669f9c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7d5ebe14ba3526c8e2ed3c6949669f9c">has_padding_changed</a> (const std::unordered_map&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *, <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &gt; &amp;padding_map)</td></tr>
<tr class="memdesc:a7d5ebe14ba3526c8e2ed3c6949669f9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the previously stored padding info has changed after configuring a kernel.  <a href="namespacearm__compute.xhtml#a7d5ebe14ba3526c8e2ed3c6949669f9c">More...</a><br /></td></tr>
<tr class="separator:a7d5ebe14ba3526c8e2ed3c6949669f9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22ef3e50f7dbf08c974a120588e1ad90"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a22ef3e50f7dbf08c974a120588e1ad90">num_of_elements_in_range</a> (const float start, const float end, const float step)</td></tr>
<tr class="memdesc:a22ef3e50f7dbf08c974a120588e1ad90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements required to go from start to end with the wanted step.  <a href="namespacearm__compute.xhtml#a22ef3e50f7dbf08c974a120588e1ad90">More...</a><br /></td></tr>
<tr class="separator:a22ef3e50f7dbf08c974a120588e1ad90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4587cd36ddbf2e4dde217d1a1007940"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:af4587cd36ddbf2e4dde217d1a1007940"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">error_on_nullptr</a> (const char *function, const char *file, const int line, Ts &amp;&amp;...pointers)</td></tr>
<tr class="memdesc:af4587cd36ddbf2e4dde217d1a1007940"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an error if one of the pointers is a nullptr.  <a href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">More...</a><br /></td></tr>
<tr class="separator:af4587cd36ddbf2e4dde217d1a1007940"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7f5b38e9d5391afc4a5ce5702e7379b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad7f5b38e9d5391afc4a5ce5702e7379b">error_on_mismatching_windows</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:ad7f5b38e9d5391afc4a5ce5702e7379b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed window is invalid.  <a href="namespacearm__compute.xhtml#ad7f5b38e9d5391afc4a5ce5702e7379b">More...</a><br /></td></tr>
<tr class="separator:ad7f5b38e9d5391afc4a5ce5702e7379b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae93ff1ca47057b95d0c6fd0d287253a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae93ff1ca47057b95d0c6fd0d287253a8">error_on_invalid_subwindow</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;sub)</td></tr>
<tr class="memdesc:ae93ff1ca47057b95d0c6fd0d287253a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed subwindow is invalid.  <a href="namespacearm__compute.xhtml#ae93ff1ca47057b95d0c6fd0d287253a8">More...</a><br /></td></tr>
<tr class="separator:ae93ff1ca47057b95d0c6fd0d287253a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f63a617a4897663b386ba5e1f5cb675"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4f63a617a4897663b386ba5e1f5cb675">error_on_window_not_collapsable_at_dimension</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const int dim)</td></tr>
<tr class="memdesc:a4f63a617a4897663b386ba5e1f5cb675"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the window can't be collapsed at the given dimension.  <a href="namespacearm__compute.xhtml#a4f63a617a4897663b386ba5e1f5cb675">More...</a><br /></td></tr>
<tr class="separator:a4f63a617a4897663b386ba5e1f5cb675"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c62cc8d5ee934d42c115c9315d66c13"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c62cc8d5ee934d42c115c9315d66c13">error_on_coordinates_dimensions_gte</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos, unsigned int max_dim)</td></tr>
<tr class="memdesc:a3c62cc8d5ee934d42c115c9315d66c13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed coordinates have too many dimensions.  <a href="namespacearm__compute.xhtml#a3c62cc8d5ee934d42c115c9315d66c13">More...</a><br /></td></tr>
<tr class="separator:a3c62cc8d5ee934d42c115c9315d66c13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d65985a30fc1229047b7db32caaab43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7d65985a30fc1229047b7db32caaab43">error_on_window_dimensions_gte</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win, unsigned int max_dim)</td></tr>
<tr class="memdesc:a7d65985a30fc1229047b7db32caaab43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed window has too many dimensions.  <a href="namespacearm__compute.xhtml#a7d65985a30fc1229047b7db32caaab43">More...</a><br /></td></tr>
<tr class="separator:a7d65985a30fc1229047b7db32caaab43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3f385292b90327061e1276f3e3445c7"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:ab3f385292b90327061e1276f3e3445c7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab3f385292b90327061e1276f3e3445c7">error_on_mismatching_dimensions</a> (const char *function, const char *file, int line, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dim1, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dim2, Ts &amp;&amp;...dims)</td></tr>
<tr class="memdesc:ab3f385292b90327061e1276f3e3445c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed dimension objects differ.  <a href="namespacearm__compute.xhtml#ab3f385292b90327061e1276f3e3445c7">More...</a><br /></td></tr>
<tr class="separator:ab3f385292b90327061e1276f3e3445c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2f22cc01532e0236e438324310fdb94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa2f22cc01532e0236e438324310fdb94">has_format_horizontal_subsampling</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:aa2f22cc01532e0236e438324310fdb94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if the given format has horizontal subsampling.  <a href="namespacearm__compute.xhtml#aa2f22cc01532e0236e438324310fdb94">More...</a><br /></td></tr>
<tr class="separator:aa2f22cc01532e0236e438324310fdb94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95358b677c5c17f5cc1e369e4a27e2c2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a95358b677c5c17f5cc1e369e4a27e2c2">has_format_vertical_subsampling</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a95358b677c5c17f5cc1e369e4a27e2c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if the given format has vertical subsampling.  <a href="namespacearm__compute.xhtml#a95358b677c5c17f5cc1e369e4a27e2c2">More...</a><br /></td></tr>
<tr class="separator:a95358b677c5c17f5cc1e369e4a27e2c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add7f7487c235331a6518dd16ad1e3b38"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#add7f7487c235331a6518dd16ad1e3b38">adjust_odd_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:add7f7487c235331a6518dd16ad1e3b38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust tensor shape size if width or height are odd for a given multi-planar format.  <a href="namespacearm__compute.xhtml#add7f7487c235331a6518dd16ad1e3b38">More...</a><br /></td></tr>
<tr class="separator:add7f7487c235331a6518dd16ad1e3b38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8bcb895249c9b0207df5d6512433aab"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:aa8bcb895249c9b0207df5d6512433aab"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa8bcb895249c9b0207df5d6512433aab">error_on_tensors_not_even</a> (const char *function, const char *file, int line, const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;format, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor1, Ts... tensors)</td></tr>
<tr class="memdesc:aa8bcb895249c9b0207df5d6512433aab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed tensor objects are not even.  <a href="namespacearm__compute.xhtml#aa8bcb895249c9b0207df5d6512433aab">More...</a><br /></td></tr>
<tr class="separator:aa8bcb895249c9b0207df5d6512433aab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d714e1b7d9d7818309138b7d830ebcb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d714e1b7d9d7818309138b7d830ebcb">calculate_subsampled_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel=<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">Channel::UNKNOWN</a>)</td></tr>
<tr class="memdesc:a9d714e1b7d9d7818309138b7d830ebcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate subsampled shape for a given format and channel.  <a href="namespacearm__compute.xhtml#a9d714e1b7d9d7818309138b7d830ebcb">More...</a><br /></td></tr>
<tr class="separator:a9d714e1b7d9d7818309138b7d830ebcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5865def3a35885dda73dd5f4d555d11c"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a5865def3a35885dda73dd5f4d555d11c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5865def3a35885dda73dd5f4d555d11c">error_on_tensors_not_subsampled</a> (const char *function, const char *file, int line, const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;format, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor1, Ts... tensors)</td></tr>
<tr class="memdesc:a5865def3a35885dda73dd5f4d555d11c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed tensor objects are not sub-sampled.  <a href="namespacearm__compute.xhtml#a5865def3a35885dda73dd5f4d555d11c">More...</a><br /></td></tr>
<tr class="separator:a5865def3a35885dda73dd5f4d555d11c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a900072ec18ac254db40901425e2b35b2"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a900072ec18ac254db40901425e2b35b2"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a900072ec18ac254db40901425e2b35b2">error_on_mismatching_shapes</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info_1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info_2, Ts... tensor_infos)</td></tr>
<tr class="memdesc:a900072ec18ac254db40901425e2b35b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed two tensor infos have different shapes from the given dimension.  <a href="namespacearm__compute.xhtml#a900072ec18ac254db40901425e2b35b2">More...</a><br /></td></tr>
<tr class="separator:a900072ec18ac254db40901425e2b35b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a196a1a4faf1a8893963fd89d7efaf5d9"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a196a1a4faf1a8893963fd89d7efaf5d9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a196a1a4faf1a8893963fd89d7efaf5d9">error_on_mismatching_shapes</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor_1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor_2, Ts... tensors)</td></tr>
<tr class="memdesc:a196a1a4faf1a8893963fd89d7efaf5d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed two tensors have different shapes from the given dimension.  <a href="namespacearm__compute.xhtml#a196a1a4faf1a8893963fd89d7efaf5d9">More...</a><br /></td></tr>
<tr class="separator:a196a1a4faf1a8893963fd89d7efaf5d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f08e05970c101f7a9c852dc036f5ffb"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a8f08e05970c101f7a9c852dc036f5ffb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8f08e05970c101f7a9c852dc036f5ffb">error_on_mismatching_shapes</a> (const char *function, const char *file, const int line, unsigned int upper_dim, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info_1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info_2, Ts... tensor_infos)</td></tr>
<tr class="memdesc:a8f08e05970c101f7a9c852dc036f5ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed two tensors have different shapes from the given dimension.  <a href="namespacearm__compute.xhtml#a8f08e05970c101f7a9c852dc036f5ffb">More...</a><br /></td></tr>
<tr class="separator:a8f08e05970c101f7a9c852dc036f5ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a314d37a14fb002f52a148122238499"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a7a314d37a14fb002f52a148122238499"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7a314d37a14fb002f52a148122238499">error_on_mismatching_shapes</a> (const char *function, const char *file, const int line, unsigned int upper_dim, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor_1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor_2, Ts... tensors)</td></tr>
<tr class="memdesc:a7a314d37a14fb002f52a148122238499"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed two tensors have different shapes from the given dimension.  <a href="namespacearm__compute.xhtml#a7a314d37a14fb002f52a148122238499">More...</a><br /></td></tr>
<tr class="separator:a7a314d37a14fb002f52a148122238499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8355d6db4cebee2724bf4463076526c6"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a8355d6db4cebee2724bf4463076526c6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8355d6db4cebee2724bf4463076526c6">error_on_mismatching_data_layouts</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, Ts... tensor_infos)</td></tr>
<tr class="memdesc:a8355d6db4cebee2724bf4463076526c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed tensor infos have different data layouts.  <a href="namespacearm__compute.xhtml#a8355d6db4cebee2724bf4463076526c6">More...</a><br /></td></tr>
<tr class="separator:a8355d6db4cebee2724bf4463076526c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6e5ea4c65e9a0e7853ce314024c955d"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:ad6e5ea4c65e9a0e7853ce314024c955d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad6e5ea4c65e9a0e7853ce314024c955d">error_on_mismatching_data_layouts</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, Ts... tensors)</td></tr>
<tr class="memdesc:ad6e5ea4c65e9a0e7853ce314024c955d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed tensors have different data layouts.  <a href="namespacearm__compute.xhtml#ad6e5ea4c65e9a0e7853ce314024c955d">More...</a><br /></td></tr>
<tr class="separator:ad6e5ea4c65e9a0e7853ce314024c955d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85c38583df1a7998d58c51f7c3d4b354"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a85c38583df1a7998d58c51f7c3d4b354"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a85c38583df1a7998d58c51f7c3d4b354">error_on_mismatching_data_types</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, Ts... tensor_infos)</td></tr>
<tr class="memdesc:a85c38583df1a7998d58c51f7c3d4b354"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed two tensor infos have different data types.  <a href="namespacearm__compute.xhtml#a85c38583df1a7998d58c51f7c3d4b354">More...</a><br /></td></tr>
<tr class="separator:a85c38583df1a7998d58c51f7c3d4b354"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8b68ddd24c352a4cdd4fb1eea263429"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:aa8b68ddd24c352a4cdd4fb1eea263429"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa8b68ddd24c352a4cdd4fb1eea263429">error_on_mismatching_data_types</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, Ts... tensors)</td></tr>
<tr class="memdesc:aa8b68ddd24c352a4cdd4fb1eea263429"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed two tensors have different data types.  <a href="namespacearm__compute.xhtml#aa8b68ddd24c352a4cdd4fb1eea263429">More...</a><br /></td></tr>
<tr class="separator:aa8b68ddd24c352a4cdd4fb1eea263429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49e1fb8719a6e3b4db298796bdeac758"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a49e1fb8719a6e3b4db298796bdeac758"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a49e1fb8719a6e3b4db298796bdeac758">error_on_mismatching_quantization_info</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info_1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info_2, Ts... tensor_infos)</td></tr>
<tr class="memdesc:a49e1fb8719a6e3b4db298796bdeac758"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed tensor infos have different asymmetric quantized data types or different quantization info.  <a href="namespacearm__compute.xhtml#a49e1fb8719a6e3b4db298796bdeac758">More...</a><br /></td></tr>
<tr class="separator:a49e1fb8719a6e3b4db298796bdeac758"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ba911901c6a47649cba6884e0f43a18"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a3ba911901c6a47649cba6884e0f43a18"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3ba911901c6a47649cba6884e0f43a18">error_on_mismatching_quantization_info</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor_1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor_2, Ts... tensors)</td></tr>
<tr class="memdesc:a3ba911901c6a47649cba6884e0f43a18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the passed tensor have different asymmetric quantized data types or different quantization info.  <a href="namespacearm__compute.xhtml#a3ba911901c6a47649cba6884e0f43a18">More...</a><br /></td></tr>
<tr class="separator:a3ba911901c6a47649cba6884e0f43a18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b360558b516e256f0af005a164c674e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename F , typename... Fs&gt; </td></tr>
<tr class="memitem:a0b360558b516e256f0af005a164c674e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0b360558b516e256f0af005a164c674e">error_on_format_not_in</a> (const char *function, const char *file, const int line, const T *object, F &amp;&amp;format, Fs &amp;&amp;...formats)</td></tr>
<tr class="memdesc:a0b360558b516e256f0af005a164c674e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Throw an error if the format of the passed tensor/multi-image does not match any of the formats provided.  <a href="namespacearm__compute.xhtml#a0b360558b516e256f0af005a164c674e">More...</a><br /></td></tr>
<tr class="separator:a0b360558b516e256f0af005a164c674e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a774ec1fdc7bd1e7973c866d13734bc21"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a774ec1fdc7bd1e7973c866d13734bc21"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a774ec1fdc7bd1e7973c866d13734bc21">error_on_data_type_not_in</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, T &amp;&amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, Ts &amp;&amp;...dts)</td></tr>
<tr class="memdesc:a774ec1fdc7bd1e7973c866d13734bc21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor info does not match any of the data types provided.  <a href="namespacearm__compute.xhtml#a774ec1fdc7bd1e7973c866d13734bc21">More...</a><br /></td></tr>
<tr class="separator:a774ec1fdc7bd1e7973c866d13734bc21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ae0ca8176fce8caa48601dc8324ca97"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a4ae0ca8176fce8caa48601dc8324ca97"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4ae0ca8176fce8caa48601dc8324ca97">error_on_data_type_not_in</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T &amp;&amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, Ts &amp;&amp;...dts)</td></tr>
<tr class="memdesc:a4ae0ca8176fce8caa48601dc8324ca97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor does not match any of the data types provided.  <a href="namespacearm__compute.xhtml#a4ae0ca8176fce8caa48601dc8324ca97">More...</a><br /></td></tr>
<tr class="separator:a4ae0ca8176fce8caa48601dc8324ca97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6c243f12870355c0b97ac813b9e7d25"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:ac6c243f12870355c0b97ac813b9e7d25"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac6c243f12870355c0b97ac813b9e7d25">error_on_data_layout_not_in</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, T &amp;&amp;<a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>, Ts &amp;&amp;...dls)</td></tr>
<tr class="memdesc:ac6c243f12870355c0b97ac813b9e7d25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data layout of the passed tensor info does not match any of the data layouts provided.  <a href="namespacearm__compute.xhtml#ac6c243f12870355c0b97ac813b9e7d25">More...</a><br /></td></tr>
<tr class="separator:ac6c243f12870355c0b97ac813b9e7d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b98606f8d98e828064496148231c0fb"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a0b98606f8d98e828064496148231c0fb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0b98606f8d98e828064496148231c0fb">error_on_data_layout_not_in</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T &amp;&amp;<a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>, Ts &amp;&amp;...dls)</td></tr>
<tr class="memdesc:a0b98606f8d98e828064496148231c0fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data layout of the passed tensor does not match any of the data layout provided.  <a href="namespacearm__compute.xhtml#a0b98606f8d98e828064496148231c0fb">More...</a><br /></td></tr>
<tr class="separator:a0b98606f8d98e828064496148231c0fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499a45039b9bba66384504843d5823d4"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a499a45039b9bba66384504843d5823d4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a499a45039b9bba66384504843d5823d4">error_on_data_type_channel_not_in</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, size_t num_channels, T &amp;&amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, Ts &amp;&amp;...dts)</td></tr>
<tr class="memdesc:a499a45039b9bba66384504843d5823d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type or the number of channels of the passed tensor info does not match any of the data types and number of channels provided.  <a href="namespacearm__compute.xhtml#a499a45039b9bba66384504843d5823d4">More...</a><br /></td></tr>
<tr class="separator:a499a45039b9bba66384504843d5823d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3137e73dbd78133d25751abd84540d8"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:ad3137e73dbd78133d25751abd84540d8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad3137e73dbd78133d25751abd84540d8">error_on_data_type_channel_not_in</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, size_t num_channels, T &amp;&amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, Ts &amp;&amp;...dts)</td></tr>
<tr class="memdesc:ad3137e73dbd78133d25751abd84540d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type or the number of channels of the passed tensor does not match any of the data types and number of channels provided.  <a href="namespacearm__compute.xhtml#ad3137e73dbd78133d25751abd84540d8">More...</a><br /></td></tr>
<tr class="separator:ad3137e73dbd78133d25751abd84540d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76433394f276fbc92390850a15bd2cae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a76433394f276fbc92390850a15bd2cae">error_on_unsupported_fp16</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, bool is_fp16_supported)</td></tr>
<tr class="memdesc:a76433394f276fbc92390850a15bd2cae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor info is FP16 and FP16 extension is not supported by the device.  <a href="namespacearm__compute.xhtml#a76433394f276fbc92390850a15bd2cae">More...</a><br /></td></tr>
<tr class="separator:a76433394f276fbc92390850a15bd2cae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea2b331c31943c1f726c9f552348c89c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aea2b331c31943c1f726c9f552348c89c">error_on_unsupported_fp16</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, bool is_fp16_supported)</td></tr>
<tr class="memdesc:aea2b331c31943c1f726c9f552348c89c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor is FP16 and FP16 extension is not supported by the device.  <a href="namespacearm__compute.xhtml#aea2b331c31943c1f726c9f552348c89c">More...</a><br /></td></tr>
<tr class="separator:aea2b331c31943c1f726c9f552348c89c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a398f32595ee55b858853d5bcdcacfef5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a398f32595ee55b858853d5bcdcacfef5">error_on_tensor_not_2d</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a398f32595ee55b858853d5bcdcacfef5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the tensor is not 2D.  <a href="namespacearm__compute.xhtml#a398f32595ee55b858853d5bcdcacfef5">More...</a><br /></td></tr>
<tr class="separator:a398f32595ee55b858853d5bcdcacfef5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa394a6ffa74616f886c889f04883663d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa394a6ffa74616f886c889f04883663d">error_on_tensor_not_2d</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:aa394a6ffa74616f886c889f04883663d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the tensor info is not 2D.  <a href="namespacearm__compute.xhtml#aa394a6ffa74616f886c889f04883663d">More...</a><br /></td></tr>
<tr class="separator:aa394a6ffa74616f886c889f04883663d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7fcde610527b8fa3d9acdf398187962"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:ae7fcde610527b8fa3d9acdf398187962"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">error_on_channel_not_in</a> (const char *function, const char *file, const int line, T cn, T &amp;&amp;channel, Ts &amp;&amp;...channels)</td></tr>
<tr class="memdesc:ae7fcde610527b8fa3d9acdf398187962"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the channel is not in channels.  <a href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">More...</a><br /></td></tr>
<tr class="separator:ae7fcde610527b8fa3d9acdf398187962"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66876161b2add31c70efb9d1ba9423cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a66876161b2add31c70efb9d1ba9423cb">error_on_channel_not_in_known_format</a> (const char *function, const char *file, const int line, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> fmt, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> cn)</td></tr>
<tr class="memdesc:a66876161b2add31c70efb9d1ba9423cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the channel is not in format.  <a href="namespacearm__compute.xhtml#a66876161b2add31c70efb9d1ba9423cb">More...</a><br /></td></tr>
<tr class="separator:a66876161b2add31c70efb9d1ba9423cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd11fc94aa2828fee0715de0297eb306"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acd11fc94aa2828fee0715de0297eb306">error_on_unconfigured_kernel</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a> *kernel)</td></tr>
<tr class="memdesc:acd11fc94aa2828fee0715de0297eb306"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the kernel is not configured.  <a href="namespacearm__compute.xhtml#acd11fc94aa2828fee0715de0297eb306">More...</a><br /></td></tr>
<tr class="separator:acd11fc94aa2828fee0715de0297eb306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f83032f49a13db29baa1af1a62e5627"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9f83032f49a13db29baa1af1a62e5627">error_on_invalid_subtensor</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;parent_shape, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coords, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a9f83032f49a13db29baa1af1a62e5627"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if if the coordinates and shape of the subtensor are within the parent tensor.  <a href="namespacearm__compute.xhtml#a9f83032f49a13db29baa1af1a62e5627">More...</a><br /></td></tr>
<tr class="separator:a9f83032f49a13db29baa1af1a62e5627"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2ab765daf6f586ceaa12575743361e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac2ab765daf6f586ceaa12575743361e7">error_on_invalid_subtensor_valid_region</a> (const char *function, const char *file, const int line, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;parent_valid_region, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region)</td></tr>
<tr class="memdesc:ac2ab765daf6f586ceaa12575743361e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the valid region of a subtensor is not inside the valid region of the parent tensor.  <a href="namespacearm__compute.xhtml#ac2ab765daf6f586ceaa12575743361e7">More...</a><br /></td></tr>
<tr class="separator:ac2ab765daf6f586ceaa12575743361e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64c17a5a42d2499a1626222ff9753b4d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">build_information</a> ()</td></tr>
<tr class="memdesc:a64c17a5a42d2499a1626222ff9753b4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the <a class="el" href="namespacearm__compute.xhtml" title="Copyright (c) 2017-2024 Arm Limited.">arm_compute</a> library build information.  <a href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">More...</a><br /></td></tr>
<tr class="separator:a64c17a5a42d2499a1626222ff9753b4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70b8de3a0b147a476cabb07b8707d7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">swap</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</td></tr>
<tr class="separator:ae70b8de3a0b147a476cabb07b8707d7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6219039d80bc268a78900b9edb6381f2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6219039d80bc268a78900b9edb6381f2">operator==</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</td></tr>
<tr class="separator:a6219039d80bc268a78900b9edb6381f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3b7128bf77dd12c85eed944fe5b3d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe3b7128bf77dd12c85eed944fe5b3d4">convert_window_coord_to_position</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;w, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:afe3b7128bf77dd12c85eed944fe5b3d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an offset in window steps into absolute coordinates.  <a href="namespacearm__compute.xhtml#afe3b7128bf77dd12c85eed944fe5b3d4">More...</a><br /></td></tr>
<tr class="separator:afe3b7128bf77dd12c85eed944fe5b3d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf5f536bf7ec25ff83b912badcf61405"><td class="memTemplParams" colspan="2">template&lt;typename L &gt; </td></tr>
<tr class="memitem:aaf5f536bf7ec25ff83b912badcf61405"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window_iterator.xhtml">WindowIterator</a>&lt; L &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaf5f536bf7ec25ff83b912badcf61405">create_window_iterator</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;w, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;start, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;end, L &amp;&amp;lambda_function)</td></tr>
<tr class="memdesc:aaf5f536bf7ec25ff83b912badcf61405"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a <a class="el" href="classarm__compute_1_1_window_iterator.xhtml" title="Iterate over a portion of a Window.">WindowIterator</a> object.  <a href="namespacearm__compute.xhtml#aaf5f536bf7ec25ff83b912badcf61405">More...</a><br /></td></tr>
<tr class="separator:aaf5f536bf7ec25ff83b912badcf61405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a834b76c7d21af898f39def3b787d7530"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a834b76c7d21af898f39def3b787d7530">data_layout_from_name</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)</td></tr>
<tr class="memdesc:a834b76c7d21af898f39def3b787d7530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>.  <a href="namespacearm__compute.xhtml#a834b76c7d21af898f39def3b787d7530">More...</a><br /></td></tr>
<tr class="separator:a834b76c7d21af898f39def3b787d7530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c4a3d0e80938810dd7b22b16785f5c8"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9c4a3d0e80938810dd7b22b16785f5c8">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> &amp;data_layout)</td></tr>
<tr class="memdesc:a9c4a3d0e80938810dd7b22b16785f5c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Stream operator for <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>.  <a href="namespacearm__compute.xhtml#a9c4a3d0e80938810dd7b22b16785f5c8">More...</a><br /></td></tr>
<tr class="separator:a9c4a3d0e80938810dd7b22b16785f5c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a419153497f83b7db0c19112371b10a3f"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; cl::Context, cl::Device, cl_int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">create_opencl_context_and_device</a> (<a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type)</td></tr>
<tr class="memdesc:a419153497f83b7db0c19112371b10a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function creates an OpenCL context and a device.  <a href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">More...</a><br /></td></tr>
<tr class="separator:a419153497f83b7db0c19112371b10a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4cf1da2467d59160492d2095c66ea26"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af4cf1da2467d59160492d2095c66ea26">schedule_kernel_on_ctx</a> (<a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a> *ctx, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> *kernel, bool flush=true)</td></tr>
<tr class="memdesc:af4cf1da2467d59160492d2095c66ea26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedules a kernel using the context if not nullptr else uses the legacy scheduling flow.  <a href="namespacearm__compute.xhtml#af4cf1da2467d59160492d2095c66ea26">More...</a><br /></td></tr>
<tr class="separator:af4cf1da2467d59160492d2095c66ea26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50617012493fc796beb28d94e4da33c7"><td class="memItemLeft" align="right" valign="top">cl::Platform&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a50617012493fc796beb28d94e4da33c7">select_preferable_platform</a> (<a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type)</td></tr>
<tr class="memdesc:a50617012493fc796beb28d94e4da33c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function selects the OpenCL platform based on the backend type.  <a href="namespacearm__compute.xhtml#a50617012493fc796beb28d94e4da33c7">More...</a><br /></td></tr>
<tr class="separator:a50617012493fc796beb28d94e4da33c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9c9e5cad47e8136f7136e94cec8b812"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa9c9e5cad47e8136f7136e94cec8b812">tuner_mode_from_name</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)</td></tr>
<tr class="memdesc:aa9c9e5cad47e8136f7136e94cec8b812"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>.  <a href="namespacearm__compute.xhtml#aa9c9e5cad47e8136f7136e94cec8b812">More...</a><br /></td></tr>
<tr class="separator:aa9c9e5cad47e8136f7136e94cec8b812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab567edaca959e3f5013abf442b3235a2"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab567edaca959e3f5013abf442b3235a2">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> &amp;tuner_mode)</td></tr>
<tr class="memdesc:ab567edaca959e3f5013abf442b3235a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Stream operator for <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>.  <a href="namespacearm__compute.xhtml#ab567edaca959e3f5013abf442b3235a2">More...</a><br /></td></tr>
<tr class="separator:ab567edaca959e3f5013abf442b3235a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a3405e0e787bc6d6298ff7a2d52e5e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3a3405e0e787bc6d6298ff7a2d52e5e4">save_program_cache_to_file</a> (const std::string &amp;filename=&quot;cache.bin&quot;)</td></tr>
<tr class="memdesc:a3a3405e0e787bc6d6298ff7a2d52e5e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function saves opencl kernels library to a file.  <a href="namespacearm__compute.xhtml#a3a3405e0e787bc6d6298ff7a2d52e5e4">More...</a><br /></td></tr>
<tr class="separator:a3a3405e0e787bc6d6298ff7a2d52e5e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7ed63ed26f02dfeddba85858fad6ada"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac7ed63ed26f02dfeddba85858fad6ada">restore_program_cache_from_file</a> (const std::string &amp;filename=&quot;cache.bin&quot;)</td></tr>
<tr class="memdesc:ac7ed63ed26f02dfeddba85858fad6ada"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function loads prebuilt opencl kernels from a file.  <a href="namespacearm__compute.xhtml#ac7ed63ed26f02dfeddba85858fad6ada">More...</a><br /></td></tr>
<tr class="separator:ac7ed63ed26f02dfeddba85858fad6ada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6916ea927eec95c074b917eafc5a667"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_context.xhtml">IContext</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af6916ea927eec95c074b917eafc5a667">get_internal</a> (<a class="el" href="_acl_types_8h.xhtml#ac624458ca531df9ccff14d2316d6dd28">AclContext</a> ctx)</td></tr>
<tr class="memdesc:af6916ea927eec95c074b917eafc5a667"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract internal representation of a Context.  <a href="namespacearm__compute.xhtml#af6916ea927eec95c074b917eafc5a667">More...</a><br /></td></tr>
<tr class="separator:af6916ea927eec95c074b917eafc5a667"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39b4bce1b01af39c5449ba4e482fc03d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml">IOperator</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a39b4bce1b01af39c5449ba4e482fc03d">get_internal</a> (<a class="el" href="_acl_types_8h.xhtml#adefdd489a321a9c39178951d57658c60">AclOperator</a> op)</td></tr>
<tr class="memdesc:a39b4bce1b01af39c5449ba4e482fc03d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract internal representation of an Operator.  <a href="namespacearm__compute.xhtml#a39b4bce1b01af39c5449ba4e482fc03d">More...</a><br /></td></tr>
<tr class="separator:a39b4bce1b01af39c5449ba4e482fc03d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3596e8ed69b78eb6e7e1d9533b6a70"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_queue.xhtml">IQueue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe3596e8ed69b78eb6e7e1d9533b6a70">get_internal</a> (<a class="el" href="_acl_types_8h.xhtml#ad100d0640d4dff954977840f32e7cfbe">AclQueue</a> queue)</td></tr>
<tr class="memdesc:afe3596e8ed69b78eb6e7e1d9533b6a70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract internal representation of a Queue.  <a href="namespacearm__compute.xhtml#afe3596e8ed69b78eb6e7e1d9533b6a70">More...</a><br /></td></tr>
<tr class="separator:afe3596e8ed69b78eb6e7e1d9533b6a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a338b4f628eac701aac98ebccb0c05ddb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_v2.xhtml">ITensorV2</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a338b4f628eac701aac98ebccb0c05ddb">get_internal</a> (<a class="el" href="_acl_types_8h.xhtml#a90ea96c40064aa67e45589a99db23e96">AclTensor</a> <a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a338b4f628eac701aac98ebccb0c05ddb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract internal representation of a <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a>.  <a href="namespacearm__compute.xhtml#a338b4f628eac701aac98ebccb0c05ddb">More...</a><br /></td></tr>
<tr class="separator:a338b4f628eac701aac98ebccb0c05ddb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce0f88ac9f61280ec927f32366a2593"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_pack.xhtml">TensorPack</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9ce0f88ac9f61280ec927f32366a2593">get_internal</a> (<a class="el" href="_acl_types_8h.xhtml#adc3017359ff84d03850580266cb18256">AclTensorPack</a> pack)</td></tr>
<tr class="memdesc:a9ce0f88ac9f61280ec927f32366a2593"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract internal representation of a TensoPack.  <a href="namespacearm__compute.xhtml#a9ce0f88ac9f61280ec927f32366a2593">More...</a><br /></td></tr>
<tr class="separator:a9ce0f88ac9f61280ec927f32366a2593"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abedaa5482ac9390bc612c6f4891c4d80"><td class="memItemLeft" align="right" valign="top">cl::Image2D&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abedaa5482ac9390bc612c6f4891c4d80">create_image2d_from_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a> image_type)</td></tr>
<tr class="memdesc:abedaa5482ac9390bc612c6f4891c4d80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a cl::Image2D object from a tensor.  <a href="namespacearm__compute.xhtml#abedaa5482ac9390bc612c6f4891c4d80">More...</a><br /></td></tr>
<tr class="separator:abedaa5482ac9390bc612c6f4891c4d80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9cd3d5db8015683dda5f39efa60e553"><td class="memItemLeft" align="right" valign="top">cl::Image2D&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">create_image2d_from_buffer</a> (const cl::Context &amp;ctx, const cl::Buffer &amp;buffer, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape2d, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type, size_t image_row_pitch, <a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a> image_type)</td></tr>
<tr class="memdesc:ae9cd3d5db8015683dda5f39efa60e553"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a cl::Image2D object from an OpenCL buffer.  <a href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">More...</a><br /></td></tr>
<tr class="separator:ae9cd3d5db8015683dda5f39efa60e553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bbad0e81db8c98c3e6bf6f9aa09c785"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5bbad0e81db8c98c3e6bf6f9aa09c785">handle_cl_error</a> (const std::string &amp;function_name, cl_int error_code)</td></tr>
<tr class="memdesc:a5bbad0e81db8c98c3e6bf6f9aa09c785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for CL error code and throw exception accordingly.  <a href="namespacearm__compute.xhtml#a5bbad0e81db8c98c3e6bf6f9aa09c785">More...</a><br /></td></tr>
<tr class="separator:a5bbad0e81db8c98c3e6bf6f9aa09c785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c8dc3902d1a2de5b20aa249fb483eea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5c8dc3902d1a2de5b20aa249fb483eea">error_on_unsupported_int64_base_atomics</a> (const char *function, const char *file, const int line)</td></tr>
<tr class="memdesc:a5c8dc3902d1a2de5b20aa249fb483eea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if int64_base_atomics extension is not supported by the device.  <a href="namespacearm__compute.xhtml#a5c8dc3902d1a2de5b20aa249fb483eea">More...</a><br /></td></tr>
<tr class="separator:a5c8dc3902d1a2de5b20aa249fb483eea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a111c697d8e429d9ad91fdb097ebb7f42"><td class="memItemLeft" align="right" valign="top">cl::NDRange&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a111c697d8e429d9ad91fdb097ebb7f42">get_default_lws_for_type</a> (<a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a> kernel_type, cl::NDRange gws)</td></tr>
<tr class="separator:a111c697d8e429d9ad91fdb097ebb7f42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e51ab3789678d3e0b0b72178dd6c4c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6e51ab3789678d3e0b0b72178dd6c4c6">enqueue</a> (cl::CommandQueue &amp;queue, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const cl::NDRange &amp;lws_hint=<a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().default_ndrange(), bool use_dummy_work_items=false)</td></tr>
<tr class="memdesc:a6e51ab3789678d3e0b0b72178dd6c4c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the kernel to the command queue with the given window.  <a href="namespacearm__compute.xhtml#a6e51ab3789678d3e0b0b72178dd6c4c6">More...</a><br /></td></tr>
<tr class="separator:a6e51ab3789678d3e0b0b72178dd6c4c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a099c79a1240bbbd604928852fd806d05"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a099c79a1240bbbd604928852fd806d05">error_on_unsupported_cpu_fp16</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a099c79a1240bbbd604928852fd806d05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor info is FP16 and FP16 support is not compiled in.  <a href="namespacearm__compute.xhtml#a099c79a1240bbbd604928852fd806d05">More...</a><br /></td></tr>
<tr class="separator:a099c79a1240bbbd604928852fd806d05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bdbea98a86ef8fc1e2d0126c56b9809"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5bdbea98a86ef8fc1e2d0126c56b9809">error_on_unsupported_cpu_bf16</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a5bdbea98a86ef8fc1e2d0126c56b9809"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor info is BFLOAT16 and BFLOAT16 support is not compiled in.  <a href="namespacearm__compute.xhtml#a5bdbea98a86ef8fc1e2d0126c56b9809">More...</a><br /></td></tr>
<tr class="separator:a5bdbea98a86ef8fc1e2d0126c56b9809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9be320f14c43ee2b2112d4c666a911d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad9be320f14c43ee2b2112d4c666a911d">error_on_unsupported_cpu_fp16</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:ad9be320f14c43ee2b2112d4c666a911d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor is FP16 and FP16 support is not compiled in.  <a href="namespacearm__compute.xhtml#ad9be320f14c43ee2b2112d4c666a911d">More...</a><br /></td></tr>
<tr class="separator:ad9be320f14c43ee2b2112d4c666a911d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94bc3f0306f4faa4b7fbced4bd72dcc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94bc3f0306f4faa4b7fbced4bd72dcc9">error_on_unsupported_cpu_bf16</a> (const char *function, const char *file, const int line, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a94bc3f0306f4faa4b7fbced4bd72dcc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an error if the data type of the passed tensor is BFLOAT16 and BFLOAT16 support is not compiled in.  <a href="namespacearm__compute.xhtml#a94bc3f0306f4faa4b7fbced4bd72dcc9">More...</a><br /></td></tr>
<tr class="separator:a94bc3f0306f4faa4b7fbced4bd72dcc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c28ce239ce7092298245ce59694917"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, int num_channels, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type, <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:a37c28ce239ce7092298245ce59694917"><td class="mdescLeft">&#160;</td><td class="mdescRight">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment is empty.  <a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">More...</a><br /></td></tr>
<tr class="separator:a37c28ce239ce7092298245ce59694917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0f82917b865469daeed6feb6d183315"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad0f82917b865469daeed6feb6d183315">auto_init_if_empty</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info_sink, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info_source)</td></tr>
<tr class="memdesc:ad0f82917b865469daeed6feb6d183315"><td class="mdescLeft">&#160;</td><td class="mdescRight">Auto initialize the tensor info using another tensor info.  <a href="namespacearm__compute.xhtml#ad0f82917b865469daeed6feb6d183315">More...</a><br /></td></tr>
<tr class="separator:ad0f82917b865469daeed6feb6d183315"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bd175f94838df9aed06d32452df92d3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6bd175f94838df9aed06d32452df92d3">set_shape_if_empty</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a6bd175f94838df9aed06d32452df92d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the shape to the specified value if the current assignment is empty.  <a href="namespacearm__compute.xhtml#a6bd175f94838df9aed06d32452df92d3">More...</a><br /></td></tr>
<tr class="separator:a6bd175f94838df9aed06d32452df92d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a872a3970fd667bb8006f876539eb9277"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a872a3970fd667bb8006f876539eb9277">set_format_if_unknown</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a872a3970fd667bb8006f876539eb9277"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format, data type and number of channels to the specified value if the current data type is unknown.  <a href="namespacearm__compute.xhtml#a872a3970fd667bb8006f876539eb9277">More...</a><br /></td></tr>
<tr class="separator:a872a3970fd667bb8006f876539eb9277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac358f7701e83eb2bda7ae5b9f03fd7fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac358f7701e83eb2bda7ae5b9f03fd7fe">set_data_type_if_unknown</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ac358f7701e83eb2bda7ae5b9f03fd7fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data type and number of channels to the specified value if the current data type is unknown.  <a href="namespacearm__compute.xhtml#ac358f7701e83eb2bda7ae5b9f03fd7fe">More...</a><br /></td></tr>
<tr class="separator:ac358f7701e83eb2bda7ae5b9f03fd7fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf58d423103fa70e5f30b2d0f4824b8f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abf58d423103fa70e5f30b2d0f4824b8f">set_data_layout_if_unknown</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout)</td></tr>
<tr class="memdesc:abf58d423103fa70e5f30b2d0f4824b8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data layout to the specified value if the current data layout is unknown.  <a href="namespacearm__compute.xhtml#abf58d423103fa70e5f30b2d0f4824b8f">More...</a><br /></td></tr>
<tr class="separator:abf58d423103fa70e5f30b2d0f4824b8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5fa85dd8120143da5d352865be635de"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa5fa85dd8120143da5d352865be635de">set_quantization_info_if_empty</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info)</td></tr>
<tr class="memdesc:aa5fa85dd8120143da5d352865be635de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the quantization info to the specified value if the current quantization info is empty and the data type of asymmetric quantized type.  <a href="namespacearm__compute.xhtml#aa5fa85dd8120143da5d352865be635de">More...</a><br /></td></tr>
<tr class="separator:aa5fa85dd8120143da5d352865be635de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324d709e8fb5568ada56ba4999dfb2f1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a> (int <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="separator:a324d709e8fb5568ada56ba4999dfb2f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4e55ae65c8e20e37a1ecb92f83d2266"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:ad4e55ae65c8e20e37a1ecb92f83d2266"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad4e55ae65c8e20e37a1ecb92f83d2266">manage_workspace</a> (const <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> &amp;mem_reqs, <a class="el" href="classarm__compute_1_1_memory_group.xhtml">MemoryGroup</a> &amp;mgroup, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;run_pack)</td></tr>
<tr class="separator:ad4e55ae65c8e20e37a1ecb92f83d2266"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fd2b7915607568036f04d45de70f1d2"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a4fd2b7915607568036f04d45de70f1d2"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4fd2b7915607568036f04d45de70f1d2">manage_workspace</a> (const <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> &amp;mem_reqs, <a class="el" href="classarm__compute_1_1_memory_group.xhtml">MemoryGroup</a> &amp;mgroup, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;run_pack, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;prep_pack)</td></tr>
<tr class="separator:a4fd2b7915607568036f04d45de70f1d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31b0c6ed009adf67db3e7129c551c9d3"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a31b0c6ed009adf67db3e7129c551c9d3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a31b0c6ed009adf67db3e7129c551c9d3">release_prepare_tensors</a> (<a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt; &amp;workspace, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;prep_pack)</td></tr>
<tr class="separator:a31b0c6ed009adf67db3e7129c551c9d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a728aef1d0cf2e6f771ece1cf8d22cf"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a4a728aef1d0cf2e6f771ece1cf8d22cf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4a728aef1d0cf2e6f771ece1cf8d22cf">release_temporaries</a> (const <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> &amp;mem_reqs, <a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt; &amp;workspace)</td></tr>
<tr class="memdesc:a4a728aef1d0cf2e6f771ece1cf8d22cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility function to release tensors with lifetime marked as Prepare.  <a href="namespacearm__compute.xhtml#a4a728aef1d0cf2e6f771ece1cf8d22cf">More...</a><br /></td></tr>
<tr class="separator:a4a728aef1d0cf2e6f771ece1cf8d22cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae76431f34048289454a9cb6dc66d7c6b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae76431f34048289454a9cb6dc66d7c6b">get_normalization_dimension_index</a> (<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout, const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae76431f34048289454a9cb6dc66d7c6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the normalization dimension index for a given normalization type.  <a href="namespacearm__compute.xhtml#ae76431f34048289454a9cb6dc66d7c6b">More...</a><br /></td></tr>
<tr class="separator:ae76431f34048289454a9cb6dc66d7c6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d64d7388c73c6785a20faf58475beb9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7d64d7388c73c6785a20faf58475beb9">has_holes</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a7d64d7388c73c6785a20faf58475beb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the tensor has any holes.  <a href="namespacearm__compute.xhtml#a7d64d7388c73c6785a20faf58475beb9">More...</a><br /></td></tr>
<tr class="separator:a7d64d7388c73c6785a20faf58475beb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5986c8a29ac4fae2e1ac78bf446abd5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae5986c8a29ac4fae2e1ac78bf446abd5">has_holes</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, size_t dimension)</td></tr>
<tr class="memdesc:ae5986c8a29ac4fae2e1ac78bf446abd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the tensor has any holes.  <a href="namespacearm__compute.xhtml#ae5986c8a29ac4fae2e1ac78bf446abd5">More...</a><br /></td></tr>
<tr class="separator:ae5986c8a29ac4fae2e1ac78bf446abd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35178800b82e07a49da5a81cdeda9a0c"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a35178800b82e07a49da5a81cdeda9a0c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a35178800b82e07a49da5a81cdeda9a0c">compute_strides</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, T stride_x, Ts &amp;&amp;...fixed_strides)</td></tr>
<tr class="memdesc:a35178800b82e07a49da5a81cdeda9a0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a strides object based on the provided strides and the tensor dimensions.  <a href="namespacearm__compute.xhtml#a35178800b82e07a49da5a81cdeda9a0c">More...</a><br /></td></tr>
<tr class="separator:a35178800b82e07a49da5a81cdeda9a0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c35748731709927597cb5a2c227e682"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a8c35748731709927597cb5a2c227e682"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8c35748731709927597cb5a2c227e682">compute_strides</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a8c35748731709927597cb5a2c227e682"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a strides object based on the tensor dimensions.  <a href="namespacearm__compute.xhtml#a8c35748731709927597cb5a2c227e682">More...</a><br /></td></tr>
<tr class="separator:a8c35748731709927597cb5a2c227e682"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c3d8e17b509d0d18cc7c94b7e0a993d"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7c3d8e17b509d0d18cc7c94b7e0a993d">get_next_power_two</a> (unsigned int x)</td></tr>
<tr class="memdesc:a7c3d8e17b509d0d18cc7c94b7e0a993d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given an integer value, this function returns the next power of two.  <a href="namespacearm__compute.xhtml#a7c3d8e17b509d0d18cc7c94b7e0a993d">More...</a><br /></td></tr>
<tr class="separator:a7c3d8e17b509d0d18cc7c94b7e0a993d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa84c2eae36ca4b68fa36c226df6f94e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps, bool skip_border, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size)</td></tr>
<tr class="separator:aa84c2eae36ca4b68fa36c226df6f94e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73c6c590476be3900b9343db16e7e1b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a73c6c590476be3900b9343db16e7e1b2">calculate_max_window</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps, bool skip_border, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size)</td></tr>
<tr class="separator:a73c6c590476be3900b9343db16e7e1b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af471610ed0690e68f555994b135133ba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af471610ed0690e68f555994b135133ba">calculate_max_enlarged_window</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size)</td></tr>
<tr class="separator:af471610ed0690e68f555994b135133ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af03817e5ecefc785137e054e6b7e8f0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af03817e5ecefc785137e054e6b7e8f0e">calculate_max_window_horizontal</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps, bool skip_border, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size)</td></tr>
<tr class="separator:af03817e5ecefc785137e054e6b7e8f0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8efcd2283ad0db0f90c88e146a27f01d"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>, size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8efcd2283ad0db0f90c88e146a27f01d">calculate_squashed_or_max_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;src0, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;src1)</td></tr>
<tr class="separator:a8efcd2283ad0db0f90c88e146a27f01d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3120cfadcaae4fe13c36f862ece7a0fc"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>, size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3120cfadcaae4fe13c36f862ece7a0fc">calculate_squashed_or_max_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;src)</td></tr>
<tr class="separator:a3120cfadcaae4fe13c36f862ece7a0fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2a92cae51d2734a65676052adb33c22"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:ac2a92cae51d2734a65676052adb33c22"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac2a92cae51d2734a65676052adb33c22">update_window_and_padding</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win, Ts &amp;&amp;...patterns)</td></tr>
<tr class="memdesc:ac2a92cae51d2734a65676052adb33c22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update window and padding size for each of the access patterns.  <a href="namespacearm__compute.xhtml#ac2a92cae51d2734a65676052adb33c22">More...</a><br /></td></tr>
<tr class="separator:ac2a92cae51d2734a65676052adb33c22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a133621090cfb0f151340c6e04bd7bcc8"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a133621090cfb0f151340c6e04bd7bcc8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a133621090cfb0f151340c6e04bd7bcc8">intersect_valid_regions</a> (const Ts &amp;...regions)</td></tr>
<tr class="memdesc:a133621090cfb0f151340c6e04bd7bcc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Intersect multiple valid regions.  <a href="namespacearm__compute.xhtml#a133621090cfb0f151340c6e04bd7bcc8">More...</a><br /></td></tr>
<tr class="separator:a133621090cfb0f151340c6e04bd7bcc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93cc303c8ae098d264f07d37890412de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a93cc303c8ae098d264f07d37890412de">colorconvert_rgb_to_rgbx</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a93cc303c8ae098d264f07d37890412de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert RGB to RGBX.  <a href="namespacearm__compute.xhtml#a93cc303c8ae098d264f07d37890412de">More...</a><br /></td></tr>
<tr class="separator:a93cc303c8ae098d264f07d37890412de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1d4cf707dec05e3ff1d63d4ce8065ca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa1d4cf707dec05e3ff1d63d4ce8065ca">colorconvert_rgb_to_u8</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:aa1d4cf707dec05e3ff1d63d4ce8065ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert RGB to U8.  <a href="namespacearm__compute.xhtml#aa1d4cf707dec05e3ff1d63d4ce8065ca">More...</a><br /></td></tr>
<tr class="separator:aa1d4cf707dec05e3ff1d63d4ce8065ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf7451c0d0f8a4b1cfbb60d7531a43aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acf7451c0d0f8a4b1cfbb60d7531a43aa">colorconvert_rgbx_to_rgb</a> (const void *input, void *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:acf7451c0d0f8a4b1cfbb60d7531a43aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert RGBX to RGB.  <a href="namespacearm__compute.xhtml#acf7451c0d0f8a4b1cfbb60d7531a43aa">More...</a><br /></td></tr>
<tr class="separator:acf7451c0d0f8a4b1cfbb60d7531a43aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c22c0d3494660b72b4fc04fec76f92d"><td class="memTemplParams" colspan="2">template&lt;bool yuyv, bool alpha&gt; </td></tr>
<tr class="memitem:a3c22c0d3494660b72b4fc04fec76f92d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c22c0d3494660b72b4fc04fec76f92d">colorconvert_yuyv_to_rgb</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a3c22c0d3494660b72b4fc04fec76f92d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert YUYV to RGB.  <a href="namespacearm__compute.xhtml#a3c22c0d3494660b72b4fc04fec76f92d">More...</a><br /></td></tr>
<tr class="separator:a3c22c0d3494660b72b4fc04fec76f92d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6a44e412bccc0705a720708b0692218"><td class="memTemplParams" colspan="2">template&lt;bool uv, bool alpha&gt; </td></tr>
<tr class="memitem:ae6a44e412bccc0705a720708b0692218"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae6a44e412bccc0705a720708b0692218">colorconvert_nv12_to_rgb</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:ae6a44e412bccc0705a720708b0692218"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert NV12 to RGB.  <a href="namespacearm__compute.xhtml#ae6a44e412bccc0705a720708b0692218">More...</a><br /></td></tr>
<tr class="separator:ae6a44e412bccc0705a720708b0692218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e42fac1baa264b033ac430b63ebd145"><td class="memTemplParams" colspan="2">template&lt;bool alpha&gt; </td></tr>
<tr class="memitem:a6e42fac1baa264b033ac430b63ebd145"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6e42fac1baa264b033ac430b63ebd145">colorconvert_iyuv_to_rgb</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a6e42fac1baa264b033ac430b63ebd145"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert IYUV to RGB.  <a href="namespacearm__compute.xhtml#a6e42fac1baa264b033ac430b63ebd145">More...</a><br /></td></tr>
<tr class="separator:a6e42fac1baa264b033ac430b63ebd145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ee13904a3f5ba84b28cb53d956021d7"><td class="memTemplParams" colspan="2">template&lt;bool yuyv&gt; </td></tr>
<tr class="memitem:a8ee13904a3f5ba84b28cb53d956021d7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8ee13904a3f5ba84b28cb53d956021d7">colorconvert_yuyv_to_nv12</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a8ee13904a3f5ba84b28cb53d956021d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert YUYV to NV12.  <a href="namespacearm__compute.xhtml#a8ee13904a3f5ba84b28cb53d956021d7">More...</a><br /></td></tr>
<tr class="separator:a8ee13904a3f5ba84b28cb53d956021d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2be1325decaa34a8a1199af177148c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af2be1325decaa34a8a1199af177148c6">colorconvert_iyuv_to_nv12</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:af2be1325decaa34a8a1199af177148c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert IYUV to NV12.  <a href="namespacearm__compute.xhtml#af2be1325decaa34a8a1199af177148c6">More...</a><br /></td></tr>
<tr class="separator:af2be1325decaa34a8a1199af177148c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a199d36780fbb4a70168f290480673650"><td class="memTemplParams" colspan="2">template&lt;bool uv&gt; </td></tr>
<tr class="memitem:a199d36780fbb4a70168f290480673650"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a199d36780fbb4a70168f290480673650">colorconvert_nv12_to_iyuv</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a199d36780fbb4a70168f290480673650"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert NV12 to IYUV.  <a href="namespacearm__compute.xhtml#a199d36780fbb4a70168f290480673650">More...</a><br /></td></tr>
<tr class="separator:a199d36780fbb4a70168f290480673650"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae43e8f0463c0289169025c3041688d36"><td class="memTemplParams" colspan="2">template&lt;bool yuyv&gt; </td></tr>
<tr class="memitem:ae43e8f0463c0289169025c3041688d36"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae43e8f0463c0289169025c3041688d36">colorconvert_yuyv_to_iyuv</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:ae43e8f0463c0289169025c3041688d36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert YUYV to IYUV.  <a href="namespacearm__compute.xhtml#ae43e8f0463c0289169025c3041688d36">More...</a><br /></td></tr>
<tr class="separator:ae43e8f0463c0289169025c3041688d36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a587a54c85dcc72838b8f4b5575ebafe4"><td class="memTemplParams" colspan="2">template&lt;bool uv&gt; </td></tr>
<tr class="memitem:a587a54c85dcc72838b8f4b5575ebafe4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a587a54c85dcc72838b8f4b5575ebafe4">colorconvert_nv12_to_yuv4</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a587a54c85dcc72838b8f4b5575ebafe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert NV12 to YUV4.  <a href="namespacearm__compute.xhtml#a587a54c85dcc72838b8f4b5575ebafe4">More...</a><br /></td></tr>
<tr class="separator:a587a54c85dcc72838b8f4b5575ebafe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08e9d88293a5cef787bb324c2dc0a6bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a08e9d88293a5cef787bb324c2dc0a6bf">colorconvert_iyuv_to_yuv4</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a08e9d88293a5cef787bb324c2dc0a6bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert IYUV to YUV4.  <a href="namespacearm__compute.xhtml#a08e9d88293a5cef787bb324c2dc0a6bf">More...</a><br /></td></tr>
<tr class="separator:a08e9d88293a5cef787bb324c2dc0a6bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14fd899b732509e245976b9967b8931d"><td class="memTemplParams" colspan="2">template&lt;bool alpha&gt; </td></tr>
<tr class="memitem:a14fd899b732509e245976b9967b8931d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a14fd899b732509e245976b9967b8931d">colorconvert_rgb_to_nv12</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a14fd899b732509e245976b9967b8931d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert RGB to NV12.  <a href="namespacearm__compute.xhtml#a14fd899b732509e245976b9967b8931d">More...</a><br /></td></tr>
<tr class="separator:a14fd899b732509e245976b9967b8931d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b7a8e217ba7aad821fdeaab86bad53"><td class="memTemplParams" colspan="2">template&lt;bool alpha&gt; </td></tr>
<tr class="memitem:a49b7a8e217ba7aad821fdeaab86bad53"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a49b7a8e217ba7aad821fdeaab86bad53">colorconvert_rgb_to_iyuv</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a49b7a8e217ba7aad821fdeaab86bad53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert RGB to IYUV.  <a href="namespacearm__compute.xhtml#a49b7a8e217ba7aad821fdeaab86bad53">More...</a><br /></td></tr>
<tr class="separator:a49b7a8e217ba7aad821fdeaab86bad53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad304c0b0a72ed3f65c24fa69ab3cd53e"><td class="memTemplParams" colspan="2">template&lt;bool alpha&gt; </td></tr>
<tr class="memitem:ad304c0b0a72ed3f65c24fa69ab3cd53e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad304c0b0a72ed3f65c24fa69ab3cd53e">colorconvert_rgb_to_yuv4</a> (const void *__restrict input, void *__restrict output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:ad304c0b0a72ed3f65c24fa69ab3cd53e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert RGB to YUV4.  <a href="namespacearm__compute.xhtml#ad304c0b0a72ed3f65c24fa69ab3cd53e">More...</a><br /></td></tr>
<tr class="separator:ad304c0b0a72ed3f65c24fa69ab3cd53e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41a6fe8f923746f66337e606961ca43d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a41a6fe8f923746f66337e606961ca43d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a41a6fe8f923746f66337e606961ca43d">run_reverse</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *axis, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, bool use_inverted_axis)</td></tr>
<tr class="separator:a41a6fe8f923746f66337e606961ca43d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7efaafdf526cf144e7f1f24521074d1"><td class="memTemplParams" colspan="2">template&lt;RoundingPolicy round_policy = RoundingPolicy::TO_ZERO&gt; </td></tr>
<tr class="memitem:ac7efaafdf526cf144e7f1f24521074d1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">vmlaq_qasymm8</a> (<a class="el" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> vd, float32x4_t vs, float32x4_t vo)</td></tr>
<tr class="memdesc:ac7efaafdf526cf144e7f1f24521074d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a multiply-accumulate on all 16 components of a QASYMM8 vector.  <a href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">More...</a><br /></td></tr>
<tr class="separator:ac7efaafdf526cf144e7f1f24521074d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa34bc4940191b8b940b77fe0e27c7c7b"><td class="memTemplParams" colspan="2">template&lt;RoundingPolicy round_policy = RoundingPolicy::TO_ZERO&gt; </td></tr>
<tr class="memitem:aa34bc4940191b8b940b77fe0e27c7c7b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">vmlaq_qasymm8_signed</a> (<a class="el" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> vd, float32x4_t vs, float32x4_t vo)</td></tr>
<tr class="memdesc:aa34bc4940191b8b940b77fe0e27c7c7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a multiply-accumulate on all 16 components of a QASYMM8_SIGNED vector.  <a href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">More...</a><br /></td></tr>
<tr class="separator:aa34bc4940191b8b940b77fe0e27c7c7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3479355ca4b6fb389a3aae4da266bd0e"><td class="memItemLeft" align="right" valign="top">uint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">finalize_quantization</a> (int32x4x4_t &amp;in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int32x4_t result_offset_after_shift_s32, uint8x16_t min_u8, uint8x16_t max_u8, bool is_bounded_relu)</td></tr>
<tr class="memdesc:a3479355ca4b6fb389a3aae4da266bd0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on 16 elements.  <a href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">More...</a><br /></td></tr>
<tr class="separator:a3479355ca4b6fb389a3aae4da266bd0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85083e9ceeceacbf1afe9dca946c0d7a"><td class="memItemLeft" align="right" valign="top">int8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a85083e9ceeceacbf1afe9dca946c0d7a">finalize_quantization</a> (int32x4x4_t &amp;in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int32x4_t result_offset_after_shift_s32, int8x16_t min_s8, int8x16_t max_s8, bool is_bounded_relu)</td></tr>
<tr class="memdesc:a85083e9ceeceacbf1afe9dca946c0d7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on 16 elements.  <a href="namespacearm__compute.xhtml#a85083e9ceeceacbf1afe9dca946c0d7a">More...</a><br /></td></tr>
<tr class="separator:a85083e9ceeceacbf1afe9dca946c0d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45cafa8ee6ec21f435a6a9af190e40a"><td class="memItemLeft" align="right" valign="top">int8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac45cafa8ee6ec21f435a6a9af190e40a">finalize_quantization_symm</a> (int32x4x4_t &amp;in_s32, const int32x4x4_t &amp;result_fixedpoint_multiplier, const int32x4x4_t &amp;result_shift, const int32x4_t &amp;result_offset_after_shift_s32, const int8x16_t &amp;min_s8, const int8x16_t &amp;max_s8, const bool is_bounded_relu)</td></tr>
<tr class="memdesc:ac45cafa8ee6ec21f435a6a9af190e40a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on 16 elements for symmetric quantization.  <a href="namespacearm__compute.xhtml#ac45cafa8ee6ec21f435a6a9af190e40a">More...</a><br /></td></tr>
<tr class="separator:ac45cafa8ee6ec21f435a6a9af190e40a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9dd002faea6691d344f60563f8b499"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9a9dd002faea6691d344f60563f8b499">finalize_quantization</a> (int32_t in_value, int result_fixedpoint_multiplier, int32_t result_shift, int32_t result_offset_after_shift_s32, uint8_t min_u8, uint8_t max_u8, bool is_bounded_relu)</td></tr>
<tr class="memdesc:a9a9dd002faea6691d344f60563f8b499"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on single element.  <a href="namespacearm__compute.xhtml#a9a9dd002faea6691d344f60563f8b499">More...</a><br /></td></tr>
<tr class="separator:a9a9dd002faea6691d344f60563f8b499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a583648c2034fae18cf48b7177586da4f"><td class="memItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a583648c2034fae18cf48b7177586da4f">finalize_quantization</a> (int32_t in_value, int result_fixedpoint_multiplier, int32_t result_shift, int32_t result_offset_after_shift_s32, int8_t min_s8, int8_t max_s8, bool is_bounded_relu)</td></tr>
<tr class="memdesc:a583648c2034fae18cf48b7177586da4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on single element.  <a href="namespacearm__compute.xhtml#a583648c2034fae18cf48b7177586da4f">More...</a><br /></td></tr>
<tr class="separator:a583648c2034fae18cf48b7177586da4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a485ae62f3ade6c8d33c5c2e85b29c3a7"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a> (const uint8x8_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a485ae62f3ade6c8d33c5c2e85b29c3a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a neon vector holding 8 quantized values.  <a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">More...</a><br /></td></tr>
<tr class="separator:a485ae62f3ade6c8d33c5c2e85b29c3a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4fe1191d25bb6608257e3f4ea868801"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad4fe1191d25bb6608257e3f4ea868801">vdequantize</a> (const int8x8_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:ad4fe1191d25bb6608257e3f4ea868801"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a neon vector holding 8 singed quantized values.  <a href="namespacearm__compute.xhtml#ad4fe1191d25bb6608257e3f4ea868801">More...</a><br /></td></tr>
<tr class="separator:ad4fe1191d25bb6608257e3f4ea868801"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7048ece2af58ce75587256d7980db171"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7048ece2af58ce75587256d7980db171">vdequantize</a> (const uint8x16_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a7048ece2af58ce75587256d7980db171"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a neon vector holding 16 quantized values.  <a href="namespacearm__compute.xhtml#a7048ece2af58ce75587256d7980db171">More...</a><br /></td></tr>
<tr class="separator:a7048ece2af58ce75587256d7980db171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeff642b4f4d86ed575032d944b9576a4"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aeff642b4f4d86ed575032d944b9576a4">vdequantize</a> (const int8x16_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:aeff642b4f4d86ed575032d944b9576a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a neon vector holding 16 signed quantized values.  <a href="namespacearm__compute.xhtml#aeff642b4f4d86ed575032d944b9576a4">More...</a><br /></td></tr>
<tr class="separator:aeff642b4f4d86ed575032d944b9576a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afefd32b0cf61750c523e6d15790a561e"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afefd32b0cf61750c523e6d15790a561e">vdequantize</a> (const uint8x16_t &amp;qv, float scale, int32_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:afefd32b0cf61750c523e6d15790a561e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize following an asymmetric quantization scheme a neon vector holding 16 quantized values.  <a href="namespacearm__compute.xhtml#afefd32b0cf61750c523e6d15790a561e">More...</a><br /></td></tr>
<tr class="separator:afefd32b0cf61750c523e6d15790a561e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac01c85f71885edddd3fc10ea41d2d54f"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac01c85f71885edddd3fc10ea41d2d54f">vdequantize</a> (const int8x16_t &amp;qv, float scale, int32_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:ac01c85f71885edddd3fc10ea41d2d54f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a vector of 16 values stored as signed asymmetric.  <a href="namespacearm__compute.xhtml#ac01c85f71885edddd3fc10ea41d2d54f">More...</a><br /></td></tr>
<tr class="separator:ac01c85f71885edddd3fc10ea41d2d54f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3838d1ee6a765a3b7ff52dc040edf5c0"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3838d1ee6a765a3b7ff52dc040edf5c0">vdequantize</a> (const int8x16_t &amp;qv, const float32x4x4_t vscale)</td></tr>
<tr class="memdesc:a3838d1ee6a765a3b7ff52dc040edf5c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize following symmetric quantization scheme a neon vector holding 16 quantized values.  <a href="namespacearm__compute.xhtml#a3838d1ee6a765a3b7ff52dc040edf5c0">More...</a><br /></td></tr>
<tr class="separator:a3838d1ee6a765a3b7ff52dc040edf5c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a496aa10035fdc8a0e86dde37b64f8228"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a496aa10035fdc8a0e86dde37b64f8228">vdequantize</a> (const int8x16_t &amp;qv, float scale)</td></tr>
<tr class="memdesc:a496aa10035fdc8a0e86dde37b64f8228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize following a symmetric quantization scheme a neon vector holding 16 quantized values.  <a href="namespacearm__compute.xhtml#a496aa10035fdc8a0e86dde37b64f8228">More...</a><br /></td></tr>
<tr class="separator:a496aa10035fdc8a0e86dde37b64f8228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ff1249e423ae9bfab075f5317c4d004"><td class="memItemLeft" align="right" valign="top">uint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a> (const float32x4x2_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a4ff1249e423ae9bfab075f5317c4d004"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a neon vector holding 8 floating point values.  <a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">More...</a><br /></td></tr>
<tr class="separator:a4ff1249e423ae9bfab075f5317c4d004"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76f394ac7b594f233f6fd13ad8bd99d5"><td class="memItemLeft" align="right" valign="top">int8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a> (const float32x4x2_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a76f394ac7b594f233f6fd13ad8bd99d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a neon vector holding 8 floating point values.  <a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">More...</a><br /></td></tr>
<tr class="separator:a76f394ac7b594f233f6fd13ad8bd99d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3109788e20d3a6113e4b7d2d937c1f64"><td class="memItemLeft" align="right" valign="top">int32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a> (const float32x4x4_t &amp;qv, float scale, int32_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="separator:a3109788e20d3a6113e4b7d2d937c1f64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42c040989e7f451dd9f2efa7384b89f6"><td class="memItemLeft" align="right" valign="top">uint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a42c040989e7f451dd9f2efa7384b89f6">vquantize</a> (const float32x4x4_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a42c040989e7f451dd9f2efa7384b89f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a neon vector holding 16 floating point values.  <a href="namespacearm__compute.xhtml#a42c040989e7f451dd9f2efa7384b89f6">More...</a><br /></td></tr>
<tr class="separator:a42c040989e7f451dd9f2efa7384b89f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3460d476add70f38e1d56fb9cccd0f3a"><td class="memItemLeft" align="right" valign="top">int8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3460d476add70f38e1d56fb9cccd0f3a">vquantize_signed</a> (const float32x4x4_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a3460d476add70f38e1d56fb9cccd0f3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Signed quantize a neon vector holding 16 floating point values.  <a href="namespacearm__compute.xhtml#a3460d476add70f38e1d56fb9cccd0f3a">More...</a><br /></td></tr>
<tr class="separator:a3460d476add70f38e1d56fb9cccd0f3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a687dee3fd66555374211e3ff676ce5f1"><td class="memItemLeft" align="right" valign="top">uint16x8x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a687dee3fd66555374211e3ff676ce5f1">vquantize_qasymm16</a> (const float32x4x4_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a687dee3fd66555374211e3ff676ce5f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize to QASYMM16 a neon vector holding 16 floating point values.  <a href="namespacearm__compute.xhtml#a687dee3fd66555374211e3ff676ce5f1">More...</a><br /></td></tr>
<tr class="separator:a687dee3fd66555374211e3ff676ce5f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace593813d742d127296b09fa8ab3f85e"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ace593813d742d127296b09fa8ab3f85e">vmax2q_f32</a> (float32x4x2_t a, float32x4x2_t b)</td></tr>
<tr class="memdesc:ace593813d742d127296b09fa8ab3f85e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute lane-by-lane maximum between elements of a float vector with 4x2 elements.  <a href="namespacearm__compute.xhtml#ace593813d742d127296b09fa8ab3f85e">More...</a><br /></td></tr>
<tr class="separator:ace593813d742d127296b09fa8ab3f85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7a0f3e622aa4bc8c6077d2262a04e2e"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a> (float32x4_t val)</td></tr>
<tr class="memdesc:af7a0f3e622aa4bc8c6077d2262a04e2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate floor of a vector.  <a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">More...</a><br /></td></tr>
<tr class="separator:af7a0f3e622aa4bc8c6077d2262a04e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fb53f220926a32be02f9446aed5bd88"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9fb53f220926a32be02f9446aed5bd88">vroundq_rte_f32</a> (float32x4_t val)</td></tr>
<tr class="memdesc:a9fb53f220926a32be02f9446aed5bd88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate round value of a vector to nearest with ties to even.  <a href="namespacearm__compute.xhtml#a9fb53f220926a32be02f9446aed5bd88">More...</a><br /></td></tr>
<tr class="separator:a9fb53f220926a32be02f9446aed5bd88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc415e7fc5e633a0b85b08b2bba5b5cf"><td class="memItemLeft" align="right" valign="top">float32x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afc415e7fc5e633a0b85b08b2bba5b5cf">vinvsqrt_f32</a> (float32x2_t x)</td></tr>
<tr class="memdesc:afc415e7fc5e633a0b85b08b2bba5b5cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse square root.  <a href="namespacearm__compute.xhtml#afc415e7fc5e633a0b85b08b2bba5b5cf">More...</a><br /></td></tr>
<tr class="separator:afc415e7fc5e633a0b85b08b2bba5b5cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8970d7aed07d8649f5e3088455948b8"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab8970d7aed07d8649f5e3088455948b8">vinvsqrtq_f32</a> (float32x4_t x)</td></tr>
<tr class="memdesc:ab8970d7aed07d8649f5e3088455948b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse square root.  <a href="namespacearm__compute.xhtml#ab8970d7aed07d8649f5e3088455948b8">More...</a><br /></td></tr>
<tr class="separator:ab8970d7aed07d8649f5e3088455948b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc6fd1bcd12ef1141e15401a04d31187"><td class="memItemLeft" align="right" valign="top">float32x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acc6fd1bcd12ef1141e15401a04d31187">vinv_f32</a> (float32x2_t x)</td></tr>
<tr class="memdesc:acc6fd1bcd12ef1141e15401a04d31187"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reciprocal.  <a href="namespacearm__compute.xhtml#acc6fd1bcd12ef1141e15401a04d31187">More...</a><br /></td></tr>
<tr class="separator:acc6fd1bcd12ef1141e15401a04d31187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0f2412b4d1302272d1aeb85d21ab25"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">vinvq_f32</a> (float32x4_t x)</td></tr>
<tr class="memdesc:a2e0f2412b4d1302272d1aeb85d21ab25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reciprocal.  <a href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">More...</a><br /></td></tr>
<tr class="separator:a2e0f2412b4d1302272d1aeb85d21ab25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c10bb00a86edd8d0cd4c33b494f6cd4"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">vtaylor_polyq_f32</a> (float32x4_t x, const std::array&lt; float32x4_t, 8 &gt; &amp;coeffs)</td></tr>
<tr class="memdesc:a0c10bb00a86edd8d0cd4c33b494f6cd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 7th degree polynomial approximation using Estrin's method.  <a href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">More...</a><br /></td></tr>
<tr class="separator:a0c10bb00a86edd8d0cd4c33b494f6cd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab55486f1153a4c5f507d4923b59fc6a0"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a> (float32x4_t x)</td></tr>
<tr class="memdesc:ab55486f1153a4c5f507d4923b59fc6a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate exponential.  <a href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">More...</a><br /></td></tr>
<tr class="separator:ab55486f1153a4c5f507d4923b59fc6a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa107fc2f2937504672fe241943d8260b"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">verfq_f32</a> (float32x4_t x)</td></tr>
<tr class="memdesc:aa107fc2f2937504672fe241943d8260b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate error function.  <a href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">More...</a><br /></td></tr>
<tr class="separator:aa107fc2f2937504672fe241943d8260b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d090b80b655e7f8fd8977bb93808b04"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a> (float32x4_t x)</td></tr>
<tr class="memdesc:a1d090b80b655e7f8fd8977bb93808b04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate logarithm.  <a href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">More...</a><br /></td></tr>
<tr class="separator:a1d090b80b655e7f8fd8977bb93808b04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e59419da344d02daca9c5b274a1da45"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3e59419da344d02daca9c5b274a1da45">vtanhq_f32</a> (float32x4_t val)</td></tr>
<tr class="memdesc:a3e59419da344d02daca9c5b274a1da45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate hyperbolic tangent.  <a href="namespacearm__compute.xhtml#a3e59419da344d02daca9c5b274a1da45">More...</a><br /></td></tr>
<tr class="separator:a3e59419da344d02daca9c5b274a1da45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6465367a67af2bae4ca46750231dae0"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa6465367a67af2bae4ca46750231dae0">vpowq_f32</a> (float32x4_t val, float32x4_t n)</td></tr>
<tr class="memdesc:aa6465367a67af2bae4ca46750231dae0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate n power of a number.  <a href="namespacearm__compute.xhtml#aa6465367a67af2bae4ca46750231dae0">More...</a><br /></td></tr>
<tr class="separator:aa6465367a67af2bae4ca46750231dae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77e02c19b498c3ff4ee373b0825cfd19"><td class="memItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a> (int32x4_t x, int32x4_t exponent)</td></tr>
<tr class="memdesc:a77e02c19b498c3ff4ee373b0825cfd19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to the nearest division by a power-of-two using exponent.  <a href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">More...</a><br /></td></tr>
<tr class="separator:a77e02c19b498c3ff4ee373b0825cfd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e28a3911204ac952601f512c82b48f1"><td class="memItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">rounding_divide_by_pow2</a> (int32x4_t x, int exponent)</td></tr>
<tr class="memdesc:a5e28a3911204ac952601f512c82b48f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to the nearest division by a power-of-two using exponent.  <a href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">More...</a><br /></td></tr>
<tr class="separator:a5e28a3911204ac952601f512c82b48f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3908fe41d9f2559f4a9eab1997fe61"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a> (int32_t x, int exponent)</td></tr>
<tr class="memdesc:afe3908fe41d9f2559f4a9eab1997fe61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to the nearest division by a power-of-two using exponent.  <a href="namespacearm__compute.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">More...</a><br /></td></tr>
<tr class="separator:afe3908fe41d9f2559f4a9eab1997fe61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b362fecc52ac83bcfbb0850549edce4"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a> (const uint8x16_t &amp;in)</td></tr>
<tr class="memdesc:a1b362fecc52ac83bcfbb0850549edce4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from uint8x16 to float32x4x4_t.  <a href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">More...</a><br /></td></tr>
<tr class="separator:a1b362fecc52ac83bcfbb0850549edce4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a20779ec9b583a9468b4fa60575d52e"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a> (const int8x16_t &amp;in)</td></tr>
<tr class="memdesc:a4a20779ec9b583a9468b4fa60575d52e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from int8x16 to float32x4x4_t.  <a href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">More...</a><br /></td></tr>
<tr class="separator:a4a20779ec9b583a9468b4fa60575d52e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeb24f265771053bc8365e30b4c409e5"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afeb24f265771053bc8365e30b4c409e5"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">convert_to_float32x4x4</a> (const T &amp;in)</td></tr>
<tr class="memdesc:afeb24f265771053bc8365e30b4c409e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts to float32x4x4_t from the specified templated 16 elements vectors.  <a href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">More...</a><br /></td></tr>
<tr class="separator:afeb24f265771053bc8365e30b4c409e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8065e7933c00bdbf860278643c9e953"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">convert_float32x4x3_to_uint8x8x3</a> (const float32x4x3_t &amp;in1, const float32x4x3_t &amp;in2, uint8x8x3_t &amp;out)</td></tr>
<tr class="memdesc:aa8065e7933c00bdbf860278643c9e953"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from two float32x4x3_t to just one uint8x8x3_t.  <a href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">More...</a><br /></td></tr>
<tr class="separator:aa8065e7933c00bdbf860278643c9e953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ee01955c2dd8c14a0d107a36cb62618"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">convert_float32x4x4_to_uint8x16</a> (const float32x4x4_t &amp;in, uint8x16_t &amp;out)</td></tr>
<tr class="memdesc:a4ee01955c2dd8c14a0d107a36cb62618"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from two float32x4x4_t to just one uint8x16_t.  <a href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">More...</a><br /></td></tr>
<tr class="separator:a4ee01955c2dd8c14a0d107a36cb62618"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c673ade3003d5d4e28ebf5875795dc4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">convert_float32x4x4_to_int8x16</a> (const float32x4x4_t &amp;in, int8x16_t &amp;out)</td></tr>
<tr class="memdesc:a9c673ade3003d5d4e28ebf5875795dc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from float32x4x4_t to just one int8x16_t.  <a href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">More...</a><br /></td></tr>
<tr class="separator:a9c673ade3003d5d4e28ebf5875795dc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17bff173004242d8f44b5b663177f9c0"><td class="memTemplParams" colspan="2">template&lt;typename float_vec_type , typename int_vec_type &gt; </td></tr>
<tr class="memitem:a17bff173004242d8f44b5b663177f9c0"><td class="memTemplItemLeft" align="right" valign="top">int_vec_type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a17bff173004242d8f44b5b663177f9c0">convert_float_to_int</a> (const float_vec_type &amp;in)</td></tr>
<tr class="memdesc:a17bff173004242d8f44b5b663177f9c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from float vector to integer vector.  <a href="namespacearm__compute.xhtml#a17bff173004242d8f44b5b663177f9c0">More...</a><br /></td></tr>
<tr class="separator:a17bff173004242d8f44b5b663177f9c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad339c829071ae619193300cb501195ac"><td class="memTemplParams" colspan="2">template&lt;typename float_vec_type , typename int_vec_type &gt; </td></tr>
<tr class="memitem:ad339c829071ae619193300cb501195ac"><td class="memTemplItemLeft" align="right" valign="top">float_vec_type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad339c829071ae619193300cb501195ac">convert_int_to_float</a> (const int_vec_type &amp;in)</td></tr>
<tr class="memdesc:ad339c829071ae619193300cb501195ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from integer vector to float vector.  <a href="namespacearm__compute.xhtml#ad339c829071ae619193300cb501195ac">More...</a><br /></td></tr>
<tr class="separator:ad339c829071ae619193300cb501195ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b6eb5a8c8e8944d781892928f71a698"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">vsinq_f32</a> (float32x4_t val)</td></tr>
<tr class="memdesc:a5b6eb5a8c8e8944d781892928f71a698"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sine.  <a href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">More...</a><br /></td></tr>
<tr class="separator:a5b6eb5a8c8e8944d781892928f71a698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9648abfe8fa6a9f3dab23ec9f55e2f1"><td class="memItemLeft" align="right" valign="top">float32x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">vsin_f32</a> (float32x2_t val)</td></tr>
<tr class="memdesc:aa9648abfe8fa6a9f3dab23ec9f55e2f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sine.  <a href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">More...</a><br /></td></tr>
<tr class="separator:aa9648abfe8fa6a9f3dab23ec9f55e2f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62947a5a80433465f50372c441be3c8c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a> (const float32x4_t &amp;v)</td></tr>
<tr class="memdesc:a62947a5a80433465f50372c441be3c8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce a vector to be a scalar by accumulating all lanes in the vector.  <a href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">More...</a><br /></td></tr>
<tr class="separator:a62947a5a80433465f50372c441be3c8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47a3c86ad6266627e844e588496136a8"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a47a3c86ad6266627e844e588496136a8"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a47a3c86ad6266627e844e588496136a8">convert_to_float32x4x4</a> (const uint8x16_t &amp;in)</td></tr>
<tr class="separator:a47a3c86ad6266627e844e588496136a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6af9061fe6dcd2cb311be33acb201ed"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ad6af9061fe6dcd2cb311be33acb201ed"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad6af9061fe6dcd2cb311be33acb201ed">convert_to_float32x4x4</a> (const int8x16_t &amp;in)</td></tr>
<tr class="separator:ad6af9061fe6dcd2cb311be33acb201ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad63fda57a59d2dcc82eb13599581fcc0"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ad63fda57a59d2dcc82eb13599581fcc0"><td class="memTemplItemLeft" align="right" valign="top">uint8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad63fda57a59d2dcc82eb13599581fcc0">convert_float_to_int&lt; float32x4x4_t, uint8x16_t &gt;</a> (const float32x4x4_t &amp;in)</td></tr>
<tr class="separator:ad63fda57a59d2dcc82eb13599581fcc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8677ddae33f84bb0e84e995c54bf6ba3"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a8677ddae33f84bb0e84e995c54bf6ba3"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8677ddae33f84bb0e84e995c54bf6ba3">convert_int_to_float&lt; float32x4x4_t, uint8x16_t &gt;</a> (const uint8x16_t &amp;in)</td></tr>
<tr class="separator:a8677ddae33f84bb0e84e995c54bf6ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6048f3cbd52aea7ce3a693ce485393be"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a6048f3cbd52aea7ce3a693ce485393be"><td class="memTemplItemLeft" align="right" valign="top">int8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6048f3cbd52aea7ce3a693ce485393be">convert_float_to_int&lt; float32x4x4_t, int8x16_t &gt;</a> (const float32x4x4_t &amp;in)</td></tr>
<tr class="separator:a6048f3cbd52aea7ce3a693ce485393be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9075aa895fe4b2368e3c0cfae26ebf0b"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a9075aa895fe4b2368e3c0cfae26ebf0b"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9075aa895fe4b2368e3c0cfae26ebf0b">convert_int_to_float&lt; float32x4x4_t, int8x16_t &gt;</a> (const int8x16_t &amp;in)</td></tr>
<tr class="separator:a9075aa895fe4b2368e3c0cfae26ebf0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a7219ba563658bc8bbcde89f0b31553"><td class="memTemplParams" colspan="2">template&lt;bool is_bounded_relu&gt; </td></tr>
<tr class="memitem:a0a7219ba563658bc8bbcde89f0b31553"><td class="memTemplItemLeft" align="right" valign="top">int16x8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0a7219ba563658bc8bbcde89f0b31553">finalize_quantization_int16</a> (int32x4x2_t &amp;in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int16x8_t min_s16, int16x8_t max_s16)</td></tr>
<tr class="memdesc:a0a7219ba563658bc8bbcde89f0b31553"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on 8 signed 16-bit elements.  <a href="namespacearm__compute.xhtml#a0a7219ba563658bc8bbcde89f0b31553">More...</a><br /></td></tr>
<tr class="separator:a0a7219ba563658bc8bbcde89f0b31553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a395a304366dd27cfa29f2aaf11eeb82a"><td class="memTemplParams" colspan="2">template&lt;bool is_bounded_relu&gt; </td></tr>
<tr class="memitem:a395a304366dd27cfa29f2aaf11eeb82a"><td class="memTemplItemLeft" align="right" valign="top">int16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a395a304366dd27cfa29f2aaf11eeb82a">finalize_quantization_int16</a> (int32_t in_value, int result_fixedpoint_multiplier, int32_t result_shift, int16_t min_s16, int16_t max_s16)</td></tr>
<tr class="memdesc:a395a304366dd27cfa29f2aaf11eeb82a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs final quantization step on single signed 16-bit element.  <a href="namespacearm__compute.xhtml#a395a304366dd27cfa29f2aaf11eeb82a">More...</a><br /></td></tr>
<tr class="separator:a395a304366dd27cfa29f2aaf11eeb82a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9985607399e329fcb371a92c84a6acd"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">vdequantize_int16</a> (const int16x8_t &amp;qv, float scale)</td></tr>
<tr class="memdesc:aa9985607399e329fcb371a92c84a6acd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a neon vector holding 8 16-bit quantized values.  <a href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">More...</a><br /></td></tr>
<tr class="separator:aa9985607399e329fcb371a92c84a6acd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5986edc0dbcd0c071107cafb98cbc39"><td class="memItemLeft" align="right" valign="top">int16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">vquantize_int16</a> (const float32x4x2_t &amp;qv, float scale)</td></tr>
<tr class="memdesc:ac5986edc0dbcd0c071107cafb98cbc39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a neon vector holding 8 floating point values.  <a href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">More...</a><br /></td></tr>
<tr class="separator:ac5986edc0dbcd0c071107cafb98cbc39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ffa773c3e171fa1e0abfda9f1f23845"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8ffa773c3e171fa1e0abfda9f1f23845">vdequantize</a> (const int16x8x2_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a8ffa773c3e171fa1e0abfda9f1f23845"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize a neon vector holding 16 16-bit quantized values.  <a href="namespacearm__compute.xhtml#a8ffa773c3e171fa1e0abfda9f1f23845">More...</a><br /></td></tr>
<tr class="separator:a8ffa773c3e171fa1e0abfda9f1f23845"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a926c75703af37a5677a6bac0198902b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a926c75703af37a5677a6bac0198902b0">vquantize_qsymm16</a> (const float32x4x4_t &amp;qv, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</td></tr>
<tr class="memdesc:a926c75703af37a5677a6bac0198902b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantize a neon vector holding 16 floating point values.  <a href="namespacearm__compute.xhtml#a926c75703af37a5677a6bac0198902b0">More...</a><br /></td></tr>
<tr class="separator:a926c75703af37a5677a6bac0198902b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5a5338878b6fcdb2176175fcf7ba650"><td class="memItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab5a5338878b6fcdb2176175fcf7ba650">multiply_by_quantized_multiplier_2row</a> (int32x4x2_t input, int32_t qmul, int32_t shift)</td></tr>
<tr class="memdesc:ab5a5338878b6fcdb2176175fcf7ba650"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply a neon vector using quantized multiplier and shift.  <a href="namespacearm__compute.xhtml#ab5a5338878b6fcdb2176175fcf7ba650">More...</a><br /></td></tr>
<tr class="separator:ab5a5338878b6fcdb2176175fcf7ba650"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a395e18ba1b7e3bdf87f59efdd2f387d4"><td class="memTemplParams" colspan="2">template&lt;typename T , unsigned int S, unsigned int dim, bool do_2D_norm&gt; </td></tr>
<tr class="memitem:a395e18ba1b7e3bdf87f59efdd2f387d4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a395e18ba1b7e3bdf87f59efdd2f387d4">normalize_float</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="memdesc:a395e18ba1b7e3bdf87f59efdd2f387d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to perform normalization depending on the given template dimension.  <a href="namespacearm__compute.xhtml#a395e18ba1b7e3bdf87f59efdd2f387d4">More...</a><br /></td></tr>
<tr class="separator:a395e18ba1b7e3bdf87f59efdd2f387d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b4778f9d4687b03b98056042f1e6c1c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0b4778f9d4687b03b98056042f1e6c1c">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> &amp;op)</td></tr>
<tr class="memdesc:a0b4778f9d4687b03b98056042f1e6c1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the pute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes::ElementwiseOp type.  <a href="namespacearm__compute.xhtml#a0b4778f9d4687b03b98056042f1e6c1c">More...</a><br /></td></tr>
<tr class="separator:a0b4778f9d4687b03b98056042f1e6c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a062b90d0a8defe70b0cd19300fee2825"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> &amp;op)</td></tr>
<tr class="memdesc:a062b90d0a8defe70b0cd19300fee2825"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> type.  <a href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">More...</a><br /></td></tr>
<tr class="separator:a062b90d0a8defe70b0cd19300fee2825"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4feaaa70771629f4b5dcf3b219c8b647"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *scores_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *boxes_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *batch_splits_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *scores_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *boxes_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *classes, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *batch_splits_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *keeps, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *keeps_size, const <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> info)</td></tr>
<tr class="separator:a4feaaa70771629f4b5dcf3b219c8b647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1379e5f8a8b4640d7a52d901f0539ccd"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1379e5f8a8b4640d7a52d901f0539ccd">operator&gt;&gt;</a> (::std::istream &amp;is, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;mode)</td></tr>
<tr class="memdesc:a1379e5f8a8b4640d7a52d901f0539ccd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted input of the BorderMode type.  <a href="namespacearm__compute.xhtml#a1379e5f8a8b4640d7a52d901f0539ccd">More...</a><br /></td></tr>
<tr class="separator:a1379e5f8a8b4640d7a52d901f0539ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad023d4ca1d3facf3975c941fd728a6f4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad023d4ca1d3facf3975c941fd728a6f4"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">to_string_if_not_null</a> (T *arg)</td></tr>
<tr class="memdesc:ad023d4ca1d3facf3975c941fd728a6f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output if arg is not null.  <a href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">More...</a><br /></td></tr>
<tr class="separator:ad023d4ca1d3facf3975c941fd728a6f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1d8c24abe3cf6edd704d126d1d2a5420">to_string</a> (const T &amp;val)</td></tr>
<tr class="memdesc:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fallback method: try to use std::to_string:  <a href="namespacearm__compute.xhtml#a1d8c24abe3cf6edd704d126d1d2a5420">More...</a><br /></td></tr>
<tr class="separator:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a248960645748af1bfddffa5ed711530a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a248960645748af1bfddffa5ed711530a"><td class="memTemplItemLeft" align="right" valign="top">::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a248960645748af1bfddffa5ed711530a">operator&lt;&lt;</a> (::std::ostream &amp;os, const std::vector&lt; T &gt; &amp;args)</td></tr>
<tr class="memdesc:a248960645748af1bfddffa5ed711530a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of a vector of objects.  <a href="namespacearm__compute.xhtml#a248960645748af1bfddffa5ed711530a">More...</a><br /></td></tr>
<tr class="separator:a248960645748af1bfddffa5ed711530a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6411da4e87e64e8859f8b725645ee9aa"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6411da4e87e64e8859f8b725645ee9aa"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6411da4e87e64e8859f8b725645ee9aa">to_string</a> (const std::vector&lt; T &gt; &amp;args)</td></tr>
<tr class="memdesc:a6411da4e87e64e8859f8b725645ee9aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of a vector of objects.  <a href="namespacearm__compute.xhtml#a6411da4e87e64e8859f8b725645ee9aa">More...</a><br /></td></tr>
<tr class="separator:a6411da4e87e64e8859f8b725645ee9aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18d43401e8f84ed020429b41ec4e99f5"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a18d43401e8f84ed020429b41ec4e99f5"><td class="memTemplItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a18d43401e8f84ed020429b41ec4e99f5">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dimensions)</td></tr>
<tr class="memdesc:a18d43401e8f84ed020429b41ec4e99f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> type.  <a href="namespacearm__compute.xhtml#a18d43401e8f84ed020429b41ec4e99f5">More...</a><br /></td></tr>
<tr class="separator:a18d43401e8f84ed020429b41ec4e99f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a295edc9f8caf95838db2c5e251153514"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a295edc9f8caf95838db2c5e251153514">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> &amp;rounding_policy)</td></tr>
<tr class="memdesc:a295edc9f8caf95838db2c5e251153514"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the RoundingPolicy type.  <a href="namespacearm__compute.xhtml#a295edc9f8caf95838db2c5e251153514">More...</a><br /></td></tr>
<tr class="separator:a295edc9f8caf95838db2c5e251153514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5972c7131d378f567af9c2961f088a0b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5972c7131d378f567af9c2961f088a0b">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;weights_info)</td></tr>
<tr class="memdesc:a5972c7131d378f567af9c2961f088a0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_weights_info.xhtml" title="Convolution Layer Weights Information class.">WeightsInfo</a> type.  <a href="namespacearm__compute.xhtml#a5972c7131d378f567af9c2961f088a0b">More...</a><br /></td></tr>
<tr class="separator:a5972c7131d378f567af9c2961f088a0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a352b805b77fde4f32f44af271580677b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a352b805b77fde4f32f44af271580677b">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;pool_info)</td></tr>
<tr class="memdesc:a352b805b77fde4f32f44af271580677b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ROIPoolingInfo type.  <a href="namespacearm__compute.xhtml#a352b805b77fde4f32f44af271580677b">More...</a><br /></td></tr>
<tr class="separator:a352b805b77fde4f32f44af271580677b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e5dca61375f7583860ab07d951a323"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac7e5dca61375f7583860ab07d951a323">to_string</a> (const <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;pool_info)</td></tr>
<tr class="memdesc:ac7e5dca61375f7583860ab07d951a323"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ROIPoolingInfo type.  <a href="namespacearm__compute.xhtml#ac7e5dca61375f7583860ab07d951a323">More...</a><br /></td></tr>
<tr class="separator:ac7e5dca61375f7583860ab07d951a323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4e600333948efa503cd2e2e7fb6d854"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad4e600333948efa503cd2e2e7fb6d854">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">GEMMKernelInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:ad4e600333948efa503cd2e2e7fb6d854"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#ad4e600333948efa503cd2e2e7fb6d854">More...</a><br /></td></tr>
<tr class="separator:ad4e600333948efa503cd2e2e7fb6d854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2f9b5a23de7a67759cb0c25f7fe0ff"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b2f9b5a23de7a67759cb0c25f7fe0ff">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:a8b2f9b5a23de7a67759cb0c25f7fe0ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#a8b2f9b5a23de7a67759cb0c25f7fe0ff">More...</a><br /></td></tr>
<tr class="separator:a8b2f9b5a23de7a67759cb0c25f7fe0ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addc5504e0a275f050cc051811518be0a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#addc5504e0a275f050cc051811518be0a">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:addc5504e0a275f050cc051811518be0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#addc5504e0a275f050cc051811518be0a">More...</a><br /></td></tr>
<tr class="separator:addc5504e0a275f050cc051811518be0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80389fddfab744d5439957c739fd1d0d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a80389fddfab744d5439957c739fd1d0d">to_string</a> (const <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:a80389fddfab744d5439957c739fd1d0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#a80389fddfab744d5439957c739fd1d0d">More...</a><br /></td></tr>
<tr class="separator:a80389fddfab744d5439957c739fd1d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a410b2c68c54cd633b4ed926bdea4a6d6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a410b2c68c54cd633b4ed926bdea4a6d6">to_string</a> (const <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:a410b2c68c54cd633b4ed926bdea4a6d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#a410b2c68c54cd633b4ed926bdea4a6d6">More...</a><br /></td></tr>
<tr class="separator:a410b2c68c54cd633b4ed926bdea4a6d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c7e41ebd7bc09e91ba0fdb11315fc19"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c7e41ebd7bc09e91ba0fdb11315fc19">to_string</a> (const <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">GEMMKernelInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:a3c7e41ebd7bc09e91ba0fdb11315fc19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a3c7e41ebd7bc09e91ba0fdb11315fc19">More...</a><br /></td></tr>
<tr class="separator:a3c7e41ebd7bc09e91ba0fdb11315fc19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af81bb4f87d418311c7ca43a28c74bf03"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af81bb4f87d418311c7ca43a28c74bf03">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> &amp;bbox_info)</td></tr>
<tr class="memdesc:af81bb4f87d418311c7ca43a28c74bf03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" title="Bounding Box Transform information class.">BoundingBoxTransformInfo</a> type.  <a href="namespacearm__compute.xhtml#af81bb4f87d418311c7ca43a28c74bf03">More...</a><br /></td></tr>
<tr class="separator:af81bb4f87d418311c7ca43a28c74bf03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadd27b86f0ff4fbb03ed673a549e91a8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aadd27b86f0ff4fbb03ed673a549e91a8">to_string</a> (const <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> &amp;bbox_info)</td></tr>
<tr class="memdesc:aadd27b86f0ff4fbb03ed673a549e91a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" title="Bounding Box Transform information class.">BoundingBoxTransformInfo</a> type.  <a href="namespacearm__compute.xhtml#aadd27b86f0ff4fbb03ed673a549e91a8">More...</a><br /></td></tr>
<tr class="separator:aadd27b86f0ff4fbb03ed673a549e91a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59ea8b6694897a281eb3105f5c99f28f"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a59ea8b6694897a281eb3105f5c99f28f">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> &amp;anchors_info)</td></tr>
<tr class="memdesc:a59ea8b6694897a281eb3105f5c99f28f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" title="ComputeAnchors information class.">ComputeAnchorsInfo</a> type.  <a href="namespacearm__compute.xhtml#a59ea8b6694897a281eb3105f5c99f28f">More...</a><br /></td></tr>
<tr class="separator:a59ea8b6694897a281eb3105f5c99f28f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24bc4de5c636b56f9b59533fead920c2"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a24bc4de5c636b56f9b59533fead920c2">to_string</a> (const <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> &amp;anchors_info)</td></tr>
<tr class="memdesc:a24bc4de5c636b56f9b59533fead920c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" title="ComputeAnchors information class.">ComputeAnchorsInfo</a> type.  <a href="namespacearm__compute.xhtml#a24bc4de5c636b56f9b59533fead920c2">More...</a><br /></td></tr>
<tr class="separator:a24bc4de5c636b56f9b59533fead920c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a54a883f8acc0664accdae9bed93494"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1a54a883f8acc0664accdae9bed93494">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> &amp;proposals_info)</td></tr>
<tr class="memdesc:a1a54a883f8acc0664accdae9bed93494"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" title="Generate Proposals Information class.">GenerateProposalsInfo</a> type.  <a href="namespacearm__compute.xhtml#a1a54a883f8acc0664accdae9bed93494">More...</a><br /></td></tr>
<tr class="separator:a1a54a883f8acc0664accdae9bed93494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa597016c0aaa2990ed31b8aaa6f2ccc3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa597016c0aaa2990ed31b8aaa6f2ccc3">to_string</a> (const <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> &amp;proposals_info)</td></tr>
<tr class="memdesc:aa597016c0aaa2990ed31b8aaa6f2ccc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" title="Generate Proposals Information class.">GenerateProposalsInfo</a> type.  <a href="namespacearm__compute.xhtml#aa597016c0aaa2990ed31b8aaa6f2ccc3">More...</a><br /></td></tr>
<tr class="separator:aa597016c0aaa2990ed31b8aaa6f2ccc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a759d06440ed4adc531dd10c8c76e3b88"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a759d06440ed4adc531dd10c8c76e3b88">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qinfo)</td></tr>
<tr class="memdesc:a759d06440ed4adc531dd10c8c76e3b88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> type.  <a href="namespacearm__compute.xhtml#a759d06440ed4adc531dd10c8c76e3b88">More...</a><br /></td></tr>
<tr class="separator:a759d06440ed4adc531dd10c8c76e3b88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9fd48b3c01116b217a684aaeaf8b24f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad9fd48b3c01116b217a684aaeaf8b24f">to_string</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;quantization_info)</td></tr>
<tr class="memdesc:ad9fd48b3c01116b217a684aaeaf8b24f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> type.  <a href="namespacearm__compute.xhtml#ad9fd48b3c01116b217a684aaeaf8b24f">More...</a><br /></td></tr>
<tr class="separator:ad9fd48b3c01116b217a684aaeaf8b24f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d79efe2673aeb3f9a9160b6a78de50c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d79efe2673aeb3f9a9160b6a78de50c">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> &amp;act_function)</td></tr>
<tr class="memdesc:a9d79efe2673aeb3f9a9160b6a78de50c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function type.  <a href="namespacearm__compute.xhtml#a9d79efe2673aeb3f9a9160b6a78de50c">More...</a><br /></td></tr>
<tr class="separator:a9d79efe2673aeb3f9a9160b6a78de50c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72626d2cca3922127c41526e37e9e623"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a72626d2cca3922127c41526e37e9e623">to_string</a> (const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a72626d2cca3922127c41526e37e9e623"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function info type.  <a href="namespacearm__compute.xhtml#a72626d2cca3922127c41526e37e9e623">More...</a><br /></td></tr>
<tr class="separator:a72626d2cca3922127c41526e37e9e623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a266046e37c7ebb4436ddd9322afa3c97"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a266046e37c7ebb4436ddd9322afa3c97">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> *info)</td></tr>
<tr class="memdesc:a266046e37c7ebb4436ddd9322afa3c97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function info.  <a href="namespacearm__compute.xhtml#a266046e37c7ebb4436ddd9322afa3c97">More...</a><br /></td></tr>
<tr class="separator:a266046e37c7ebb4436ddd9322afa3c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a18c453150ab547c1add44b3ed3bc56"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8a18c453150ab547c1add44b3ed3bc56">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a> &amp;function)</td></tr>
<tr class="memdesc:a8a18c453150ab547c1add44b3ed3bc56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function type.  <a href="namespacearm__compute.xhtml#a8a18c453150ab547c1add44b3ed3bc56">More...</a><br /></td></tr>
<tr class="separator:a8a18c453150ab547c1add44b3ed3bc56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ab7370aab6e5698990c50c8871fa6fb"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2ab7370aab6e5698990c50c8871fa6fb">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> &amp;norm_type)</td></tr>
<tr class="memdesc:a2ab7370aab6e5698990c50c8871fa6fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the NormType type.  <a href="namespacearm__compute.xhtml#a2ab7370aab6e5698990c50c8871fa6fb">More...</a><br /></td></tr>
<tr class="separator:a2ab7370aab6e5698990c50c8871fa6fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45dd771bdecbafb975fd267c2ae320a7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45dd771bdecbafb975fd267c2ae320a7">to_string</a> (const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a45dd771bdecbafb975fd267c2ae320a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>.  <a href="namespacearm__compute.xhtml#a45dd771bdecbafb975fd267c2ae320a7">More...</a><br /></td></tr>
<tr class="separator:a45dd771bdecbafb975fd267c2ae320a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e422c610c91f611590173cd595c94c5"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6e422c610c91f611590173cd595c94c5">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a6e422c610c91f611590173cd595c94c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>.  <a href="namespacearm__compute.xhtml#a6e422c610c91f611590173cd595c94c5">More...</a><br /></td></tr>
<tr class="separator:a6e422c610c91f611590173cd595c94c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cf1e870f467e44c184587a13feeec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a336cf1e870f467e44c184587a13feeec">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> &amp;pool_type)</td></tr>
<tr class="memdesc:a336cf1e870f467e44c184587a13feeec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PoolingType type.  <a href="namespacearm__compute.xhtml#a336cf1e870f467e44c184587a13feeec">More...</a><br /></td></tr>
<tr class="separator:a336cf1e870f467e44c184587a13feeec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae72a61a2ca5c962ab1d37065e5598060"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae72a61a2ca5c962ab1d37065e5598060">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae72a61a2ca5c962ab1d37065e5598060"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>.  <a href="namespacearm__compute.xhtml#ae72a61a2ca5c962ab1d37065e5598060">More...</a><br /></td></tr>
<tr class="separator:ae72a61a2ca5c962ab1d37065e5598060"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25dac68b6321b9e53027e79222a0eb7f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a25dac68b6321b9e53027e79222a0eb7f">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> &amp;rounding_policy)</td></tr>
<tr class="memdesc:a25dac68b6321b9e53027e79222a0eb7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>.  <a href="namespacearm__compute.xhtml#a25dac68b6321b9e53027e79222a0eb7f">More...</a><br /></td></tr>
<tr class="separator:a25dac68b6321b9e53027e79222a0eb7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1698cb24508a2bc45962bc887f18a8d0"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1698cb24508a2bc45962bc887f18a8d0">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;data_layout)</td></tr>
<tr class="memdesc:a1698cb24508a2bc45962bc887f18a8d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">[Print DataLayout type]  <a href="namespacearm__compute.xhtml#a1698cb24508a2bc45962bc887f18a8d0">More...</a><br /></td></tr>
<tr class="separator:a1698cb24508a2bc45962bc887f18a8d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1240e4698e8a901179e519102b5e033"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae1240e4698e8a901179e519102b5e033">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> &amp;data_layout)</td></tr>
<tr class="memdesc:ae1240e4698e8a901179e519102b5e033"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DataLayout type.  <a href="namespacearm__compute.xhtml#ae1240e4698e8a901179e519102b5e033">More...</a><br /></td></tr>
<tr class="separator:ae1240e4698e8a901179e519102b5e033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adec19acb64bfca26fa53ef76f03b79ef"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adec19acb64bfca26fa53ef76f03b79ef">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &amp;data_layout_dim)</td></tr>
<tr class="memdesc:adec19acb64bfca26fa53ef76f03b79ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">[Print DataLayout type]  <a href="namespacearm__compute.xhtml#adec19acb64bfca26fa53ef76f03b79ef">More...</a><br /></td></tr>
<tr class="separator:adec19acb64bfca26fa53ef76f03b79ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685af15532d70b8682bcc52f06f034f9"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a685af15532d70b8682bcc52f06f034f9">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;data_type)</td></tr>
<tr class="memdesc:a685af15532d70b8682bcc52f06f034f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DataType type.  <a href="namespacearm__compute.xhtml#a685af15532d70b8682bcc52f06f034f9">More...</a><br /></td></tr>
<tr class="separator:a685af15532d70b8682bcc52f06f034f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96b47511b549b48d2ead05b5c757ccc9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a96b47511b549b48d2ead05b5c757ccc9">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> &amp;data_type)</td></tr>
<tr class="memdesc:a96b47511b549b48d2ead05b5c757ccc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DataType type.  <a href="namespacearm__compute.xhtml#a96b47511b549b48d2ead05b5c757ccc9">More...</a><br /></td></tr>
<tr class="separator:a96b47511b549b48d2ead05b5c757ccc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b22e54b0ac0204c3b89aebcd695fa03"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3b22e54b0ac0204c3b89aebcd695fa03">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;format)</td></tr>
<tr class="memdesc:a3b22e54b0ac0204c3b89aebcd695fa03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Format type.  <a href="namespacearm__compute.xhtml#a3b22e54b0ac0204c3b89aebcd695fa03">More...</a><br /></td></tr>
<tr class="separator:a3b22e54b0ac0204c3b89aebcd695fa03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0e6381843dc9901bb59285ec846dc5d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab0e6381843dc9901bb59285ec846dc5d">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;format)</td></tr>
<tr class="memdesc:ab0e6381843dc9901bb59285ec846dc5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Format type.  <a href="namespacearm__compute.xhtml#ab0e6381843dc9901bb59285ec846dc5d">More...</a><br /></td></tr>
<tr class="separator:ab0e6381843dc9901bb59285ec846dc5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa66be15c012986ebd4c1934b97e08a36"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa66be15c012986ebd4c1934b97e08a36">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> &amp;channel)</td></tr>
<tr class="memdesc:aa66be15c012986ebd4c1934b97e08a36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Channel type.  <a href="namespacearm__compute.xhtml#aa66be15c012986ebd4c1934b97e08a36">More...</a><br /></td></tr>
<tr class="separator:aa66be15c012986ebd4c1934b97e08a36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813e71cd70c2bbcbf0743fa83a3608b9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a813e71cd70c2bbcbf0743fa83a3608b9">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> &amp;channel)</td></tr>
<tr class="memdesc:a813e71cd70c2bbcbf0743fa83a3608b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Channel type.  <a href="namespacearm__compute.xhtml#a813e71cd70c2bbcbf0743fa83a3608b9">More...</a><br /></td></tr>
<tr class="separator:a813e71cd70c2bbcbf0743fa83a3608b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7929032d41d5f23cd1778a70508d0219"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7929032d41d5f23cd1778a70508d0219">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;mode)</td></tr>
<tr class="memdesc:a7929032d41d5f23cd1778a70508d0219"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the BorderMode type.  <a href="namespacearm__compute.xhtml#a7929032d41d5f23cd1778a70508d0219">More...</a><br /></td></tr>
<tr class="separator:a7929032d41d5f23cd1778a70508d0219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af32c4c5cdd0efde09774eb803bc8a0bd"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af32c4c5cdd0efde09774eb803bc8a0bd">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;border)</td></tr>
<tr class="memdesc:af32c4c5cdd0efde09774eb803bc8a0bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> type.  <a href="namespacearm__compute.xhtml#af32c4c5cdd0efde09774eb803bc8a0bd">More...</a><br /></td></tr>
<tr class="separator:af32c4c5cdd0efde09774eb803bc8a0bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15a06b73e1fde15f0809ce07bf1ab7d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af15a06b73e1fde15f0809ce07bf1ab7d">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;padding)</td></tr>
<tr class="memdesc:af15a06b73e1fde15f0809ce07bf1ab7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingList type.  <a href="namespacearm__compute.xhtml#af15a06b73e1fde15f0809ce07bf1ab7d">More...</a><br /></td></tr>
<tr class="separator:af15a06b73e1fde15f0809ce07bf1ab7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9caac285297030f50a972095e767aff9"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9caac285297030f50a972095e767aff9">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;multiples)</td></tr>
<tr class="memdesc:a9caac285297030f50a972095e767aff9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Multiples type.  <a href="namespacearm__compute.xhtml#a9caac285297030f50a972095e767aff9">More...</a><br /></td></tr>
<tr class="separator:a9caac285297030f50a972095e767aff9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a509047aefc691398f1bb60b1f967a98b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a509047aefc691398f1bb60b1f967a98b">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> &amp;policy)</td></tr>
<tr class="memdesc:a509047aefc691398f1bb60b1f967a98b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the InterpolationPolicy type.  <a href="namespacearm__compute.xhtml#a509047aefc691398f1bb60b1f967a98b">More...</a><br /></td></tr>
<tr class="separator:a509047aefc691398f1bb60b1f967a98b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab8eb6dc1ba89bb8a69f1c3845988a2b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aab8eb6dc1ba89bb8a69f1c3845988a2b">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> &amp;policy)</td></tr>
<tr class="memdesc:aab8eb6dc1ba89bb8a69f1c3845988a2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the SamplingPolicy type.  <a href="namespacearm__compute.xhtml#aab8eb6dc1ba89bb8a69f1c3845988a2b">More...</a><br /></td></tr>
<tr class="separator:aab8eb6dc1ba89bb8a69f1c3845988a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a85ebd528f100a15183253aa819cc2b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2a85ebd528f100a15183253aa819cc2b">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info)</td></tr>
<tr class="memdesc:a2a85ebd528f100a15183253aa819cc2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type.  <a href="namespacearm__compute.xhtml#a2a85ebd528f100a15183253aa819cc2b">More...</a><br /></td></tr>
<tr class="separator:a2a85ebd528f100a15183253aa819cc2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab398837465010958bfccff032ad1ee51"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab398837465010958bfccff032ad1ee51">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ab398837465010958bfccff032ad1ee51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>&amp; type.  <a href="namespacearm__compute.xhtml#ab398837465010958bfccff032ad1ee51">More...</a><br /></td></tr>
<tr class="separator:ab398837465010958bfccff032ad1ee51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48fd5e28bdb4975c141841f0b96f8707"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a48fd5e28bdb4975c141841f0b96f8707">to_string</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a48fd5e28bdb4975c141841f0b96f8707"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>&amp; type.  <a href="namespacearm__compute.xhtml#a48fd5e28bdb4975c141841f0b96f8707">More...</a><br /></td></tr>
<tr class="separator:a48fd5e28bdb4975c141841f0b96f8707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2f0244b78d1f23b9a3265770df5be71"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac2f0244b78d1f23b9a3265770df5be71">to_string</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ac2f0244b78d1f23b9a3265770df5be71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a>&amp; type.  <a href="namespacearm__compute.xhtml#ac2f0244b78d1f23b9a3265770df5be71">More...</a><br /></td></tr>
<tr class="separator:ac2f0244b78d1f23b9a3265770df5be71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b1d64a183e573398d79f2db7ee3378f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3b1d64a183e573398d79f2db7ee3378f">to_string</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info)</td></tr>
<tr class="memdesc:a3b1d64a183e573398d79f2db7ee3378f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const ITensorInfo* type.  <a href="namespacearm__compute.xhtml#a3b1d64a183e573398d79f2db7ee3378f">More...</a><br /></td></tr>
<tr class="separator:a3b1d64a183e573398d79f2db7ee3378f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2e4a41ed5fd096ac0c8b57153677e5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b2e4a41ed5fd096ac0c8b57153677e5">to_string</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info)</td></tr>
<tr class="memdesc:a8b2e4a41ed5fd096ac0c8b57153677e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ITensorInfo* type.  <a href="namespacearm__compute.xhtml#a8b2e4a41ed5fd096ac0c8b57153677e5">More...</a><br /></td></tr>
<tr class="separator:a8b2e4a41ed5fd096ac0c8b57153677e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab56ca10105475a301db13c3e40fe4617"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab56ca10105475a301db13c3e40fe4617">to_string</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:ab56ca10105475a301db13c3e40fe4617"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from const ITensor* type.  <a href="namespacearm__compute.xhtml#ab56ca10105475a301db13c3e40fe4617">More...</a><br /></td></tr>
<tr class="separator:ab56ca10105475a301db13c3e40fe4617"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38419ff7319ef64c2c84c2e9a3cdfb18"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a38419ff7319ef64c2c84c2e9a3cdfb18">to_string</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a38419ff7319ef64c2c84c2e9a3cdfb18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from the ITensor* type.  <a href="namespacearm__compute.xhtml#a38419ff7319ef64c2c84c2e9a3cdfb18">More...</a><br /></td></tr>
<tr class="separator:a38419ff7319ef64c2c84c2e9a3cdfb18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a300e12f3b8d36f3108956d8c692ce98d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a300e12f3b8d36f3108956d8c692ce98d">to_string</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a300e12f3b8d36f3108956d8c692ce98d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from the <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor.">ITensor</a>&amp; type.  <a href="namespacearm__compute.xhtml#a300e12f3b8d36f3108956d8c692ce98d">More...</a><br /></td></tr>
<tr class="separator:a300e12f3b8d36f3108956d8c692ce98d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa32488ee1dd78e0464ed23e8cc2b6e49">to_string</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dimensions)</td></tr>
<tr class="memdesc:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> type.  <a href="namespacearm__compute.xhtml#aa32488ee1dd78e0464ed23e8cc2b6e49">More...</a><br /></td></tr>
<tr class="separator:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c4486f45128be7156e38e6dea345a16"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1c4486f45128be7156e38e6dea345a16">to_string</a> (const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;stride)</td></tr>
<tr class="memdesc:a1c4486f45128be7156e38e6dea345a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> type.  <a href="namespacearm__compute.xhtml#a1c4486f45128be7156e38e6dea345a16">More...</a><br /></td></tr>
<tr class="separator:a1c4486f45128be7156e38e6dea345a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d9b56d1b106b79fc5c5411372222d0f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d9b56d1b106b79fc5c5411372222d0f">to_string</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a9d9b56d1b106b79fc5c5411372222d0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> type.  <a href="namespacearm__compute.xhtml#a9d9b56d1b106b79fc5c5411372222d0f">More...</a><br /></td></tr>
<tr class="separator:a9d9b56d1b106b79fc5c5411372222d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a805a74997e303d29108845956a674387"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a805a74997e303d29108845956a674387">to_string</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</td></tr>
<tr class="memdesc:a805a74997e303d29108845956a674387"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> type.  <a href="namespacearm__compute.xhtml#a805a74997e303d29108845956a674387">More...</a><br /></td></tr>
<tr class="separator:a805a74997e303d29108845956a674387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc75dce8064a37effa5e71344b6a5d2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0fc75dce8064a37effa5e71344b6a5d2">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a0fc75dce8064a37effa5e71344b6a5d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" title="GEMM reshape information class.">GEMMReshapeInfo</a> type.  <a href="namespacearm__compute.xhtml#a0fc75dce8064a37effa5e71344b6a5d2">More...</a><br /></td></tr>
<tr class="separator:a0fc75dce8064a37effa5e71344b6a5d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fdae5de2d2cf2e7957f0299d17ce5ec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5fdae5de2d2cf2e7957f0299d17ce5ec">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a5fdae5de2d2cf2e7957f0299d17ce5ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> type.  <a href="namespacearm__compute.xhtml#a5fdae5de2d2cf2e7957f0299d17ce5ec">More...</a><br /></td></tr>
<tr class="separator:a5fdae5de2d2cf2e7957f0299d17ce5ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed8dc0f587448d14a1a33cbd5fc4f70"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6ed8dc0f587448d14a1a33cbd5fc4f70">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;dim)</td></tr>
<tr class="memdesc:a6ed8dc0f587448d14a1a33cbd5fc4f70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Window::Dimension</a> type.  <a href="namespacearm__compute.xhtml#a6ed8dc0f587448d14a1a33cbd5fc4f70">More...</a><br /></td></tr>
<tr class="separator:a6ed8dc0f587448d14a1a33cbd5fc4f70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc6e49991e36423027a467eab1e405b2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afc6e49991e36423027a467eab1e405b2">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:afc6e49991e36423027a467eab1e405b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> type.  <a href="namespacearm__compute.xhtml#afc6e49991e36423027a467eab1e405b2">More...</a><br /></td></tr>
<tr class="separator:afc6e49991e36423027a467eab1e405b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26a595cd5522bae4fa1c4f2fb9b8f4d5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a26a595cd5522bae4fa1c4f2fb9b8f4d5">to_string</a> (const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a26a595cd5522bae4fa1c4f2fb9b8f4d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_weights_info.xhtml" title="Convolution Layer Weights Information class.">WeightsInfo</a> type.  <a href="namespacearm__compute.xhtml#a26a595cd5522bae4fa1c4f2fb9b8f4d5">More...</a><br /></td></tr>
<tr class="separator:a26a595cd5522bae4fa1c4f2fb9b8f4d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adac3c1908846c6361e664a353ad1c3cf"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adac3c1908846c6361e664a353ad1c3cf">to_string</a> (const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;info)</td></tr>
<tr class="memdesc:adac3c1908846c6361e664a353ad1c3cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" title="GEMM reshape information class.">GEMMReshapeInfo</a> type.  <a href="namespacearm__compute.xhtml#adac3c1908846c6361e664a353ad1c3cf">More...</a><br /></td></tr>
<tr class="separator:adac3c1908846c6361e664a353ad1c3cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac2dfdfad6db71a5cf2ecee6b70f722"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8ac2dfdfad6db71a5cf2ecee6b70f722">to_string</a> (const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a8ac2dfdfad6db71a5cf2ecee6b70f722"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> type.  <a href="namespacearm__compute.xhtml#a8ac2dfdfad6db71a5cf2ecee6b70f722">More...</a><br /></td></tr>
<tr class="separator:a8ac2dfdfad6db71a5cf2ecee6b70f722"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6ea50ec0a98c2180e6530cfcb5eb366"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab6ea50ec0a98c2180e6530cfcb5eb366">to_string</a> (const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;dim)</td></tr>
<tr class="memdesc:ab6ea50ec0a98c2180e6530cfcb5eb366"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Window::Dimension</a> type.  <a href="namespacearm__compute.xhtml#ab6ea50ec0a98c2180e6530cfcb5eb366">More...</a><br /></td></tr>
<tr class="separator:ab6ea50ec0a98c2180e6530cfcb5eb366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99aba2774f142d36c6a286cbfe027772"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a99aba2774f142d36c6a286cbfe027772">to_string</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</td></tr>
<tr class="memdesc:a99aba2774f142d36c6a286cbfe027772"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a>&amp; type.  <a href="namespacearm__compute.xhtml#a99aba2774f142d36c6a286cbfe027772">More...</a><br /></td></tr>
<tr class="separator:a99aba2774f142d36c6a286cbfe027772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a329c465ec53776c2336d51c447117812"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a329c465ec53776c2336d51c447117812">to_string</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> *win)</td></tr>
<tr class="memdesc:a329c465ec53776c2336d51c447117812"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Window* type.  <a href="namespacearm__compute.xhtml#a329c465ec53776c2336d51c447117812">More...</a><br /></td></tr>
<tr class="separator:a329c465ec53776c2336d51c447117812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17881750c427aedd95deba46a4366ace"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a17881750c427aedd95deba46a4366ace">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_rectangle.xhtml">Rectangle</a> &amp;rect)</td></tr>
<tr class="memdesc:a17881750c427aedd95deba46a4366ace"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_rectangle.xhtml" title="Rectangle type.">Rectangle</a> type.  <a href="namespacearm__compute.xhtml#a17881750c427aedd95deba46a4366ace">More...</a><br /></td></tr>
<tr class="separator:a17881750c427aedd95deba46a4366ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23cde8eb733fe42667cd5b2c79141dba"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23cde8eb733fe42667cd5b2c79141dba">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> &amp;mode)</td></tr>
<tr class="memdesc:a23cde8eb733fe42667cd5b2c79141dba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingMode type.  <a href="namespacearm__compute.xhtml#a23cde8eb733fe42667cd5b2c79141dba">More...</a><br /></td></tr>
<tr class="separator:a23cde8eb733fe42667cd5b2c79141dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58c3c62a56ede81c516f987a263bc95a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a58c3c62a56ede81c516f987a263bc95a">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> &amp;mode)</td></tr>
<tr class="memdesc:a58c3c62a56ede81c516f987a263bc95a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingMode type.  <a href="namespacearm__compute.xhtml#a58c3c62a56ede81c516f987a263bc95a">More...</a><br /></td></tr>
<tr class="separator:a58c3c62a56ede81c516f987a263bc95a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8af36ae3a3613112c3a95e57f606359a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8af36ae3a3613112c3a95e57f606359a">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</td></tr>
<tr class="memdesc:a8af36ae3a3613112c3a95e57f606359a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> type.  <a href="namespacearm__compute.xhtml#a8af36ae3a3613112c3a95e57f606359a">More...</a><br /></td></tr>
<tr class="separator:a8af36ae3a3613112c3a95e57f606359a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c0e6c1c4cf10da25e7a7362ba151ba2"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2c0e6c1c4cf10da25e7a7362ba151ba2">to_string</a> (const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</td></tr>
<tr class="memdesc:a2c0e6c1c4cf10da25e7a7362ba151ba2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> type.  <a href="namespacearm__compute.xhtml#a2c0e6c1c4cf10da25e7a7362ba151ba2">More...</a><br /></td></tr>
<tr class="separator:a2c0e6c1c4cf10da25e7a7362ba151ba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0604106dd269acd58152a81ba87cc265"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0604106dd269acd58152a81ba87cc265">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;mode)</td></tr>
<tr class="memdesc:a0604106dd269acd58152a81ba87cc265"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the BorderMode type.  <a href="namespacearm__compute.xhtml#a0604106dd269acd58152a81ba87cc265">More...</a><br /></td></tr>
<tr class="separator:a0604106dd269acd58152a81ba87cc265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c9cde9144eaeceaf086377b9bc5a5be"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5c9cde9144eaeceaf086377b9bc5a5be">to_string</a> (const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;border)</td></tr>
<tr class="memdesc:a5c9cde9144eaeceaf086377b9bc5a5be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> type.  <a href="namespacearm__compute.xhtml#a5c9cde9144eaeceaf086377b9bc5a5be">More...</a><br /></td></tr>
<tr class="separator:a5c9cde9144eaeceaf086377b9bc5a5be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09b674dcee4a1b59f9c7c51ecaae40a6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a09b674dcee4a1b59f9c7c51ecaae40a6">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;padding)</td></tr>
<tr class="memdesc:a09b674dcee4a1b59f9c7c51ecaae40a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingList type.  <a href="namespacearm__compute.xhtml#a09b674dcee4a1b59f9c7c51ecaae40a6">More...</a><br /></td></tr>
<tr class="separator:a09b674dcee4a1b59f9c7c51ecaae40a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad710fdad147ab4ab21e14a7c49b3516a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad710fdad147ab4ab21e14a7c49b3516a">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;multiples)</td></tr>
<tr class="memdesc:ad710fdad147ab4ab21e14a7c49b3516a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Multiples type.  <a href="namespacearm__compute.xhtml#ad710fdad147ab4ab21e14a7c49b3516a">More...</a><br /></td></tr>
<tr class="separator:ad710fdad147ab4ab21e14a7c49b3516a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94bd78942b683c05cba85048537d3ee7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94bd78942b683c05cba85048537d3ee7">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> &amp;policy)</td></tr>
<tr class="memdesc:a94bd78942b683c05cba85048537d3ee7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the InterpolationPolicy type.  <a href="namespacearm__compute.xhtml#a94bd78942b683c05cba85048537d3ee7">More...</a><br /></td></tr>
<tr class="separator:a94bd78942b683c05cba85048537d3ee7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b8e815072ae54278cb1c91e254be4d3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5b8e815072ae54278cb1c91e254be4d3">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> &amp;policy)</td></tr>
<tr class="memdesc:a5b8e815072ae54278cb1c91e254be4d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the SamplingPolicy type.  <a href="namespacearm__compute.xhtml#a5b8e815072ae54278cb1c91e254be4d3">More...</a><br /></td></tr>
<tr class="separator:a5b8e815072ae54278cb1c91e254be4d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4287c6842a60e5f6bf309e55f8813527"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4287c6842a60e5f6bf309e55f8813527">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy)</td></tr>
<tr class="memdesc:a4287c6842a60e5f6bf309e55f8813527"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvertPolicy type.  <a href="namespacearm__compute.xhtml#a4287c6842a60e5f6bf309e55f8813527">More...</a><br /></td></tr>
<tr class="separator:a4287c6842a60e5f6bf309e55f8813527"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcc7e107e7dbd2ffac02189089c33e4f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adcc7e107e7dbd2ffac02189089c33e4f">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy)</td></tr>
<tr class="separator:adcc7e107e7dbd2ffac02189089c33e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b94aeca99a5d6b1a5723014a01faac0"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7b94aeca99a5d6b1a5723014a01faac0">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> &amp;op)</td></tr>
<tr class="memdesc:a7b94aeca99a5d6b1a5723014a01faac0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ArithmeticOperation type.  <a href="namespacearm__compute.xhtml#a7b94aeca99a5d6b1a5723014a01faac0">More...</a><br /></td></tr>
<tr class="separator:a7b94aeca99a5d6b1a5723014a01faac0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca516517d47534e06d4c57e7bc706b2a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aca516517d47534e06d4c57e7bc706b2a">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> &amp;op)</td></tr>
<tr class="memdesc:aca516517d47534e06d4c57e7bc706b2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Arithmetic Operation.  <a href="namespacearm__compute.xhtml#aca516517d47534e06d4c57e7bc706b2a">More...</a><br /></td></tr>
<tr class="separator:aca516517d47534e06d4c57e7bc706b2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a292505a0ec686541cfe0dcfd1d651ec5"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a292505a0ec686541cfe0dcfd1d651ec5">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> &amp;op)</td></tr>
<tr class="memdesc:a292505a0ec686541cfe0dcfd1d651ec5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Reduction Operations.  <a href="namespacearm__compute.xhtml#a292505a0ec686541cfe0dcfd1d651ec5">More...</a><br /></td></tr>
<tr class="separator:a292505a0ec686541cfe0dcfd1d651ec5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae534105c7ea67999ccbb34a0ed567cd"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae534105c7ea67999ccbb34a0ed567cd">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> &amp;op)</td></tr>
<tr class="memdesc:aae534105c7ea67999ccbb34a0ed567cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Reduction Operations.  <a href="namespacearm__compute.xhtml#aae534105c7ea67999ccbb34a0ed567cd">More...</a><br /></td></tr>
<tr class="separator:aae534105c7ea67999ccbb34a0ed567cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac34f5e54ad35f26328f8706b3d28b43"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aac34f5e54ad35f26328f8706b3d28b43">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> &amp;op)</td></tr>
<tr class="memdesc:aac34f5e54ad35f26328f8706b3d28b43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Comparison Operations.  <a href="namespacearm__compute.xhtml#aac34f5e54ad35f26328f8706b3d28b43">More...</a><br /></td></tr>
<tr class="separator:aac34f5e54ad35f26328f8706b3d28b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accfc6f2e5fb354e1fb19a7067b6efdec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#accfc6f2e5fb354e1fb19a7067b6efdec">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> &amp;op)</td></tr>
<tr class="memdesc:accfc6f2e5fb354e1fb19a7067b6efdec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Elementwise unary Operations.  <a href="namespacearm__compute.xhtml#accfc6f2e5fb354e1fb19a7067b6efdec">More...</a><br /></td></tr>
<tr class="separator:accfc6f2e5fb354e1fb19a7067b6efdec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77007283b591963074b8398202e90f5a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a77007283b591963074b8398202e90f5a">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> &amp;op)</td></tr>
<tr class="memdesc:a77007283b591963074b8398202e90f5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Comparison Operations.  <a href="namespacearm__compute.xhtml#a77007283b591963074b8398202e90f5a">More...</a><br /></td></tr>
<tr class="separator:a77007283b591963074b8398202e90f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab76157462925ad1b13149317ded2e404"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab76157462925ad1b13149317ded2e404">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> &amp;op)</td></tr>
<tr class="memdesc:ab76157462925ad1b13149317ded2e404"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Elementwise unary Operations.  <a href="namespacearm__compute.xhtml#ab76157462925ad1b13149317ded2e404">More...</a><br /></td></tr>
<tr class="separator:ab76157462925ad1b13149317ded2e404"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8b676c38d9b8d9d9bde7caec5720bd9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad8b676c38d9b8d9d9bde7caec5720bd9">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:ad8b676c38d9b8d9d9bde7caec5720bd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Norm Type.  <a href="namespacearm__compute.xhtml#ad8b676c38d9b8d9d9bde7caec5720bd9">More...</a><br /></td></tr>
<tr class="separator:ad8b676c38d9b8d9d9bde7caec5720bd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2872d19dd10dc3117813d291c08e0383"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2872d19dd10dc3117813d291c08e0383">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a2872d19dd10dc3117813d291c08e0383"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling Type.  <a href="namespacearm__compute.xhtml#a2872d19dd10dc3117813d291c08e0383">More...</a><br /></td></tr>
<tr class="separator:a2872d19dd10dc3117813d291c08e0383"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef515348c5f7f73c89aa4b8a47a02bc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acef515348c5f7f73c89aa4b8a47a02bc">to_string</a> (const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:acef515348c5f7f73c89aa4b8a47a02bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling Layer Info.  <a href="namespacearm__compute.xhtml#acef515348c5f7f73c89aa4b8a47a02bc">More...</a><br /></td></tr>
<tr class="separator:acef515348c5f7f73c89aa4b8a47a02bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1f3a48143de769a09a4f668ea16413c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af1f3a48143de769a09a4f668ea16413c">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a> &amp;size)</td></tr>
<tr class="memdesc:af1f3a48143de769a09a4f668ea16413c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size3_d.xhtml" title="Class for specifying the size of a 3D shape or object.">Size3D</a> type.  <a href="namespacearm__compute.xhtml#af1f3a48143de769a09a4f668ea16413c">More...</a><br /></td></tr>
<tr class="separator:af1f3a48143de769a09a4f668ea16413c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4700eba8503b6b8b26ab0f50590108ae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4700eba8503b6b8b26ab0f50590108ae">to_string</a> (const <a class="el" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a> &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a4700eba8503b6b8b26ab0f50590108ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size3_d.xhtml" title="Class for specifying the size of a 3D shape or object.">Size3D</a> type.  <a href="namespacearm__compute.xhtml#a4700eba8503b6b8b26ab0f50590108ae">More...</a><br /></td></tr>
<tr class="separator:a4700eba8503b6b8b26ab0f50590108ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7d2b4539f3cc7b82c76c60a4b6a7f37"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad7d2b4539f3cc7b82c76c60a4b6a7f37">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> &amp;padding3d)</td></tr>
<tr class="memdesc:ad7d2b4539f3cc7b82c76c60a4b6a7f37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_padding3_d.xhtml" title="Padding information for 3D operations like Conv3d.">Padding3D</a> type.  <a href="namespacearm__compute.xhtml#ad7d2b4539f3cc7b82c76c60a4b6a7f37">More...</a><br /></td></tr>
<tr class="separator:ad7d2b4539f3cc7b82c76c60a4b6a7f37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaafb0628b4052ead4fc866f92056420"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaaafb0628b4052ead4fc866f92056420">to_string</a> (const <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> &amp;padding3d)</td></tr>
<tr class="memdesc:aaaafb0628b4052ead4fc866f92056420"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> to string.  <a href="namespacearm__compute.xhtml#aaaafb0628b4052ead4fc866f92056420">More...</a><br /></td></tr>
<tr class="separator:aaaafb0628b4052ead4fc866f92056420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31a16fbea569d74c328824a60f07f626"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a31a16fbea569d74c328824a60f07f626">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;rounding_type)</td></tr>
<tr class="memdesc:a31a16fbea569d74c328824a60f07f626"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DimensionRoundingType type.  <a href="namespacearm__compute.xhtml#a31a16fbea569d74c328824a60f07f626">More...</a><br /></td></tr>
<tr class="separator:a31a16fbea569d74c328824a60f07f626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5ed11fc52a25ba597243567bbd8793d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac5ed11fc52a25ba597243567bbd8793d">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ac5ed11fc52a25ba597243567bbd8793d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling 3d Layer Info.  <a href="namespacearm__compute.xhtml#ac5ed11fc52a25ba597243567bbd8793d">More...</a><br /></td></tr>
<tr class="separator:ac5ed11fc52a25ba597243567bbd8793d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae816bdec63b59d4dd7a1e1097beb9718"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae816bdec63b59d4dd7a1e1097beb9718">to_string</a> (const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae816bdec63b59d4dd7a1e1097beb9718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling 3d Layer Info.  <a href="namespacearm__compute.xhtml#ae816bdec63b59d4dd7a1e1097beb9718">More...</a><br /></td></tr>
<tr class="separator:ae816bdec63b59d4dd7a1e1097beb9718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae62747a5179626328bf7e67c709d5fcf"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae62747a5179626328bf7e67c709d5fcf">to_string</a> (const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae62747a5179626328bf7e67c709d5fcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml" title="PriorBox layer info.">PriorBoxLayerInfo</a>.  <a href="namespacearm__compute.xhtml#ae62747a5179626328bf7e67c709d5fcf">More...</a><br /></td></tr>
<tr class="separator:ae62747a5179626328bf7e67c709d5fcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab91d110e020f6ed987e05e82df3e350b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab91d110e020f6ed987e05e82df3e350b">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;size)</td></tr>
<tr class="memdesc:ab91d110e020f6ed987e05e82df3e350b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size2_d.xhtml" title="Class for specifying the size of an image or rectangle.">Size2D</a> type.  <a href="namespacearm__compute.xhtml#ab91d110e020f6ed987e05e82df3e350b">More...</a><br /></td></tr>
<tr class="separator:ab91d110e020f6ed987e05e82df3e350b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee88a2c259879eb9dc18cb5965e87c29"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aee88a2c259879eb9dc18cb5965e87c29">to_string</a> (const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:aee88a2c259879eb9dc18cb5965e87c29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size2_d.xhtml" title="Class for specifying the size of an image or rectangle.">Size2D</a> type.  <a href="namespacearm__compute.xhtml#aee88a2c259879eb9dc18cb5965e87c29">More...</a><br /></td></tr>
<tr class="separator:aee88a2c259879eb9dc18cb5965e87c29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd35c1c3fb716078b1f4a25981defac4"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abd35c1c3fb716078b1f4a25981defac4">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;conv_method)</td></tr>
<tr class="memdesc:abd35c1c3fb716078b1f4a25981defac4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvolutionMethod type.  <a href="namespacearm__compute.xhtml#abd35c1c3fb716078b1f4a25981defac4">More...</a><br /></td></tr>
<tr class="separator:abd35c1c3fb716078b1f4a25981defac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a853d44a32a328fb4455f6200a11c4785"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a853d44a32a328fb4455f6200a11c4785">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;conv_method)</td></tr>
<tr class="memdesc:a853d44a32a328fb4455f6200a11c4785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvolutionMethod type.  <a href="namespacearm__compute.xhtml#a853d44a32a328fb4455f6200a11c4785">More...</a><br /></td></tr>
<tr class="separator:a853d44a32a328fb4455f6200a11c4785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4d95d65a62a085e929ab0a1a77add2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1f4d95d65a62a085e929ab0a1a77add2">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;gpu_target)</td></tr>
<tr class="memdesc:a1f4d95d65a62a085e929ab0a1a77add2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the GPUTarget type.  <a href="namespacearm__compute.xhtml#a1f4d95d65a62a085e929ab0a1a77add2">More...</a><br /></td></tr>
<tr class="separator:a1f4d95d65a62a085e929ab0a1a77add2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee29ccfc095313663fc954f581ddf40a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aee29ccfc095313663fc954f581ddf40a">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;gpu_target)</td></tr>
<tr class="memdesc:aee29ccfc095313663fc954f581ddf40a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the GPUTarget type.  <a href="namespacearm__compute.xhtml#aee29ccfc095313663fc954f581ddf40a">More...</a><br /></td></tr>
<tr class="separator:aee29ccfc095313663fc954f581ddf40a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a907c93ba5daaabf6af7095f20340d024"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a907c93ba5daaabf6af7095f20340d024">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> &amp;detection_window)</td></tr>
<tr class="memdesc:a907c93ba5daaabf6af7095f20340d024"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_detection_window.xhtml" title="Detection window used for the object detection.">DetectionWindow</a> type.  <a href="namespacearm__compute.xhtml#a907c93ba5daaabf6af7095f20340d024">More...</a><br /></td></tr>
<tr class="separator:a907c93ba5daaabf6af7095f20340d024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28634df052522fe60e15a0128ba924cc"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a28634df052522fe60e15a0128ba924cc">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> &amp;detection_code)</td></tr>
<tr class="memdesc:a28634df052522fe60e15a0128ba924cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DetectionOutputLayerCodeType type.  <a href="namespacearm__compute.xhtml#a28634df052522fe60e15a0128ba924cc">More...</a><br /></td></tr>
<tr class="separator:a28634df052522fe60e15a0128ba924cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41c7dc2aa88c4e30effb2e3f550de481"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a41c7dc2aa88c4e30effb2e3f550de481">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> &amp;detection_code)</td></tr>
<tr class="memdesc:a41c7dc2aa88c4e30effb2e3f550de481"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DetectionOutputLayerCodeType type.  <a href="namespacearm__compute.xhtml#a41c7dc2aa88c4e30effb2e3f550de481">More...</a><br /></td></tr>
<tr class="separator:a41c7dc2aa88c4e30effb2e3f550de481"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22b40e983993e76ab39ce878fb111b9b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a22b40e983993e76ab39ce878fb111b9b">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;detection_info)</td></tr>
<tr class="memdesc:a22b40e983993e76ab39ce878fb111b9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" title="Detection Output layer info.">DetectionOutputLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#a22b40e983993e76ab39ce878fb111b9b">More...</a><br /></td></tr>
<tr class="separator:a22b40e983993e76ab39ce878fb111b9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4084858fda1caec39457dd70322e6bd6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4084858fda1caec39457dd70322e6bd6">to_string</a> (const <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;detection_info)</td></tr>
<tr class="memdesc:a4084858fda1caec39457dd70322e6bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" title="Detection Output layer info.">DetectionOutputLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#a4084858fda1caec39457dd70322e6bd6">More...</a><br /></td></tr>
<tr class="separator:a4084858fda1caec39457dd70322e6bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94809adf238fe4a002701316c27b9bec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94809adf238fe4a002701316c27b9bec">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;detection_info)</td></tr>
<tr class="memdesc:a94809adf238fe4a002701316c27b9bec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info.">DetectionPostProcessLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#a94809adf238fe4a002701316c27b9bec">More...</a><br /></td></tr>
<tr class="separator:a94809adf238fe4a002701316c27b9bec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca72973a9a95755e65d17de30f4232e8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aca72973a9a95755e65d17de30f4232e8">to_string</a> (const <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;detection_info)</td></tr>
<tr class="memdesc:aca72973a9a95755e65d17de30f4232e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info.">DetectionPostProcessLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#aca72973a9a95755e65d17de30f4232e8">More...</a><br /></td></tr>
<tr class="separator:aca72973a9a95755e65d17de30f4232e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905d7ec8787e8c4b7e88b0a2faaccd1f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a905d7ec8787e8c4b7e88b0a2faaccd1f">to_string</a> (const <a class="el" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> &amp;detection_window)</td></tr>
<tr class="memdesc:a905d7ec8787e8c4b7e88b0a2faaccd1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_detection_window.xhtml" title="Detection window used for the object detection.">DetectionWindow</a> type.  <a href="namespacearm__compute.xhtml#a905d7ec8787e8c4b7e88b0a2faaccd1f">More...</a><br /></td></tr>
<tr class="separator:a905d7ec8787e8c4b7e88b0a2faaccd1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7393414bb7b814bf70e0399f2347847"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae7393414bb7b814bf70e0399f2347847">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae7393414bb7b814bf70e0399f2347847"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a>.  <a href="namespacearm__compute.xhtml#ae7393414bb7b814bf70e0399f2347847">More...</a><br /></td></tr>
<tr class="separator:ae7393414bb7b814bf70e0399f2347847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3cba8a4493cee4c431d128eed565ffe"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af3cba8a4493cee4c431d128eed565ffe">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;info)</td></tr>
<tr class="memdesc:af3cba8a4493cee4c431d128eed565ffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_winograd_info.xhtml" title="Winograd information.">WinogradInfo</a> type.  <a href="namespacearm__compute.xhtml#af3cba8a4493cee4c431d128eed565ffe">More...</a><br /></td></tr>
<tr class="separator:af3cba8a4493cee4c431d128eed565ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37cc282b0852aab04b13a6e6566adda7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a37cc282b0852aab04b13a6e6566adda7">to_string</a> (const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="separator:a37cc282b0852aab04b13a6e6566adda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad87338ac39245d071b66a4f55cb06a16"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad87338ac39245d071b66a4f55cb06a16">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> val)</td></tr>
<tr class="memdesc:ad87338ac39245d071b66a4f55cb06a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a CLTunerMode value to a string.  <a href="namespacearm__compute.xhtml#ad87338ac39245d071b66a4f55cb06a16">More...</a><br /></td></tr>
<tr class="separator:ad87338ac39245d071b66a4f55cb06a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b050d661e688bf8ae07bdcc2a32c9a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a95b050d661e688bf8ae07bdcc2a32c9a">to_string</a> (<a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a> val)</td></tr>
<tr class="memdesc:a95b050d661e688bf8ae07bdcc2a32c9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a> to string.  <a href="namespacearm__compute.xhtml#a95b050d661e688bf8ae07bdcc2a32c9a">More...</a><br /></td></tr>
<tr class="separator:a95b050d661e688bf8ae07bdcc2a32c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac470b79f272c53fc4da4910370a69f24"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac470b79f272c53fc4da4910370a69f24">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> &amp;val)</td></tr>
<tr class="memdesc:ac470b79f272c53fc4da4910370a69f24"><td class="mdescLeft">&#160;</td><td class="mdescRight">[Print CLTunerMode type]  <a href="namespacearm__compute.xhtml#ac470b79f272c53fc4da4910370a69f24">More...</a><br /></td></tr>
<tr class="separator:ac470b79f272c53fc4da4910370a69f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ee5b5cbe61f0862d907d9db15c3d9d6"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1ee5b5cbe61f0862d907d9db15c3d9d6">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;conv_info)</td></tr>
<tr class="memdesc:a1ee5b5cbe61f0862d907d9db15c3d9d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> type.  <a href="namespacearm__compute.xhtml#a1ee5b5cbe61f0862d907d9db15c3d9d6">More...</a><br /></td></tr>
<tr class="separator:a1ee5b5cbe61f0862d907d9db15c3d9d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c300f4790452fc1c97b9f6927f41234"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7c300f4790452fc1c97b9f6927f41234">to_string</a> (const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a7c300f4790452fc1c97b9f6927f41234"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> to string.  <a href="namespacearm__compute.xhtml#a7c300f4790452fc1c97b9f6927f41234">More...</a><br /></td></tr>
<tr class="separator:a7c300f4790452fc1c97b9f6927f41234"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa98488160f8bcb0edfc5b610ce3ff4"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#affa98488160f8bcb0edfc5b610ce3ff4">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;layer_info)</td></tr>
<tr class="memdesc:affa98488160f8bcb0edfc5b610ce3ff4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#affa98488160f8bcb0edfc5b610ce3ff4">More...</a><br /></td></tr>
<tr class="separator:affa98488160f8bcb0edfc5b610ce3ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74a21df79a71f282054cf00135e682c9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a74a21df79a71f282054cf00135e682c9">to_string</a> (const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a74a21df79a71f282054cf00135e682c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> to string.  <a href="namespacearm__compute.xhtml#a74a21df79a71f282054cf00135e682c9">More...</a><br /></td></tr>
<tr class="separator:a74a21df79a71f282054cf00135e682c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae66eb1f2c65e413518cb5b5ea4a31bd3"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae66eb1f2c65e413518cb5b5ea4a31bd3">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> &amp;gemm_type)</td></tr>
<tr class="memdesc:ae66eb1f2c65e413518cb5b5ea4a31bd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the GEMMLowpOutputStageType type.  <a href="namespacearm__compute.xhtml#ae66eb1f2c65e413518cb5b5ea4a31bd3">More...</a><br /></td></tr>
<tr class="separator:ae66eb1f2c65e413518cb5b5ea4a31bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abed5f21c42d975c4f1c6fac1c0e97ce6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abed5f21c42d975c4f1c6fac1c0e97ce6">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> &amp;gemm_type)</td></tr>
<tr class="memdesc:abed5f21c42d975c4f1c6fac1c0e97ce6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> to string.  <a href="namespacearm__compute.xhtml#abed5f21c42d975c4f1c6fac1c0e97ce6">More...</a><br /></td></tr>
<tr class="separator:abed5f21c42d975c4f1c6fac1c0e97ce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4898872476b3f7f30adeaaea9128b585"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4898872476b3f7f30adeaaea9128b585">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:a4898872476b3f7f30adeaaea9128b585"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> type.  <a href="namespacearm__compute.xhtml#a4898872476b3f7f30adeaaea9128b585">More...</a><br /></td></tr>
<tr class="separator:a4898872476b3f7f30adeaaea9128b585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1304e887f59012f78e2caf39627b2e4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af1304e887f59012f78e2caf39627b2e4">to_string</a> (const <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:af1304e887f59012f78e2caf39627b2e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> to string.  <a href="namespacearm__compute.xhtml#af1304e887f59012f78e2caf39627b2e4">More...</a><br /></td></tr>
<tr class="separator:af1304e887f59012f78e2caf39627b2e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ce1b6b7e66e67553c49eb9c76229ce1"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8ce1b6b7e66e67553c49eb9c76229ce1">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> &amp;conv_info)</td></tr>
<tr class="memdesc:a8ce1b6b7e66e67553c49eb9c76229ce1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml" title="Descriptor used by the 2d Convolution function.">Conv2dInfo</a> type.  <a href="namespacearm__compute.xhtml#a8ce1b6b7e66e67553c49eb9c76229ce1">More...</a><br /></td></tr>
<tr class="separator:a8ce1b6b7e66e67553c49eb9c76229ce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25786a77392aab8dc06fd9847cfadb21"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a25786a77392aab8dc06fd9847cfadb21">to_string</a> (const <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> &amp;conv_info)</td></tr>
<tr class="memdesc:a25786a77392aab8dc06fd9847cfadb21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> to string.  <a href="namespacearm__compute.xhtml#a25786a77392aab8dc06fd9847cfadb21">More...</a><br /></td></tr>
<tr class="separator:a25786a77392aab8dc06fd9847cfadb21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5826d71db3a92e827e7651bb1e6a15a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac5826d71db3a92e827e7651bb1e6a15a">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;pixel_value)</td></tr>
<tr class="memdesc:ac5826d71db3a92e827e7651bb1e6a15a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> type.  <a href="namespacearm__compute.xhtml#ac5826d71db3a92e827e7651bb1e6a15a">More...</a><br /></td></tr>
<tr class="separator:ac5826d71db3a92e827e7651bb1e6a15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab397a8d78a6c41e737d0d5b170107541"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab397a8d78a6c41e737d0d5b170107541">to_string</a> (const <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;pixel_value)</td></tr>
<tr class="memdesc:ab397a8d78a6c41e737d0d5b170107541"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> to string.  <a href="namespacearm__compute.xhtml#ab397a8d78a6c41e737d0d5b170107541">More...</a><br /></td></tr>
<tr class="separator:ab397a8d78a6c41e737d0d5b170107541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3427257089fd801e6208bfbf89873a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b3427257089fd801e6208bfbf89873a">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> &amp;scale_info)</td></tr>
<tr class="memdesc:a8b3427257089fd801e6208bfbf89873a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a8b3427257089fd801e6208bfbf89873a">More...</a><br /></td></tr>
<tr class="separator:a8b3427257089fd801e6208bfbf89873a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade0cbc862083452e8102afd18f639621"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ade0cbc862083452e8102afd18f639621">to_string</a> (const <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> &amp;scale_info)</td></tr>
<tr class="memdesc:ade0cbc862083452e8102afd18f639621"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> to string.  <a href="namespacearm__compute.xhtml#ade0cbc862083452e8102afd18f639621">More...</a><br /></td></tr>
<tr class="separator:ade0cbc862083452e8102afd18f639621"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94349811cc9fac558f49c221830565c1"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94349811cc9fac558f49c221830565c1">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">FFTDirection</a> &amp;fft_dir)</td></tr>
<tr class="memdesc:a94349811cc9fac558f49c221830565c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the FFTDirection type.  <a href="namespacearm__compute.xhtml#a94349811cc9fac558f49c221830565c1">More...</a><br /></td></tr>
<tr class="separator:a94349811cc9fac558f49c221830565c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f3b9f93958bbf939d6889d96c0fc043"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1f3b9f93958bbf939d6889d96c0fc043">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">FFTDirection</a> &amp;fft_dir)</td></tr>
<tr class="memdesc:a1f3b9f93958bbf939d6889d96c0fc043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> to string.  <a href="namespacearm__compute.xhtml#a1f3b9f93958bbf939d6889d96c0fc043">More...</a><br /></td></tr>
<tr class="separator:a1f3b9f93958bbf939d6889d96c0fc043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d2d5ca692cb82f43e17e51ab1bb356"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a99d2d5ca692cb82f43e17e51ab1bb356">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> &amp;fft1d_info)</td></tr>
<tr class="memdesc:a99d2d5ca692cb82f43e17e51ab1bb356"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> type.  <a href="namespacearm__compute.xhtml#a99d2d5ca692cb82f43e17e51ab1bb356">More...</a><br /></td></tr>
<tr class="separator:a99d2d5ca692cb82f43e17e51ab1bb356"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac86a72b6e929345c7273112de096b0d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aac86a72b6e929345c7273112de096b0d">to_string</a> (const <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> &amp;fft1d_info)</td></tr>
<tr class="memdesc:aac86a72b6e929345c7273112de096b0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> to string.  <a href="namespacearm__compute.xhtml#aac86a72b6e929345c7273112de096b0d">More...</a><br /></td></tr>
<tr class="separator:aac86a72b6e929345c7273112de096b0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aabe11f72f8994b26e2a2fd66860738"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7aabe11f72f8994b26e2a2fd66860738">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> &amp;fft2d_info)</td></tr>
<tr class="memdesc:a7aabe11f72f8994b26e2a2fd66860738"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" title="Descriptor used by the FFT2D function.">FFT2DInfo</a> type.  <a href="namespacearm__compute.xhtml#a7aabe11f72f8994b26e2a2fd66860738">More...</a><br /></td></tr>
<tr class="separator:a7aabe11f72f8994b26e2a2fd66860738"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10596a1cbbcc6afefb9ee52a38375250"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a10596a1cbbcc6afefb9ee52a38375250">to_string</a> (const <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> &amp;fft2d_info)</td></tr>
<tr class="memdesc:a10596a1cbbcc6afefb9ee52a38375250"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> to string.  <a href="namespacearm__compute.xhtml#a10596a1cbbcc6afefb9ee52a38375250">More...</a><br /></td></tr>
<tr class="separator:a10596a1cbbcc6afefb9ee52a38375250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55c00b11e26573f0151cc26a99589a6f"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a55c00b11e26573f0151cc26a99589a6f">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> &amp;coord_2d)</td></tr>
<tr class="memdesc:a55c00b11e26573f0151cc26a99589a6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" title="Coordinate type.">Coordinates2D</a> type.  <a href="namespacearm__compute.xhtml#a55c00b11e26573f0151cc26a99589a6f">More...</a><br /></td></tr>
<tr class="separator:a55c00b11e26573f0151cc26a99589a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb61ef573b258dcd5334042e4d35b0d8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abb61ef573b258dcd5334042e4d35b0d8">to_string</a> (const <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> &amp;coord_2d)</td></tr>
<tr class="memdesc:abb61ef573b258dcd5334042e4d35b0d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="struct_coordinates2_d.xhtml">Coordinates2D</a> to string.  <a href="namespacearm__compute.xhtml#abb61ef573b258dcd5334042e4d35b0d8">More...</a><br /></td></tr>
<tr class="separator:abb61ef573b258dcd5334042e4d35b0d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afce06ffb37193572ef548fa9c3511014"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afce06ffb37193572ef548fa9c3511014">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> &amp;fuse_type)</td></tr>
<tr class="memdesc:afce06ffb37193572ef548fa9c3511014"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the FuseBatchNormalizationType type.  <a href="namespacearm__compute.xhtml#afce06ffb37193572ef548fa9c3511014">More...</a><br /></td></tr>
<tr class="separator:afce06ffb37193572ef548fa9c3511014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d9c6ce35d2c94dd2ec505ae59bae2c0"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6d9c6ce35d2c94dd2ec505ae59bae2c0">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> &amp;fuse_type)</td></tr>
<tr class="memdesc:a6d9c6ce35d2c94dd2ec505ae59bae2c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> to string.  <a href="namespacearm__compute.xhtml#a6d9c6ce35d2c94dd2ec505ae59bae2c0">More...</a><br /></td></tr>
<tr class="separator:a6d9c6ce35d2c94dd2ec505ae59bae2c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80c7006c1bbf755a18e5d26eb4b141c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae80c7006c1bbf755a18e5d26eb4b141c">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae80c7006c1bbf755a18e5d26eb4b141c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" title="Descriptor used by the softmax kernels.">SoftmaxKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#ae80c7006c1bbf755a18e5d26eb4b141c">More...</a><br /></td></tr>
<tr class="separator:ae80c7006c1bbf755a18e5d26eb4b141c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c3f4124e52a42fbd87b5208a37d4e3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a79c3f4124e52a42fbd87b5208a37d4e3">to_string</a> (const <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a79c3f4124e52a42fbd87b5208a37d4e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> to string.  <a href="namespacearm__compute.xhtml#a79c3f4124e52a42fbd87b5208a37d4e3">More...</a><br /></td></tr>
<tr class="separator:a79c3f4124e52a42fbd87b5208a37d4e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3495dbac674f6aa93c41efc92f1d3143"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3495dbac674f6aa93c41efc92f1d3143"><td class="memTemplItemLeft" align="right" valign="top">::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3495dbac674f6aa93c41efc92f1d3143">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; T &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:a3495dbac674f6aa93c41efc92f1d3143"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a3495dbac674f6aa93c41efc92f1d3143">More...</a><br /></td></tr>
<tr class="separator:a3495dbac674f6aa93c41efc92f1d3143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08200627f52a255db721b79aff58ac04"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a08200627f52a255db721b79aff58ac04"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a08200627f52a255db721b79aff58ac04">to_string</a> (const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; T &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:a08200627f52a255db721b79aff58ac04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to string.  <a href="namespacearm__compute.xhtml#a08200627f52a255db721b79aff58ac04">More...</a><br /></td></tr>
<tr class="separator:a08200627f52a255db721b79aff58ac04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca07e8e6fa2966cfdeb9fdd77d2f02bc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aca07e8e6fa2966cfdeb9fdd77d2f02bc">to_string</a> (const uint8_t num)</td></tr>
<tr class="memdesc:aca07e8e6fa2966cfdeb9fdd77d2f02bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to string.  <a href="namespacearm__compute.xhtml#aca07e8e6fa2966cfdeb9fdd77d2f02bc">More...</a><br /></td></tr>
<tr class="separator:aca07e8e6fa2966cfdeb9fdd77d2f02bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b383b77aea31f502c2712a034f6286c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6b383b77aea31f502c2712a034f6286c">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> &amp;nms_type)</td></tr>
<tr class="memdesc:a6b383b77aea31f502c2712a034f6286c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available non maxima suppression types.  <a href="namespacearm__compute.xhtml#a6b383b77aea31f502c2712a034f6286c">More...</a><br /></td></tr>
<tr class="separator:a6b383b77aea31f502c2712a034f6286c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5285db5b7a825c241e6fdf99e489e35f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5285db5b7a825c241e6fdf99e489e35f">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> nms_type)</td></tr>
<tr class="memdesc:a5285db5b7a825c241e6fdf99e489e35f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> to string.  <a href="namespacearm__compute.xhtml#a5285db5b7a825c241e6fdf99e489e35f">More...</a><br /></td></tr>
<tr class="separator:a5285db5b7a825c241e6fdf99e489e35f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8052968d0b455bc9378c0df27e8e4ba"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab8052968d0b455bc9378c0df27e8e4ba">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ab8052968d0b455bc9378c0df27e8e4ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" title="BoxWithNonMaximaSuppressionLimit Information class.">BoxNMSLimitInfo</a> type.  <a href="namespacearm__compute.xhtml#ab8052968d0b455bc9378c0df27e8e4ba">More...</a><br /></td></tr>
<tr class="separator:ab8052968d0b455bc9378c0df27e8e4ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a360e44a0287cbeb449768ec22a78828b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a360e44a0287cbeb449768ec22a78828b">to_string</a> (const <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a360e44a0287cbeb449768ec22a78828b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> to string.  <a href="namespacearm__compute.xhtml#a360e44a0287cbeb449768ec22a78828b">More...</a><br /></td></tr>
<tr class="separator:a360e44a0287cbeb449768ec22a78828b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71f3cd5e5f519ddbac447c2f76b5b258"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a71f3cd5e5f519ddbac447c2f76b5b258">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;rounding_type)</td></tr>
<tr class="memdesc:a71f3cd5e5f519ddbac447c2f76b5b258"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> to string.  <a href="namespacearm__compute.xhtml#a71f3cd5e5f519ddbac447c2f76b5b258">More...</a><br /></td></tr>
<tr class="separator:a71f3cd5e5f519ddbac447c2f76b5b258"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139447eca91a24ca2849e6d9b00cdc49"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a139447eca91a24ca2849e6d9b00cdc49">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info)</td></tr>
<tr class="memdesc:a139447eca91a24ca2849e6d9b00cdc49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml" title="Descriptor used by the 3d Convolution function.">Conv3dInfo</a> type.  <a href="namespacearm__compute.xhtml#a139447eca91a24ca2849e6d9b00cdc49">More...</a><br /></td></tr>
<tr class="separator:a139447eca91a24ca2849e6d9b00cdc49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01c3f2109ee2d0889187eb59ac23d47a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a01c3f2109ee2d0889187eb59ac23d47a">to_string</a> (const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info)</td></tr>
<tr class="memdesc:a01c3f2109ee2d0889187eb59ac23d47a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml" title="Descriptor used by the 3d Convolution function.">Conv3dInfo</a> type.  <a href="namespacearm__compute.xhtml#a01c3f2109ee2d0889187eb59ac23d47a">More...</a><br /></td></tr>
<tr class="separator:a01c3f2109ee2d0889187eb59ac23d47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45d9cdf2b9e92d2ca49ce90e5ee85d35"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45d9cdf2b9e92d2ca49ce90e5ee85d35">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> wf)</td></tr>
<tr class="memdesc:a45d9cdf2b9e92d2ca49ce90e5ee85d35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> type.  <a href="namespacearm__compute.xhtml#a45d9cdf2b9e92d2ca49ce90e5ee85d35">More...</a><br /></td></tr>
<tr class="separator:a45d9cdf2b9e92d2ca49ce90e5ee85d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfae87a8a1f4a5af347d08f093e11b85"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acfae87a8a1f4a5af347d08f093e11b85">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &amp;wf)</td></tr>
<tr class="memdesc:acfae87a8a1f4a5af347d08f093e11b85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> type.  <a href="namespacearm__compute.xhtml#acfae87a8a1f4a5af347d08f093e11b85">More...</a><br /></td></tr>
<tr class="separator:acfae87a8a1f4a5af347d08f093e11b85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae40f748b95cd9329be96b501914f5892"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae40f748b95cd9329be96b501914f5892">to_string</a> (const std::tuple&lt; <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &gt; values)</td></tr>
<tr class="memdesc:ae40f748b95cd9329be96b501914f5892"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the std::tuple&lt;TensorShape, TensorShape, arm_compute::WeightFormat&gt; tuple.  <a href="namespacearm__compute.xhtml#ae40f748b95cd9329be96b501914f5892">More...</a><br /></td></tr>
<tr class="separator:ae40f748b95cd9329be96b501914f5892"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a6ce866fff96872b6eb71278693450f"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5a6ce866fff96872b6eb71278693450f">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> &amp;padding2d)</td></tr>
<tr class="memdesc:a5a6ce866fff96872b6eb71278693450f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_padding2_d.xhtml" title="Padding and stride information class.">Padding2D</a> type.  <a href="namespacearm__compute.xhtml#a5a6ce866fff96872b6eb71278693450f">More...</a><br /></td></tr>
<tr class="separator:a5a6ce866fff96872b6eb71278693450f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64c9ee3d9a92a9dabdad6c97230485a6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a64c9ee3d9a92a9dabdad6c97230485a6">to_string</a> (const <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> &amp;padding2d)</td></tr>
<tr class="memdesc:a64c9ee3d9a92a9dabdad6c97230485a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> to string.  <a href="namespacearm__compute.xhtml#a64c9ee3d9a92a9dabdad6c97230485a6">More...</a><br /></td></tr>
<tr class="separator:a64c9ee3d9a92a9dabdad6c97230485a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d01286647492c788a246fd80f7c2ee1"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d01286647492c788a246fd80f7c2ee1">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">experimental::dynamic_fusion::Pool2dAttributes</a> &amp;pool2d_attr)</td></tr>
<tr class="memdesc:a9d01286647492c788a246fd80f7c2ee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#a9d01286647492c788a246fd80f7c2ee1">More...</a><br /></td></tr>
<tr class="separator:a9d01286647492c788a246fd80f7c2ee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5ccd21b142c0e9201326219b4a51abb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa5ccd21b142c0e9201326219b4a51abb">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">experimental::dynamic_fusion::Pool2dAttributes</a> &amp;pool2d_attr)</td></tr>
<tr class="memdesc:aa5ccd21b142c0e9201326219b4a51abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#aa5ccd21b142c0e9201326219b4a51abb">More...</a><br /></td></tr>
<tr class="separator:aa5ccd21b142c0e9201326219b4a51abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0faf30fb6d5ef627a4c2cb3cc83d65d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad0faf30fb6d5ef627a4c2cb3cc83d65d">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">experimental::dynamic_fusion::GpuPool2dSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:ad0faf30fb6d5ef627a4c2cb3cc83d65d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type.  <a href="namespacearm__compute.xhtml#ad0faf30fb6d5ef627a4c2cb3cc83d65d">More...</a><br /></td></tr>
<tr class="separator:ad0faf30fb6d5ef627a4c2cb3cc83d65d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3dd55fc4d0f9f2a1334f6e120ddab57"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa3dd55fc4d0f9f2a1334f6e120ddab57">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">experimental::dynamic_fusion::GpuPool2dSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:aa3dd55fc4d0f9f2a1334f6e120ddab57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type.  <a href="namespacearm__compute.xhtml#aa3dd55fc4d0f9f2a1334f6e120ddab57">More...</a><br /></td></tr>
<tr class="separator:aa3dd55fc4d0f9f2a1334f6e120ddab57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d7bf1a197d4186a5b59a6f98b3d208"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a40d7bf1a197d4186a5b59a6f98b3d208">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">experimental::dynamic_fusion::Conv2dAttributes</a> &amp;conv2d_attr)</td></tr>
<tr class="memdesc:a40d7bf1a197d4186a5b59a6f98b3d208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#a40d7bf1a197d4186a5b59a6f98b3d208">More...</a><br /></td></tr>
<tr class="separator:a40d7bf1a197d4186a5b59a6f98b3d208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e27ac5cf25542aef7d049c2cac9598"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a47e27ac5cf25542aef7d049c2cac9598">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">experimental::dynamic_fusion::Conv2dAttributes</a> &amp;conv2d_attr)</td></tr>
<tr class="memdesc:a47e27ac5cf25542aef7d049c2cac9598"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#a47e27ac5cf25542aef7d049c2cac9598">More...</a><br /></td></tr>
<tr class="separator:a47e27ac5cf25542aef7d049c2cac9598"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80d092dd1ae944fbc9182991800c8551"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a80d092dd1ae944fbc9182991800c8551">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml">experimental::dynamic_fusion::CastAttributes</a> &amp;cast_attr)</td></tr>
<tr class="memdesc:a80d092dd1ae944fbc9182991800c8551"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type.  <a href="namespacearm__compute.xhtml#a80d092dd1ae944fbc9182991800c8551">More...</a><br /></td></tr>
<tr class="separator:a80d092dd1ae944fbc9182991800c8551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15737dcaf9b02187583ad8b176abab3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af15737dcaf9b02187583ad8b176abab3">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml">experimental::dynamic_fusion::CastAttributes</a> &amp;cast_attr)</td></tr>
<tr class="memdesc:af15737dcaf9b02187583ad8b176abab3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type.  <a href="namespacearm__compute.xhtml#af15737dcaf9b02187583ad8b176abab3">More...</a><br /></td></tr>
<tr class="separator:af15737dcaf9b02187583ad8b176abab3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4738bfbf645429b3778372170d8fe55"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae4738bfbf645429b3778372170d8fe55">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml">experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> &amp;dw_conv2d_attr)</td></tr>
<tr class="memdesc:ae4738bfbf645429b3778372170d8fe55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#ae4738bfbf645429b3778372170d8fe55">More...</a><br /></td></tr>
<tr class="separator:ae4738bfbf645429b3778372170d8fe55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8bf8d114b9a0276f72b3743ef010330"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae8bf8d114b9a0276f72b3743ef010330">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml">experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> &amp;dw_conv2d_attr)</td></tr>
<tr class="memdesc:ae8bf8d114b9a0276f72b3743ef010330"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#ae8bf8d114b9a0276f72b3743ef010330">More...</a><br /></td></tr>
<tr class="separator:ae8bf8d114b9a0276f72b3743ef010330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae14eb3d3a4bb8abdedd18cd791bbe16a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae14eb3d3a4bb8abdedd18cd791bbe16a">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml">experimental::dynamic_fusion::ClampAttributes</a> &amp;clamp_attr)</td></tr>
<tr class="memdesc:ae14eb3d3a4bb8abdedd18cd791bbe16a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type.  <a href="namespacearm__compute.xhtml#ae14eb3d3a4bb8abdedd18cd791bbe16a">More...</a><br /></td></tr>
<tr class="separator:ae14eb3d3a4bb8abdedd18cd791bbe16a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2044c973d96829e0470cbc4f156fac76"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2044c973d96829e0470cbc4f156fac76">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml">experimental::dynamic_fusion::ClampAttributes</a> &amp;clamp_attr)</td></tr>
<tr class="memdesc:a2044c973d96829e0470cbc4f156fac76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type.  <a href="namespacearm__compute.xhtml#a2044c973d96829e0470cbc4f156fac76">More...</a><br /></td></tr>
<tr class="separator:a2044c973d96829e0470cbc4f156fac76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a8318afa53a36694c053b8bdebf8cbb"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0a8318afa53a36694c053b8bdebf8cbb">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml">experimental::dynamic_fusion::ResizeAttributes</a> &amp;resize_attr)</td></tr>
<tr class="memdesc:a0a8318afa53a36694c053b8bdebf8cbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type.  <a href="namespacearm__compute.xhtml#a0a8318afa53a36694c053b8bdebf8cbb">More...</a><br /></td></tr>
<tr class="separator:a0a8318afa53a36694c053b8bdebf8cbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae76ceb28247fb86fed30541afadcc52"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae76ceb28247fb86fed30541afadcc52">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml">experimental::dynamic_fusion::ResizeAttributes</a> &amp;resize_attr)</td></tr>
<tr class="memdesc:aae76ceb28247fb86fed30541afadcc52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type.  <a href="namespacearm__compute.xhtml#aae76ceb28247fb86fed30541afadcc52">More...</a><br /></td></tr>
<tr class="separator:aae76ceb28247fb86fed30541afadcc52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa832ab6a5089acbf50950aeffc6437b5"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa832ab6a5089acbf50950aeffc6437b5">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml">experimental::dynamic_fusion::SoftmaxAttributes</a> &amp;softmax_attr)</td></tr>
<tr class="memdesc:aa832ab6a5089acbf50950aeffc6437b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type.  <a href="namespacearm__compute.xhtml#aa832ab6a5089acbf50950aeffc6437b5">More...</a><br /></td></tr>
<tr class="separator:aa832ab6a5089acbf50950aeffc6437b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bde8c082c06332c18ca6593009b695d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2bde8c082c06332c18ca6593009b695d">to_string</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml">experimental::dynamic_fusion::SoftmaxAttributes</a> &amp;softmax_attr)</td></tr>
<tr class="memdesc:a2bde8c082c06332c18ca6593009b695d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type.  <a href="namespacearm__compute.xhtml#a2bde8c082c06332c18ca6593009b695d">More...</a><br /></td></tr>
<tr class="separator:a2bde8c082c06332c18ca6593009b695d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23c4340b819fbed22ec80a797910cc9d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23c4340b819fbed22ec80a797910cc9d">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">arm_compute::MatMulInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:a23c4340b819fbed22ec80a797910cc9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type.  <a href="namespacearm__compute.xhtml#a23c4340b819fbed22ec80a797910cc9d">More...</a><br /></td></tr>
<tr class="separator:a23c4340b819fbed22ec80a797910cc9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44e2a2940e20b68d7a31851a1da2ae9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa44e2a2940e20b68d7a31851a1da2ae9">to_string</a> (const <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">arm_compute::MatMulInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:aa44e2a2940e20b68d7a31851a1da2ae9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type.  <a href="namespacearm__compute.xhtml#aa44e2a2940e20b68d7a31851a1da2ae9">More...</a><br /></td></tr>
<tr class="separator:aa44e2a2940e20b68d7a31851a1da2ae9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b658424c1295b77b78789593459af"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a341b658424c1295b77b78789593459af">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:a341b658424c1295b77b78789593459af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a341b658424c1295b77b78789593459af">More...</a><br /></td></tr>
<tr class="separator:a341b658424c1295b77b78789593459af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecd4f91cf0333a946a296f1388259fe0"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aecd4f91cf0333a946a296f1388259fe0">to_string</a> (const <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:aecd4f91cf0333a946a296f1388259fe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#aecd4f91cf0333a946a296f1388259fe0">More...</a><br /></td></tr>
<tr class="separator:aecd4f91cf0333a946a296f1388259fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a9e70bf9fa34a00e747e36997ab90b2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5a9e70bf9fa34a00e747e36997ab90b2">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">arm_compute::CpuMatMulSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:a5a9e70bf9fa34a00e747e36997ab90b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type.  <a href="namespacearm__compute.xhtml#a5a9e70bf9fa34a00e747e36997ab90b2">More...</a><br /></td></tr>
<tr class="separator:a5a9e70bf9fa34a00e747e36997ab90b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20d8490daa1cc6388fb00fd4d8a021d4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a> (const <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">arm_compute::CpuMatMulSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:a20d8490daa1cc6388fb00fd4d8a021d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type.  <a href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">More...</a><br /></td></tr>
<tr class="separator:a20d8490daa1cc6388fb00fd4d8a021d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a769d636d7a3c7c84579a5f477a18bc9d"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a769d636d7a3c7c84579a5f477a18bc9d">MAX_DIMS</a> = 6</td></tr>
<tr class="memdesc:a769d636d7a3c7c84579a5f477a18bc9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant value used to indicate maximum dimensions of a <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a>, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> and <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a>.  <a href="namespacearm__compute.xhtml#a769d636d7a3c7c84579a5f477a18bc9d">More...</a><br /></td></tr>
<tr class="separator:a769d636d7a3c7c84579a5f477a18bc9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48fb9cf404e8f7043235bf14105c9793"><td class="memItemLeft" align="right" valign="top">const std::array&lt; float32x4_t, 8 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a48fb9cf404e8f7043235bf14105c9793">log_tab</a></td></tr>
<tr class="memdesc:a48fb9cf404e8f7043235bf14105c9793"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logarithm polynomial coefficients.  <a href="namespacearm__compute.xhtml#a48fb9cf404e8f7043235bf14105c9793">More...</a><br /></td></tr>
<tr class="separator:a48fb9cf404e8f7043235bf14105c9793"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3e74f28452dea05869826c30b95f54b"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">te_sin_coeff2</a> = 0.166666666666f</td></tr>
<tr class="memdesc:ae3e74f28452dea05869826c30b95f54b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sin polynomial coefficients.  <a href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">More...</a><br /></td></tr>
<tr class="separator:ae3e74f28452dea05869826c30b95f54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c1bcf45a03708a37132c1e2df5cd2b0"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">te_sin_coeff3</a> = 0.05f</td></tr>
<tr class="separator:a9c1bcf45a03708a37132c1e2df5cd2b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a542bbd5e844a0a494e3e4078a433d44b"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">te_sin_coeff4</a> = 0.023809523810f</td></tr>
<tr class="separator:a542bbd5e844a0a494e3e4078a433d44b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe0353e9228b8be37bcdb4a1770f44e3"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">te_sin_coeff5</a> = 0.013888888889f</td></tr>
<tr class="separator:afe0353e9228b8be37bcdb4a1770f44e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5663e5bad3b65f7fa59105be39d1fe12"><td class="memItemLeft" align="right" valign="top">const std::array&lt; <a class="el" href="structarm__compute_1_1_erf_lut_entry.xhtml">ErfLutEntry</a>&lt; float &gt;, 513 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">erf_f32_lut</a></td></tr>
<tr class="memdesc:a5663e5bad3b65f7fa59105be39d1fe12"><td class="mdescLeft">&#160;</td><td class="mdescRight">The lookup table for FP32 erf(x) calculation.  <a href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">More...</a><br /></td></tr>
<tr class="separator:a5663e5bad3b65f7fa59105be39d1fe12"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Copyright (c) 2017-2024 Arm Limited. </p>
<p>Synced with <a class="el" href="_direct_conv2d_8cpp.xhtml">tests/validation/dynamic_fusion/gpu/cl/DirectConv2d.cpp</a> Please check there for any differences in the coverage.</p>
<p>A DotMLGO file parser (LL(k) parser)</p>
<p>[<a class="el" href="classarm__compute_1_1_c_l_reshape_layer.xhtml" title="Basic function to run opencl::kernels::ClReshapeKernel.">CLReshapeLayer</a> snippet]</p>
<p>[ClReshapeKernel <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a>]</p>
<p>[NEReshapeLayerKernel <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a>]</p>
<p>This file contains all available output stages for GEMMLowp.</p>
<p>This file contains all available output stages for GEMMLowp on OpenCL.</p>
<p>The following symbols have been moved to: half PermutationVector Format DataType DataLayout DataLayoutDimension <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> WeightFormat Channel DimensionRoundingType.</p>
<p><a class="el" href="_core_types_8h.xhtml">CoreTypes.h</a> groups together essential small types that are used across functions.</p>
<p>Copyright (c) 2017-2021, 2024 Arm Limited.</p>
<p>Copyright (c) 2018-2022 Arm Limited.</p>
<p>Copyright (c) 2019-2023 Arm Limited.</p>
<p>Copyright (c) 2017-2021 Arm Limited.</p>
<p>Copyright (c) 2021-2023 Arm Limited.</p>
<p>Copyright (c) 2023 Arm Limited.</p>
<p>Copyright (c) 2021-2022 Arm Limited.</p>
<p>Copyright (c) 2021 Arm Limited.</p>
<p>Copyright (c) 2017-2021, 2023-2024 Arm Limited.</p>
<p>SPDX-License-Identifier: MIT</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p>The following symbols have been moved to: ActivationFunction <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml" title="Activation Layer Information class.">ActivationLayerInfo</a> The following symbols have been moved to: <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> The following symbols have been moved to: <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> The following symbols have been moved to: GEMMLowpOutputStageType <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> The following symbols have been moved to: <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">MatMulInfo</a></p>
<p>In gemmlowp, the "output stage" is the process that takes a final int32 accumulator value (the output of <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml">CLGEMMLowpMatrixMultiplyCore</a>), and processes it to obtain the final QASYMM8/QASYMM8_SIGNED value.</p>
<p>More information about the GEMMLowp output stage can be found at <a href="https://github.com/google/gemmlowp/blob/master/doc/output.md">https://github.com/google/gemmlowp/blob/master/doc/output.md</a></p>
<p>In gemmlowp, the "output stage" is the process that takes a final int32 accumulator value (the output of <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml">NEGEMMLowpMatrixMultiplyCore</a>), and processes it to obtain the final ASYMM8 value.</p>
<p>More information about the GEMMLowp output stage can be found at <a href="https://github.com/google/gemmlowp/blob/master/doc/output.md">https://github.com/google/gemmlowp/blob/master/doc/output.md</a></p>
<p>The grammar of DotMLGO is defined as the following ENBF:</p>
<p>delim = "," | "\n"; // Note that delimiters are omitted from the definition below</p>
<p>mlgo = header, heuristics-table, {heuristic-tree};</p>
<p>header = "&lt;header&gt;", gemm-version, ip-type, "&lt;/header&gt;"; gemm-version = "gemm-version", "[", int, int, int, "]"; ip-type = "ip-type", ("gpu" | "cpu");</p>
<p>heiristics-table = "&lt;heuristics-table&gt;", {heuristics-table-entry}, "&lt;/heuristics-table&gt;"; heuristics-table-entry = entry-id, ip-name, num-cores, data-type, gpu-priority, gpu-behavior, heuristic-type, free-vars; entry-id = int; ip-name = char-sequence; num-cores = int; data-type = "f32" | "f16" | "qasymm8"; gpu-priority = "best-performance" | "best-memory-usage"; gpu-behavior = "static" | "dynamic"; heuristic-type = "gemm-type" | "gemm-config-native" | "gemm-config-reshaped-only-rhs" | "gemm-config-reshaped"; free-vars = "[", {char-sequence}, "]";</p>
<p>heuristic-tree = "&lt;heuristic", entry-id, "&gt;", {tree-node}, "&lt;/heuristic&gt;"; tree-node = branch-node | leaf-node; branch-node = "b", entry-id, lhs-type, lhs-value, conditional-op, rhs-type, rhs-value, true-node, false-node; lhs-type = comparator-type; lhs-value = comparator-value; rhs-type = comparator-type; rhs-value = comparator-value; comparator-type = "var" | "num" | "enum"; comparator-value = char-sequence | float; conditional-op = "&lt;" | "&lt;=" | "==" | "&gt;=" | "&gt;"; true-node = entry-id; false-node = entry-id; leaf-node = "l", entry-id, heuristic-type, leaf-value; leaf-value = gemm-type | gemm-config-native | gemm-config-reshaped-only-rhs | gemm-config-reshaped gemm-type = "native" | "reshaped-only-rhs" | "reshaped"; gemm-config-native = "[", int, int, int, "]"; gemm-config-reshaped-only-rhs = "[", int, int, int, int, bool, bool, bool, "]"; gemm-config-reshaped = "[", int, int, int, int, int, bool, bool, bool, bool, "]"; </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="aa2b075b5da72ec6bb14f90c202443eb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2b075b5da72ec6bb14f90c202443eb0">&#9670;&nbsp;</a></span>BBox</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a> =  std::array&lt;float, 4&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00776">776</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a11916d4148a39a67794050373f54825a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11916d4148a39a67794050373f54825a">&#9670;&nbsp;</a></span>BiStrides</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a> =  <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bidirectional strides. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00081">81</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a18e76ae589217a65f77b971de3f3f65a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18e76ae589217a65f77b971de3f3f65a">&#9670;&nbsp;</a></span>CLEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a18e76ae589217a65f77b971de3f3f65a">CLEqual</a> =  <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_comparison_8h_source.xhtml#l00131">131</a> of file <a class="el" href="_c_l_comparison_8h_source.xhtml">CLComparison.h</a>.</p>

</div>
</div>
<a id="a193a4859b365f3ef4e0d73a1e6b12c85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a193a4859b365f3ef4e0d73a1e6b12c85">&#9670;&nbsp;</a></span>CLFloatArray</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a193a4859b365f3ef4e0d73a1e6b12c85">CLFloatArray</a> =  <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt;cl_float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_array_8h_source.xhtml#l00117">117</a> of file <a class="el" href="_c_l_array_8h_source.xhtml">CLArray.h</a>.</p>

</div>
</div>
<a id="ab9b18840e11edcbeafcd80d4c44b80cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9b18840e11edcbeafcd80d4c44b80cb">&#9670;&nbsp;</a></span>CLGreater</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab9b18840e11edcbeafcd80d4c44b80cb">CLGreater</a> =  <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater comparison. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_comparison_8h_source.xhtml#l00135">135</a> of file <a class="el" href="_c_l_comparison_8h_source.xhtml">CLComparison.h</a>.</p>

</div>
</div>
<a id="ade630074f2c9d58d64c399bd6b49bc56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade630074f2c9d58d64c399bd6b49bc56">&#9670;&nbsp;</a></span>CLGreaterEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ade630074f2c9d58d64c399bd6b49bc56">CLGreaterEqual</a> =  <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_comparison_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_c_l_comparison_8h_source.xhtml">CLComparison.h</a>.</p>

</div>
</div>
<a id="aae712f442eae2d56d17529ca6cb9cb77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae712f442eae2d56d17529ca6cb9cb77">&#9670;&nbsp;</a></span>CLImage</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aae712f442eae2d56d17529ca6cb9cb77">CLImage</a> =  <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a>. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml#l00104">104</a> of file <a class="el" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml">CLTensor.h</a>.</p>

</div>
</div>
<a id="a5fb8cb339705102066c915d18f0701ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb8cb339705102066c915d18f0701ac">&#9670;&nbsp;</a></span>CLInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a5fb8cb339705102066c915d18f0701ac">CLInt16Array</a> =  <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt;cl_short&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_array_8h_source.xhtml#l00113">113</a> of file <a class="el" href="_c_l_array_8h_source.xhtml">CLArray.h</a>.</p>

</div>
</div>
<a id="a8a401a071524761c661a75969c951cf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a401a071524761c661a75969c951cf5">&#9670;&nbsp;</a></span>CLInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a8a401a071524761c661a75969c951cf5">CLInt32Array</a> =  <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt;cl_int&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_array_8h_source.xhtml#l00115">115</a> of file <a class="el" href="_c_l_array_8h_source.xhtml">CLArray.h</a>.</p>

</div>
</div>
<a id="a8c2c9a77f235807441eacdddd896d50c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c2c9a77f235807441eacdddd896d50c">&#9670;&nbsp;</a></span>CLLess</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a8c2c9a77f235807441eacdddd896d50c">CLLess</a> =  <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less comparison. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_comparison_8h_source.xhtml#l00139">139</a> of file <a class="el" href="_c_l_comparison_8h_source.xhtml">CLComparison.h</a>.</p>

</div>
</div>
<a id="a258b8c95199c121d8f2a9a540cd48e5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a258b8c95199c121d8f2a9a540cd48e5e">&#9670;&nbsp;</a></span>CLLessEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a258b8c95199c121d8f2a9a540cd48e5e">CLLessEqual</a> =  <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_comparison_8h_source.xhtml#l00141">141</a> of file <a class="el" href="_c_l_comparison_8h_source.xhtml">CLComparison.h</a>.</p>

</div>
</div>
<a id="aa02883dd85b75a6eb0d4878f266908dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa02883dd85b75a6eb0d4878f266908dd">&#9670;&nbsp;</a></span>CLLogSoftmaxLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a> =  <a class="el" href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml">CLSoftmaxLayerGeneric</a>&lt;true&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_softmax_layer_8h_source.xhtml#l00110">110</a> of file <a class="el" href="_c_l_softmax_layer_8h_source.xhtml">CLSoftmaxLayer.h</a>.</p>

</div>
</div>
<a id="aea3e261c61344f44892f8be73cfc0301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea3e261c61344f44892f8be73cfc0301">&#9670;&nbsp;</a></span>CLNotEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aea3e261c61344f44892f8be73cfc0301">CLNotEqual</a> =  <a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml">CLComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run not equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_comparison_8h_source.xhtml#l00133">133</a> of file <a class="el" href="_c_l_comparison_8h_source.xhtml">CLComparison.h</a>.</p>

</div>
</div>
<a id="a30ce3b40394b4f2d1e4cc31db7183425"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30ce3b40394b4f2d1e4cc31db7183425">&#9670;&nbsp;</a></span>CLSoftmaxLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a> =  <a class="el" href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml">CLSoftmaxLayerGeneric</a>&lt;false&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_softmax_layer_8h_source.xhtml#l00109">109</a> of file <a class="el" href="_c_l_softmax_layer_8h_source.xhtml">CLSoftmaxLayer.h</a>.</p>

</div>
</div>
<a id="a7b4c4a79c73a3f85ba89aff03fddefa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b4c4a79c73a3f85ba89aff03fddefa7">&#9670;&nbsp;</a></span>CLUInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a7b4c4a79c73a3f85ba89aff03fddefa7">CLUInt16Array</a> =  <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt;cl_ushort&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_array_8h_source.xhtml#l00109">109</a> of file <a class="el" href="_c_l_array_8h_source.xhtml">CLArray.h</a>.</p>

</div>
</div>
<a id="a1d7d89b7e990055dc95ed37dfb24da48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d7d89b7e990055dc95ed37dfb24da48">&#9670;&nbsp;</a></span>CLUInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a1d7d89b7e990055dc95ed37dfb24da48">CLUInt32Array</a> =  <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt;cl_uint&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_array_8h_source.xhtml#l00111">111</a> of file <a class="el" href="_c_l_array_8h_source.xhtml">CLArray.h</a>.</p>

</div>
</div>
<a id="aa031694bb03711e09e25546ad2b643cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa031694bb03711e09e25546ad2b643cc">&#9670;&nbsp;</a></span>CLUInt8Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aa031694bb03711e09e25546ad2b643cc">CLUInt8Array</a> =  <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a>&lt;cl_uchar&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_array_8h_source.xhtml#l00107">107</a> of file <a class="el" href="_c_l_array_8h_source.xhtml">CLArray.h</a>.</p>

</div>
</div>
<a id="ab23ca8084cb5fe052bc0b9022c3cb852"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab23ca8084cb5fe052bc0b9022c3cb852">&#9670;&nbsp;</a></span>CropInfo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab23ca8084cb5fe052bc0b9022c3cb852">CropInfo</a> =  <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class for holding information related to cropping. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02017">2017</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a4611b605e45ab401f02cab15c5e38715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4611b605e45ab401f02cab15c5e38715">&#9670;&nbsp;</a></span>float32_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef float <a class="el" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_types_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_cpu_types_8h_source.xhtml">CpuTypes.h</a>.</p>

</div>
</div>
<a id="a6e06029aa1b68c0cdeb80656cc9353fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e06029aa1b68c0cdeb80656cc9353fe">&#9670;&nbsp;</a></span>FloatArray</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a6e06029aa1b68c0cdeb80656cc9353fe">FloatArray</a> =  <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt;float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats. </p>

<p class="definition">Definition at line <a class="el" href="_array_8h_source.xhtml#l00072">72</a> of file <a class="el" href="_array_8h_source.xhtml">Array.h</a>.</p>

</div>
</div>
<a id="ad2398d0f2ce77c10bbebf1f85317dde5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2398d0f2ce77c10bbebf1f85317dde5">&#9670;&nbsp;</a></span>GroupMappings</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ad2398d0f2ce77c10bbebf1f85317dde5">GroupMappings</a> =  std::map&lt;size_t, <a class="el" href="namespacearm__compute.xhtml#a43b7da220a8ead83acff98f218f7eb6b">MemoryMappings</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A map of the groups and memory mappings. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2runtime_2_types_8h_source.xhtml#l00048">48</a> of file <a class="el" href="arm__compute_2runtime_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a73e2825fd61d349c5ca2f5313e3c8ea1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73e2825fd61d349c5ca2f5313e3c8ea1">&#9670;&nbsp;</a></span>half</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> =  half_float::half</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>16-bit floating point type </p>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>

</div>
</div>
<a id="a631bac7c033a0d341c631870f9755217"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a631bac7c033a0d341c631870f9755217">&#9670;&nbsp;</a></span>ICLFloatArray</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a631bac7c033a0d341c631870f9755217">ICLFloatArray</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt;cl_float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_l_array_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_i_c_l_array_8h_source.xhtml">ICLArray.h</a>.</p>

</div>
</div>
<a id="ab624675f6618d35eeb3e79fc7e21e0d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab624675f6618d35eeb3e79fc7e21e0d4">&#9670;&nbsp;</a></span>ICLImage</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab624675f6618d35eeb3e79fc7e21e0d4">ICLImage</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_c_l_tensor_8h_source.xhtml#l00114">114</a> of file <a class="el" href="_i_c_l_tensor_8h_source.xhtml">ICLTensor.h</a>.</p>

</div>
</div>
<a id="a67328fa21e30aecd0c27d6d2e63a2b9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67328fa21e30aecd0c27d6d2e63a2b9c">&#9670;&nbsp;</a></span>ICLInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a67328fa21e30aecd0c27d6d2e63a2b9c">ICLInt16Array</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt;cl_short&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_l_array_8h_source.xhtml#l00122">122</a> of file <a class="el" href="_i_c_l_array_8h_source.xhtml">ICLArray.h</a>.</p>

</div>
</div>
<a id="ab95380ecf1c0253f6c785c0f59194066"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab95380ecf1c0253f6c785c0f59194066">&#9670;&nbsp;</a></span>ICLInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab95380ecf1c0253f6c785c0f59194066">ICLInt32Array</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt;cl_int&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_l_array_8h_source.xhtml#l00124">124</a> of file <a class="el" href="_i_c_l_array_8h_source.xhtml">ICLArray.h</a>.</p>

</div>
</div>
<a id="aed5c7222c31a34327f00de37d8c4f4fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed5c7222c31a34327f00de37d8c4f4fc">&#9670;&nbsp;</a></span>ICLUInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aed5c7222c31a34327f00de37d8c4f4fc">ICLUInt16Array</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt;cl_ushort&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_l_array_8h_source.xhtml#l00118">118</a> of file <a class="el" href="_i_c_l_array_8h_source.xhtml">ICLArray.h</a>.</p>

</div>
</div>
<a id="a6b5f839e8d27c6351e8d58812dd46c97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b5f839e8d27c6351e8d58812dd46c97">&#9670;&nbsp;</a></span>ICLUInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a6b5f839e8d27c6351e8d58812dd46c97">ICLUInt32Array</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt;cl_uint&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_l_array_8h_source.xhtml#l00120">120</a> of file <a class="el" href="_i_c_l_array_8h_source.xhtml">ICLArray.h</a>.</p>

</div>
</div>
<a id="a72251c7a73b3c057ffca9f32ee3e19ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72251c7a73b3c057ffca9f32ee3e19ea">&#9670;&nbsp;</a></span>ICLUInt8Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a72251c7a73b3c057ffca9f32ee3e19ea">ICLUInt8Array</a> =  <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt;cl_uchar&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_l_array_8h_source.xhtml#l00116">116</a> of file <a class="el" href="_i_c_l_array_8h_source.xhtml">ICLArray.h</a>.</p>

</div>
</div>
<a id="a8a82a1928159e86b0778c3c14e8842be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a82a1928159e86b0778c3c14e8842be">&#9670;&nbsp;</a></span>IFloatArray</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a8a82a1928159e86b0778c3c14e8842be">IFloatArray</a> =  <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt;float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of floats. </p>

<p class="definition">Definition at line <a class="el" href="_i_array_8h_source.xhtml#l00143">143</a> of file <a class="el" href="_i_array_8h_source.xhtml">IArray.h</a>.</p>

</div>
</div>
<a id="a66b6c9e5773b956efa07dafa508ea41a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66b6c9e5773b956efa07dafa508ea41a">&#9670;&nbsp;</a></span>IImage</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> =  <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tensor_8h_source.xhtml#l00100">100</a> of file <a class="el" href="_i_tensor_8h_source.xhtml">ITensor.h</a>.</p>

</div>
</div>
<a id="a1dd5e04cea002eae658fa2a899848ad7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dd5e04cea002eae658fa2a899848ad7">&#9670;&nbsp;</a></span>IInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a1dd5e04cea002eae658fa2a899848ad7">IInt16Array</a> =  <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt;int16_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s. </p>

<p class="definition">Definition at line <a class="el" href="_i_array_8h_source.xhtml#l00139">139</a> of file <a class="el" href="_i_array_8h_source.xhtml">IArray.h</a>.</p>

</div>
</div>
<a id="a51fdf34dfc5c60b6f4f455f0a9cac457"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51fdf34dfc5c60b6f4f455f0a9cac457">&#9670;&nbsp;</a></span>IInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a51fdf34dfc5c60b6f4f455f0a9cac457">IInt32Array</a> =  <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt;int32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s. </p>

<p class="definition">Definition at line <a class="el" href="_i_array_8h_source.xhtml#l00141">141</a> of file <a class="el" href="_i_array_8h_source.xhtml">IArray.h</a>.</p>

</div>
</div>
<a id="a7fb6a368d181ef193475f725c713430a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fb6a368d181ef193475f725c713430a">&#9670;&nbsp;</a></span>Image</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a7fb6a368d181ef193475f725c713430a">Image</a> =  <a class="el" href="classarm__compute_1_1_tensor.xhtml">Tensor</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a>. </p>

<p class="definition">Definition at line <a class="el" href="runtime_2_tensor_8h_source.xhtml#l00069">69</a> of file <a class="el" href="runtime_2_tensor_8h_source.xhtml">Tensor.h</a>.</p>

</div>
</div>
<a id="a57e55f1c016e266be62837504de90e54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57e55f1c016e266be62837504de90e54">&#9670;&nbsp;</a></span>INEKernel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> <a class="el" href="namespacearm__compute.xhtml#a57e55f1c016e266be62837504de90e54">INEKernel</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Common interface for all kernels implemented in Neon. </p>

<p class="definition">Definition at line <a class="el" href="_i_n_e_operator_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_i_n_e_operator_8h_source.xhtml">INEOperator.h</a>.</p>

</div>
</div>
<a id="a69c19b38cbee8fa6680513f6ff76bbb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69c19b38cbee8fa6680513f6ff76bbb3">&#9670;&nbsp;</a></span>Int16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a69c19b38cbee8fa6680513f6ff76bbb3">Int16Array</a> =  <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt;int16_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int16s. </p>

<p class="definition">Definition at line <a class="el" href="_array_8h_source.xhtml#l00068">68</a> of file <a class="el" href="_array_8h_source.xhtml">Array.h</a>.</p>

</div>
</div>
<a id="a6af9862834629c287a81b16837b51e44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6af9862834629c287a81b16837b51e44">&#9670;&nbsp;</a></span>Int32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a6af9862834629c287a81b16837b51e44">Int32Array</a> =  <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt;int32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of int32s. </p>

<p class="definition">Definition at line <a class="el" href="_array_8h_source.xhtml#l00070">70</a> of file <a class="el" href="_array_8h_source.xhtml">Array.h</a>.</p>

</div>
</div>
<a id="a1ffe8af91a934c926d102938db8d3ce1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ffe8af91a934c926d102938db8d3ce1">&#9670;&nbsp;</a></span>IUInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a1ffe8af91a934c926d102938db8d3ce1">IUInt16Array</a> =  <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt;uint16_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s. </p>

<p class="definition">Definition at line <a class="el" href="_i_array_8h_source.xhtml#l00135">135</a> of file <a class="el" href="_i_array_8h_source.xhtml">IArray.h</a>.</p>

</div>
</div>
<a id="ac9b2a6fa6e146437bfc8c0bee96e4760"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9b2a6fa6e146437bfc8c0bee96e4760">&#9670;&nbsp;</a></span>IUInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ac9b2a6fa6e146437bfc8c0bee96e4760">IUInt32Array</a> =  <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt;uint32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s. </p>

<p class="definition">Definition at line <a class="el" href="_i_array_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_i_array_8h_source.xhtml">IArray.h</a>.</p>

</div>
</div>
<a id="a276401fd5651e75431d3e1cc90601caa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a276401fd5651e75431d3e1cc90601caa">&#9670;&nbsp;</a></span>IUInt8Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a276401fd5651e75431d3e1cc90601caa">IUInt8Array</a> =  <a class="el" href="classarm__compute_1_1_i_array.xhtml">IArray</a>&lt;uint8_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface for <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s. </p>

<p class="definition">Definition at line <a class="el" href="_i_array_8h_source.xhtml#l00133">133</a> of file <a class="el" href="_i_array_8h_source.xhtml">IArray.h</a>.</p>

</div>
</div>
<a id="ae6550ea34c33d2e943476386d6ba8bed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6550ea34c33d2e943476386d6ba8bed">&#9670;&nbsp;</a></span>LabelBBox</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ae6550ea34c33d2e943476386d6ba8bed">LabelBBox</a> =  std::map&lt;int, std::vector&lt;<a class="el" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00778">778</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a18809773edf57d061fc2826abf0dab5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18809773edf57d061fc2826abf0dab5e">&#9670;&nbsp;</a></span>lock_guard</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">lock_guard</a> =  std::lock_guard&lt;<a class="el" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">Mutex</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wrapper of lock_guard data-object. </p>

<p class="definition">Definition at line <a class="el" href="_mutex_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_mutex_8h_source.xhtml">Mutex.h</a>.</p>

</div>
</div>
<a id="a43b7da220a8ead83acff98f218f7eb6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43b7da220a8ead83acff98f218f7eb6b">&#9670;&nbsp;</a></span>MemoryMappings</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a43b7da220a8ead83acff98f218f7eb6b">MemoryMappings</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1_i_memory.xhtml">IMemory</a> *, size_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A map of (handle, index/offset), where handle is the memory handle of the object to provide the memory for and index/offset is the buffer/offset from the pool that should be used. </p>
<dl class="section note"><dt>Note</dt><dd>All objects are pre-pinned to specific buffers to avoid any relevant overheads </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2runtime_2_types_8h_source.xhtml#l00045">45</a> of file <a class="el" href="arm__compute_2runtime_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="ac6101731de6263a00ac29b35cf1a929d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6101731de6263a00ac29b35cf1a929d">&#9670;&nbsp;</a></span>MemoryRequirements</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">MemoryRequirements</a> =  <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2common_2_i_operator_8h_source.xhtml#l00056">56</a> of file <a class="el" href="src_2common_2_i_operator_8h_source.xhtml">IOperator.h</a>.</p>

</div>
</div>
<a id="afe9e10e5fdfd1e2665ac17c75c0cacd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe9e10e5fdfd1e2665ac17c75c0cacd8">&#9670;&nbsp;</a></span>Multiples</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> =  std::vector&lt;uint32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Information to produce a tiled version of a <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a>. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00405">405</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="acded863dbfdd730829d4188d67eefcf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acded863dbfdd730829d4188d67eefcf0">&#9670;&nbsp;</a></span>Mutex</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">Mutex</a> =  std::mutex</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wrapper of Mutex data-object. </p>

<p class="definition">Definition at line <a class="el" href="_mutex_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_mutex_8h_source.xhtml">Mutex.h</a>.</p>

</div>
</div>
<a id="a49760a5c85389eb323c487aed2cefdfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49760a5c85389eb323c487aed2cefdfa">&#9670;&nbsp;</a></span>NEAbsLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a49760a5c85389eb323c487aed2cefdfa">NEAbsLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ElementWiseUnary::ABS</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00091">91</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a8fdefd8ed8639758d0aa6c68087d55e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fdefd8ed8639758d0aa6c68087d55e6">&#9670;&nbsp;</a></span>NEEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a8fdefd8ed8639758d0aa6c68087d55e6">NEEqual</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml#l00468">468</a> of file <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml">NEElementwiseOperations.h</a>.</p>

</div>
</div>
<a id="a4f7d99d5165740d6e36200eadfc9263c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f7d99d5165740d6e36200eadfc9263c">&#9670;&nbsp;</a></span>NEExpLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a4f7d99d5165740d6e36200eadfc9263c">NEExpLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">ElementWiseUnary::EXP</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00088">88</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a44f1c40220d4ac837899ef5ebf7aaee9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44f1c40220d4ac837899ef5ebf7aaee9">&#9670;&nbsp;</a></span>NEGreater</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a44f1c40220d4ac837899ef5ebf7aaee9">NEGreater</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater comparison. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml#l00472">472</a> of file <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml">NEElementwiseOperations.h</a>.</p>

</div>
</div>
<a id="aa09ba119a3b8b2950581f7c80e9445b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09ba119a3b8b2950581f7c80e9445b6">&#9670;&nbsp;</a></span>NEGreaterEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aa09ba119a3b8b2950581f7c80e9445b6">NEGreaterEqual</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml#l00474">474</a> of file <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml">NEElementwiseOperations.h</a>.</p>

</div>
</div>
<a id="a36ae4d66ca830f6aeef54964b0c31fd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36ae4d66ca830f6aeef54964b0c31fd3">&#9670;&nbsp;</a></span>NELess</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a36ae4d66ca830f6aeef54964b0c31fd3">NELess</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less comparison. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml#l00476">476</a> of file <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml">NEElementwiseOperations.h</a>.</p>

</div>
</div>
<a id="ab10ab37a597594e7aabec4a067988d37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab10ab37a597594e7aabec4a067988d37">&#9670;&nbsp;</a></span>NELessEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab10ab37a597594e7aabec4a067988d37">NELessEqual</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml#l00478">478</a> of file <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml">NEElementwiseOperations.h</a>.</p>

</div>
</div>
<a id="ac37a58198a2b5ec75c812a493eb3f062"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac37a58198a2b5ec75c812a493eb3f062">&#9670;&nbsp;</a></span>NELogLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ac37a58198a2b5ec75c812a493eb3f062">NELogLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">ElementWiseUnary::LOG</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00090">90</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a4478c830368ed024dc47a2bf48978616"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4478c830368ed024dc47a2bf48978616">&#9670;&nbsp;</a></span>NELogSoftmaxLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a4478c830368ed024dc47a2bf48978616">NELogSoftmaxLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml">NESoftmaxLayerGeneric</a>&lt;true&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_softmax_layer_8h_source.xhtml#l00098">98</a> of file <a class="el" href="_n_e_softmax_layer_8h_source.xhtml">NESoftmaxLayer.h</a>.</p>

</div>
</div>
<a id="a7d885ce863280fc60b557fc82d7d29d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d885ce863280fc60b557fc82d7d29d7">&#9670;&nbsp;</a></span>NENegLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a7d885ce863280fc60b557fc82d7d29d7">NENegLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">ElementWiseUnary::NEG</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00089">89</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a732ac47723cd850cc5ffa208bc3e3b00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a732ac47723cd850cc5ffa208bc3e3b00">&#9670;&nbsp;</a></span>NENotEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a732ac47723cd850cc5ffa208bc3e3b00">NENotEqual</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run not equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml#l00470">470</a> of file <a class="el" href="_n_e_elementwise_operations_8h_source.xhtml">NEElementwiseOperations.h</a>.</p>

</div>
</div>
<a id="a254488f92ef167b19bc9400d1eb2f0e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a254488f92ef167b19bc9400d1eb2f0e6">&#9670;&nbsp;</a></span>NERoundLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a254488f92ef167b19bc9400d1eb2f0e6">NERoundLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ElementWiseUnary::ROUND</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00092">92</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a6e94a7fdb862b6e539ec43ebf76b257b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e94a7fdb862b6e539ec43ebf76b257b">&#9670;&nbsp;</a></span>NERsqrtLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a6e94a7fdb862b6e539ec43ebf76b257b">NERsqrtLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">ElementWiseUnary::RSQRT</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a0604c803e41880a4a16408efc4e6a69b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0604c803e41880a4a16408efc4e6a69b">&#9670;&nbsp;</a></span>NEScheduler</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a0604c803e41880a4a16408efc4e6a69b">NEScheduler</a> =  <a class="el" href="classarm__compute_1_1_scheduler.xhtml">Scheduler</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>CPU <a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a>. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_scheduler_8h_source.xhtml#l00032">32</a> of file <a class="el" href="_n_e_scheduler_8h_source.xhtml">NEScheduler.h</a>.</p>

</div>
</div>
<a id="a6bebc82fea9931864bd0ec45fc85e75b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bebc82fea9931864bd0ec45fc85e75b">&#9670;&nbsp;</a></span>NESinLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a6bebc82fea9931864bd0ec45fc85e75b">NESinLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml">NEElementwiseUnaryLayer</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">ElementWiseUnary::SIN</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml#l00093">93</a> of file <a class="el" href="_n_e_elementwise_unary_layer_8h_source.xhtml">NEElementwiseUnaryLayer.h</a>.</p>

</div>
</div>
<a id="a4df2143ca0a3bdbbbc54b440a52541cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4df2143ca0a3bdbbbc54b440a52541cd">&#9670;&nbsp;</a></span>NESoftmaxLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a> =  <a class="el" href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml">NESoftmaxLayerGeneric</a>&lt;false&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_softmax_layer_8h_source.xhtml#l00097">97</a> of file <a class="el" href="_n_e_softmax_layer_8h_source.xhtml">NESoftmaxLayer.h</a>.</p>

</div>
</div>
<a id="aabb6a8ca4bc000ffd3dde90bc2a6ca6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabb6a8ca4bc000ffd3dde90bc2a6ca6a">&#9670;&nbsp;</a></span>OperatorType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af2f4c203980958815b7fdf27f08cb3a5">cpu::CpuPRelu</a> <a class="el" href="namespacearm__compute.xhtml#aabb6a8ca4bc000ffd3dde90bc2a6ca6a">OperatorType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>

</div>
</div>
<a id="a669b5d3c5994f9ae3be31df9a1014297"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a669b5d3c5994f9ae3be31df9a1014297">&#9670;&nbsp;</a></span>PaddingInfo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> =  std::pair&lt;uint32_t, uint32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Padding information as a pair of unsigned int start/end. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00399">399</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="ac1a1b012674e0f1de071a611391828ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1a1b012674e0f1de071a611391828ad">&#9670;&nbsp;</a></span>PaddingList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> =  std::vector&lt;<a class="el" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List of padding information. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00402">402</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a4467b302fc9ec312c40580336ab783da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4467b302fc9ec312c40580336ab783da">&#9670;&nbsp;</a></span>PaddingSize</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> =  <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Container for 2D padding size. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00346">346</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a33e65be485104e2e9e69fca551d6f492"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33e65be485104e2e9e69fca551d6f492">&#9670;&nbsp;</a></span>PermutationVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> =  <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Permutation vector. </p>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>

</div>
</div>
<a id="a7f2ec1184355233865bad39063cfa1c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f2ec1184355233865bad39063cfa1c5">&#9670;&nbsp;</a></span>qasymm16_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a7f2ec1184355233865bad39063cfa1c5">qasymm16_t</a> =  uint16_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>16 bit quantized asymmetric scalar value </p>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>

</div>
</div>
<a id="af486d5eb4935eb5601d9c5fcc42be220"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af486d5eb4935eb5601d9c5fcc42be220">&#9670;&nbsp;</a></span>qasymm8_signed_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> =  int8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit signed quantized asymmetric scalar value </p>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>

</div>
</div>
<a id="ab8938bcb3ec0f5f8d93285eb3a28b701"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8938bcb3ec0f5f8d93285eb3a28b701">&#9670;&nbsp;</a></span>qasymm8_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> =  uint8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized asymmetric scalar value </p>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>

</div>
</div>
<a id="adc8234d074c193f521029e81cda80bb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc8234d074c193f521029e81cda80bb2">&#9670;&nbsp;</a></span>qasymm8x16_signed_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> =  int8x16_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized signed asymmetric vector with 16 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="ac7e1832b8c58f07a98fc8d390b16ac27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7e1832b8c58f07a98fc8d390b16ac27">&#9670;&nbsp;</a></span>qasymm8x16_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> =  uint8x16_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized asymmetric vector with 16 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a25af73d07023d565ec84adc58aedfb80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25af73d07023d565ec84adc58aedfb80">&#9670;&nbsp;</a></span>qasymm8x8_signed_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a25af73d07023d565ec84adc58aedfb80">qasymm8x8_signed_t</a> =  int8x8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized signed asymmetric vector with 8 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a70ecc99f2f6b646579b58463dc026671"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70ecc99f2f6b646579b58463dc026671">&#9670;&nbsp;</a></span>qasymm8x8_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">qasymm8x8_t</a> =  uint8x8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized asymmetric vector with 8 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00034">34</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="aa972284529f4dd47b3ae1d5d68ab1b71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa972284529f4dd47b3ae1d5d68ab1b71">&#9670;&nbsp;</a></span>qasymm8x8x2_signed_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aa972284529f4dd47b3ae1d5d68ab1b71">qasymm8x8x2_signed_t</a> =  int8x8x2_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized signed asymmetric vector with 16 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a805d740633d70a5f0b019d72c517e67d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a805d740633d70a5f0b019d72c517e67d">&#9670;&nbsp;</a></span>qasymm8x8x2_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">qasymm8x8x2_t</a> =  uint8x8x2_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized asymmetric vector with 16 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="aaf0890e0e5842a84a6af5800d2bdcd78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf0890e0e5842a84a6af5800d2bdcd78">&#9670;&nbsp;</a></span>qasymm8x8x3_signed_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aaf0890e0e5842a84a6af5800d2bdcd78">qasymm8x8x3_signed_t</a> =  int8x8x3_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized signed asymmetric vector with 24 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a0c6e16826765130b480af53eda3635be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c6e16826765130b480af53eda3635be">&#9670;&nbsp;</a></span>qasymm8x8x3_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">qasymm8x8x3_t</a> =  uint8x8x3_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized asymmetric vector with 24 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a9f90599aecfeb44aed19db16d407c1c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f90599aecfeb44aed19db16d407c1c5">&#9670;&nbsp;</a></span>qasymm8x8x4_signed_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a9f90599aecfeb44aed19db16d407c1c5">qasymm8x8x4_signed_t</a> =  int8x8x4_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized signed asymmetric vector with 32 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a41d3460ff424e2e21c629b3f27386a8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41d3460ff424e2e21c629b3f27386a8b">&#9670;&nbsp;</a></span>qasymm8x8x4_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">qasymm8x8x4_t</a> =  uint8x8x4_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized asymmetric vector with 32 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>

</div>
</div>
<a id="a33d1899b4ff31e4a36f93fa618978196"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33d1899b4ff31e4a36f93fa618978196">&#9670;&nbsp;</a></span>qsymm16_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int16_t <a class="el" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>16 bit quantized symmetric scalar value </p>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>

</div>
</div>
<a id="a4cff22f3ad85935b271be7c660fea33c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cff22f3ad85935b271be7c660fea33c">&#9670;&nbsp;</a></span>qsymm16x8_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a4cff22f3ad85935b271be7c660fea33c">qsymm16x8_t</a> =  int16x8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>16 bit quantized symmetric vector with 8 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>

</div>
</div>
<a id="a9ad60d47682e81883cb85a8ca97f3460"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ad60d47682e81883cb85a8ca97f3460">&#9670;&nbsp;</a></span>qsymm16x8x2_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> =  int16x8x2_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>16 bit quantized symmetric vector with 16 elements </p>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>

</div>
</div>
<a id="a7a5eaeb85796337b6041e598afd4c4a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a5eaeb85796337b6041e598afd4c4a3">&#9670;&nbsp;</a></span>qsymm8_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a7a5eaeb85796337b6041e598afd4c4a3">qsymm8_t</a> =  int8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>8 bit quantized symmetric scalar value </p>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>

</div>
</div>
<a id="ab91cb2269b2e58ed2cb6bd2ca831d434"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab91cb2269b2e58ed2cb6bd2ca831d434">&#9670;&nbsp;</a></span>UInt16Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#ab91cb2269b2e58ed2cb6bd2ca831d434">UInt16Array</a> =  <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt;uint16_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint16s. </p>

<p class="definition">Definition at line <a class="el" href="_array_8h_source.xhtml#l00064">64</a> of file <a class="el" href="_array_8h_source.xhtml">Array.h</a>.</p>

</div>
</div>
<a id="acd6eb2619ccd5eee4963de3195785359"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd6eb2619ccd5eee4963de3195785359">&#9670;&nbsp;</a></span>UInt32Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#acd6eb2619ccd5eee4963de3195785359">UInt32Array</a> =  <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt;uint32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint32s. </p>

<p class="definition">Definition at line <a class="el" href="_array_8h_source.xhtml#l00066">66</a> of file <a class="el" href="_array_8h_source.xhtml">Array.h</a>.</p>

</div>
</div>
<a id="a9dbb5e00a3f397691eb782f03f65375c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9dbb5e00a3f397691eb782f03f65375c">&#9670;&nbsp;</a></span>UInt8Array</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a9dbb5e00a3f397691eb782f03f65375c">UInt8Array</a> =  <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a>&lt;uint8_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of uint8s. </p>

<p class="definition">Definition at line <a class="el" href="_array_8h_source.xhtml#l00062">62</a> of file <a class="el" href="_array_8h_source.xhtml">Array.h</a>.</p>

</div>
</div>
<a id="a83308d038c8dbe8b7d5525aa6cc2193a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83308d038c8dbe8b7d5525aa6cc2193a">&#9670;&nbsp;</a></span>unique_lock</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a83308d038c8dbe8b7d5525aa6cc2193a">unique_lock</a> =  std::unique_lock&lt;<a class="el" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">Mutex</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wrapper of lock_guard data-object. </p>

<p class="definition">Definition at line <a class="el" href="_mutex_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_mutex_8h_source.xhtml">Mutex.h</a>.</p>

</div>
</div>
<a id="afb5b96463d9758a928795ca117fa7312"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb5b96463d9758a928795ca117fa7312">&#9670;&nbsp;</a></span>WorkspaceData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a> =  std::vector&lt;<a class="el" href="structarm__compute_1_1_workspace_data_element.xhtml">WorkspaceDataElement</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_memory_helpers_8h_source.xhtml#l00052">52</a> of file <a class="el" href="_memory_helpers_8h_source.xhtml">MemoryHelpers.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a56297e0f7b215eea46c818cb7528d9ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56297e0f7b215eea46c818cb7528d9ea">&#9670;&nbsp;</a></span>ActivationFunction</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available activation functions. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"></a>LOGISTIC&#160;</td><td class="fielddoc"><p>Logistic ( \( f(x) = \frac{1}{1 + e^{-x}} \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1"></a>TANH&#160;</td><td class="fielddoc"><p>Hyperbolic tangent ( \( f(x) = a \cdot tanh(b \cdot x) \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c"></a>RELU&#160;</td><td class="fielddoc"><p>Rectifier ( \( f(x) = max(0,x) \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9"></a>BOUNDED_RELU&#160;</td><td class="fielddoc"><p>Upper Bounded Rectifier ( \( f(x) = min(a, max(0,x)) \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a"></a>LU_BOUNDED_RELU&#160;</td><td class="fielddoc"><p>Lower and Upper Bounded Rectifier ( \( f(x) = min(a, max(b,x)) \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10"></a>LEAKY_RELU&#160;</td><td class="fielddoc"><p>Leaky Rectifier ( \( f(x) = \begin{cases} \alpha x &amp; \quad \text{if } x \text{ &lt; 0}\\ x &amp; \quad \text{if } x \geq \text{ 0 } \end{cases} \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d"></a>SOFT_RELU&#160;</td><td class="fielddoc"><p>Soft Rectifier ( \( f(x)= log(1+e^x) \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58"></a>ELU&#160;</td><td class="fielddoc"><p>Exponential Linear Unit ( \( f(x) = \begin{cases} \alpha (exp(x) - 1) &amp; \quad \text{if } x \text{ &lt; 0}\\ x &amp; \quad \text{if } x \geq \text{ 0 } \end{cases} \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c"></a>ABS&#160;</td><td class="fielddoc"><p>Absolute ( \( f(x)= |x| \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0"></a>SQUARE&#160;</td><td class="fielddoc"><p>Square ( \( f(x)= x^2 \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0"></a>SQRT&#160;</td><td class="fielddoc"><p>Square root ( \( f(x) = \sqrt{x} \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046"></a>LINEAR&#160;</td><td class="fielddoc"><p>Linear ( \( f(x)= ax + b \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b"></a>IDENTITY&#160;</td><td class="fielddoc"><p>Identity ( \( f(x)= x \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be"></a>HARD_SWISH&#160;</td><td class="fielddoc"><p>Hard-swish ( \( f(x) = (x \text{ReLU6}(x+3))/6 = x \min(\max(0,x+3),6)/6 \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaadb3a79f92eca8147eb99ae7d25ee8a65"></a>SWISH&#160;</td><td class="fielddoc"><p>Swish ( \( f(x) = \frac{x}{1 + e^{-ax}} = x \text{logistic}(ax) \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a56297e0f7b215eea46c818cb7528d9eaa6c83d4d579e33c2e1b09f2e9825fcbc6"></a>GELU&#160;</td><td class="fielddoc"><p>GELU ( \( f(x) = x * 1/2 * 1 + erf(x / \sqrt{2}) \) ) </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_activation_layer_info_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_activation_layer_info_8h_source.xhtml">ActivationLayerInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">LOGISTIC</a>,        <span class="comment">/**&lt; Logistic ( \f$ f(x) = \frac{1}{1 + e^{-x}} \f$ ) */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">TANH</a>,            <span class="comment">/**&lt; Hyperbolic tangent ( \f$ f(x) = a \cdot tanh(b \cdot x) \f$ ) */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">RELU</a>,            <span class="comment">/**&lt; Rectifier ( \f$ f(x) = max(0,x) \f$ ) */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">BOUNDED_RELU</a>,    <span class="comment">/**&lt; Upper Bounded Rectifier ( \f$ f(x) = min(a, max(0,x)) \f$ ) */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">LU_BOUNDED_RELU</a>, <span class="comment">/**&lt; Lower and Upper Bounded Rectifier ( \f$ f(x) = min(a, max(b,x)) \f$ ) */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">LEAKY_RELU</a>, <span class="comment">/**&lt; Leaky Rectifier ( \f$ f(x) = \begin{cases}  \alpha x &amp; \quad \text{if } x \text{ &lt; 0}\\  x &amp; \quad \text{if } x \geq \text{ 0 } \end{cases} \f$ ) */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">SOFT_RELU</a>,  <span class="comment">/**&lt; Soft Rectifier ( \f$ f(x)= log(1+e^x) \f$ ) */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">ELU</a>, <span class="comment">/**&lt; Exponential Linear Unit ( \f$ f(x) = \begin{cases}  \alpha (exp(x) - 1) &amp; \quad \text{if } x \text{ &lt; 0}\\  x &amp; \quad \text{if } x \geq \text{ 0 } \end{cases} \f$ ) */</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>, <span class="comment">/**&lt; Absolute ( \f$ f(x)= |x| \f$ ) */</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">SQUARE</a>,     <span class="comment">/**&lt; Square ( \f$ f(x)= x^2 \f$ )*/</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">SQRT</a>,       <span class="comment">/**&lt; Square root ( \f$ f(x) = \sqrt{x} \f$ )*/</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">LINEAR</a>,     <span class="comment">/**&lt; Linear ( \f$ f(x)= ax + b \f$ ) */</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">IDENTITY</a>,   <span class="comment">/**&lt; Identity ( \f$ f(x)= x \f$ ) */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">HARD_SWISH</a>, <span class="comment">/**&lt; Hard-swish ( \f$ f(x) = (x \text{ReLU6}(x+3))/6 = x \min(\max(0,x+3),6)/6 \f$ ) */</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadb3a79f92eca8147eb99ae7d25ee8a65">SWISH</a>,      <span class="comment">/**&lt; Swish ( \f$ f(x) = \frac{x}{1 + e^{-ax}} = x \text{logistic}(ax) \f$ ) */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6c83d4d579e33c2e1b09f2e9825fcbc6">GELU</a>        <span class="comment">/**&lt; GELU ( \f$ f(x) = x * 1/2 * 1 + erf(x / \sqrt{2}) \f$ ) */</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a23d9f0c01c9e120dfb828ee922b7a8ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23d9f0c01c9e120dfb828ee922b7a8ae">&#9670;&nbsp;</a></span>ArithmeticOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available element-wise operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d"></a>ADD&#160;</td><td class="fielddoc"><p>(x + y) </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb"></a>SUB&#160;</td><td class="fielddoc"><p>(x - y) </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646"></a>DIV&#160;</td><td class="fielddoc"><p>(x / y) </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653"></a>MIN&#160;</td><td class="fielddoc"><p>Min(x, y) </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5"></a>MAX&#160;</td><td class="fielddoc"><p>Max(x, y) </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916"></a>SQUARED_DIFF&#160;</td><td class="fielddoc"><p>(x - y)^2 </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6"></a>POWER&#160;</td><td class="fielddoc"><p>x ^ y </p>
</td></tr>
<tr><td class="fieldname"><a id="a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f"></a>PRELU&#160;</td><td class="fielddoc"><p>y*x if x &lt; 0, x otherwise </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00421">421</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#af3b709fb668cf93ca09e2a46a2a031a8">ADD</a>,          <span class="comment">/**&lt; (x + y) */</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aafc2c4f262a0686c07f86c7d2e1d8d14">SUB</a>,          <span class="comment">/**&lt; (x  - y) */</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">DIV</a>,          <span class="comment">/**&lt; (x / y) */</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">MIN</a>,          <span class="comment">/**&lt; Min(x, y) */</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a>,          <span class="comment">/**&lt; Max(x, y) */</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">SQUARED_DIFF</a>, <span class="comment">/**&lt; (x - y)^2 */</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">POWER</a>,        <span class="comment">/**&lt; x ^ y */</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">PRELU</a>,        <span class="comment">/**&lt; y*x if x &lt; 0, x otherwise */</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2d8a00f1d80a53ce8f75fa929c873202"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d8a00f1d80a53ce8f75fa929c873202">&#9670;&nbsp;</a></span>BilinearInterpolation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202">BilinearInterpolation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bilinear Interpolation method used by LKTracker. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532"></a>BILINEAR_OLD_NEW&#160;</td><td class="fielddoc"><p>Old-new method. </p>
</td></tr>
<tr><td class="fieldname"><a id="a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64"></a>BILINEAR_SCHARR&#160;</td><td class="fielddoc"><p>Scharr method. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00368">368</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532">BILINEAR_OLD_NEW</a>, <span class="comment">/**&lt; Old-new method */</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64">BILINEAR_SCHARR</a>   <span class="comment">/**&lt; Scharr method */</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1f8212fef242f87e34893c8db13fc16e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f8212fef242f87e34893c8db13fc16e">&#9670;&nbsp;</a></span>BitwiseOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16e">BitwiseOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available bitwise operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532"></a>AND&#160;</td><td class="fielddoc"><p>Bitwise AND operation. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d"></a>NOT&#160;</td><td class="fielddoc"><p>Bitwise NOT operation. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616"></a>OR&#160;</td><td class="fielddoc"><p>Bitwise OR operation <br  />
 </p>
</td></tr>
<tr><td class="fieldname"><a id="a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d"></a>XOR&#160;</td><td class="fielddoc"><p>Bitwise XOR operation <br  />
 </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00447">447</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532">AND</a>, <span class="comment">/**&lt; Bitwise AND operation */</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d">NOT</a>, <span class="comment">/**&lt; Bitwise NOT operation */</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616">OR</a>,  <span class="comment">/**&lt; Bitwise OR operation  */</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d">XOR</a>, <span class="comment">/**&lt; Bitwise XOR operation  */</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a15a05537a472ee742404821851529327"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15a05537a472ee742404821851529327">&#9670;&nbsp;</a></span>BorderMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Methods available to handle borders. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"></a>UNDEFINED&#160;</td><td class="fielddoc"><p>Borders are left undefined. </p>
</td></tr>
<tr><td class="fieldname"><a id="a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"></a>CONSTANT&#160;</td><td class="fielddoc"><p>Pixels outside the image are assumed to have a constant value. </p>
</td></tr>
<tr><td class="fieldname"><a id="a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"></a>REPLICATE&#160;</td><td class="fielddoc"><p>Pixels outside the image are assumed to have the same value as the closest image pixel. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00231">231</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</a>, <span class="comment">/**&lt; Borders are left undefined */</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>,  <span class="comment">/**&lt; Pixels outside the image are assumed to have a constant value */</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">REPLICATE</a>  <span class="comment">/**&lt; Pixels outside the image are assumed to have the same value as the closest image pixel */</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1ce9b523fd4f3b5bbcadcd796183455a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ce9b523fd4f3b5bbcadcd796183455a">&#9670;&nbsp;</a></span>Channel</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available channels. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53"></a>C0&#160;</td><td class="fielddoc"><p>Unknown channel format. </p>
<p>First channel (used by formats with unknown channel types). </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1"></a>C1&#160;</td><td class="fielddoc"><p>Second channel (used by formats with unknown channel types). </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4"></a>C2&#160;</td><td class="fielddoc"><p>Third channel (used by formats with unknown channel types). </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c"></a>C3&#160;</td><td class="fielddoc"><p>Fourth channel (used by formats with unknown channel types). </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6"></a>R&#160;</td><td class="fielddoc"><p>Red channel. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf"></a>G&#160;</td><td class="fielddoc"><p>Green channel. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"></a>B&#160;</td><td class="fielddoc"><p>Blue channel. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"></a>A&#160;</td><td class="fielddoc"><p>Alpha channel. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0"></a>Y&#160;</td><td class="fielddoc"><p>Luma channel. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"></a>U&#160;</td><td class="fielddoc"><p>Cb/U channel. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce"></a>V&#160;</td><td class="fielddoc"><p>Cr/V/Value channel. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>, <span class="comment">/** Unknown channel format */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">C0</a>,      <span class="comment">/**&lt; First channel (used by formats with unknown channel types). */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">C1</a>,      <span class="comment">/**&lt; Second channel (used by formats with unknown channel types). */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">C2</a>,      <span class="comment">/**&lt; Third channel (used by formats with unknown channel types). */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">C3</a>,      <span class="comment">/**&lt; Fourth channel (used by formats with unknown channel types). */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>,       <span class="comment">/**&lt; Red channel. */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>,       <span class="comment">/**&lt; Green channel. */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>,       <span class="comment">/**&lt; Blue channel. */</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>,       <span class="comment">/**&lt; Alpha channel. */</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>,       <span class="comment">/**&lt; Luma channel. */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>,       <span class="comment">/**&lt; Cb/U channel. */</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>        <span class="comment">/**&lt; Cr/V/Value channel. */</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a94eb95e47316e7dc5af7615592d26bdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94eb95e47316e7dc5af7615592d26bdd">&#9670;&nbsp;</a></span>CLBackendType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>List the possible OpenCL backends. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826"></a>Native&#160;</td><td class="fielddoc"><p>OpenCL native backend. </p>
</td></tr>
<tr><td class="fieldname"><a id="a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1"></a>Clvk&#160;</td><td class="fielddoc"><p>CLVK backend. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_c_l_types_8h_source.xhtml#l00055">55</a> of file <a class="el" href="runtime_2_c_l_2_c_l_types_8h_source.xhtml">CLTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">Native</a>, <span class="comment">/**&lt; OpenCL native backend */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1">Clvk</a>,   <span class="comment">/**&lt; CLVK backend */</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f7d2fe6b41e36d408375ad6bf9a612a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f7d2fe6b41e36d408375ad6bf9a612a">&#9670;&nbsp;</a></span>CLGEMMKernelType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>OpenCL GEMM kernel types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a6f7d2fe6b41e36d408375ad6bf9a612aaf78504d96ba7177dc0c6784905ac8743"></a>NATIVE&#160;</td><td class="fielddoc"><p>Native GEMM kernel with configurable block size. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6"></a>RESHAPED&#160;</td><td class="fielddoc"><p>Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </p>
<p>Configurable reshape and block size </p>
</td></tr>
<tr><td class="fieldname"><a id="a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868"></a>RESHAPED_ONLY_RHS&#160;</td><td class="fielddoc"><p>Reshaped GEMM kernel where only the rhs matrix is reshaped. </p>
<p>Configurable reshape and block size </p>
</td></tr>
<tr><td class="fieldname"><a id="a6f7d2fe6b41e36d408375ad6bf9a612aa4361824f1748299245ef0ad0cb7d6111"></a>RESHAPED_ONLY_RHS_MMUL&#160;</td><td class="fielddoc"><p>Reshaped GEMM kernel where only the rhs matrix is reshaped. </p>
<p>Using MMUL with configurable block size. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_c_l_types_8h_source.xhtml#l00031">31</a> of file <a class="el" href="runtime_2_c_l_2_c_l_types_8h_source.xhtml">CLTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">    /** Native GEMM kernel with configurable block size.*/</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aaf78504d96ba7177dc0c6784905ac8743">NATIVE</a>,<span class="comment"></span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">    /** Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. Configurable reshape and block size */</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">RESHAPED</a>,<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">    /** Reshaped GEMM kernel where only the rhs matrix is reshaped. Configurable reshape and block size */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">RESHAPED_ONLY_RHS</a>,<span class="comment"></span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /** Reshaped GEMM kernel where only the rhs matrix is reshaped. Using MMUL with configurable block size. */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa4361824f1748299245ef0ad0cb7d6111">RESHAPED_ONLY_RHS_MMUL</a></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a41a1889b2fdf01056017b9f8b58dda6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41a1889b2fdf01056017b9f8b58dda6e">&#9670;&nbsp;</a></span>CLImage2DType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>OpenCL Image2D types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197"></a>ReadOnly&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5"></a>WriteOnly&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197">ReadOnly</a>,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5">WriteOnly</a></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6df16a1b3b5af590a14f55e983d3428e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6df16a1b3b5af590a14f55e983d3428e">&#9670;&nbsp;</a></span>CLKernelType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"></a>UNKNOWN&#160;</td><td class="fielddoc"><p>Unknown CL kernel type. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea6d5ec5f6909788df3453f62a3bd6ad78"></a>DEPTHWISE&#160;</td><td class="fielddoc"><p>Depthwise CL kernel type. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248"></a>DIRECT&#160;</td><td class="fielddoc"><p>Direct Convolution CL kernel type. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea92aed3228e2f4b29698517b9f0a3689e"></a>ELEMENTWISE&#160;</td><td class="fielddoc"><p>Elementwise CL kernel type. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"></a>GEMM&#160;</td><td class="fielddoc"><p>GEMM CL kernel type. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428eafd5dc07b8d30d1ad403905c85f9ba741"></a>POOL&#160;</td><td class="fielddoc"><p>Pool CL kernel type. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7"></a>WINOGRAD&#160;</td><td class="fielddoc"><p>Winograd CL kernel type. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00078">78</a> of file <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml">CLTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>,     <span class="comment">/**&lt; Unknown CL kernel type */</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6d5ec5f6909788df3453f62a3bd6ad78">DEPTHWISE</a>,   <span class="comment">/**&lt; Depthwise CL kernel type */</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">DIRECT</a>,      <span class="comment">/**&lt; Direct Convolution CL kernel type */</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea92aed3228e2f4b29698517b9f0a3689e">ELEMENTWISE</a>, <span class="comment">/**&lt; Elementwise CL kernel type */</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">GEMM</a>,        <span class="comment">/**&lt; GEMM CL kernel type */</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eafd5dc07b8d30d1ad403905c85f9ba741">POOL</a>,        <span class="comment">/**&lt; Pool CL kernel type */</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7">WINOGRAD</a>     <span class="comment">/**&lt; Winograd CL kernel type */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae76ef5bd3ad69f7380ebb3ac6033ec5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae76ef5bd3ad69f7380ebb3ac6033ec5c">&#9670;&nbsp;</a></span>CLTunerMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>&lt; OpenCL tuner modes </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15"></a>EXHAUSTIVE&#160;</td><td class="fielddoc"><p>Searches all possible LWS configurations while tuning. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051"></a>NORMAL&#160;</td><td class="fielddoc"><p>Searches a subset of LWS configurations while tuning. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef"></a>RAPID&#160;</td><td class="fielddoc"><p>Searches a minimal subset of LWS configurations while tuning. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_types_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_c_l_tuner_types_8h_source.xhtml">CLTunerTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">EXHAUSTIVE</a>, <span class="comment">/**&lt; Searches all possible LWS configurations while tuning */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">NORMAL</a>,     <span class="comment">/**&lt; Searches a subset of LWS configurations while tuning */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">RAPID</a>       <span class="comment">/**&lt; Searches a minimal subset of LWS configurations while tuning */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3a440b3893fa10608d4428958be1c52e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a440b3893fa10608d4428958be1c52e">&#9670;&nbsp;</a></span>CLVersion</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">CLVersion</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available OpenCL Version. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3a440b3893fa10608d4428958be1c52ea06e5b2cbe2f75bb5eec32613499cf22a"></a>CL10&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3a440b3893fa10608d4428958be1c52ea80e95ed62d0c47e4d8c0696d467d4db3"></a>CL11&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3a440b3893fa10608d4428958be1c52ead7beedb1bf6bfae8111da26424266675"></a>CL12&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab"></a>CL20&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3"></a>CL30&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6df16a1b3b5af590a14f55e983d3428ea696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00039">39</a> of file <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml">CLTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea06e5b2cbe2f75bb5eec32613499cf22a">CL10</a>,   <span class="comment">/* the OpenCL 1.0 */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea80e95ed62d0c47e4d8c0696d467d4db3">CL11</a>,   <span class="comment">/* the OpenCL 1.1 */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ead7beedb1bf6bfae8111da26424266675">CL12</a>,   <span class="comment">/* the OpenCL 1.2 */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">CL20</a>,   <span class="comment">/* the OpenCL 2.x */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">CL30</a>,   <span class="comment">/* the OpenCL 3.x */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a> <span class="comment">/* unkown version */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2d299363c9fc33334c571fa29ca4f58c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d299363c9fc33334c571fa29ca4f58c">&#9670;&nbsp;</a></span>ComparisonOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported comparison operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"></a>Equal&#160;</td><td class="fielddoc"><p>Equal comparison ( \( x == y \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96"></a>NotEqual&#160;</td><td class="fielddoc"><p>NotEqual comparison ( \( x != y \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"></a>Greater&#160;</td><td class="fielddoc"><p>Greater comparison ( \( x &gt; y \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f"></a>GreaterEqual&#160;</td><td class="fielddoc"><p>Greater equal comparison ( \( x &gt;= y \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b"></a>Less&#160;</td><td class="fielddoc"><p>Less comparison ( \( x &lt; y \) ) </p>
</td></tr>
<tr><td class="fieldname"><a id="a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38"></a>LessEqual&#160;</td><td class="fielddoc"><p>Less equal comparison ( \( x &lt;= y \) ) </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00132">132</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">Equal</a>,        <span class="comment">/**&lt; Equal comparison ( \f$ x == y \f$ ) */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">NotEqual</a>,     <span class="comment">/**&lt; NotEqual comparison ( \f$ x != y \f$ ) */</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">Greater</a>,      <span class="comment">/**&lt; Greater comparison ( \f$ x &gt; y \f$ ) */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">GreaterEqual</a>, <span class="comment">/**&lt; Greater equal comparison ( \f$ x &gt;= y \f$ ) */</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">Less</a>,         <span class="comment">/**&lt; Less comparison ( \f$ x &lt; y \f$ ) */</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">LessEqual</a>     <span class="comment">/**&lt; Less equal comparison ( \f$ x &lt;= y \f$ ) */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a82b8ac759c804bc1fb4e2d21e178fb6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82b8ac759c804bc1fb4e2d21e178fb6f">&#9670;&nbsp;</a></span>ConvertPolicy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Policy to handle integer overflow. </p>
<dl class="section note"><dt>Note</dt><dd>: This is ignored by floating point operations where the overflow behavior adheres to the IEEE-754 standard which states that in case of overflow ±infinity is returned for the round-to-nearest modes (and follows the rounding rules for the directed rounding modes) by default. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0"></a>WRAP&#160;</td><td class="fielddoc"><p>Wrap around. </p>
</td></tr>
<tr><td class="fieldname"><a id="a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"></a>SATURATE&#160;</td><td class="fielddoc"><p>Saturate. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00353">353</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">WRAP</a>,    <span class="comment">/**&lt; Wrap around */</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">SATURATE</a> <span class="comment">/**&lt; Saturate */</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a683661ae75dcb7aef16b9c9bde31517d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a683661ae75dcb7aef16b9c9bde31517d">&#9670;&nbsp;</a></span>ConvolutionMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available ConvolutionMethod. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"></a>GEMM&#160;</td><td class="fielddoc"><p>Convolution using GEMM. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84"></a>GEMM_CONV2D&#160;</td><td class="fielddoc"><p>Direct 2D GEMM convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76"></a>DIRECT&#160;</td><td class="fielddoc"><p>Direct convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06"></a>INDIRECT&#160;</td><td class="fielddoc"><p>Indirect convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8"></a>WINOGRAD&#160;</td><td class="fielddoc"><p>Convolution using Winograd. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28"></a>FFT&#160;</td><td class="fielddoc"><p>Convolution using FFT. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00091">91</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">GEMM</a>,        <span class="comment">/**&lt; Convolution using GEMM */</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84">GEMM_CONV2D</a>, <span class="comment">/**&lt; Direct 2D GEMM convolution */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">DIRECT</a>,      <span class="comment">/**&lt; Direct convolution */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06">INDIRECT</a>,    <span class="comment">/**&lt; Indirect convolution */</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7">WINOGRAD</a>,    <span class="comment">/**&lt; Convolution using Winograd */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28">FFT</a>          <span class="comment">/**&lt; Convolution using FFT */</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa41d7415a5386798147cccae2333d5d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa41d7415a5386798147cccae2333d5d4">&#9670;&nbsp;</a></span>CPUModel</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CPUModel</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>CPU models types. </p>
<dl class="section note"><dt>Note</dt><dd>We only need to detect CPUs we have microarchitecture-specific code for. </dd>
<dd>
Architecture features are detected via HWCAPs. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a667bcd647e7966b5e7c52522d5e895fa"></a>X&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b"></a>GENERIC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8"></a>GENERIC_FP16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7"></a>GENERIC_FP16_DOT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4aecf3e2493afebcfefb0b9b86bd50ef0d"></a>A53&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a33f91a7ec1c6be774d71fcd00ac81c92"></a>A55r0&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca"></a>A55r1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a011d2705a24f3d97d766b9e9be3ebd35"></a>A35&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4aaf79f683ceaea4650b20e898d6c4c373"></a>A73&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a0e5fac8daf1be975a2acfe603f6515ad"></a>A76&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4aafdba3a7b1ef15a36dd5459c291bfe1c"></a>A510&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4abb7f5ae6220c9828e5ec91faf054197c"></a>X1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6"></a>V1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a73fa480cd41e810db6072274086e05ef"></a>A64FX&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb"></a>N1&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_c_p_p_types_8h_source.xhtml#l00059">59</a> of file <a class="el" href="_c_p_p_types_8h_source.xhtml">CPPTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#define X(model) model,</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_c_p_p_types_8h.xhtml#aede6b5b56c3a6e01efde85e1545a4eb8">ARM_COMPUTE_CPU_MODEL_LIST</a></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">#undef X</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad1d5cce2d9e9a5d61c243e5c989112e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1d5cce2d9e9a5d61c243e5c989112e0">&#9670;&nbsp;</a></span>DataLayout</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>[DataLayout enum definition] </p>
<p>Supported tensor data layouts </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"><p>Unknown data layout. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"></a>NCHW&#160;</td><td class="fielddoc"><p>Num samples, channels, height, width. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"></a>NHWC&#160;</td><td class="fielddoc"><p>Num samples, height, width, channels. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015"></a>NCDHW&#160;</td><td class="fielddoc"><p>Num samples, channels, depth, height, width. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef"></a>NDHWC&#160;</td><td class="fielddoc"><p>Num samples, depth, height, width, channels. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00110">110</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>, <span class="comment">/**&lt; Unknown data layout */</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>,    <span class="comment">/**&lt; Num samples, channels, height, width */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>,    <span class="comment">/**&lt; Num samples, height, width, channels */</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">NCDHW</a>,   <span class="comment">/**&lt; Num samples, channels, depth, height, width */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">NDHWC</a>    <span class="comment">/**&lt; Num samples, depth, height, width, channels */</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a74ce3f7420453d3446218ff3b7453e02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74ce3f7420453d3446218ff3b7453e02">&#9670;&nbsp;</a></span>DataLayoutDimension</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>[DataLayout enum definition] </p>
<p>Supported tensor data layout dimensions </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"></a>CHANNEL&#160;</td><td class="fielddoc"><p>channel </p>
</td></tr>
<tr><td class="fieldname"><a id="a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"></a>HEIGHT&#160;</td><td class="fielddoc"><p>height </p>
</td></tr>
<tr><td class="fieldname"><a id="a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"></a>WIDTH&#160;</td><td class="fielddoc"><p>width </p>
</td></tr>
<tr><td class="fieldname"><a id="a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111"></a>DEPTH&#160;</td><td class="fielddoc"><p>depth </p>
</td></tr>
<tr><td class="fieldname"><a id="a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"></a>BATCHES&#160;</td><td class="fielddoc"><p>batches </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00121">121</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>, <span class="comment">/**&lt; channel */</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>,  <span class="comment">/**&lt; height */</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>,   <span class="comment">/**&lt; width */</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">DEPTH</a>,   <span class="comment">/**&lt; depth */</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">BATCHES</a>  <span class="comment">/**&lt; batches */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad8ed01ff3ff33333d8e19db4d2818bb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8ed01ff3ff33333d8e19db4d2818bb6">&#9670;&nbsp;</a></span>DataType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available data types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"><p>Unknown data type. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5"></a>U8&#160;</td><td class="fielddoc"><p>unsigned 8-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"></a>S8&#160;</td><td class="fielddoc"><p>signed 8-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"></a>QSYMM8&#160;</td><td class="fielddoc"><p>quantized, symmetric fixed-point 8-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"></a>QASYMM8&#160;</td><td class="fielddoc"><p>quantized, asymmetric fixed-point 8-bit number unsigned </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"></a>QASYMM8_SIGNED&#160;</td><td class="fielddoc"><p>quantized, asymmetric fixed-point 8-bit number signed </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"></a>QSYMM8_PER_CHANNEL&#160;</td><td class="fielddoc"><p>quantized, symmetric per channel fixed-point 8-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2"></a>U16&#160;</td><td class="fielddoc"><p>unsigned 16-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c"></a>S16&#160;</td><td class="fielddoc"><p>signed 16-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"></a>QSYMM16&#160;</td><td class="fielddoc"><p>quantized, symmetric fixed-point 16-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e"></a>QASYMM16&#160;</td><td class="fielddoc"><p>quantized, asymmetric fixed-point 16-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee"></a>U32&#160;</td><td class="fielddoc"><p>unsigned 32-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"></a>S32&#160;</td><td class="fielddoc"><p>signed 32-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"></a>U64&#160;</td><td class="fielddoc"><p>unsigned 64-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"></a>S64&#160;</td><td class="fielddoc"><p>signed 64-bit number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab"></a>BFLOAT16&#160;</td><td class="fielddoc"><p>16-bit brain floating-point number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"></a>F16&#160;</td><td class="fielddoc"><p>16-bit floating-point number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"></a>F32&#160;</td><td class="fielddoc"><p>32-bit floating-point number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"></a>F64&#160;</td><td class="fielddoc"><p>64-bit floating-point number </p>
</td></tr>
<tr><td class="fieldname"><a id="ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"></a>SIZET&#160;</td><td class="fielddoc"><p>size_t </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00083">83</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>,            <span class="comment">/**&lt; Unknown data type */</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>,                 <span class="comment">/**&lt; unsigned 8-bit number */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>,                 <span class="comment">/**&lt; signed 8-bit number */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>,             <span class="comment">/**&lt; quantized, symmetric fixed-point 8-bit number */</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>,            <span class="comment">/**&lt; quantized, asymmetric fixed-point 8-bit number unsigned */</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>,     <span class="comment">/**&lt; quantized, asymmetric fixed-point 8-bit number signed */</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <span class="comment">/**&lt; quantized, symmetric per channel fixed-point 8-bit number */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>,                <span class="comment">/**&lt; unsigned 16-bit number */</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>,                <span class="comment">/**&lt; signed 16-bit number */</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>,            <span class="comment">/**&lt; quantized, symmetric fixed-point 16-bit number */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>,           <span class="comment">/**&lt; quantized, asymmetric fixed-point 16-bit number */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>,                <span class="comment">/**&lt; unsigned 32-bit number */</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>,                <span class="comment">/**&lt; signed 32-bit number */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a31d65cccd6593e4101db93fb878abcaa">U64</a>,                <span class="comment">/**&lt; unsigned 64-bit number */</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a115dca124dc6423c7a400b8a8a0270cc">S64</a>,                <span class="comment">/**&lt; signed 64-bit number */</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>,           <span class="comment">/**&lt; 16-bit brain floating-point number */</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>,                <span class="comment">/**&lt; 16-bit floating-point number */</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>,                <span class="comment">/**&lt; 32-bit floating-point number */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">F64</a>,                <span class="comment">/**&lt; 64-bit floating-point number */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">SIZET</a>               <span class="comment">/**&lt; size_t */</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f66ec167e002c7c0549ff6c8a8939ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f66ec167e002c7c0549ff6c8a8939ad">&#9670;&nbsp;</a></span>DeconvolutionMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ad">DeconvolutionMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available DeconvolutionMethod. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a6f66ec167e002c7c0549ff6c8a8939ada5174aac3927faa9ee34befb7fc87a9e3"></a>GEMM&#160;</td><td class="fielddoc"><p>Deconvolution using GEMM. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6f66ec167e002c7c0549ff6c8a8939ada4c5d06b02c97731aaa976179c62dcf76"></a>DIRECT&#160;</td><td class="fielddoc"><p>Direct deconvolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6"></a>UPSCALE_CONV2D&#160;</td><td class="fielddoc"><p>Deconvolution with Upscaling. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00109">109</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">GEMM</a>,          <span class="comment">/**&lt; Deconvolution using GEMM */</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">DIRECT</a>,        <span class="comment">/**&lt; Direct deconvolution */</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6">UPSCALE_CONV2D</a> <span class="comment">/**&lt; Deconvolution with Upscaling */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0255421478a6f5ab8a2596d966411a5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0255421478a6f5ab8a2596d966411a5b">&#9670;&nbsp;</a></span>DepthwiseConvolutionFunction</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5b">DepthwiseConvolutionFunction</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available DepthwiseConvolutionFunction. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079"></a>OPTIMIZED&#160;</td><td class="fielddoc"><p>Optimized Depthwise Convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a0255421478a6f5ab8a2596d966411a5bac942dc2a9f958acddc67e11472d3ca0b"></a>GENERIC&#160;</td><td class="fielddoc"><p>Generic Depthwise Convolution. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00102">102</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079">OPTIMIZED</a>, <span class="comment">/**&lt; Optimized Depthwise Convolution */</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">GENERIC</a>,   <span class="comment">/**&lt; Generic Depthwise Convolution */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad818ba0ecd4a87d8f1bb0d5b17f07830"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad818ba0ecd4a87d8f1bb0d5b17f07830">&#9670;&nbsp;</a></span>DetectionOutputLayerCodeType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available Detection Output code types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a"></a>CORNER&#160;</td><td class="fielddoc"><p>Use box corners. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54"></a>CENTER_SIZE&#160;</td><td class="fielddoc"><p>Use box centers and size. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a"></a>CORNER_SIZE&#160;</td><td class="fielddoc"><p>Use box centers and size. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16"></a>TF_CENTER&#160;</td><td class="fielddoc"><p>Use box centers and size but flip x and y co-ordinates. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00781">781</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;{</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">CORNER</a>,      <span class="comment">/**&lt; Use box corners */</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">CENTER_SIZE</a>, <span class="comment">/**&lt; Use box centers and size */</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">CORNER_SIZE</a>, <span class="comment">/**&lt; Use box centers and size */</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">TF_CENTER</a>    <span class="comment">/**&lt; Use box centers and size but flip x and y co-ordinates */</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad258d4c51629346fceac4679b3209ad9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad258d4c51629346fceac4679b3209ad9">&#9670;&nbsp;</a></span>DeviceType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9">DeviceType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Device types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09"></a>NEON&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0"></a>CL&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_i_device_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_i_device_8h_source.xhtml">IDevice.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09">NEON</a>,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">CL</a>,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1fece1bd804e64f39f602d1c3969849a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fece1bd804e64f39f602d1c3969849a">&#9670;&nbsp;</a></span>DimensionRoundingType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dimension rounding type when down-scaling on CNNs. </p>
<dl class="section note"><dt>Note</dt><dd>Used in pooling and convolution layer </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"></a>FLOOR&#160;</td><td class="fielddoc"><p>Floor rounding. </p>
</td></tr>
<tr><td class="fieldname"><a id="a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff"></a>CEIL&#160;</td><td class="fielddoc"><p>Ceil rounding. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00133">133</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>, <span class="comment">/**&lt; Floor rounding */</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>   <span class="comment">/**&lt; Ceil rounding */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5dad01b7eab116403241313417e0936d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5dad01b7eab116403241313417e0936d">&#9670;&nbsp;</a></span>ElementWiseUnary</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available element wise unary operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781"></a>RSQRT&#160;</td><td class="fielddoc"><p>Reverse square root. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7"></a>EXP&#160;</td><td class="fielddoc"><p>Exponential. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e"></a>NEG&#160;</td><td class="fielddoc"><p>Negate. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3"></a>LOG&#160;</td><td class="fielddoc"><p>Natural Logarithm. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c"></a>ABS&#160;</td><td class="fielddoc"><p>Absolute value. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1"></a>SIN&#160;</td><td class="fielddoc"><p>Sine. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d"></a>ROUND&#160;</td><td class="fielddoc"><p>Round. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680"></a>LOGICAL_NOT&#160;</td><td class="fielddoc"><p>Logical Not. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00434">434</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">RSQRT</a>,       <span class="comment">/**&lt; Reverse square root */</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">EXP</a>,         <span class="comment">/**&lt; Exponential */</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">NEG</a>,         <span class="comment">/**&lt; Negate */</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</a>,         <span class="comment">/**&lt; Natural Logarithm */</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>,         <span class="comment">/**&lt; Absolute value */</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">SIN</a>,         <span class="comment">/**&lt; Sine */</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ROUND</a>,       <span class="comment">/**&lt; Round */</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680">LOGICAL_NOT</a>, <span class="comment">/**&lt; Logical Not */</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a59e56af19e754a6aa26a612ebf91d05f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59e56af19e754a6aa26a612ebf91d05f">&#9670;&nbsp;</a></span>ErrorCode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">ErrorCode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available error codes. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a59e56af19e754a6aa26a612ebf91d05fae0aa021e21dddbd6d8cecec71e9cf564"></a>OK&#160;</td><td class="fielddoc"><p>No error. </p>
</td></tr>
<tr><td class="fieldname"><a id="a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"></a>RUNTIME_ERROR&#160;</td><td class="fielddoc"><p>Generic runtime error. </p>
</td></tr>
<tr><td class="fieldname"><a id="a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7"></a>UNSUPPORTED_EXTENSION_USE&#160;</td><td class="fielddoc"><p>Unsupported extension used. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_error_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_error_8h_source.xhtml">Error.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fae0aa021e21dddbd6d8cecec71e9cf564">OK</a>,                       <span class="comment">/**&lt; No error */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">RUNTIME_ERROR</a>,            <span class="comment">/**&lt; Generic runtime error */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7">UNSUPPORTED_EXTENSION_USE</a> <span class="comment">/**&lt; Unsupported extension used*/</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad14b0c6d4ed8fcadff6dcf39c5cf17fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">&#9670;&nbsp;</a></span>ExecutionMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">ExecutionMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df"></a>FastRerun&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3"></a>FastStart&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2common_2_types_8h_source.xhtml#l00051">51</a> of file <a class="el" href="src_2common_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df">FastRerun</a> = <a class="code" href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee">AclPreferFastRerun</a>,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3">FastStart</a> = <a class="code" href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58">AclPreferFastStart</a>,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a86a0c8e195c900a895c249662cfaa564"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86a0c8e195c900a895c249662cfaa564">&#9670;&nbsp;</a></span>FFTDirection</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">FFTDirection</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>FFT direction to use. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a86a0c8e195c900a895c249662cfaa564a67d2f6740a8eaebf4d5c6f79be8da481"></a>Forward&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a86a0c8e195c900a895c249662cfaa564a9f87f02f2da8f99c571b2a1c2a96132b"></a>Inverse&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_function_descriptors_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_function_descriptors_8h_source.xhtml">FunctionDescriptors.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a67d2f6740a8eaebf4d5c6f79be8da481">Forward</a>,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a9f87f02f2da8f99c571b2a1c2a96132b">Inverse</a></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab4e88c89b3b7ea1735996cc4def22d58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4e88c89b3b7ea1735996cc4def22d58">&#9670;&nbsp;</a></span>Format</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> colour formats. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"><p>Unknown image format. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"></a>U8&#160;</td><td class="fielddoc"><p>1 channel, 1 U8 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"></a>S16&#160;</td><td class="fielddoc"><p>1 channel, 1 S16 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"></a>U16&#160;</td><td class="fielddoc"><p>1 channel, 1 U16 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"></a>S32&#160;</td><td class="fielddoc"><p>1 channel, 1 S32 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"></a>U32&#160;</td><td class="fielddoc"><p>1 channel, 1 U32 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a115dca124dc6423c7a400b8a8a0270cc"></a>S64&#160;</td><td class="fielddoc"><p>1 channel, 1 S64 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a31d65cccd6593e4101db93fb878abcaa"></a>U64&#160;</td><td class="fielddoc"><p>1 channel, 1 U64 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab"></a>BFLOAT16&#160;</td><td class="fielddoc"><p>16-bit brain floating-point number </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"></a>F16&#160;</td><td class="fielddoc"><p>1 channel, 1 F16 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"></a>F32&#160;</td><td class="fielddoc"><p>1 channel, 1 F32 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825"></a>UV88&#160;</td><td class="fielddoc"><p>2 channel, 1 U8 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"></a>RGB888&#160;</td><td class="fielddoc"><p>3 channels, 1 U8 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619"></a>RGBA8888&#160;</td><td class="fielddoc"><p>4 channels, 1 U8 per channel </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c"></a>YUV444&#160;</td><td class="fielddoc"><p>A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164"></a>YUYV422&#160;</td><td class="fielddoc"><p>A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755"></a>NV12&#160;</td><td class="fielddoc"><p>A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4"></a>NV21&#160;</td><td class="fielddoc"><p>A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778"></a>IYUV&#160;</td><td class="fielddoc"><p>A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa"></a>UYVY422&#160;</td><td class="fielddoc"><p>A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00058">58</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>,  <span class="comment">/**&lt; Unknown image format */</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>,       <span class="comment">/**&lt; 1 channel, 1 U8 per channel */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>,      <span class="comment">/**&lt; 1 channel, 1 S16 per channel */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>,      <span class="comment">/**&lt; 1 channel, 1 U16 per channel */</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>,      <span class="comment">/**&lt; 1 channel, 1 S32 per channel */</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>,      <span class="comment">/**&lt; 1 channel, 1 U32 per channel */</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a115dca124dc6423c7a400b8a8a0270cc">S64</a>,      <span class="comment">/**&lt; 1 channel, 1 S64 per channel */</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a31d65cccd6593e4101db93fb878abcaa">U64</a>,      <span class="comment">/**&lt; 1 channel, 1 U64 per channel */</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <span class="comment">/**&lt; 16-bit brain floating-point number */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>,      <span class="comment">/**&lt; 1 channel, 1 F16 per channel */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>,      <span class="comment">/**&lt; 1 channel, 1 F32 per channel */</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>,     <span class="comment">/**&lt; 2 channel, 1 U8 per channel */</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>,   <span class="comment">/**&lt; 3 channels, 1 U8 per channel */</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <span class="comment">/**&lt; 4 channels, 1 U8 per channel */</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>,   <span class="comment">/**&lt; A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes */</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>,  <span class="comment">/**&lt; A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes */</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>,     <span class="comment">/**&lt; A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling */</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>,     <span class="comment">/**&lt; A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling */</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>,     <span class="comment">/**&lt; A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes */</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>   <span class="comment">/**&lt; A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte */</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="afb7e3dd8a833840aaaf618bd43ead0ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb7e3dd8a833840aaaf618bd43ead0ca">&#9670;&nbsp;</a></span>FuseBatchNormalizationType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available FuseBatchNormalizationType. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d"></a>CONVOLUTION&#160;</td><td class="fielddoc"><p>For Convolution weights. </p>
</td></tr>
<tr><td class="fieldname"><a id="afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4"></a>DEPTHWISECONVOLUTION&#160;</td><td class="fielddoc"><p>For Depthwise Convolution weights. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00117">117</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d">CONVOLUTION</a>,         <span class="comment">/**&lt; For Convolution weights */</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4">DEPTHWISECONVOLUTION</a> <span class="comment">/**&lt; For Depthwise Convolution weights*/</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5558e2cc22f7f4771653d992c8ad8864"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5558e2cc22f7f4771653d992c8ad8864">&#9670;&nbsp;</a></span>GEMMLowpOutputStageType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>GEMMLowp output stage type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693"></a>NONE&#160;</td><td class="fielddoc"><p>No quantization. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b"></a>QUANTIZE_DOWN&#160;</td><td class="fielddoc"><p>Quantize using an integer multiplication. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"></a>QUANTIZE_DOWN_FIXEDPOINT&#160;</td><td class="fielddoc"><p>Quantize using a fixed point multiplication. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c"></a>QUANTIZE_DOWN_FLOAT&#160;</td><td class="fielddoc"><p>Quantize using a floating point multiplication. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_g_e_m_m_info_8h_source.xhtml">GEMMInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">NONE</a>,                     <span class="comment">/**&lt; No quantization */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">QUANTIZE_DOWN</a>,            <span class="comment">/**&lt; Quantize using an integer multiplication */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">QUANTIZE_DOWN_FIXEDPOINT</a>, <span class="comment">/**&lt; Quantize using a fixed point multiplication */</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">QUANTIZE_DOWN_FLOAT</a>       <span class="comment">/**&lt; Quantize using a floating point multiplication */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a735ac6c2a02e320969625308810444f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a735ac6c2a02e320969625308810444f3">&#9670;&nbsp;</a></span>GPUTarget</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available GPU Targets. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82"></a>GPU_ARCH_MASK&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a34f809afe4f596c3c28e2f38e572253e"></a>GPU_GENERATION_MASK&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"></a>MIDGARD&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e"></a>BIFROST&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57"></a>VALHALL&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df"></a>FIFTHGEN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673"></a>T600&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd"></a>T700&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048"></a>T800&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6"></a>G71&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc"></a>G72&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0"></a>G51&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988"></a>G51BIG&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f"></a>G51LIT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33"></a>G31&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d"></a>G76&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb"></a>G52&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837"></a>G52LIT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0"></a>G77&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15"></a>G57&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029"></a>G78&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c"></a>G68&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89"></a>G78AE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff"></a>G710&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010"></a>G610&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8"></a>G510&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20"></a>G310&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e"></a>G715&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a"></a>G615&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96"></a>G720&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce"></a>G620&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_g_p_u_target_8h_source.xhtml#l00034">34</a> of file <a class="el" href="_g_p_u_target_8h_source.xhtml">GPUTarget.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>             = 0x101,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">GPU_ARCH_MASK</a>       = 0xF00,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a34f809afe4f596c3c28e2f38e572253e">GPU_GENERATION_MASK</a> = 0x0F0,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a>             = 0x100,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">BIFROST</a>             = 0x200,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">VALHALL</a>             = 0x300,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df">FIFTHGEN</a>            = 0X400,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">T600</a>                = 0x110,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">T700</a>                = 0x120,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">T800</a>                = 0x130,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">G71</a>                 = 0x210,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">G72</a>                 = 0x220,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">G51</a>                 = 0x221,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">G51BIG</a>              = 0x222,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">G51LIT</a>              = 0x223,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33">G31</a>                 = 0x224,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">G76</a>                 = 0x230,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb">G52</a>                 = 0x231,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837">G52LIT</a>              = 0x232,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">G77</a>                 = 0x310,</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15">G57</a>                 = 0x311,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029">G78</a>                 = 0x320,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c">G68</a>                 = 0x321,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89">G78AE</a>               = 0x330,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff">G710</a>                = 0x340,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010">G610</a>                = 0x341,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8">G510</a>                = 0x342,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20">G310</a>                = 0x343,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e">G715</a>                = 0x350,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a">G615</a>                = 0x351,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96">G720</a>                = 0x410,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce">G620</a>                = 0X411</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2829e9ffdb98c900b4bf5af09c2bb85b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2829e9ffdb98c900b4bf5af09c2bb85b">&#9670;&nbsp;</a></span>ImportMemoryType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a2829e9ffdb98c900b4bf5af09c2bb85b">ImportMemoryType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a2829e9ffdb98c900b4bf5af09c2bb85ba596d9994cc5f04a23625d24d6b840246"></a>HostPtr&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2common_2_types_8h_source.xhtml#l00057">57</a> of file <a class="el" href="src_2common_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2829e9ffdb98c900b4bf5af09c2bb85ba596d9994cc5f04a23625d24d6b840246">HostPtr</a> = <a class="code" href="_acl_types_8h.xhtml#a7a59b5478ea9250c2d244831c2c4672aae475aad5997d129ce4dab14a28ddb802">AclImportMemoryType::AclHostPtr</a></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a966a9c417ce5e94dca08d9b5e745c0c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a966a9c417ce5e94dca08d9b5e745c0c9">&#9670;&nbsp;</a></span>InterpolationPolicy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interpolation method. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"></a>NEAREST_NEIGHBOR&#160;</td><td class="fielddoc"><p>Output values are defined to match the source pixel whose center is nearest to the sample position. </p>
</td></tr>
<tr><td class="fieldname"><a id="a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"></a>BILINEAR&#160;</td><td class="fielddoc"><p>Output values are defined by bilinear interpolation between the pixels. </p>
</td></tr>
<tr><td class="fieldname"><a id="a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4"></a>AREA&#160;</td><td class="fielddoc"><p>Output values are determined by averaging the source pixels whose areas fall under the area of the destination pixel, projected onto the source image. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00360">360</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;{</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">NEAREST_NEIGHBOR</a>, <span class="comment">/**&lt; Output values are defined to match the source pixel whose center is nearest to the sample position */</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">BILINEAR</a>,         <span class="comment">/**&lt; Output values are defined by bilinear interpolation between the pixels */</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">AREA</a>, <span class="comment">/**&lt; Output values are determined by averaging the source pixels whose areas fall under the area of the destination pixel, projected onto the source image */</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8cb8460f7fedf906ecab5621af891707"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cb8460f7fedf906ecab5621af891707">&#9670;&nbsp;</a></span>LogicalOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707">LogicalOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>List of supported logical operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a8cb8460f7fedf906ecab5621af891707a88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"><p>Unknown. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b"></a>And&#160;</td><td class="fielddoc"><p>Logical And &amp;&amp;. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8cb8460f7fedf906ecab5621af891707a3a2d5fe857d8f9541136a124c2edec6c"></a>Or&#160;</td><td class="fielddoc"><p>Logical Or ||. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8cb8460f7fedf906ecab5621af891707aa74c05d080620f087c4e523977230666"></a>Not&#160;</td><td class="fielddoc"><p>Logical Not ! </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_kernel_types_8h_source.xhtml#l00030">30</a> of file <a class="el" href="_kernel_types_8h_source.xhtml">KernelTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>, <span class="comment">/**&lt; Unknown */</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b">And</a>,     <span class="comment">/**&lt; Logical And &amp;&amp; */</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707a3a2d5fe857d8f9541136a124c2edec6c">Or</a>,      <span class="comment">/**&lt; Logical Or || */</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707aa74c05d080620f087c4e523977230666">Not</a>,     <span class="comment">/**&lt; Logical Not ! */</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="af0a4d6be70322c742c12da1edccbb74d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0a4d6be70322c742c12da1edccbb74d">&#9670;&nbsp;</a></span>MappingType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74d">MappingType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mapping type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="af0a4d6be70322c742c12da1edccbb74daac354f9e7a5097598cdd933b42fd190e"></a>BLOBS&#160;</td><td class="fielddoc"><p>Mappings are in blob granularity. </p>
</td></tr>
<tr><td class="fieldname"><a id="af0a4d6be70322c742c12da1edccbb74da465202c26fd7181c6bc9a80648499073"></a>OFFSETS&#160;</td><td class="fielddoc"><p>Mappings are in offset granularity in the same blob. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2runtime_2_types_8h_source.xhtml#l00034">34</a> of file <a class="el" href="arm__compute_2runtime_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74daac354f9e7a5097598cdd933b42fd190e">BLOBS</a>,  <span class="comment">/**&lt; Mappings are in blob granularity */</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74da465202c26fd7181c6bc9a80648499073">OFFSETS</a> <span class="comment">/**&lt; Mappings are in offset granularity in the same blob */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a201391f6e13e2a1ac203256a77792718"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a201391f6e13e2a1ac203256a77792718">&#9670;&nbsp;</a></span>NMSType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available non maxima suppression types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046"></a>LINEAR&#160;</td><td class="fielddoc"><p>Linear NMS. </p>
</td></tr>
<tr><td class="fieldname"><a id="a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9"></a>GAUSSIAN&#160;</td><td class="fielddoc"><p>Gaussian NMS. </p>
</td></tr>
<tr><td class="fieldname"><a id="a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1"></a>ORIGINAL&#160;</td><td class="fielddoc"><p>Original NMS. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00488">488</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;{</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">LINEAR</a>,   <span class="comment">/**&lt; Linear NMS */</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9">GAUSSIAN</a>, <span class="comment">/**&lt; Gaussian NMS */</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1">ORIGINAL</a>  <span class="comment">/**&lt; Original NMS */</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad4bb8dabdbf8ad75e34220cc666b59ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4bb8dabdbf8ad75e34220cc666b59ca">&#9670;&nbsp;</a></span>NormType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The normalization type used for the normalization layer. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190"></a>IN_MAP_1D&#160;</td><td class="fielddoc"><p>Normalization applied within the same map in 1D region. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e"></a>IN_MAP_2D&#160;</td><td class="fielddoc"><p>Normalization applied within the same map in 2D region. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5"></a>CROSS_MAP&#160;</td><td class="fielddoc"><p>Normalization applied cross maps. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00456">456</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">IN_MAP_1D</a>, <span class="comment">/**&lt; Normalization applied within the same map in 1D region */</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">IN_MAP_2D</a>, <span class="comment">/**&lt; Normalization applied within the same map in 2D region */</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">CROSS_MAP</a>  <span class="comment">/**&lt; Normalization applied cross maps */</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a14d24d90ab4ba2956e92e27890ba4c91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14d24d90ab4ba2956e92e27890ba4c91">&#9670;&nbsp;</a></span>PaddingMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding mode to use for PadLayer. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"></a>CONSTANT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df"></a>REFLECT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb"></a>SYMMETRIC&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00124">124</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">REFLECT</a>,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">SYMMETRIC</a></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a9172da722f0a434e5cc07c0a3c115d93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9172da722f0a434e5cc07c0a3c115d93">&#9670;&nbsp;</a></span>PoolingType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available pooling types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5"></a>MAX&#160;</td><td class="fielddoc"><p>Max Pooling. </p>
</td></tr>
<tr><td class="fieldname"><a id="a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"></a>AVG&#160;</td><td class="fielddoc"><p>Average Pooling. </p>
</td></tr>
<tr><td class="fieldname"><a id="a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"></a>L2&#160;</td><td class="fielddoc"><p>L2 Pooling. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00480">480</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a>, <span class="comment">/**&lt; Max Pooling */</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">AVG</a>, <span class="comment">/**&lt; Average Pooling */</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</a>   <span class="comment">/**&lt; L2 Pooling */</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5827eb9cb394e74af87f74bd354fb45b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5827eb9cb394e74af87f74bd354fb45b">&#9670;&nbsp;</a></span>ReductionOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available reduction operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5"></a>ARG_IDX_MAX&#160;</td><td class="fielddoc"><p>Index of the max value. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1"></a>ARG_IDX_MIN&#160;</td><td class="fielddoc"><p>Index of the min value. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5"></a>MEAN_SUM&#160;</td><td class="fielddoc"><p>Mean of sum. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed"></a>PROD&#160;</td><td class="fielddoc"><p>Product. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64"></a>SUM_SQUARE&#160;</td><td class="fielddoc"><p>Sum of squares. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a"></a>SUM&#160;</td><td class="fielddoc"><p>Sum. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653"></a>MIN&#160;</td><td class="fielddoc"><p>Min. </p>
</td></tr>
<tr><td class="fieldname"><a id="a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5"></a>MAX&#160;</td><td class="fielddoc"><p>Max. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00408">408</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">ARG_IDX_MAX</a>, <span class="comment">/**&lt; Index of the max value */</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">ARG_IDX_MIN</a>, <span class="comment">/**&lt; Index of the min value */</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">MEAN_SUM</a>,    <span class="comment">/**&lt; Mean of sum */</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">PROD</a>,        <span class="comment">/**&lt; Product */</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">SUM_SQUARE</a>,  <span class="comment">/**&lt; Sum of squares */</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">SUM</a>,         <span class="comment">/**&lt; Sum */</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">MIN</a>,         <span class="comment">/**&lt; Min */</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a>,         <span class="comment">/**&lt; Max */</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="add6426cbf2e057a195846d4ba09a50be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add6426cbf2e057a195846d4ba09a50be">&#9670;&nbsp;</a></span>RoundingPolicy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rounding method. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"></a>TO_ZERO&#160;</td><td class="fielddoc"><p>Truncates the least significant values that are lost in operations. </p>
</td></tr>
<tr><td class="fieldname"><a id="add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"></a>TO_NEAREST_UP&#160;</td><td class="fielddoc"><p>Rounds to nearest value; half rounds away from zero. </p>
</td></tr>
<tr><td class="fieldname"><a id="add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"></a>TO_NEAREST_EVEN&#160;</td><td class="fielddoc"><p>Rounds to nearest value; half rounds to nearest even. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_rounding_8h_source.xhtml#l00030">30</a> of file <a class="el" href="arm__compute_2core_2_rounding_8h_source.xhtml">Rounding.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">TO_ZERO</a>,         <span class="comment">/**&lt; Truncates the least significant values that are lost in operations. */</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>,   <span class="comment">/**&lt; Rounds to nearest value; half rounds away from zero */</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">TO_NEAREST_EVEN</a>, <span class="comment">/**&lt; Rounds to nearest value; half rounds to nearest even */</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a16a59381d4d74d17d86d69eb4d286d7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16a59381d4d74d17d86d69eb4d286d7b">&#9670;&nbsp;</a></span>SamplingPolicy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available Sampling Policies. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e"></a>CENTER&#160;</td><td class="fielddoc"><p>Samples are taken at pixel center. </p>
</td></tr>
<tr><td class="fieldname"><a id="a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1"></a>TOP_LEFT&#160;</td><td class="fielddoc"><p>Samples are taken at pixel top left corner. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00084">84</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">CENTER</a>,  <span class="comment">/**&lt; Samples are taken at pixel center */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">TOP_LEFT</a> <span class="comment">/**&lt; Samples are taken at pixel top left corner */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae98a46f4ea1a43ca48acaf15d2eb7113"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae98a46f4ea1a43ca48acaf15d2eb7113">&#9670;&nbsp;</a></span>StatusCode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38"></a>Success&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1"></a>RuntimeError&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd"></a>OutOfMemory&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee"></a>Unimplemented&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7"></a>UnsupportedTarget&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71"></a>InvalidTarget&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b"></a>InvalidArgument&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85"></a>UnsupportedConfig&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60"></a>InvalidObjectState&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2common_2_types_8h_source.xhtml#l00032">32</a> of file <a class="el" href="src_2common_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">Success</a>            = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5c0200f51580173c58b156cb6c443dce">AclSuccess</a>,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1">RuntimeError</a>       = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a7586a308543e75989742667676cb102d">AclRuntimeError</a>,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd">OutOfMemory</a>        = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2aae6e50c78015ae9c9f6c03ef2c88356e">AclOutOfMemory</a>,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee">Unimplemented</a>      = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2ad5aecf6979192fb01d94f1acf4844dcd">AclUnimplemented</a>,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7">UnsupportedTarget</a>  = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2bab471e86cd1e7951172eeae0855f40">AclUnsupportedTarget</a>,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71">InvalidTarget</a>      = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a92fd9c05491d0e6c9fb94405c8faae11">AclInvalidTarget</a>,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">InvalidArgument</a>    = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a00f188d1f6cef6e569b31a95964d26ca">AclInvalidArgument</a>,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85">UnsupportedConfig</a>  = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2216553ecd7bef833f5e07fdf31ef6c9">AclUnsupportedConfig</a>,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60">InvalidObjectState</a> = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5d55d1ccc47a605f01b9284b3102e979">AclInvalidObjectState</a>,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a31488d29805a596498c0234ae392d35d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31488d29805a596498c0234ae392d35d">&#9670;&nbsp;</a></span>Target</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e"></a>Cpu&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3"></a>GpuOcl&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2common_2_types_8h_source.xhtml#l00045">45</a> of file <a class="el" href="src_2common_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e">Cpu</a>    = <a class="code" href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2">AclTarget::AclCpu</a>,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3">GpuOcl</a> = <a class="code" href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846">AclTarget::AclGpuOcl</a>,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a08e287b5f0197ce8c7c84dde6db24828"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08e287b5f0197ce8c7c84dde6db24828">&#9670;&nbsp;</a></span>TensorType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> : int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2"></a>ACL_UNKNOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a292ea0ca5cb39b9acea91a2c56fbbe60"></a>ACL_SRC_DST&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"></a>ACL_SRC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"></a>ACL_SRC_0&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"></a>ACL_SRC_1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"></a>ACL_SRC_2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828ae4ed430701598bfaba04ee2dea5f0b0a"></a>ACL_SRC_3&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828aa5dda325fa2f2394df27cf813b3ffe47"></a>ACL_SRC_4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a17fc511e65612b716c9c2f34e096caea"></a>ACL_SRC_5&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828ac2e09218cbf70ed9ba3923c4504d2924"></a>ACL_SRC_6&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4"></a>ACL_SRC_END&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"></a>ACL_DST&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"></a>ACL_DST_0&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828ac4e3fbeb8c4b89ef5c98432e80418471"></a>ACL_DST_1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828aedb025013d5c33ce9834fef9cfe70fcc"></a>ACL_DST_2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d"></a>ACL_DST_END&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc"></a>ACL_INT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a9be6b6e34915d1ad0cbe68911a25459a"></a>ACL_INT_0&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a634a498326dcb5b1f977bc1653f64a70"></a>ACL_INT_1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828acc3b8583b5cb467f016926384c85295a"></a>ACL_INT_2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828acccf11c51785152d39207ba45ab1ab72"></a>ACL_INT_3&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828aff6d498c21961fa2f6228178fa16b179"></a>ACL_INT_4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828ab1618b1c126db67c17a2eb6f1e6b237a"></a>ACL_SRC_VEC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a267aa0d9caec7b4f4b87a702e03dfcbc"></a>ACL_DST_VEC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a5007ca2bff93e4fc849e1f147501a6ea"></a>ACL_INT_VEC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785"></a>ACL_BIAS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a8201f58586be83622450924f1339d95d"></a>ACL_VEC_ROW_SUM&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a93203bd138078ed3c19f335d84f9b3cd"></a>ACL_VEC_COL_SUM&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828afbaa09ed653f4ffe6c94c2bfaa36ddc7"></a>ACL_SHIFTS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a08e287b5f0197ce8c7c84dde6db24828a9da88e01e6f086c156eda117f84b89e0"></a>ACL_MULTIPLIERS&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00038">38</a> of file <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                : int32_t</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2">ACL_UNKNOWN</a> = -1,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a292ea0ca5cb39b9acea91a2c56fbbe60">ACL_SRC_DST</a> = 0,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Src</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>     = 0,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>   = 0,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>   = 1,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">ACL_SRC_2</a>   = 2,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae4ed430701598bfaba04ee2dea5f0b0a">ACL_SRC_3</a>   = 3,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aa5dda325fa2f2394df27cf813b3ffe47">ACL_SRC_4</a>   = 4,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a17fc511e65612b716c9c2f34e096caea">ACL_SRC_5</a>   = 5,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac2e09218cbf70ed9ba3923c4504d2924">ACL_SRC_6</a>   = 6,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">ACL_SRC_END</a> = 6,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Dst</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>     = 30,</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>   = 30,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac4e3fbeb8c4b89ef5c98432e80418471">ACL_DST_1</a>   = 31,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aedb025013d5c33ce9834fef9cfe70fcc">ACL_DST_2</a>   = 32,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">ACL_DST_END</a> = 32,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Aux</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc">ACL_INT</a>     = 50,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a9be6b6e34915d1ad0cbe68911a25459a">ACL_INT_0</a>   = 50,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a634a498326dcb5b1f977bc1653f64a70">ACL_INT_1</a>   = 51,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828acc3b8583b5cb467f016926384c85295a">ACL_INT_2</a>   = 52,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828acccf11c51785152d39207ba45ab1ab72">ACL_INT_3</a>   = 53,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aff6d498c21961fa2f6228178fa16b179">ACL_INT_4</a>   = 54,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ab1618b1c126db67c17a2eb6f1e6b237a">ACL_SRC_VEC</a> = 256,</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a267aa0d9caec7b4f4b87a702e03dfcbc">ACL_DST_VEC</a> = 512,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5007ca2bff93e4fc849e1f147501a6ea">ACL_INT_VEC</a> = 1024,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Aliasing Types</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Conv etc</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785">ACL_BIAS</a> = <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">ACL_SRC_2</a>,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Gemm</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a8201f58586be83622450924f1339d95d">ACL_VEC_ROW_SUM</a> = <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae4ed430701598bfaba04ee2dea5f0b0a">ACL_SRC_3</a>,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a93203bd138078ed3c19f335d84f9b3cd">ACL_VEC_COL_SUM</a> = <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aa5dda325fa2f2394df27cf813b3ffe47">ACL_SRC_4</a>,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828afbaa09ed653f4ffe6c94c2bfaa36ddc7">ACL_SHIFTS</a>      = <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a17fc511e65612b716c9c2f34e096caea">ACL_SRC_5</a>,</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a9da88e01e6f086c156eda117f84b89e0">ACL_MULTIPLIERS</a> = <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac2e09218cbf70ed9ba3923c4504d2924">ACL_SRC_6</a>,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a23ab0e5c6b5d13e084628686c4f282d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23ab0e5c6b5d13e084628686c4f282d5">&#9670;&nbsp;</a></span>WeightFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> layouts for the weights tensor. </p>
<ul>
<li>UNSPECIFIED is used to select kernels that do not run in variable weights mode.</li>
<li>ANY is used to query the kernel database to retrieve any of the kernels that runs in variable weights mode. Once a kernel is found, the specific format expected by the kernel can be retrieved by the user for reordering the weights tensor accordingly.</li>
</ul>
<p>The other values OHWIo{interleave_by}i{block_by} describe the memory layout of a 4D tensor with layout OHWI that has been transformed into a 4D tensor with dimensions O'HWI' where:</p>
<p>O' = first multiple of {interleave_by} s.t. O&lt;=O' I' = first multiple of {block_by} s.t. I&lt;=I'</p>
<p>The total size of the dst tensor is O' x H x W x I'</p>
<p>The access function of the tensor with layout OHWIo{interleave_by}i{block_by} and size O'HWI' is a 6-parameter access function, where the 6 parameters are computed as follows:</p>
<p>x5 = floor(o/{interleave_by}) RANGE [0, O'/{interleave_by} -1] SIZE: O'/{interleave_by}</p>
<p>x4 = h RANGE [0, H-1] SIZE: H x3 = w RANGE [0, W-1] SIZE: W x2 = floor(i/{block_by}) RANGE [0, I'/{block_by} -1] SIZE: I'/{block_by} x1 = o%{interleave_by} RANGE [0, {interleave_by} -1] SIZE: {interleave_by} x0 = i%{block_by} RANGE [0, {block_by} -1] SIZE: {block_by} TOTAL SIZE: O' * H * W * I'</p>
<p>4D 6D</p>
<hr  />
<p> value(o, h, w, i) = x5 * H * W * I' * {interleave_by}</p><ul>
<li>x4 * W * I' * {interleave_by}</li>
<li>x3 * I' * {interleave_by}</li>
<li>x2 * {interleave_by} * {block_by}</li>
<li>x1 * {block_by}</li>
<li>x0</li>
</ul>
<p>Notice that in <a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a> the 4D tensor of dimension O'HWI' created for the OHWIo{interleave_by}i{block_by} format is in reality seen as a 2D tensor, where the number of rows is O'/{interleave_by} and the number of columns is {interleave_by} * H * W * I'.</p>
<p>The postfix *_bf16 is for the memory layout needed for the fast-mode kernels, in which the weights are passed in <a class="el" href="classarm__compute_1_1bfloat16.xhtml" title="Brain floating point representation class.">bfloat16</a> format. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52"></a>UNSPECIFIED&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f"></a>ANY&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541"></a>OHWI&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6"></a>OHWIo2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd"></a>OHWIo4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8"></a>OHWIo8&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9"></a>OHWIo16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10"></a>OHWIo32&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a"></a>OHWIo64&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210"></a>OHWIo128&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde"></a>OHWIo4i2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27"></a>OHWIo4i2_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827"></a>OHWIo8i2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d"></a>OHWIo8i2_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b"></a>OHWIo16i2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee"></a>OHWIo16i2_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4"></a>OHWIo32i2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1"></a>OHWIo32i2_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927"></a>OHWIo64i2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741"></a>OHWIo64i2_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9"></a>OHWIo4i4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee"></a>OHWIo4i4_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8"></a>OHWIo8i4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e"></a>OHWIo8i4_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0"></a>OHWIo16i4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096"></a>OHWIo16i4_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164"></a>OHWIo32i4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0"></a>OHWIo32i4_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121"></a>OHWIo64i4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb"></a>OHWIo64i4_bf16&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0"></a>OHWIo2i8&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31"></a>OHWIo4i8&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626"></a>OHWIo8i8&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f"></a>OHWIo16i8&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7"></a>OHWIo32i8&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f"></a>OHWIo64i8&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_core_types_8h_source.xhtml#l00311">311</a> of file <a class="el" href="_core_types_8h_source.xhtml">CoreTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>    = 0x1,</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">ANY</a>            = 0x2,</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541">OHWI</a>           = 0x100100,</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6">OHWIo2</a>         = 0x100200,</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd">OHWIo4</a>         = 0x100400,</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8">OHWIo8</a>         = 0x100800,</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9">OHWIo16</a>        = 0x101000,</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10">OHWIo32</a>        = 0x102000,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a">OHWIo64</a>        = 0x104000,</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210">OHWIo128</a>       = 0x108000,</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde">OHWIo4i2</a>       = 0x200400,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27">OHWIo4i2_bf16</a>  = 0x200410,</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827">OHWIo8i2</a>       = 0x200800,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d">OHWIo8i2_bf16</a>  = 0x200810,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b">OHWIo16i2</a>      = 0x201000,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee">OHWIo16i2_bf16</a> = 0x201010,</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4">OHWIo32i2</a>      = 0x202000,</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1">OHWIo32i2_bf16</a> = 0x202010,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927">OHWIo64i2</a>      = 0x204000,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741">OHWIo64i2_bf16</a> = 0x204010,</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9">OHWIo4i4</a>       = 0x400400,</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee">OHWIo4i4_bf16</a>  = 0x400410,</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8">OHWIo8i4</a>       = 0x400800,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e">OHWIo8i4_bf16</a>  = 0x400810,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0">OHWIo16i4</a>      = 0x401000,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096">OHWIo16i4_bf16</a> = 0x401010,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164">OHWIo32i4</a>      = 0x402000,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0">OHWIo32i4_bf16</a> = 0x402010,</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121">OHWIo64i4</a>      = 0x404000,</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb">OHWIo64i4_bf16</a> = 0x404010,</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0">OHWIo2i8</a>       = 0x800200,</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31">OHWIo4i8</a>       = 0x800400,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626">OHWIo8i8</a>       = 0x800800,</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f">OHWIo16i8</a>      = 0x801000,</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7">OHWIo32i8</a>      = 0x802000,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f">OHWIo64i8</a>      = 0x804000</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a41c1523098580451b378f76b8c37a0f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41c1523098580451b378f76b8c37a0f0">&#9670;&nbsp;</a></span>adjust_down()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::adjust_down </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>required</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>available</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decrease <code>required</code> in steps of <code>step</code> until it's less than <code>available</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">required</td><td>Number of required bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">available</td><td>Number of available bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Step size used to decrease required bytes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Largest value smaller than <code>available</code> that is a multiple of <code>step</code> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_access_window_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_i_access_window_8h_source.xhtml">IAccessWindow.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> &lt;= 0);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespace_gemm_tuner.xhtml#ae81948490ddf54e80a22593640178350">required</a> - <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> * ((<a class="code" href="namespace_gemm_tuner.xhtml#ae81948490ddf54e80a22593640178350">required</a> - available + <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> - 1) / <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00652">GemmTuner::required</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">AccessWindowTranspose::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="add7f7487c235331a6518dd16ad1e3b38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add7f7487c235331a6518dd16ad1e3b38">&#9670;&nbsp;</a></span>adjust_odd_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::adjust_odd_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adjust tensor shape size if width or height are odd for a given multi-planar format. </p>
<p>No modification is done for other formats.</p>
<dl class="section note"><dt>Note</dt><dd>Adding here a few links discussing the issue of odd size and sharing the same solution: <a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/graphics/java/android/graphics/YuvImage.java">Android Source</a> <a href="https://groups.google.com/a/webmproject.org/forum/#!topic/webm-discuss/LaCKpqiDTXM">WebM</a> <a href="https://bugs.chromium.org/p/libyuv/issues/detail?id=198&amp;can=1&amp;q=odd%20width">libYUV</a> <a href="https://sourceforge.net/p/raw-yuvplayer/bugs/1/">YUVPlayer</a> *</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shape of 2D size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The adjusted tensor shape. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00338">338</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    TensorShape output{<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>};</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Force width to be even for formats which require subsampling of the U and V channels</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#aa2f22cc01532e0236e438324310fdb94">has_format_horizontal_subsampling</a>(<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>))</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        output.set(0, (output.x() + 1) &amp; ~1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">// Force height to be even for formats which require subsampling of the U and V channels</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a95358b677c5c17f5cc1e369e4a27e2c2">has_format_vertical_subsampling</a>(<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>))</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        output.set(1, (output.y() + 1) &amp; ~1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> output;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00304">has_format_horizontal_subsampling()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00318">has_format_vertical_subsampling()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, and <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>.</p>

</div>
</div>
<a id="ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2">&#9670;&nbsp;</a></span>adjust_up()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::adjust_up </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>required</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>available</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Increase <code>required</code> in steps of <code>step</code> until it's greater than <code>available</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">required</td><td>Number of required bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">available</td><td>Number of available bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Step size used to increase required bytes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Largest value smaller than <code>available</code> that is a multiple of <code>step</code> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_access_window_8h_source.xhtml#l00063">63</a> of file <a class="el" href="_i_access_window_8h_source.xhtml">IAccessWindow.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> &lt;= 0);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespace_gemm_tuner.xhtml#ae81948490ddf54e80a22593640178350">required</a> + <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> * ((available - <a class="code" href="namespace_gemm_tuner.xhtml#ae81948490ddf54e80a22593640178350">required</a> + <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> - 1) / <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00652">GemmTuner::required</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">AccessWindowTranspose::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a7be62dcb9603165af78bca6f2ca8ec15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7be62dcb9603165af78bca6f2ca8ec15">&#9670;&nbsp;</a></span>adjust_vec_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int arm_compute::adjust_vec_size </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>vec_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dim0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the adjusted vector size in case it is less than the input's first dimension, getting rounded down to its closest valid vector size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">vec_size</td><td>vector size to be adjusted </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>size of the first dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of element processed along the X axis per thread </dd></dl>

<p class="definition">Definition at line <a class="el" href="_adjust_vec_size_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_adjust_vec_size_8h_source.xhtml">AdjustVecSize.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(vec_size &gt; 16);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> ((vec_size &gt;= dim0) &amp;&amp; (dim0 == 3))</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> dim0;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">while</span> (vec_size &gt; dim0)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        vec_size &gt;&gt;= 1;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> vec_size;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00053">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00045">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00117">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00226">ClTemplateLogits1DMaxShiftExpSum::get_build_options()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00309">ClTemplateDirectConv2d::get_build_options()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00062">ClTemplateLogits1DMaxShiftExpSum::get_component_code()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00068">ClTemplateDirectConv2d::get_component_code()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00277">GpuCkwActivation::get_window()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00404">GpuCkwElementwiseBinary::get_window()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00238">GpuCkwCast::get_window()</a>, <a class="el" href="_gpu_ckw_resize_8cpp_source.xhtml#l00533">GpuCkwResize::get_window()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00384">GpuCkwPool2d::get_window()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00237">GpuCkwMatMul::get_window()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00201">ClTemplateCast::get_window()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00159">ClTemplateLogits1DNorm::get_window()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00151">ClTemplateReshape::get_window()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00371">ClTemplateDirectConv2d::get_window()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00268">ClTemplateResize::get_window()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00456">ClTemplatePool2d::get_window()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00171">ClTemplateActivation::get_window()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul::write_component_code()</a>.</p>

</div>
</div>
<a id="a45b165e0796ef5e262fc5f05f03719c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45b165e0796ef5e262fc5f05f03719c1">&#9670;&nbsp;</a></span>arm_matrix_multiply_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_matrix_multiply_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether the cl_arm_matrix_multiply extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00499">499</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;{</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_arm_matrix_multiply&quot;</span>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00092">ClMatMulLowpNativeMMULKernel::validate()</a>, and <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00086">ClMatMulNativeMMULKernel::validate()</a>.</p>

</div>
</div>
<a id="a0019d1de2500c73f16b673d8a883a767"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0019d1de2500c73f16b673d8a883a767">&#9670;&nbsp;</a></span>arm_non_uniform_workgroup_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_non_uniform_workgroup_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether the arm_non_uniform_work_group_size extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00232">232</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_arm_non_uniform_work_group_size&quot;</span>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

</div>
</div>
<a id="a37c28ce239ce7092298245ce59694917"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37c28ce239ce7092298245ce59694917">&#9670;&nbsp;</a></span>auto_init_if_empty() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::auto_init_if_empty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Auto initialize the tensor info (shape, number of channels and data type) if the current assignment is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>New number of channels. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>New data type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>(Optional) New quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor info has been initialized </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape().total_size() == 0)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_data_type(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_num_channels(num_channels);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_tensor_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_quantization_info(quantization_info);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_dequantize_kernel_8cpp_source.xhtml#l00362">CpuDequantizeKernel::configure()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00732">CpuTransposeKernel::configure()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00053">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cpu_permute_kernel_8cpp_source.xhtml#l00230">CpuPermuteKernel::configure()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00070">CpuFloorKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00431">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00127">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00045">CpuConcatenate::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00269">CpuActivationKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00082">CpuGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00065">NETileKernel::configure()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">NEDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00045">ClConcatenate::configure()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00149">NEChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00067">NEReverseKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00410">CpuDirectConv2dOutputStageKernel::configure()</a>, <a class="el" href="_cpu_max_unpooling_layer_kernel_8cpp_source.xhtml#l00093">CpuMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00122">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00076">NEReorgLayerKernel::configure()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00102">CPPTopKVKernel::configure()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">NESpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00108">CpuDirectConv2dKernel::configure()</a>, <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00185">CpuElementwiseUnaryKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00045">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00116">CpuPool3dKernel::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00084">NEQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00107">CPPPermuteKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00044">CpuGemmInterleave4x4Kernel::configure()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_n_e_flatten_layer_8cpp_source.xhtml#l00049">NEFlattenLayer::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00197">NEPadLayerKernel::configure()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00126">NERangeKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00146">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00286">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01082">NEFFTRadixStageKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00141">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_c_p_p_non_maximum_suppression_kernel_8cpp_source.xhtml#l00075">CPPNonMaximumSuppressionKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00267">CpuGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_kernel_8cpp_source.xhtml#l01829">NEReductionOperationKernel::configure()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00145">NEStackLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv3d_kernel_8cpp_source.xhtml#l00125">CpuDirectConv3dKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00236">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00136">NESelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00065">CpuCol2ImKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00128">CpuDepthwiseConv2dNativeKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00174">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00206">CpuDepthwiseConv2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00046">CpuPool2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00144">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00125">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00138">NEGatherKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00114">NEBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00183">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00184">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00121">NEReduceMean::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00217">NEBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00129">NESpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_flatten_layer_8cpp_source.xhtml#l00057">CLFlattenLayer::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00118">NEReductionOperation::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00044">CpuGemmTranspose1xWKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00186">NEPadLayer::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00904">CpuGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00097">CLArgMinMaxLayer::configure()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00121">CLReductionOperation::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00137">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00106">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00160">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00072">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00112">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00123">CLCropResize::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00195">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00212">CpuGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00086">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00135">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01787">CpuComplexMulKernel::configure()</a>, <a class="el" href="_gpu_output_8cpp_source.xhtml#l00088">GpuOutput::create_op()</a>, <a class="el" href="_gpu_sigmoid_8cpp_source.xhtml#l00113">GpuSigmoid::create_op()</a>, <a class="el" href="_gpu_tanh_8cpp_source.xhtml#l00113">GpuTanh::create_op()</a>, <a class="el" href="_gpu_clamp_8cpp_source.xhtml#l00120">GpuClamp::create_op()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00136">GpuSoftmax::create_op()</a>, <a class="el" href="_gpu_reshape_8cpp_source.xhtml#l00113">GpuReshape::create_op()</a>, <a class="el" href="_gpu_cast_8cpp_source.xhtml#l00119">GpuCast::create_op()</a>, <a class="el" href="_gpu_output_8cpp_source.xhtml#l00045">GpuOutput::is_supported_op()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00047">GpuSoftmax::is_supported_op()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00097">CpuMatMul::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00557">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00213">CpuGemm::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00326">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_gpu_output_8cpp_source.xhtml#l00060">GpuOutput::validate_op()</a>, <a class="el" href="_gpu_tanh_8cpp_source.xhtml#l00088">GpuTanh::validate_op()</a>, <a class="el" href="_gpu_sigmoid_8cpp_source.xhtml#l00088">GpuSigmoid::validate_op()</a>, <a class="el" href="_gpu_reshape_8cpp_source.xhtml#l00089">GpuReshape::validate_op()</a>, <a class="el" href="_gpu_cast_8cpp_source.xhtml#l00095">GpuCast::validate_op()</a>, <a class="el" href="_gpu_clamp_8cpp_source.xhtml#l00095">GpuClamp::validate_op()</a>, and <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00103">GpuSoftmax::validate_op()</a>.</p>

</div>
</div>
<a id="ad0f82917b865469daeed6feb6d183315"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0f82917b865469daeed6feb6d183315">&#9670;&nbsp;</a></span>auto_init_if_empty() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::auto_init_if_empty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info_sink</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info_source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Auto initialize the tensor info using another tensor info. </p>
<p>(COMPMID-6012) This method should remain in sync with the fields of <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> that have setters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">info_sink</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign </td></tr>
    <tr><td class="paramname">info_source</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor info has been initialized </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00072">72</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">if</span> (info_sink.tensor_shape().total_size() == 0)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        info_sink.set_data_type(info_source.data_type());</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        info_sink.set_num_channels(info_source.num_channels());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        info_sink.set_tensor_shape(info_source.tensor_shape());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        info_sink.set_quantization_info(info_source.quantization_info());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        info_sink.set_data_layout(info_source.data_layout());</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        info_sink.set_are_values_constant(info_source.are_values_constant());</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a755401027819f45173d06db7a922eb10">ITensorInfo::are_values_constant()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">ITensorInfo::num_channels()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a75157b4ea9a60a8c316d3469f1dc3a17">ITensorInfo::set_are_values_constant()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#abb9481fe056b9749f9b4c08db101cc15">ITensorInfo::set_data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo::set_data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf74be25e2392705f29352ffaa4b1f9d">ITensorInfo::set_num_channels()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a575d37eaf8a905c8ca3c0250757c2b81">ITensorInfo::set_quantization_info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">ITensorInfo::set_tensor_shape()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="_tensor_shape_8h_source.xhtml#l00175">TensorShape::total_size()</a>.</p>

</div>
</div>
<a id="af117513e1fddf0534bb90275f0a9db42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af117513e1fddf0534bb90275f0a9db42">&#9670;&nbsp;</a></span>block_by()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::block_by </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a>&#160;</td>
          <td class="paramname"><em>wf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01656">1656</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;{</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(wf) &gt;&gt; 20) &amp; 0xF;</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00213">CpuGemm::validate()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>.</p>

</div>
</div>
<a id="a64c17a5a42d2499a1626222ff9753b4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64c17a5a42d2499a1626222ff9753b4d">&#9670;&nbsp;</a></span>build_information()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::build_information </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the <a class="el" href="namespacearm__compute.xhtml" title="Copyright (c) 2017-2024 Arm Limited.">arm_compute</a> library build information. </p>
<p>Contains the version number and the build options used to build the library</p>
<dl class="section return"><dt>Returns</dt><dd>The <a class="el" href="namespacearm__compute.xhtml" title="Copyright (c) 2017-2024 Arm Limited.">arm_compute</a> library build information </dd></dl>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>.</p>

</div>
</div>
<a id="af471610ed0690e68f555994b135133ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af471610ed0690e68f555994b135133ba">&#9670;&nbsp;</a></span>calculate_max_enlarged_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> arm_compute::calculate_max_enlarged_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;&#160;</td>
          <td class="paramname"><em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">147</a> of file <a class="el" href="_window_helpers_8cpp_source.xhtml">WindowHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> Coordinates &amp;anchor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    Window window;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, Window::Dimension(</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                      <span class="comment">// move the anchor to the start from the border</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                      anchor[0] - border_size.left,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                      <span class="comment">// move the anchor to include the right end border</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                      <span class="comment">// Make sure the window width is a multiple of the step size</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                      anchor[0] - border_size.left +</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                          <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0] + border_size.left + border_size.right, steps[0]),</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                      steps[0]));</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">size_t</span> n = 1;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span> (anchor.num_dimensions() &gt; 1)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, Window::Dimension(</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                          <span class="comment">// Include the border above the image</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                          anchor[1] - border_size.top,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                          <span class="comment">// Include the border below the image</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                          anchor[1] - border_size.top +</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                              <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1] + border_size.top + border_size.bottom, steps[1]),</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                          steps[1]));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        ++n;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> (anchor.num_dimensions() &gt; 2)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(2, Window::Dimension(0, std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[n]), steps[2]));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        ++n;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">for</span> (; n &lt; anchor.num_dimensions(); ++n)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(n, Window::Dimension(anchor[n], std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[n])));</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">for</span> (; n &lt; Coordinates::num_max_dimensions; ++n)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(n, Window::Dimension(0, 1));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> window;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">ceil_to_multiple()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>, and <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>.</p>

</div>
</div>
<a id="a73c6c590476be3900b9343db16e7e1b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73c6c590476be3900b9343db16e7e1b2">&#9670;&nbsp;</a></span>calculate_max_window() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> arm_compute::calculate_max_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;&#160;</td>
          <td class="paramname"><em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>skip_border</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_window_helpers_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="_window_helpers_8cpp_source.xhtml">WindowHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span> (!skip_border)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        border_size = BorderSize(0);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    Window window;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    window.set(0, Window::Dimension(</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                      <span class="comment">// Skip the border left of the image</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                      border_size.left,</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                      <span class="comment">// Skip the border right of the image</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                      <span class="comment">// Make sure the window width is a multiple of the step size</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                      border_size.left +</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                          <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.left) -</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                                           <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.right)),</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                           steps[0]),</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                      steps[0]));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">size_t</span> n = 1;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() &gt; 1)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        window.set(1, Window::Dimension(</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                          <span class="comment">// Skip the border above the image</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                          border_size.top,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                          <span class="comment">// Skip the border below the image</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                          border_size.top + <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1]) -</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                                             <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.top) -</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                                             <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.bottom)),</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                             steps[1]),</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                          steps[1]));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        ++n;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() &gt; 2)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        window.set(2, Window::Dimension(0, std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[2]), steps[2]));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        ++n;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">for</span> (; n &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions(); ++n)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        window.set(n, Window::Dimension(0, std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[n])));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">for</span> (; n &lt; Coordinates::num_max_dimensions; ++n)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        window.set(n, Window::Dimension(0, 1));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> window;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">ceil_to_multiple()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

</div>
</div>
<a id="aa84c2eae36ca4b68fa36c226df6f94e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa84c2eae36ca4b68fa36c226df6f94e7">&#9670;&nbsp;</a></span>calculate_max_window() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> arm_compute::calculate_max_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;&#160;</td>
          <td class="paramname"><em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>skip_border</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_window_helpers_8cpp_source.xhtml">WindowHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (!skip_border)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        border_size = BorderSize(0);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> Coordinates &amp;anchor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    Window window;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, Window::Dimension(</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                      <span class="comment">// Skip the border left of the image</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                      anchor[0] + border_size.left,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                      <span class="comment">// Skip the border right of the image</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                      <span class="comment">// Make sure the window width is a multiple of the step size</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                      anchor[0] + border_size.left +</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                          <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.left) -</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                           <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.right)),</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                           steps[0]),</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                      steps[0]));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">size_t</span> n = 1;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span> (anchor.num_dimensions() &gt; 1)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                   Window::Dimension(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                       <span class="comment">// Skip the border above the image</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                       anchor[1] + border_size.top,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                       <span class="comment">// Skip the border below the image</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                       anchor[1] + border_size.top +</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                           <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1]) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.top) -</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                                            <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.bottom)),</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                            steps[1]),</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                       steps[1]));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        ++n;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> (anchor.num_dimensions() &gt; 2)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(2, Window::Dimension(anchor[2], std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[2]), steps[2]));</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        ++n;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">for</span> (; n &lt; anchor.num_dimensions(); ++n)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(n, Window::Dimension(anchor[n], std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[n])));</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">for</span> (; n &lt; Coordinates::num_max_dimensions; ++n)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(n, Window::Dimension(0, 1));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> window;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">ceil_to_multiple()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>, and <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_dequantize_kernel_8cpp_source.xhtml#l00362">CpuDequantizeKernel::configure()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00173">CpuReshapeKernel::configure()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00732">CpuTransposeKernel::configure()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00041">CpuFillKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00071">ClReshapeKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00053">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cpu_concatenate_batch_kernel_8cpp_source.xhtml#l00159">CpuConcatenateBatchKernel::configure()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00070">CpuFloorKernel::configure()</a>, <a class="el" href="_cpu_permute_kernel_8cpp_source.xhtml#l00230">CpuPermuteKernel::configure()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00059">CpuConcatenateWidthKernel::configure()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00270">NELogicalKernel::configure()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00066">CpuConcatenateHeightKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00109">CpuQuantizeKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00127">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cpu_concatenate_depth_kernel_8cpp_source.xhtml#l00161">CpuConcatenateDepthKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00301">CpuPool2dKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00082">CpuGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_i_c_l_simple_kernel_8cpp_source.xhtml#l00039">ICLSimpleKernel::configure()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00065">NETileKernel::configure()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00149">NEChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00410">CpuDirectConv2dOutputStageKernel::configure()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">NEDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_n_e_prior_box_layer_kernel_8cpp_source.xhtml#l00214">NEPriorBoxLayerKernel::configure()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00067">NEReverseKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00715">CpuGemmLowpMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cpu_max_unpooling_layer_kernel_8cpp_source.xhtml#l00093">CpuMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00122">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00076">NEReorgLayerKernel::configure()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">NESpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00044">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00058">NEBitwiseNotKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00045">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00063">NEBitwiseAndKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00107">CPPPermuteKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00099">NEBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00060">NEBitwiseOrKernel::configure()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00060">NEBitwiseXorKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00116">CpuPool3dKernel::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00109">NESpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00044">CpuGemmInterleave4x4Kernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00078">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00359">CpuGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_addition_kernel_8cpp_source.xhtml#l00054">CpuGemmMatrixAdditionKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00197">NEPadLayerKernel::configure()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00126">NERangeKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00372">CPPBoxWithNonMaximaSuppressionLimitKernel::configure()</a>, <a class="el" href="_c_p_p_non_maximum_suppression_kernel_8cpp_source.xhtml#l00075">CPPNonMaximumSuppressionKernel::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00146">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cpu_add_mul_add_kernel_8cpp_source.xhtml#l00121">CpuAddMulAddKernel::configure()</a>, <a class="el" href="_cpu_direct_conv3d_kernel_8cpp_source.xhtml#l00125">CpuDirectConv3dKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00267">CpuGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_kernel_8cpp_source.xhtml#l01829">NEReductionOperationKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00117">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00128">CpuDepthwiseConv2dNativeKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00236">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00065">CpuCol2ImKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00136">NESelectKernel::configure()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00163">CpuCastKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00174">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00206">CpuDepthwiseConv2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00046">CpuPool2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00125">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00138">NEGatherKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00217">NEBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00183">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00184">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00044">CpuGemmTranspose1xWKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00904">CpuGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00123">CLCropResize::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01787">CpuComplexMulKernel::configure()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00252">NECropKernel::configure_output_shape()</a>, <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00277">GpuCkwActivation::get_window()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00238">GpuCkwCast::get_window()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00404">GpuCkwElementwiseBinary::get_window()</a>, <a class="el" href="_gpu_ckw_resize_8cpp_source.xhtml#l00533">GpuCkwResize::get_window()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00384">GpuCkwPool2d::get_window()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00351">GpuCkwDepthwiseConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00237">GpuCkwMatMul::get_window()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00201">ClTemplateCast::get_window()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00159">ClTemplateLogits1DNorm::get_window()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00257">ClTemplateLogits1DMaxShiftExpSum::get_window()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00151">ClTemplateReshape::get_window()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00354">ClTemplateDepthwiseConv2d::get_window()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00371">ClTemplateDirectConv2d::get_window()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00268">ClTemplateResize::get_window()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00456">ClTemplatePool2d::get_window()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00171">ClTemplateActivation::get_window()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00216">CpuReshapeKernel::prepare()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00183">NEStackLayerKernel::prepare()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00092">arm_compute::cpu::kernels::validate_and_configure_window()</a>, and <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>.</p>

</div>
</div>
<a id="af03817e5ecefc785137e054e6b7e8f0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af03817e5ecefc785137e054e6b7e8f0e">&#9670;&nbsp;</a></span>calculate_max_window_horizontal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> arm_compute::calculate_max_window_horizontal </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;&#160;</td>
          <td class="paramname"><em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>skip_border</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_window_helpers_8cpp_source.xhtml">WindowHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">if</span> (skip_border)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        border_size.top    = 0;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        border_size.bottom = 0;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        border_size.left  = 0;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        border_size.right = 0;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> Coordinates &amp;anchor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    Window window;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, Window::Dimension(</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                      <span class="comment">// Skip the border left of the image</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                      anchor[0] + border_size.left,</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                      <span class="comment">// Skip the border right of the image</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                      <span class="comment">// Make sure the window width is a multiple of the step size</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                      anchor[0] + border_size.left +</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                          <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.left) -</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                           <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.right)),</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                           steps[0]),</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                      steps[0]));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">size_t</span> n = 1;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> (anchor.num_dimensions() &gt; 1)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, Window::Dimension(</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                          <span class="comment">// Skip the border above the image</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                          anchor[1] - border_size.top,</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                          <span class="comment">// Skip the border below the image</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                          anchor[1] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1] + border_size.bottom, 1));</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        ++n;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">for</span> (; n &lt; anchor.num_dimensions(); ++n)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(n, Window::Dimension(anchor[n], std::max&lt;size_t&gt;(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[n])));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">for</span> (; n &lt; Coordinates::num_max_dimensions; ++n)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        window.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(n, Window::Dimension(0, 1));</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> window;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">ceil_to_multiple()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>, and <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00212">CpuGemmLowpMatrixBReductionKernel::configure()</a>.</p>

</div>
</div>
<a id="aa6d4f0b9fedd979c5b768f9b34fda9f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6d4f0b9fedd979c5b768f9b34fda9f6">&#9670;&nbsp;</a></span>calculate_same_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> calculate_same_pad </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>weights_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em> = <code><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1u,&#160;1u)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;&#160;</td>
          <td class="paramname"><em>rounding_type</em> = <code><a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate padding requirements in case of SAME padding. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_shape</td><td>Weights shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Convolution information (containing strides) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>(Optional) Data layout of the input and weights tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation</td><td>(Optional) Dilation factor used in the convolution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_type</td><td>(Optional) Dimension rounding type when down-scaling.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> for SAME padding </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((strides.first &lt; 1 || strides.second &lt; 1),</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                             <span class="stringliteral">&quot;Stride values should be greater than or equal to 1.&quot;</span>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>     = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::WIDTH);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>    = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::HEIGHT);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_width      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>];</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_height     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>];</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_width  = weights_shape[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>];</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_height = weights_shape[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Calculate output dimensions</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>         is_ceil    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(rounding_type == DimensionRoundingType::CEIL);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_width  = ((in_width - is_ceil) + strides.first - 1) / strides.first + is_ceil;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_height = ((in_height - is_ceil) + strides.second - 1) / strides.second + is_ceil;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">// Calculate effective weights sizes</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> real_weight_width  = (kernel_width - 1) * dilation.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() + 1;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> real_weight_height = (kernel_height - 1) * dilation.y() + 1;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Calculate total pad</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_width = std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>((out_width - 1) * strides.first + real_weight_width - in_width));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_height =</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>((out_height - 1) * strides.second + real_weight_height - in_height));</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Calculate individual paddings</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left   = pad_width / 2;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top    = pad_height / 2;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_right  = pad_width - pad_left;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_bottom = pad_height - pad_top;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    PadStrideInfo same_info(strides.first, strides.second, pad_left, pad_right, pad_top, pad_bottom, rounding_type);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Check for correctness of predicted output shape against the one calculated using the generated info</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_dims = <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(in_width, in_height, kernel_width, kernel_height, same_info, dilation);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(out_dims.first != out_width || out_dims.second != out_height);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(out_dims);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> same_info;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::height_idx</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00466">arm_compute::test::validation::input_shape</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00288">scaled_dimensions()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">arm_compute::cpu::width_idx</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="graph__validate__utils_8h_source.xhtml#l00194">arm_compute::utils::calculate_convolution_padding()</a>.</p>

</div>
</div>
<a id="a3120cfadcaae4fe13c36f862ece7a0fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3120cfadcaae4fe13c36f862ece7a0fc">&#9670;&nbsp;</a></span>calculate_squashed_or_max_window() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>, size_t&gt; arm_compute::calculate_squashed_or_max_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_window_helpers_8cpp_source.xhtml#l00307">307</a> of file <a class="el" href="_window_helpers_8cpp_source.xhtml">WindowHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;{</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>          = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.tensor_shape();</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.strides_in_bytes();</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>  num_dimensions = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.num_dimensions();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    Window win;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">size_t</span> split_dimension = Window::DimY;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordtype">size_t</span> dim             = 0;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordtype">size_t</span> squashed_bytes  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.element_size();</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// Try to squash the low dimensions together.</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">for</span> (; dim &lt; num_dimensions; ++dim)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">if</span> (strides[dim] != squashed_bytes)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        squashed_bytes *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[dim];</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">if</span> (dim == num_dimensions)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> squashed_elements = squashed_bytes / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.element_size();</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        split_dimension              = Window::DimX;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="comment">// The input tensor can be interpreted as 1D array.</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        win.set(0, Window::Dimension(0, squashed_elements, 1));</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">for</span> (dim = 1; dim &lt; Coordinates::num_max_dimensions; ++dim)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            win.set(dim, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="comment">// Generate the max window.</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">for</span> (dim = 0; dim &lt; Coordinates::num_max_dimensions; ++dim)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            win.set(dim, Window::Dimension(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[dim], 1));</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">return</span> std::make_pair(win, split_dimension);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a8efcd2283ad0db0f90c88e146a27f01d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8efcd2283ad0db0f90c88e146a27f01d">&#9670;&nbsp;</a></span>calculate_squashed_or_max_window() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>, size_t&gt; arm_compute::calculate_squashed_or_max_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_window_helpers_8cpp_source.xhtml#l00256">256</a> of file <a class="el" href="_window_helpers_8cpp_source.xhtml">WindowHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;shape0         = src0.tensor_shape();</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;shape1         = src1.tensor_shape();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides0       = src0.strides_in_bytes();</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides1       = src1.strides_in_bytes();</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>  num_dimensions = std::max(src0.num_dimensions(), src1.num_dimensions());</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    Window win;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordtype">size_t</span> split_dimension = Window::DimY;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordtype">size_t</span> dim             = 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordtype">size_t</span> squashed_bytes = src0.element_size();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// Try to squash the low dimensions together.</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">for</span> (; dim &lt; num_dimensions; ++dim)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">if</span> (shape0[dim] != shape1[dim] || strides0[dim] != squashed_bytes || strides1[dim] != squashed_bytes)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        squashed_bytes *= shape0[dim];</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">if</span> (dim == num_dimensions)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keyword">auto</span> squashed_elements = squashed_bytes / src0.element_size();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        split_dimension = Window::DimX;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment">// The input tensors can be interpreted as 1D array.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        win.set(0, Window::Dimension(0, squashed_elements, 1));</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">for</span> (dim = 1; dim &lt; Coordinates::num_max_dimensions; ++dim)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            win.set(dim, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="comment">// Generates the max window.</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">for</span> (dim = 0; dim &lt; Coordinates::num_max_dimensions; ++dim)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            win.set(dim, Window::Dimension(0, std::max(shape0[dim], shape1[dim]), 1));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">return</span> std::make_pair(win, split_dimension);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00269">CpuActivationKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00118">CpuSubKernel::configure()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00145">CpuAddKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel::configure()</a>, and <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00216">CpuReshapeKernel::prepare()</a>.</p>

</div>
</div>
<a id="a9d714e1b7d9d7818309138b7d830ebcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d714e1b7d9d7818309138b7d830ebcb">&#9670;&nbsp;</a></span>calculate_subsampled_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::calculate_subsampled_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em> = <code><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">Channel::UNKNOWN</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate subsampled shape for a given format and channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the tensor to calculate the extracted channel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Channel to create tensor shape to be extracted.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The subsampled tensor shape. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00400">400</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    TensorShape output{<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>};</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">// Subsample shape only for U or V channel</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a> == channel || Channel::V == channel || <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Channel::UNKNOWN</a> == channel)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="comment">// Subsample width for the tensor shape when channel is U or V</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#aa2f22cc01532e0236e438324310fdb94">has_format_horizontal_subsampling</a>(<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>))</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            output.set(0, output.x() / 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="comment">// Subsample height for the tensor shape when channel is U or V</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a95358b677c5c17f5cc1e369e4a27e2c2">has_format_vertical_subsampling</a>(<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>))</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        {</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            output.set(1, output.y() / 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        }</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">return</span> output;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00304">has_format_horizontal_subsampling()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00318">has_format_vertical_subsampling()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, and <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00436">error_on_tensors_not_subsampled()</a>.</p>

</div>
</div>
<a id="a45509a321422cd1542958b5c33021bda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45509a321422cd1542958b5c33021bda">&#9670;&nbsp;</a></span>calculate_valid_region_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> calculate_valid_region_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>src_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>dst_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>interpolate_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a>&#160;</td>
          <td class="paramname"><em>sampling_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to calculate the Valid Region for Scale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src_info</td><td>Input tensor info used to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dst_shape</td><td>Shape of the output. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">interpolate_policy</td><td>Interpolation policy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sampling_policy</td><td>Sampling policy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>True if the border is undefined.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The corresponding valid region </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml">Helpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a>();</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::WIDTH);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::HEIGHT);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a>        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>]) / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>];</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a>        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>]) / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>];</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> sampling_point = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a85b962558881e129a7473521ba5b3526">sampling_policy</a> == SamplingPolicy::CENTER) ? 0.5f : 0.0f;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Get input&#39;s valid region start and end points</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> valid_start_in_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>];</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> valid_start_in_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>];</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> valid_end_in_x   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>];</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> valid_end_in_y   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>];</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Initialize output&#39;s valid region start and end points</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">auto</span> valid_start_out_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(valid_start_in_x * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span> valid_start_out_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(valid_start_in_y * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> valid_end_out_x   = std::min&lt;int&gt;(std::ceil(valid_end_in_x * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>]);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">auto</span> valid_end_out_y   = std::min&lt;int&gt;(std::ceil(valid_end_in_y * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>]);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Handle valid points in case of the bi-linear interpolation</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (border_undefined)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">switch</span> (interpolate_policy)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">case</span> InterpolationPolicy::NEAREST_NEIGHBOR:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="comment">// (start_out + sampling_point) &gt;= (start_in * scale)</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="comment">// start_out = ceil((start_in * scale) - sampling_point)</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                valid_start_out_x = std::ceil(valid_start_in_x * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_point);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                valid_start_out_y = std::ceil(valid_start_in_y * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_point);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="comment">// (end_out - 1 + sampling_point) &lt; (end_in * scale)</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="comment">// end_out   = ceil((end_in * scale) - sampling_point); // &lt;-- ceil(x - 1) strictly less</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                valid_end_out_x = std::ceil(valid_end_in_x * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_point);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                valid_end_out_y = std::ceil(valid_end_in_y * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_point);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">case</span> InterpolationPolicy::BILINEAR:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="comment">// (start_out + sampling_point) &gt;= ((start_in + sampling_point) * scale)</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="comment">// start_out = ceil(((start_in + sampling_point) * scale) - sampling_point)</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                valid_start_out_x = std::ceil((valid_start_in_x + sampling_point) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_point);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                valid_start_out_y = std::ceil((valid_start_in_y + sampling_point) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_point);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="comment">// (end_out - 1 + sampling_point) &lt;= ((end_in - 1 + sampling_point) * scale)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="comment">// end_out   = floor(((end_in - 1 + sampling_point) * scale) - sampling_point + 1)</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                valid_end_out_x = std::floor((valid_end_in_x - 1.f + sampling_point) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_point + 1.f);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                valid_end_out_y = std::floor((valid_end_in_y - 1.f + sampling_point) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_point + 1.f);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">case</span> InterpolationPolicy::AREA:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid InterpolationPolicy&quot;</span>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Setup output valid region</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    ValidRegion <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>{Coordinates(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>()};</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>, std::max(0, valid_start_out_x));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>, std::max(0, valid_start_out_y));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>, std::min&lt;size_t&gt;(valid_end_out_x - valid_start_out_x, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>]));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>, std::min&lt;size_t&gt;(valid_end_out_y - valid_start_out_y, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>]));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">AREA</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">BILINEAR</a>, <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">CENTER</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00303">TensorInfo::data_layout()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">arm_compute::test::validation::dst_shape</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">arm_compute::test::validation::idx_width</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">NEAREST_NEIGHBOR</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00250">arm_compute::test::validation::sampling_policy</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">arm_compute::test::validation::scale_x</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">arm_compute::test::validation::scale_y</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">arm_compute::test::validation::src_info</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00245">TensorInfo::tensor_shape()</a>, <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00291">TensorInfo::valid_region()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00396">arm_compute::test::validation::FIXTURE_DATA_TEST_CASE()</a>.</p>

</div>
</div>
<a id="ab237a0a375cf382d52b61653248d3d4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab237a0a375cf382d52b61653248d3d4a">&#9670;&nbsp;</a></span>ceil_to_multiple()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto arm_compute::ceil_to_multiple </td>
          <td>(</td>
          <td class="paramtype">S&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>divisor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype(((value + divisor - 1) / divisor) * divisor)
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computes the smallest number larger or equal to value that is a multiple of divisor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Lower bound value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">divisor</td><td>Value to compute multiple of.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the result. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">50</a> of file <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml">Math.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(value &lt; 0 || divisor &lt;= 0);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">DIV_CEIL</a>(value, divisor) * divisor;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00037">DIV_CEIL()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">calculate_max_window_horizontal()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00371">ClTemplateDirectConv2d::get_window()</a>, <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00151">arm_compute::opencl::kernels::gemm::is_mmul_kernel_preferred()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00248">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_window_8inl_source.xhtml#l00169">Window::scale()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="afab149f8d8b0f6405303ee8056fa77d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afab149f8d8b0f6405303ee8056fa77d3">&#9670;&nbsp;</a></span>channel_idx_from_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::channel_idx_from_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the channel index of a given channel given an input format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Input format </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Input channel</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The channel index of the specific channel of the specific format </dd></dl>

<p class="definition">Definition at line <a class="el" href="_format_utils_8h_source.xhtml#l00143">143</a> of file <a class="el" href="_format_utils_8h_source.xhtml">FormatUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordflow">case</span> Channel::R:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordflow">case</span> Channel::G:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">case</span> Channel::B:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keywordflow">case</span> Channel::R:</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">case</span> Channel::G:</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordflow">case</span> Channel::B:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">case</span> Channel::A:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keywordflow">return</span> 3;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keywordflow">return</span> 3;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported format&quot;</span>);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

</div>
</div>
<a id="afea13b8f36cd9e409d8ed686f1200ec3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afea13b8f36cd9e409d8ed686f1200ec3">&#9670;&nbsp;</a></span>check_value_range()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::check_value_range </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the value can be represented by the given data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>value to be checked </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>data type that is checked </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>(Optional) quantization info if the data type is QASYMM8</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the data type can hold the value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00421">421</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_u8 = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">return</span> ((val_u8 == val) &amp;&amp; val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint8_t&gt;::lowest</a>() &amp;&amp;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    val &lt;= std::numeric_limits&lt;uint8_t&gt;::max());</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keywordtype">double</span> min = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>));</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordtype">double</span> max = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(std::numeric_limits&lt;uint8_t&gt;::max(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>));</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">return</span> ((<span class="keywordtype">double</span>)val &gt;= min &amp;&amp; (double)val &lt;= max);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_s8 = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">return</span> ((val_s8 == val) &amp;&amp; val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int8_t&gt;::lowest</a>() &amp;&amp;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                    val &lt;= std::numeric_limits&lt;int8_t&gt;::max());</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_u16 = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordflow">return</span> ((val_u16 == val) &amp;&amp; val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint16_t&gt;::lowest</a>() &amp;&amp;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    val &lt;= std::numeric_limits&lt;uint16_t&gt;::max());</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_s16 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="keywordflow">return</span> ((val_s16 == val) &amp;&amp; val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int16_t&gt;::lowest</a>() &amp;&amp;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    val &lt;= std::numeric_limits&lt;int16_t&gt;::max());</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        }</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_d64 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_u32 = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">return</span> ((val_u32 == val_d64) &amp;&amp; val_d64 &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint32_t&gt;::lowest</a>() &amp;&amp;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    val_d64 &lt;= std::numeric_limits&lt;uint32_t&gt;::max());</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_d64 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> val_s32 = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keywordflow">return</span> ((val_s32 == val_d64) &amp;&amp; val_d64 &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>() &amp;&amp;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    val_d64 &lt;= std::numeric_limits&lt;int32_t&gt;::max());</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordflow">return</span> (val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">bfloat16::lowest</a>() &amp;&amp; val &lt;= bfloat16::max());</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordflow">return</span> (val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;half&gt;::lowest</a>() &amp;&amp; val &lt;= std::numeric_limits&lt;half&gt;::max());</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">return</span> (val &gt;= <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;float&gt;::lowest</a>() &amp;&amp; val &lt;= std::numeric_limits&lt;float&gt;::max());</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00353">dequantize_qasymm8()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="_bfloat16_8h_source.xhtml#l00117">bfloat16::lowest()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00278">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="_bfloat16_8h_source.xhtml#l00127">bfloat16::max()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

</div>
</div>
<a id="a7f5aff064f09dd7f355aaaf7641bf7d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f5aff064f09dd7f355aaaf7641bf7d3">&#9670;&nbsp;</a></span>cl_winograd_convolution_layer_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cl_winograd_convolution_layer_supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>output_tile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function checks if the Winograd configuration (defined through the output tile, kernel size and the data layout) is supported on OpenCL. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">output_tile</td><td>Output tile for the Winograd filtering algorithm </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_size</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> size for the Winograd filtering algorithm </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>Data layout of the input tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the configuration is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00292">292</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">using</span> WinogradConfiguration = std::pair&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;&gt;;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::vector&lt;WinogradConfiguration&gt; winograd_configs_nchw = {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(1, 2), std::pair&lt;int, int&gt;(1, 3)),</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(1, 4), std::pair&lt;int, int&gt;(1, 3)),</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(2, 1), std::pair&lt;int, int&gt;(3, 1)),</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 1), std::pair&lt;int, int&gt;(3, 1)),</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(2, 2), std::pair&lt;int, int&gt;(3, 3)),</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 4), std::pair&lt;int, int&gt;(3, 3)),</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 4), std::pair&lt;int, int&gt;(5, 5)),</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 1), std::pair&lt;int, int&gt;(5, 1)),</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(1, 4), std::pair&lt;int, int&gt;(1, 5))};</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::vector&lt;WinogradConfiguration&gt; winograd_configs_nhwc = {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(2, 2), std::pair&lt;int, int&gt;(3, 3)),</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(1, 4), std::pair&lt;int, int&gt;(1, 3)),</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 1), std::pair&lt;int, int&gt;(3, 1)),</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 4), std::pair&lt;int, int&gt;(3, 3)),</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 4), std::pair&lt;int, int&gt;(5, 5)),</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 1), std::pair&lt;int, int&gt;(5, 1)),</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(1, 4), std::pair&lt;int, int&gt;(1, 5)),</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(1, 2), std::pair&lt;int, int&gt;(1, 7)),</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(2, 1), std::pair&lt;int, int&gt;(7, 1)),</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(2, 2), std::pair&lt;int, int&gt;(7, 7)),</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    };</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">auto</span> p = std::make_pair(std::pair&lt;int, int&gt;(output_tile.width, output_tile.height),</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                            std::pair&lt;int, int&gt;(kernel_size.width, kernel_size.height));</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="comment">// Return true if supported</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">return</span> (std::find(winograd_configs_nchw.begin(), winograd_configs_nchw.end(), p) !=</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                winograd_configs_nchw.end());</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">return</span> (std::find(winograd_configs_nhwc.begin(), winograd_configs_nhwc.end(), p) !=</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                winograd_configs_nhwc.end());</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>.</p>

</div>
</div>
<a id="af2be1325decaa34a8a1199af177148c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2be1325decaa34a8a1199af177148c6">&#9670;&nbsp;</a></span>colorconvert_iyuv_to_nv12()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_iyuv_to_nv12 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert IYUV to NV12. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input IYUV data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output NV12 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">717</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;{</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    win.validate();</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>IMultiImage *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160; </div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160; </div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    Iterator in_y(input_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    Iterator in_u(input_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    Iterator in_v(input_ptr-&gt;plane(2), win_uv);</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    Iterator out_uv(output_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        win,</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        {</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   ta_y_top    = vld2q_u8(in_y.ptr());</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   ta_y_bottom = vld2q_u8(in_y.ptr() + input_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            uint8x16x2_t ta_uv;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            ta_uv.val[0] = vld1q_u8(in_u.ptr());</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            ta_uv.val[1] = vld1q_u8(in_v.ptr());</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <span class="comment">//ta_y.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="comment">//ta_y.val[1] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="comment">//ta_uv.val[0] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="comment">//ta_uv.val[1] = V0 V2 V4 V6 ...</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160; </div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            vst2q_u8(out_y.ptr(), ta_y_top);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            vst2q_u8(out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), ta_y_bottom);</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            vst2q_u8(out_uv.ptr(), ta_uv);</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        },</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        in_y, in_u, in_v, out_y, out_uv);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a6e42fac1baa264b033ac430b63ebd145"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e42fac1baa264b033ac430b63ebd145">&#9670;&nbsp;</a></span>colorconvert_iyuv_to_rgb()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_iyuv_to_rgb </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert IYUV to RGB. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input IYUV data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output RGB buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">562</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    win.validate();</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>IMultiImage *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160; </div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    constexpr <span class="keyword">auto</span> element_size = alpha ? 32 : 24;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>     out_stride   = output_ptr-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160; </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    Iterator in_y(input_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    Iterator in_u(input_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    Iterator in_v(input_ptr-&gt;plane(2), win_uv);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    Iterator out(output_ptr, win);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; </div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        win,</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *y_top_ptr    = in_y.ptr();</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *y_bottom_ptr = in_y.ptr() + input_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y();</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *u_ptr        = in_u.ptr();</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *v_ptr        = in_v.ptr();</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="comment">// Work-around issue in gcc 9(&gt;=) where vld2q might cause issues with register allocation</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;#<span class="keywordflow">if</span> defined(__arch64__)</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta0_y_top    = vld1q_u8(y_top_ptr);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta1_y_top    = vld1q_u8(y_top_ptr + 16);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta0_y_bottom = vld1q_u8(y_bottom_ptr);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta1_y_bottom = vld1q_u8(y_bottom_ptr + 16);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_u         = vld1q_u8(u_ptr);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_v         = vld1q_u8(v_ptr);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="comment">// Convert the uint8x16x4_t to float32x4x4_t</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            float32x4x4_t yvec_top  = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(vuzp1q_u8(ta0_y_top, ta1_y_top));</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            float32x4x4_t yyvec_top = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(vuzp2q_u8(ta0_y_top, ta1_y_top));</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            float32x4x4_t yvec_bottom =</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(vuzp1q_u8(ta0_y_bottom, ta1_y_bottom));</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            float32x4x4_t yyvec_bottom =</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(vuzp2q_u8(ta0_y_bottom, ta1_y_bottom));</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            float32x4x4_t uvec = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_u);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            float32x4x4_t vvec = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_v);</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* defined(__arch64__) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_top    = vld2q_u8(y_top_ptr);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_bottom = vld2q_u8(y_bottom_ptr);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_u        = vld1q_u8(u_ptr);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_v        = vld1q_u8(v_ptr);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <span class="comment">//ta_y.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            <span class="comment">//ta_y.val[1] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            <span class="comment">//ta_u.val[0] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            <span class="comment">//ta_v.val[0] = V0 V2 V4 V6 ...</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160; </div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            <span class="comment">// Convert the uint8x16x4_t to float32x4x4_t</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            float32x4x4_t yvec_top     = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_top.val[0]);</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            float32x4x4_t yyvec_top    = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_top.val[1]);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            float32x4x4_t yvec_bottom  = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_bottom.val[0]);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            float32x4x4_t yyvec_bottom = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_bottom.val[1]);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            float32x4x4_t uvec         = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_u);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            float32x4x4_t vvec         = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_v);</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__arch64__) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160; </div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[0], uvec.val[0], yyvec_top.val[0], vvec.val[0],</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                    out.ptr() + 0 * element_size, alpha);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[1], uvec.val[1], yyvec_top.val[1], vvec.val[1],</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                                    out.ptr() + 1 * element_size, alpha);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[2], uvec.val[2], yyvec_top.val[2], vvec.val[2],</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                    out.ptr() + 2 * element_size, alpha);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[3], uvec.val[3], yyvec_top.val[3], vvec.val[3],</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                    out.ptr() + 3 * element_size, alpha);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[0], uvec.val[0], yyvec_bottom.val[0], vvec.val[0],</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                    out.ptr() + out_stride + 0 * element_size, alpha);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[1], uvec.val[1], yyvec_bottom.val[1], vvec.val[1],</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                    out.ptr() + out_stride + 1 * element_size, alpha);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[2], uvec.val[2], yyvec_bottom.val[2], vvec.val[2],</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                                    out.ptr() + out_stride + 2 * element_size, alpha);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[3], uvec.val[3], yyvec_bottom.val[3], vvec.val[3],</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                    out.ptr() + out_stride + 3 * element_size, alpha);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        },</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        in_y, in_u, in_v, out);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00448">convert_uint8x16_to_float32x4x4()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00091">Dimensions&lt; T &gt;::y()</a>, <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00159">arm_compute::test::colorconvert_helper::detail::yuyv_to_rgb_calculation()</a>.</p>

</div>
</div>
<a id="a08e9d88293a5cef787bb324c2dc0a6bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08e9d88293a5cef787bb324c2dc0a6bf">&#9670;&nbsp;</a></span>colorconvert_iyuv_to_yuv4()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_iyuv_to_yuv4 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert IYUV to YUV4. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input IYUV data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output YUV4 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">940</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;{</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    win.validate();</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160; </div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>IMultiImage *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160; </div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160; </div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    Iterator in_y(input_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    Iterator in_u(input_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    Iterator in_v(input_ptr-&gt;plane(2), win_uv);</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    Iterator out_u(output_ptr-&gt;plane(1), win);</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    Iterator out_v(output_ptr-&gt;plane(2), win);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160; </div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        win,</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        {</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_top    = vld2q_u8(in_y.ptr());</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_bottom = vld2q_u8(in_y.ptr() + input_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_u        = vld1q_u8(in_u.ptr());</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_v        = vld1q_u8(in_v.ptr());</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            <span class="comment">//ta_y.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="comment">//ta_y.val[1] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            <span class="comment">//ta_u = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;            <span class="comment">//ta_v = V0 V2 V4 V6 ...</span></div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160; </div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;            vst2q_u8(out_y.ptr(), ta_y_top);</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;            vst2q_u8(out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), ta_y_bottom);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160; </div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            uint8x16x2_t uvec;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            uvec.val[0] = ta_u;</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            uvec.val[1] = ta_u;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            vst2q_u8(out_u.ptr(), uvec);</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            vst2q_u8(out_u.ptr() + output_ptr-&gt;plane(1)-&gt;info()-&gt;strides_in_bytes().y(), uvec);</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160; </div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;            uint8x16x2_t vvec;</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            vvec.val[0] = ta_v;</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            vvec.val[1] = ta_v;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            vst2q_u8(out_v.ptr(), vvec);</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;            vst2q_u8(out_v.ptr() + output_ptr-&gt;plane(2)-&gt;info()-&gt;strides_in_bytes().y(), vvec);</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        },</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        in_y, in_u, in_v, out_y, out_u, out_v);</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a199d36780fbb4a70168f290480673650"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a199d36780fbb4a70168f290480673650">&#9670;&nbsp;</a></span>colorconvert_nv12_to_iyuv()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_nv12_to_iyuv </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert NV12 to IYUV. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input NV12 data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output IYUV buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">767</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;{</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    win.validate();</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160; </div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>IMultiImage *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160; </div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    constexpr <span class="keyword">auto</span> shift = uv ? 0 : 1;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160; </div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160; </div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    Iterator in_y(input_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    Iterator in_uv(input_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    Iterator out_u(output_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    Iterator out_v(output_ptr-&gt;plane(2), win_uv);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160; </div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        win,</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        {</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_top    = vld2q_u8(in_y.ptr());</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_bottom = vld2q_u8(in_y.ptr() + input_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_uv       = vld2q_u8(in_uv.ptr());</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            <span class="comment">//ta_y.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            <span class="comment">//ta_y.val[1] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            <span class="comment">//ta_uv.val[0] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="comment">//ta_uv.val[1] = V0 V2 V4 V6 ...</span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160; </div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            vst2q_u8(out_y.ptr(), ta_y_top);</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            vst2q_u8(out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), ta_y_bottom);</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            vst1q_u8(out_u.ptr(), ta_uv.val[0 + shift]);</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            vst1q_u8(out_v.ptr(), ta_uv.val[1 - shift]);</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        },</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        in_y, in_uv, out_y, out_u, out_v);</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="ae6a44e412bccc0705a720708b0692218"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6a44e412bccc0705a720708b0692218">&#9670;&nbsp;</a></span>colorconvert_nv12_to_rgb()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_nv12_to_rgb </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert NV12 to RGB. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input NV12 data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output RGB buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">490</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    win.validate();</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>IMultiImage *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    constexpr <span class="keyword">auto</span> element_size = alpha ? 32 : 24;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>     out_stride   = output_ptr-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    constexpr <span class="keyword">auto</span> shift        = uv ? 0 : 1;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160; </div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win.x().step() / 2));</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    Iterator in_y(input_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    Iterator in_uv(input_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    Iterator out(output_ptr, win);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        win,</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_top    = vld2q_u8(in_y.ptr());</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_bottom = vld2q_u8(in_y.ptr() + input_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_uv       = vld2q_u8(in_uv.ptr());</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            <span class="comment">//ta_y.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="comment">//ta_y.val[1] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            <span class="comment">//ta_uv.val[0] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="comment">//ta_uv.val[1] = V0 V2 V4 V6 ...</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            <span class="comment">// Convert the uint8x16x4_t to float32x4x4_t</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            float32x4x4_t yvec_top     = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_top.val[0]);</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            float32x4x4_t yyvec_top    = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_top.val[1]);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            float32x4x4_t yvec_bottom  = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_bottom.val[0]);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            float32x4x4_t yyvec_bottom = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_y_bottom.val[1]);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            float32x4x4_t uvec         = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_uv.val[0 + shift]);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            float32x4x4_t vvec         = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta_uv.val[1 - shift]);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[0], uvec.val[0], yyvec_top.val[0], vvec.val[0],</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                    out.ptr() + 0 * element_size, alpha);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[1], uvec.val[1], yyvec_top.val[1], vvec.val[1],</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                    out.ptr() + 1 * element_size, alpha);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[2], uvec.val[2], yyvec_top.val[2], vvec.val[2],</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                    out.ptr() + 2 * element_size, alpha);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_top.val[3], uvec.val[3], yyvec_top.val[3], vvec.val[3],</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                    out.ptr() + 3 * element_size, alpha);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160; </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[0], uvec.val[0], yyvec_bottom.val[0], vvec.val[0],</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                    out.ptr() + out_stride + 0 * element_size, alpha);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[1], uvec.val[1], yyvec_bottom.val[1], vvec.val[1],</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                    out.ptr() + out_stride + 1 * element_size, alpha);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[2], uvec.val[2], yyvec_bottom.val[2], vvec.val[2],</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                    out.ptr() + out_stride + 2 * element_size, alpha);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec_bottom.val[3], uvec.val[3], yyvec_bottom.val[3], vvec.val[3],</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                    out.ptr() + out_stride + 3 * element_size, alpha);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        },</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        in_y, in_uv, out);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00448">convert_uint8x16_to_float32x4x4()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00091">Dimensions&lt; T &gt;::y()</a>, <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00159">arm_compute::test::colorconvert_helper::detail::yuyv_to_rgb_calculation()</a>.</p>

</div>
</div>
<a id="a587a54c85dcc72838b8f4b5575ebafe4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a587a54c85dcc72838b8f4b5575ebafe4">&#9670;&nbsp;</a></span>colorconvert_nv12_to_yuv4()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_nv12_to_yuv4 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert NV12 to YUV4. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input NV12 data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output YUV4 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">880</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;{</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    win.validate();</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160; </div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>IMultiImage *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160; </div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    constexpr <span class="keyword">auto</span> shift = uv ? 0 : 1;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160; </div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160; </div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    Iterator in_y(input_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    Iterator in_uv(input_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    Iterator out_u(output_ptr-&gt;plane(1), win);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    Iterator out_v(output_ptr-&gt;plane(2), win);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160; </div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        win,</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        {</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_top    = vld2q_u8(in_y.ptr());</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_y_bottom = vld2q_u8(in_y.ptr() + input_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_uv       = vld2q_u8(in_uv.ptr());</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;            <span class="comment">//ta_y.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;            <span class="comment">//ta_y.val[1] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;            <span class="comment">//ta_uv.val[0] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            <span class="comment">//ta_uv.val[1] = V0 V2 V4 V6 ...</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160; </div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            vst2q_u8(out_y.ptr(), ta_y_top);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            vst2q_u8(out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), ta_y_bottom);</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160; </div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            uint8x16x2_t uvec;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;            uvec.val[0] = ta_uv.val[0 + shift];</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;            uvec.val[1] = ta_uv.val[0 + shift];</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            vst2q_u8(out_u.ptr(), uvec);</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;            vst2q_u8(out_u.ptr() + output_ptr-&gt;plane(1)-&gt;info()-&gt;strides_in_bytes().y(), uvec);</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160; </div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            uint8x16x2_t vvec;</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;            vvec.val[0] = ta_uv.val[1 - shift];</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            vvec.val[1] = ta_uv.val[1 - shift];</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;            vst2q_u8(out_v.ptr(), vvec);</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            vst2q_u8(out_v.ptr() + output_ptr-&gt;plane(2)-&gt;info()-&gt;strides_in_bytes().y(), vvec);</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        },</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        in_y, in_uv, out_y, out_u, out_v);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a49b7a8e217ba7aad821fdeaab86bad53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49b7a8e217ba7aad821fdeaab86bad53">&#9670;&nbsp;</a></span>colorconvert_rgb_to_iyuv()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_rgb_to_iyuv </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert RGB to IYUV. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input RGB data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output IYUV buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">1045</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;{</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    win.validate();</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160; </div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160; </div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160; </div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    Iterator out_u(output_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    Iterator out_v(output_ptr-&gt;plane(2), win_uv);</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160; </div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;        win,</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;        {</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_rgb_top    = load_rgb(in.ptr(), alpha);</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_rgb_bottom = load_rgb(in.ptr() + input_ptr-&gt;info()-&gt;strides_in_bytes().y(), alpha);</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;            <span class="comment">//ta_rgb.val[0] = R0 R1 R2 R3 ...</span></div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;            <span class="comment">//ta_rgb.val[1] = G0 G1 G2 G3 ...</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;            <span class="comment">//ta_rgb.val[2] = B0 B1 B2 B3 ...</span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160; </div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;            store_rgb_to_iyuv(ta_rgb_top.val[0], ta_rgb_top.val[1], ta_rgb_top.val[2], ta_rgb_bottom.val[0],</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                              ta_rgb_bottom.val[1], ta_rgb_bottom.val[2], out_y.ptr(),</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                              out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), out_u.ptr(),</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                              out_v.ptr());</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        },</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;        in, out_y, out_u, out_v);</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a14fd899b732509e245976b9967b8931d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14fd899b732509e245976b9967b8931d">&#9670;&nbsp;</a></span>colorconvert_rgb_to_nv12()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_rgb_to_nv12 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert RGB to NV12. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input RGB data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output NV12 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">1001</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;{</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    win.validate();</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160; </div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160; </div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    <span class="comment">// UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160; </div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    Iterator out_uv(output_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160; </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        win,</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        {</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_rgb_top    = load_rgb(in.ptr(), alpha);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_rgb_bottom = load_rgb(in.ptr() + input_ptr-&gt;info()-&gt;strides_in_bytes().y(), alpha);</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            <span class="comment">//ta_rgb.val[0] = R0 R1 R2 R3 ...</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;            <span class="comment">//ta_rgb.val[1] = G0 G1 G2 G3 ...</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            <span class="comment">//ta_rgb.val[2] = B0 B1 B2 B3 ...</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160; </div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;            store_rgb_to_nv12(ta_rgb_top.val[0], ta_rgb_top.val[1], ta_rgb_top.val[2], ta_rgb_bottom.val[0],</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                              ta_rgb_bottom.val[1], ta_rgb_bottom.val[2], out_y.ptr(),</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                              out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), out_uv.ptr());</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        },</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        in, out_y, out_uv);</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a93cc303c8ae098d264f07d37890412de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93cc303c8ae098d264f07d37890412de">&#9670;&nbsp;</a></span>colorconvert_rgb_to_rgbx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_rgb_to_rgbx </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert RGB to RGBX. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input RGB data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output RGBX buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00344">344</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    Iterator out(output_ptr, win);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        win,</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   ta1 = vld3q_u8(in.ptr());</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            uint8x16x4_t ta2;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            ta2.val[0] = ta1.val[0];</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            ta2.val[1] = ta1.val[1];</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            ta2.val[2] = ta1.val[2];</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            ta2.val[3] = vdupq_n_u8(255);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            vst4q_u8(out.ptr(), ta2);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        },</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        in, out);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>.</p>

</div>
</div>
<a id="aa1d4cf707dec05e3ff1d63d4ce8065ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1d4cf707dec05e3ff1d63d4ce8065ca">&#9670;&nbsp;</a></span>colorconvert_rgb_to_u8()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_rgb_to_u8 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert RGB to U8. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input RGB data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output U8 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00377">377</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    Iterator out(output_ptr, win);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        win,</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta1 = vld3q_u8(in.ptr());</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            uint8x16_t ta2;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            rgb_to_u8_conversion(ta1, ta2);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            vst1q_u8(out.ptr(), ta2);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        },</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        in, out);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>.</p>

</div>
</div>
<a id="ad304c0b0a72ed3f65c24fa69ab3cd53e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad304c0b0a72ed3f65c24fa69ab3cd53e">&#9670;&nbsp;</a></span>colorconvert_rgb_to_yuv4()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_rgb_to_yuv4 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert RGB to YUV4. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input RGB data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output YUV4 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01091">1091</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;{</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    win.validate();</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160; </div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160; </div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    Iterator out_u(output_ptr-&gt;plane(1), win);</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    Iterator out_v(output_ptr-&gt;plane(2), win);</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160; </div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        win,</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        {</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_rgb = load_rgb(in.ptr(), alpha);</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            <span class="comment">//ta_rgb.val[0] = R0 R1 R2 R3 ...</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            <span class="comment">//ta_rgb.val[1] = G0 G1 G2 G3 ...</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;            <span class="comment">//ta_rgb.val[2] = B0 B1 B2 B3 ...</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160; </div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;            store_rgb_to_yuv4(ta_rgb.val[0], ta_rgb.val[1], ta_rgb.val[2], out_y.ptr(), out_u.ptr(), out_v.ptr());</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        },</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        in, out_y, out_u, out_v);</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>.</p>

</div>
</div>
<a id="acf7451c0d0f8a4b1cfbb60d7531a43aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf7451c0d0f8a4b1cfbb60d7531a43aa">&#9670;&nbsp;</a></span>colorconvert_rgbx_to_rgb()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_rgbx_to_rgb </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert RGBX to RGB. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input RGBX data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output RGB buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00407">407</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    Iterator out(output_ptr, win);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        win,</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   ta1 = vld4q_u8(in.ptr());</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            uint8x16x3_t ta2;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            ta2.val[0] = ta1.val[0];</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            ta2.val[1] = ta1.val[1];</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            ta2.val[2] = ta1.val[2];</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            vst3q_u8(out.ptr(), ta2);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        },</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        in, out);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>.</p>

</div>
</div>
<a id="ae43e8f0463c0289169025c3041688d36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae43e8f0463c0289169025c3041688d36">&#9670;&nbsp;</a></span>colorconvert_yuyv_to_iyuv()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_yuyv_to_iyuv </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert YUYV to IYUV. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input YUYV data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output IYUV buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">818</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;{</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    win.validate();</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160; </div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160; </div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    constexpr <span class="keyword">auto</span> shift = yuyv ? 0 : 1;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160; </div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="comment">// Destination&#39;s UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160; </div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    Iterator out_u(output_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    Iterator out_v(output_ptr-&gt;plane(2), win_uv);</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160; </div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        win,</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        {</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_top    = vld4q_u8(in.ptr());</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_bottom = vld4q_u8(in.ptr() + input_ptr-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            <span class="comment">//ta.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            <span class="comment">//ta.val[1] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            <span class="comment">//ta.val[2] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <span class="comment">//ta.val[3] = V0 V2 V4 V7 ...</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160; </div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            uint8x16x2_t yvec;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            yvec.val[0] = ta_top.val[0 + shift];</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            yvec.val[1] = ta_top.val[2 + shift];</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            vst2q_u8(out_y.ptr(), yvec);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160; </div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            uint8x16x2_t yyvec;</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            yyvec.val[0] = ta_bottom.val[0 + shift];</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            yyvec.val[1] = ta_bottom.val[2 + shift];</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            vst2q_u8(out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), yyvec);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160; </div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            uint8x16_t uvec;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            uvec = vhaddq_u8(ta_top.val[1 - shift], ta_bottom.val[1 - shift]);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            vst1q_u8(out_u.ptr(), uvec);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160; </div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            uint8x16_t vvec;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            vvec = vhaddq_u8(ta_top.val[3 - shift], ta_bottom.val[3 - shift]);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            vst1q_u8(out_v.ptr(), vvec);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        },</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        in, out_y, out_u, out_v);</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a8ee13904a3f5ba84b28cb53d956021d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ee13904a3f5ba84b28cb53d956021d7">&#9670;&nbsp;</a></span>colorconvert_yuyv_to_nv12()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_yuyv_to_nv12 </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert YUYV to NV12. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input YUYV data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output NV12 buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">660</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;{</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    win.validate();</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160; </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span>IMultiImage *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160; </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    constexpr <span class="keyword">auto</span> shift = yuyv ? 0 : 1;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="comment">// NV12&#39;s UV&#39;s width and height are subsampled</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    Window win_uv(win);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    win_uv.set(Window::DimX, Window::Dimension(win_uv.x().start() / 2, win_uv.x().end() / 2, win_uv.x().step() / 2));</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    win_uv.set(Window::DimY, Window::Dimension(win_uv.y().start() / 2, win_uv.y().end() / 2, 1));</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    win_uv.validate();</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    Iterator out_y(output_ptr-&gt;plane(0), win);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    Iterator out_uv(output_ptr-&gt;plane(1), win_uv);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        win,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_top    = vld4q_u8(in.ptr());</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta_bottom = vld4q_u8(in.ptr() + input_ptr-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="comment">//ta.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            <span class="comment">//ta.val[1] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="comment">//ta.val[2] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="comment">//ta.val[3] = V0 V2 V4 V7 ...</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; </div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            uint8x16x2_t yvec;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            yvec.val[0] = ta_top.val[0 + shift];</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            yvec.val[1] = ta_top.val[2 + shift];</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            vst2q_u8(out_y.ptr(), yvec);</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160; </div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            uint8x16x2_t yyvec;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            yyvec.val[0] = ta_bottom.val[0 + shift];</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            yyvec.val[1] = ta_bottom.val[2 + shift];</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            vst2q_u8(out_y.ptr() + output_ptr-&gt;plane(0)-&gt;info()-&gt;strides_in_bytes().y(), yyvec);</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            uint8x16x2_t uvvec;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            uvvec.val[0] = vhaddq_u8(ta_top.val[1 - shift], ta_bottom.val[1 - shift]);</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            uvvec.val[1] = vhaddq_u8(ta_top.val[3 - shift], ta_bottom.val[3 - shift]);</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            vst2q_u8(out_uv.ptr(), uvvec);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        },</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        in, out_y, out_uv);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a3c22c0d3494660b72b4fc04fec76f92d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c22c0d3494660b72b4fc04fec76f92d">&#9670;&nbsp;</a></span>colorconvert_yuyv_to_rgb()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::colorconvert_yuyv_to_rgb </td>
          <td>(</td>
          <td class="paramtype">const void *__restrict&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *__restrict&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert YUYV to RGB. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input YUYV data buffer. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output RGB buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> for iterating the buffers. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00440">440</a> of file <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml">NEColorConvertHelper.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;{</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == output);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">IImage</a> *__restrict<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    constexpr <span class="keyword">auto</span> element_size = alpha ? 32 : 24;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    constexpr <span class="keyword">auto</span> shift        = yuyv ? 0 : 1;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    Iterator in(input_ptr, win);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    Iterator out(output_ptr, win);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        win,</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ta = vld4q_u8(in.ptr());</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="comment">//ta.val[0] = Y0 Y2 Y4 Y6 ...</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="comment">//ta.val[1] = U0 U2 U4 U6 ...</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="comment">//ta.val[2] = Y1 Y3 Y5 Y7 ...</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="comment">//ta.val[3] = V0 V2 V4 V7 ...</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="comment">// Convert the uint8x16x4_t to float32x4x4_t</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keyword">const</span> float32x4x4_t yvec  = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta.val[0 + shift]);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keyword">const</span> float32x4x4_t uvec  = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta.val[1 - shift]);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keyword">const</span> float32x4x4_t yyvec = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta.val[2 + shift]);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="keyword">const</span> float32x4x4_t vvec  = <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a>(ta.val[3 - shift]);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec.val[0], uvec.val[0], yyvec.val[0], vvec.val[0], out.ptr() + 0 * element_size,</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                    alpha);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec.val[1], uvec.val[1], yyvec.val[1], vvec.val[1], out.ptr() + 1 * element_size,</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                    alpha);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec.val[2], uvec.val[2], yyvec.val[2], vvec.val[2], out.ptr() + 2 * element_size,</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                    alpha);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec.val[3], uvec.val[3], yyvec.val[3], vvec.val[3], out.ptr() + 3 * element_size,</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                    alpha);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        },</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        in, out);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00448">convert_uint8x16_to_float32x4x4()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00159">arm_compute::test::colorconvert_helper::detail::yuyv_to_rgb_calculation()</a>.</p>

</div>
</div>
<a id="afe482b248e77ce20f67b5f3190ee37c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe482b248e77ce20f67b5f3190ee37c4">&#9670;&nbsp;</a></span>command_buffer_mutable_dispatch_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool command_buffer_mutable_dispatch_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check whether cl_khr_command_buffer_mutable_dispatch extension is supported by the specified CL device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>The CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported by the CL device. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00509">509</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;{</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_khr_command_buffer_mutable_dispatch&quot;</span>);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_command_buffer_8cpp_source.xhtml#l00036">CLCommandBuffer::create()</a>.</p>

</div>
</div>
<a id="aa3a72e82c5c3696bee9d2b9d87eeb2d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3a72e82c5c3696bee9d2b9d87eeb2d4">&#9670;&nbsp;</a></span>command_buffer_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool command_buffer_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check whether cl_khr_command_buffer extension is supported by the specified CL device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>The CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported by the CL device. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00504">504</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_khr_command_buffer&quot;</span>);</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

</div>
</div>
<a id="a18ca89deea003cc240751b33f3b8d91f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18ca89deea003cc240751b33f3b8d91f">&#9670;&nbsp;</a></span>compute_requantization_scale_offset()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> arm_compute::compute_requantization_scale_offset </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>uqinfo_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>uqinfo_out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00569">569</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;{</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keywordtype">float</span>   scale_to_apply  = uqinfo_out.scale;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    int32_t offset_to_apply = uqinfo_out.offset;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    scale_to_apply /= uqinfo_in.scale;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="comment">// In order to minimize flooring we convert the offset to a float,</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// then compute the new offset in the float domain,</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="comment">// finally we convert it back as int32_t</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    offset_to_apply -= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(uqinfo_in.offset) * uqinfo_in.scale / uqinfo_out.scale);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">return</span> UniformQuantizationInfo(scale_to_apply, offset_to_apply);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a8c35748731709927597cb5a2c227e682"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c35748731709927597cb5a2c227e682">&#9670;&nbsp;</a></span>compute_strides() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> arm_compute::compute_strides </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a strides object based on the tensor dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info object used to compute the strides.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> object based on element size and tensor shape. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00063">63</a> of file <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a8c35748731709927597cb5a2c227e682">compute_strides</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.element_size());</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">compute_strides()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a35178800b82e07a49da5a81cdeda9a0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35178800b82e07a49da5a81cdeda9a0c">&#9670;&nbsp;</a></span>compute_strides() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> arm_compute::compute_strides </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>fixed_strides</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a strides object based on the provided strides and the tensor dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info object providing the shape of the tensor for unspecified strides. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stride_x</td><td>Stride to be used in X dimension (in bytes). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_strides</td><td><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> to be used in higher dimensions starting at Y (in bytes).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> object based on the specified strides. Missing strides are calculated based on the tensor shape and the strides of lower dimensions. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">41</a> of file <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Create strides object</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Strides strides(stride_x, fixed_strides...);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1 + <span class="keyword">sizeof</span>...(Ts); i &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_dimensions(); ++i)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        strides.set(i, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i - 1] * strides[i - 1]);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> strides;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00063">compute_strides()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00370">TensorInfo::set_tensor_shape()</a>.</p>

</div>
</div>
<a id="a3b0c016b53e97663b39c2f3875f46c24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b0c016b53e97663b39c2f3875f46c24">&#9670;&nbsp;</a></span>compute_winograd_convolution_tiles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> arm_compute::compute_winograd_convolution_tiles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>in_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>output_tile_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the number of output tiles required by Winograd Convolution layer. </p>
<p>This utility function can be used by the Winograd input transform to know the number of tiles on the x and y direction</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_dims</td><td>Spatial dimensions of the input tensor of convolution layer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_size</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_tile_size</td><td>Size of a single output tile </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Convolution info (i.e. pad, stride,...)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of output tiles along the x and y directions of size "output_tile_size" </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00250">250</a> of file <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordtype">int</span> num_tiles_x =</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        std::ceil((in_dims.width - (kernel_size.width - 1) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right()) /</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                  <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(output_tile_size.width));</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">int</span> num_tiles_y =</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        std::ceil((in_dims.height - (kernel_size.height - 1) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_bottom()) /</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                  <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(output_tile_size.height));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Clamp in case we provide paddings but we have 1D convolution</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    num_tiles_x = std::min(num_tiles_x, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in_dims.width));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    num_tiles_y = std::min(num_tiles_y, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in_dims.height));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">return</span> Size2D(num_tiles_x, num_tiles_y);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00713">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="reference_2_winograd_8cpp_source.xhtml#l00236">arm_compute::test::validation::reference::winograd_input_transform()</a>, and <a class="el" href="reference_2_winograd_8cpp_source.xhtml#l00440">arm_compute::test::validation::reference::winograd_output_transform()</a>.</p>

</div>
</div>
<a id="aa8065e7933c00bdbf860278643c9e953"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8065e7933c00bdbf860278643c9e953">&#9670;&nbsp;</a></span>convert_float32x4x3_to_uint8x8x3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void convert_float32x4x3_to_uint8x8x3 </td>
          <td>(</td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8x8x3_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from two float32x4x3_t to just one uint8x8x3_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in1</td><td>First input vector of float to be converted </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in2</td><td>Second input vector of float to be converted </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>Converted output vector uint8 to store the result </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00488">488</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;{</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    out.val[0] = vqmovn_u16(vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in1.val[0])), vqmovn_u32(vcvtq_u32_f32(in2.val[0]))));</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    out.val[1] = vqmovn_u16(vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in1.val[1])), vqmovn_u32(vcvtq_u32_f32(in2.val[1]))));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    out.val[2] = vqmovn_u16(vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in1.val[2])), vqmovn_u32(vcvtq_u32_f32(in2.val[2]))));</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a9c673ade3003d5d4e28ebf5875795dc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c673ade3003d5d4e28ebf5875795dc4">&#9670;&nbsp;</a></span>convert_float32x4x4_to_int8x16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void convert_float32x4x4_to_int8x16 </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from float32x4x4_t to just one int8x16_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of float to be converted </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>Converted vector of uint8 to store the result </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00502">502</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> low  = vcombine_s16(vqmovn_s32(vcvtq_s32_f32(in.val[0])), vqmovn_s32(vcvtq_s32_f32(in.val[1])));</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> high = vcombine_s16(vqmovn_s32(vcvtq_s32_f32(in.val[2])), vqmovn_s32(vcvtq_s32_f32(in.val[3])));</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    out             = vcombine_s8(vqmovn_s16(low), vqmovn_s16(high));</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_math_8inl_source.xhtml#l00524">convert_float_to_int&lt; float32x4x4_t, int8x16_t &gt;()</a>.</p>

</div>
</div>
<a id="a4ee01955c2dd8c14a0d107a36cb62618"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ee01955c2dd8c14a0d107a36cb62618">&#9670;&nbsp;</a></span>convert_float32x4x4_to_uint8x16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void convert_float32x4x4_to_uint8x16 </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8x16_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from two float32x4x4_t to just one uint8x16_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of float to be converted </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>Converted vector of uint8 to store the result </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00495">495</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;{</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> low  = vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in.val[0])), vqmovn_u32(vcvtq_u32_f32(in.val[1])));</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> high = vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in.val[2])), vqmovn_u32(vcvtq_u32_f32(in.val[3])));</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    out             = vcombine_u8(vqmovn_u16(low), vqmovn_u16(high));</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_math_8inl_source.xhtml#l00510">convert_float_to_int&lt; float32x4x4_t, uint8x16_t &gt;()</a>.</p>

</div>
</div>
<a id="a17bff173004242d8f44b5b663177f9c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17bff173004242d8f44b5b663177f9c0">&#9670;&nbsp;</a></span>convert_float_to_int()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int_vec_type arm_compute::convert_float_to_int </td>
          <td>(</td>
          <td class="paramtype">const float_vec_type &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts from float vector to integer vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Float vector to converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The converted integer vector </dd></dl>

</div>
</div>
<a id="a6048f3cbd52aea7ce3a693ce485393be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6048f3cbd52aea7ce3a693ce485393be">&#9670;&nbsp;</a></span>convert_float_to_int&lt; float32x4x4_t, int8x16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x16_t <a class="el" href="namespacearm__compute.xhtml#a17bff173004242d8f44b5b663177f9c0">arm_compute::convert_float_to_int</a>&lt; float32x4x4_t, int8x16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00524">524</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    int8x16_t out;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">convert_float32x4x4_to_int8x16</a>(in, out);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00502">convert_float32x4x4_to_int8x16()</a>.</p>

</div>
</div>
<a id="ad63fda57a59d2dcc82eb13599581fcc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad63fda57a59d2dcc82eb13599581fcc0">&#9670;&nbsp;</a></span>convert_float_to_int&lt; float32x4x4_t, uint8x16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x16_t <a class="el" href="namespacearm__compute.xhtml#a17bff173004242d8f44b5b663177f9c0">arm_compute::convert_float_to_int</a>&lt; float32x4x4_t, uint8x16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00510">510</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    uint8x16_t out;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">convert_float32x4x4_to_uint8x16</a>(in, out);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00495">convert_float32x4x4_to_uint8x16()</a>.</p>

</div>
</div>
<a id="a4a20779ec9b583a9468b4fa60575d52e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a20779ec9b583a9468b4fa60575d52e">&#9670;&nbsp;</a></span>convert_int8x16_to_float32x4x4()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t convert_int8x16_to_float32x4x4 </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from int8x16 to float32x4x4_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of int8 to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted vector of float </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00462">462</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    float32x4x4_t out;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp1 = vmovl_s8(vget_low_s8(in));</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    out.val[0]      = vcvtq_f32_s32(vmovl_s16(vget_low_s16(tmp1)));</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    out.val[1]      = vcvtq_f32_s32(vmovl_s16(vget_high_s16(tmp1)));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp2 = vmovl_s8(vget_high_s8(in));</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    out.val[2]      = vcvtq_f32_s32(vmovl_s16(vget_low_s16(tmp2)));</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    out.val[3]      = vcvtq_f32_s32(vmovl_s16(vget_high_s16(tmp2)));</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_math_8inl_source.xhtml#l00532">convert_int_to_float&lt; float32x4x4_t, int8x16_t &gt;()</a>, and <a class="el" href="_n_e_math_8inl_source.xhtml#l00483">convert_to_float32x4x4()</a>.</p>

</div>
</div>
<a id="ad339c829071ae619193300cb501195ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad339c829071ae619193300cb501195ac">&#9670;&nbsp;</a></span>convert_int_to_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float_vec_type arm_compute::convert_int_to_float </td>
          <td>(</td>
          <td class="paramtype">const int_vec_type &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts from integer vector to float vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Integer vector to converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The converted float vector </dd></dl>

</div>
</div>
<a id="a9075aa895fe4b2368e3c0cfae26ebf0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9075aa895fe4b2368e3c0cfae26ebf0b">&#9670;&nbsp;</a></span>convert_int_to_float&lt; float32x4x4_t, int8x16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t <a class="el" href="namespacearm__compute.xhtml#ad339c829071ae619193300cb501195ac">arm_compute::convert_int_to_float</a>&lt; float32x4x4_t, int8x16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00532">532</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00462">convert_int8x16_to_float32x4x4()</a>.</p>

</div>
</div>
<a id="a8677ddae33f84bb0e84e995c54bf6ba3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8677ddae33f84bb0e84e995c54bf6ba3">&#9670;&nbsp;</a></span>convert_int_to_float&lt; float32x4x4_t, uint8x16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t <a class="el" href="namespacearm__compute.xhtml#ad339c829071ae619193300cb501195ac">arm_compute::convert_int_to_float</a>&lt; float32x4x4_t, uint8x16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8x16_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00518">518</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;{</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00448">convert_uint8x16_to_float32x4x4()</a>.</p>

</div>
</div>
<a id="a519df47124aa903c7de8be2624640c1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a519df47124aa903c7de8be2624640c1b">&#9670;&nbsp;</a></span>convert_negative_axis()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&amp; arm_compute::convert_negative_axis </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>max_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert negative coordinates to positive in the range [0, num_dims_input]. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">coords</td><td><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values">Array</a> of coordinates to be converted. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_value</td><td>Maximum value to be used when wrapping the negative values in coords </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00287">287</a> of file <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; coords.num_dimensions(); ++i)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        coords[i] = <a class="code" href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">wrap_around</a>(coords[i], max_value);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">return</span> coords;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00277">wrap_around()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00121">NEReduceMean::configure()</a>, and <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>.</p>

</div>
</div>
<a id="ad6af9061fe6dcd2cb311be33acb201ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6af9061fe6dcd2cb311be33acb201ed">&#9670;&nbsp;</a></span>convert_to_float32x4x4() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::convert_to_float32x4x4 </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00483">483</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00462">convert_int8x16_to_float32x4x4()</a>.</p>

</div>
</div>
<a id="afeb24f265771053bc8365e30b4c409e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afeb24f265771053bc8365e30b4c409e5">&#9670;&nbsp;</a></span>convert_to_float32x4x4() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::convert_to_float32x4x4 </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts to float32x4x4_t from the specified templated 16 elements vectors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of float to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted vector of float </dd></dl>

</div>
</div>
<a id="a47a3c86ad6266627e844e588496136a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47a3c86ad6266627e844e588496136a8">&#9670;&nbsp;</a></span>convert_to_float32x4x4() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::convert_to_float32x4x4 </td>
          <td>(</td>
          <td class="paramtype">const uint8x16_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00477">477</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00448">convert_uint8x16_to_float32x4x4()</a>.</p>

</div>
</div>
<a id="a1b362fecc52ac83bcfbb0850549edce4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b362fecc52ac83bcfbb0850549edce4">&#9670;&nbsp;</a></span>convert_uint8x16_to_float32x4x4()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t convert_uint8x16_to_float32x4x4 </td>
          <td>(</td>
          <td class="paramtype">const uint8x16_t &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from uint8x16 to float32x4x4_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of uint8 to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted vector of float </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00448">448</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;{</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    float32x4x4_t out;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp1 = vmovl_u8(vget_low_u8(in));</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    out.val[0]      = vcvtq_f32_u32(vmovl_u16(vget_low_u16(tmp1)));</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    out.val[1]      = vcvtq_f32_u32(vmovl_u16(vget_high_u16(tmp1)));</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp2 = vmovl_u8(vget_high_u8(in));</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    out.val[2]      = vcvtq_f32_u32(vmovl_u16(vget_low_u16(tmp2)));</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    out.val[3]      = vcvtq_f32_u32(vmovl_u16(vget_high_u16(tmp2)));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00440">colorconvert_yuyv_to_rgb()</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00518">convert_int_to_float&lt; float32x4x4_t, uint8x16_t &gt;()</a>, and <a class="el" href="_n_e_math_8inl_source.xhtml#l00477">convert_to_float32x4x4()</a>.</p>

</div>
</div>
<a id="afe3b7128bf77dd12c85eed944fe5b3d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe3b7128bf77dd12c85eed944fe5b3d4">&#9670;&nbsp;</a></span>convert_window_coord_to_position()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> arm_compute::convert_window_coord_to_position </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert an offset in window steps into absolute coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> <code>offset</code> is related to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Offset inside the window expressed in number of window steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Absolute coordinates. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_iterator_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_window_iterator_8h_source.xhtml">WindowIterator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Coordinates position;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; Coordinates::num_max_dimensions; ++i)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        position.set(i, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>[i].start() + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>[i] * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> position;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>.</p>

</div>
</div>
<a id="ad95e1c14c3007ca18950bf8f4c5a5c93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad95e1c14c3007ca18950bf8f4c5a5c93">&#9670;&nbsp;</a></span>coords2index()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int coords2index </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert n-dimensional coordinates into a linear index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the n-dimensional tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td>N-dimensional coordinates.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>linead index </dd></dl>

<p class="definition">Definition at line <a class="el" href="_helpers_8inl_source.xhtml#l00183">183</a> of file <a class="el" href="_helpers_8inl_source.xhtml">Helpers.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">int</span> num_elements = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.total_size();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(num_elements);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_elements == 0, <span class="stringliteral">&quot;Cannot create linear index from empty shape!&quot;</span>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">int</span> index  = 0;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">int</span> stride = 1;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; coord.num_dimensions(); ++d)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        index += coord[d] * stride;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        stride *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[d];</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> index;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="reference_2_gather_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::gather()</a>, and <a class="el" href="reference_2_winograd_8cpp_source.xhtml#l00236">arm_compute::test::validation::reference::winograd_input_transform()</a>.</p>

</div>
</div>
<a id="a4843e0bfd09db1c440d48494d57f9ff4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4843e0bfd09db1c440d48494d57f9ff4">&#9670;&nbsp;</a></span>cpu_impl_dt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::cpu_impl_dt </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the suffix string of CPU kernel implementation names based on the given data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The data type the CPU kernel implemetation uses</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the suffix string of CPU kernel implementations </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00487">487</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    std::string ret = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160; </div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    {</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            ret = <span class="stringliteral">&quot;fp32&quot;</span>;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            ret = <span class="stringliteral">&quot;fp16&quot;</span>;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            ret = <span class="stringliteral">&quot;u8&quot;</span>;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            ret = <span class="stringliteral">&quot;s16&quot;</span>;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            ret = <span class="stringliteral">&quot;s32&quot;</span>;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            ret = <span class="stringliteral">&quot;qu8&quot;</span>;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            ret = <span class="stringliteral">&quot;qs8&quot;</span>;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            ret = <span class="stringliteral">&quot;qs16&quot;</span>;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            ret = <span class="stringliteral">&quot;qp8&quot;</span>;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            ret = <span class="stringliteral">&quot;bf16&quot;</span>;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported.&quot;</span>);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

</div>
</div>
<a id="a49cdbfceec3cb9949d00dbd1a17c5604"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49cdbfceec3cb9949d00dbd1a17c5604">&#9670;&nbsp;</a></span>create_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> create_error </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">ErrorCode</a>&#160;</td>
          <td class="paramname"><em>error_code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>msg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates an error containing the error message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error_code</td><td>Error code </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">msg</td><td>Message to display before abandoning.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status containing the error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_error_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_error_8cpp_source.xhtml">Error.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>(error_code, msg);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="af9b3e9f3ef6409e72c71aeacebf58f3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9b3e9f3ef6409e72c71aeacebf58f3b">&#9670;&nbsp;</a></span>create_error_msg()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> create_error_msg </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05f">ErrorCode</a>&#160;</td>
          <td class="paramname"><em>error_code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates an error and the error message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error_code</td><td>Error code </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>File in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">msg</td><td>Message to display before abandoning.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status containing the error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_error_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_error_8cpp_source.xhtml">Error.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::array&lt;char, 512&gt; out{0};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">snprintf</a>(out.data(), out.size(), <span class="stringliteral">&quot;in %s %s:%d: %s&quot;</span>, func, file, line, msg);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>(error_code, std::string(out.data()));</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00270">arm_compute::support::cpp11::snprintf()</a>.</p>

</div>
</div>
<a id="ae9cd3d5db8015683dda5f39efa60e553"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9cd3d5db8015683dda5f39efa60e553">&#9670;&nbsp;</a></span>create_image2d_from_buffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Image2D create_image2d_from_buffer </td>
          <td>(</td>
          <td class="paramtype">const cl::Context &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::Buffer &amp;&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape2d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>image_row_pitch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a>&#160;</td>
          <td class="paramname"><em>image_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a cl::Image2D object from an OpenCL buffer. </p>
<dl class="section note"><dt>Note</dt><dd>The following conditions are required to create a OpenCL image object from OpenCL buffer,<ol type="1">
<li>The platform should support the OpenCL cl_khr_image2d_from_buffer extension</li>
<li>The stride Y for the input1 should satisfy the OpenCL pitch alignment requirement</li>
<li>input width should be less or equal to (CL_DEVICE_IMAGE2D_MAX_WIDTH * 4)</li>
<li>input height should be less or equal to CL_DEVICE_IMAGE2D_MAX_HEIGHT</li>
</ol>
</dd></dl>
<p>It is user responsibility to ensure the above conditions are satisfied since no checks are performed within this function</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>cl::Context object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>cl::Buffer object from which the OpenCL image2d object is created </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape2d</td><td>2D tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>DataType to use. Only supported: F32,F16 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">image_row_pitch</td><td><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> row pitch (a.k.a. stride Y) to be used in the image2d object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">image_type</td><td><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> 2D type (<a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>cl::Image2D object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00062">62</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!<a class="code" href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">image2d_from_buffer_supported</a>(CLKernelLibrary::get().get_device()),</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                             <span class="stringliteral">&quot;The extension cl_khr_image2d_from_buffer is not supported on the target platform&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">get_cl_image_pitch_alignment</a>(CLKernelLibrary::get().get_device()) == 0,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                             <span class="stringliteral">&quot;Impossible to retrieve the cl_image pitch alignment&quot;</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(buffer.get() == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Cannot create cl_image from empty cl_buffer&quot;</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    cl_channel_type cl_data_type;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            cl_data_type = CL_FLOAT;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            cl_data_type = CL_HALF_FLOAT;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not support with OpenCL image2d&quot;</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    cl_mem cl_image;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    cl_int err = CL_SUCCESS;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> cl_image_format <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> = {CL_RGBA, cl_data_type};</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    cl_image_desc desc;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    memset(&amp;desc, 0, <span class="keyword">sizeof</span>(desc));</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    desc.image_type      = CL_MEM_OBJECT_IMAGE2D;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    desc.mem_object      = buffer();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    desc.image_row_pitch = image_row_pitch;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    desc.image_width     = shape2d[0];</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    desc.image_height    = shape2d[1];</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">switch</span> (image_type)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">case</span> CLImage2DType::ReadOnly:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            cl_image = <a class="code" href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a>(ctx(), CL_MEM_READ_ONLY, &amp;<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>, &amp;desc, <span class="keyword">nullptr</span>, &amp;err);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">case</span> CLImage2DType::WriteOnly:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            cl_image = <a class="code" href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a>(ctx(), CL_MEM_WRITE_ONLY, &amp;<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>, &amp;desc, <span class="keyword">nullptr</span>, &amp;err);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported CLImage2DType&quot;</span>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(err);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(err != CL_SUCCESS, <span class="stringliteral">&quot;Error during the creation of CL image from buffer&quot;</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> cl::Image2D(cl_image);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l01056">clCreateImage()</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00382">get_cl_image_pitch_alignment()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00377">image2d_from_buffer_supported()</a>, <a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197">ReadOnly</a>, and <a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5">WriteOnly</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00037">create_image2d_from_tensor()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00412">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00238">ClMatMulNativeKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00284">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00339">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, and <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>.</p>

</div>
</div>
<a id="abedaa5482ac9390bc612c6f4891c4d80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abedaa5482ac9390bc612c6f4891c4d80">&#9670;&nbsp;</a></span>create_image2d_from_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Image2D create_image2d_from_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a>&#160;</td>
          <td class="paramname"><em>image_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a cl::Image2D object from a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> from which to construct <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> 2D object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">image_type</td><td><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> 2D type (<a class="el" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>cl::Image2D object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> cl::Context &amp;ctx    = CLKernelLibrary::get().context();</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> cl::Buffer  &amp;buffer = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;cl_buffer();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>   = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;lock_paddings(), <span class="stringliteral">&quot;Tensor paddings must not be locked to allow extending paddings to &quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                                    <span class="stringliteral">&quot;satisfy cl_image pitch alignment requirement&quot;</span>);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_w{<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(0) / 4};</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_h{<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;tensor_shape().total_size() / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(0)};</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_w{CLKernelLibrary::get().get_device().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_WIDTH&gt;()};</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_h{CLKernelLibrary::get().get_device().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_HEIGHT&gt;()};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(max_image_w, max_image_h);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(image_w &gt; max_image_w, <span class="stringliteral">&quot;Image width exceeds maximum width for exporting to cl_image&quot;</span>);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(image_h &gt; max_image_h, <span class="stringliteral">&quot;Image height exceeds maximum height for exporting to cl_image&quot;</span>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> TensorShape shape2d(image_w, image_h);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>      image_row_pitch = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">create_image2d_from_buffer</a>(ctx, buffer, shape2d, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;data_type(), image_row_pitch, image_type);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00051">CLTensor::cl_buffer()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00069">CLKernelLibrary::context()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00062">create_image2d_from_buffer()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00073">CLKernelLibrary::get_device()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00455">ClDirectConv2dKernel::run_op()</a>.</p>

</div>
</div>
<a id="adc51892eeef112d44a4f9bb0b988c9b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc51892eeef112d44a4f9bb0b988c9b9">&#9670;&nbsp;</a></span>create_kernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Kernel create_kernel </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>build_opts</em> = <code>std::set&lt;std::string&gt;()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates an opencl kernel using a compile context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>A compile context to be used to create the opencl kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_name</td><td>The kernel name. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">build_opts</td><td>The build options to be used for the opencl kernel compilation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An opencl kernel </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00409">409</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    opencl::ClKernelLibrary &amp;klib = opencl::ClKernelLibrary::get();</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> std::string program_name = klib.program_name(<a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">auto</span>              kernel_src   = klib.program(program_name);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> std::string kernel_path  = klib.kernel_path();</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>cl::Kernel<span class="keyword">&gt;</span>(ctx.create_kernel(<a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, program_name, kernel_src.program, kernel_path,</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                     build_opts, kernel_src.is_binary));</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00166">CLCompileContext::create_kernel()</a>, <a class="el" href="gpu_2cl_2_c_l_kernel_library_8cpp_source.xhtml#l00969">ClKernelLibrary::get()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">kernel_name</a>, <a class="el" href="gpu_2cl_2_c_l_kernel_library_8cpp_source.xhtml#l00996">ClKernelLibrary::kernel_path()</a>, <a class="el" href="gpu_2cl_2_c_l_kernel_library_8cpp_source.xhtml#l01001">ClKernelLibrary::program()</a>, and <a class="el" href="gpu_2cl_2_c_l_kernel_library_8cpp_source.xhtml#l00975">ClKernelLibrary::program_name()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00071">ClReshapeKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00053">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00118">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00045">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00078">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00125">ClGemmReshapeRhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00117">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00104">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00093">CLStackLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>.</p>

</div>
</div>
<a id="a6832cb1809aaf22a65b2eca70f135230"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6832cb1809aaf22a65b2eca70f135230">&#9670;&nbsp;</a></span>create_lws_hint_parallel_implementations()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::NDRange create_lws_hint_parallel_implementations </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>input_dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>vector_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a suitable LWS hint object for parallel implementations. </p>
<p>Sets the number of WG based on the input size. If input width is smaller than 128 we can use fewer threads than 8.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_dimension</td><td>number of elements along the dimension to apply the parallellization </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vector_size</td><td>size of the vector in OpenCL</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An LWS hint object </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00421">421</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_leftover = input_dimension % <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a>;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> border_width   = (width_leftover != 0) ? <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a> - width_leftover : 0;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_of_threads = ((input_dimension + border_width) / 16);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordflow">return</span> cl::NDRange(std::min(8<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, num_of_threads));</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>, and <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00043">arm_compute::cpu::vector_size</a>.</p>

</div>
</div>
<a id="a419153497f83b7db0c19112371b10a3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a419153497f83b7db0c19112371b10a3f">&#9670;&nbsp;</a></span>create_opencl_context_and_device()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; cl::Context, cl::Device, cl_int &gt; create_opencl_context_and_device </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a>&#160;</td>
          <td class="paramname"><em>cl_backend_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function creates an OpenCL context and a device. </p>
<dl class="section note"><dt>Note</dt><dd>In debug builds, the function will automatically enable cl_arm_printf if the driver/device supports it.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_backend_type</td><td>The OpenCL backend type to use.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A std::tuple where the first element is the opencl context, the second element is the opencl device and the third one an error code. The error code will be CL_SUCCESS upon successful creation, otherwise a value telling why the function failed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00121">121</a> of file <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>());</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    cl::Platform            p = <a class="code" href="namespacearm__compute.xhtml#a50617012493fc796beb28d94e4da33c7">select_preferable_platform</a>(cl_backend_type);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    cl::Device              device;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    std::vector&lt;cl::Device&gt; platform_devices;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    p.getDevices(CL_DEVICE_TYPE_DEFAULT, &amp;platform_devices);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(platform_devices.size() == 0, <span class="stringliteral">&quot;Couldn&#39;t find any OpenCL device&quot;</span>);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    device                                          = platform_devices[0];</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    cl_int                               err        = CL_SUCCESS;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::array&lt;cl_context_properties, 7&gt; properties = {0, 0, 0, 0, 0, 0, 0};</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    initialise_context_properties(p, device, properties);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    cl::Context cl_context = cl::Context(device, properties.data(), <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>, &amp;err);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(err != CL_SUCCESS, <span class="stringliteral">&quot;Failed to create OpenCL context&quot;</span>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(cl_context, device, err);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00236">opencl_is_available()</a>, and <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00084">select_preferable_platform()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00032">CLRuntimeContext::CLRuntimeContext()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00134">CLScheduler::default_init()</a>, and <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>.</p>

</div>
</div>
<a id="aaf5f536bf7ec25ff83b912badcf61405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf5f536bf7ec25ff83b912badcf61405">&#9670;&nbsp;</a></span>create_window_iterator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window_iterator.xhtml">WindowIterator</a>&lt;L&gt; arm_compute::create_window_iterator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L &amp;&amp;&#160;</td>
          <td class="paramname"><em>lambda_function</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a <a class="el" href="classarm__compute_1_1_window_iterator.xhtml" title="Iterate over a portion of a Window.">WindowIterator</a> object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to use for the iteration </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Where to start iterating from (In <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> coordinates) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Where to stop iterating (In <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> coordinates). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lambda_function</td><td>Lambda function to call for every iteration between start and end. (It will be called last for end - 1)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classarm__compute_1_1_window_iterator.xhtml" title="Iterate over a portion of a Window.">WindowIterator</a> object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_iterator_8h_source.xhtml#l00313">313</a> of file <a class="el" href="_window_iterator_8h_source.xhtml">WindowIterator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">return</span> WindowIterator&lt;L&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, start, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>, std::move(lambda_function));</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>.</p>

</div>
</div>
<a id="a834b76c7d21af898f39def3b787d7530"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a834b76c7d21af898f39def3b787d7530">&#9670;&nbsp;</a></span>data_layout_from_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> data_layout_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>String to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted DataLayout enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_type_loader_8cpp_source.xhtml">TypeLoader.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, arm_compute::DataLayout&gt; data_layouts = {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        {<span class="stringliteral">&quot;nhwc&quot;</span>, DataLayout::NHWC},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        {<span class="stringliteral">&quot;nchw&quot;</span>, DataLayout::NCHW},</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    };</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> data_layouts.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>));</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::out_of_range &amp;)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">name</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>, and <a class="el" href="_utility_8h_source.xhtml#l00204">arm_compute::utility::tolower()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_type_loader_8h_source.xhtml#l00048">operator&gt;&gt;()</a>.</p>

</div>
</div>
<a id="abb7e0f23a4f2e63f39433f158dad47ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb7e0f23a4f2e63f39433f158dad47ab">&#9670;&nbsp;</a></span>data_size_from_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arm_compute::data_size_from_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The size in bytes of the data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Input data type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The size in bytes of the data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">return</span> 4;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">return</span> 8;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(size_t);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid data type&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">F64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">SIZET</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00137">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00233">TensorInfo::element_size()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00047">ClTemplateCast::get_name()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00083">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="a59846ef5ca75cd81cdb7e8a1ce08f9db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59846ef5ca75cd81cdb7e8a1ce08f9db">&#9670;&nbsp;</a></span>data_type_from_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> arm_compute::data_type_from_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the data type used by a given single-planar pixel format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Input format</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The size in bytes of the pixel format </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00115">115</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">case</span> Format::U8:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">case</span> Format::UV88:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">return</span> DataType::U8;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">case</span> Format::U16:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> DataType::U16;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">case</span> Format::S16:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">return</span> DataType::S16;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">case</span> Format::U32:</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">return</span> DataType::U32;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">case</span> Format::S32:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">return</span> DataType::S32;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> Format::BFLOAT16:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> DataType::BFLOAT16;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">case</span> Format::F16:</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> DataType::F16;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">case</span> Format::F32:</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">return</span> DataType::F32;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">//Doesn&#39;t make sense for planar formats:</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported data_type for given format&quot;</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

<p class="reference">Referenced by <a class="el" href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor&lt; uint8_t &gt;::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00142">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00202">TensorInfo::init_auto_padding()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00353">TensorInfo::set_format()</a>.</p>

</div>
</div>
<a id="a64e6501d564e950c3d527fb6b1f36f28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64e6501d564e950c3d527fb6b1f36f28">&#9670;&nbsp;</a></span>data_type_from_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a string to DataType. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>The name of the data type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DataType </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="_data_type_utils_8cpp_source.xhtml">DataTypeUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, DataType&gt; data_types = {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {<span class="stringliteral">&quot;f16&quot;</span>, DataType::F16},</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {<span class="stringliteral">&quot;f32&quot;</span>, DataType::F32},</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {<span class="stringliteral">&quot;qasymm8&quot;</span>, DataType::QASYMM8},</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {<span class="stringliteral">&quot;qasymm8_signed&quot;</span>, DataType::QASYMM8_SIGNED},</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    };</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> data_types.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">utility::tolower</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::out_of_range &amp;)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Invalid data type name: %s&quot;</span>, <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>.c_str());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00348">ARM_COMPUTE_ERROR_VAR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">name</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, and <a class="el" href="_utility_8h_source.xhtml#l00204">arm_compute::utility::tolower()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_data_type_utils_8h_source.xhtml#l00290">operator&gt;&gt;()</a>.</p>

</div>
</div>
<a id="a1a0b7ff66a946db6252d2a4c40c04fa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a0b7ff66a946db6252d2a4c40c04fa7">&#9670;&nbsp;</a></span>deconvolution_output_dimensions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; unsigned int, unsigned int &gt; deconvolution_output_dimensions </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>in_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>in_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pad_stride_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns expected width and height of the deconvolution's output tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_width</td><td>Width of input tensor (Number of columns) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_height</td><td>Height of input tensor (Number of rows) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_width</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> width. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_height</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> height. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pad_stride_info</td><td>Pad and stride information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair with the new width in the first position and the new height in the second. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00266">266</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.pad_left();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.pad_top();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.pad_right();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.pad_bottom();</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_x   = pad_stride_info.stride().first;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_y   = pad_stride_info.stride().second;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(in_width &lt; 1 || in_height &lt; 1);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(((in_width - 1) * stride_x + kernel_width) &lt; (pad_left + pad_right));</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(((in_height - 1) * stride_y + kernel_height) &lt; (pad_top + pad_bottom));</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = stride_x * (in_width - 1) + kernel_width - (pad_left + pad_right);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> h = stride_y * (in_height - 1) + kernel_height - (pad_top + pad_bottom);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> std::make_pair&lt;unsigned int, unsigned int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_core_types_8h_source.xhtml#l00233">PadStrideInfo::pad_bottom()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00223">PadStrideInfo::pad_right()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>.</p>

<p class="reference">Referenced by <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00047">DeconvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00195">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00130">CLGEMMDeconvolutionLayer::validate()</a>, and <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a22c3c5e2d63814320440a3ec9d73419c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22c3c5e2d63814320440a3ec9d73419c">&#9670;&nbsp;</a></span>dequantize() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize </td>
          <td>(</td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 16-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to use for dequantization</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00415">415</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;{</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> value * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="aa29442a61be1fbce3b22c28f403acef2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa29442a61be1fbce3b22c28f403acef2">&#9670;&nbsp;</a></span>dequantize() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize </td>
          <td>(</td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 8-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to use for dequantization</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00403">403</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> value * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="acf7db09d2dff587cd58187ed58eeec68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf7db09d2dff587cd58187ed58eeec68">&#9670;&nbsp;</a></span>dequantize() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 16-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to use for dequantization </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Zero-offset to use for dequantization</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00428">428</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(value) - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="ab8005b943e23486a2000a7966d664df2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8005b943e23486a2000a7966d664df2">&#9670;&nbsp;</a></span>dequantize() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given an 8-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to use for dequantization </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Zero-offset to use for dequantization</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00379">379</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;{</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(value) - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a1b09fc16ab06a02188334c4b1f43e2ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b09fc16ab06a02188334c4b1f43e2ff">&#9670;&nbsp;</a></span>dequantize_qasymm16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qasymm16 </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 16-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00534">534</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;{</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a1b09fc16ab06a02188334c4b1f43e2ff">dequantize_qasymm16</a>(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>());</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00510">dequantize_qasymm16()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

</div>
</div>
<a id="a85310967abb447a1cb1167ba8f73eab0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85310967abb447a1cb1167ba8f73eab0">&#9670;&nbsp;</a></span>dequantize_qasymm16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qasymm16 </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 16-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00510">510</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(value) - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a08ffa53eaabde3e18b003f8182ac09bf">offset</a>) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo::offset()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00070">arm_compute::test::validation::convert_from_asymmetric()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00534">dequantize_qasymm16()</a>, and <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">arm_compute::cpu::roi_align()</a>.</p>

</div>
</div>
<a id="ac1d8253f8b422e143ab989ad2a4d29dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1d8253f8b422e143ab989ad2a4d29dd">&#9670;&nbsp;</a></span>dequantize_qasymm8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qasymm8 </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const INFO_TYPE &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given an unsigned 8-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00353">353</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#acf7db09d2dff587cd58187ed58eeec68">Qasymm8QuantizationHelper&lt;uint8_t&gt;::dequantize</a>(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00266">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::dequantize()</a>, and <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00421">check_value_range()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00039">arm_compute::test::validation::convert_from_asymmetric()</a>, <a class="el" href="_scale_helpers_8h_source.xhtml#l00053">arm_compute::scale_helpers::delta_bilinear_c1_quantized()</a>, <a class="el" href="reference_2_depth_concatenate_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::depthconcatenate_layer()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00388">CPPDetectionPostProcessLayer::run()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, and <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00192">arm_compute::test::validation::reference::scale()</a>.</p>

</div>
</div>
<a id="afe6fcf1a0c6f6c2d2cb10a8c14fa9131"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">&#9670;&nbsp;</a></span>dequantize_qasymm8_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qasymm8_signed </td>
          <td>(</td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const INFO_TYPE &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a signed 8-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00366">366</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;{</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#acf7db09d2dff587cd58187ed58eeec68">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00266">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::dequantize()</a>, and <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00054">arm_compute::test::validation::convert_from_asymmetric()</a>, <a class="el" href="_scale_helpers_8h_source.xhtml#l00092">arm_compute::scale_helpers::delta_bilinear_c1_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00388">CPPDetectionPostProcessLayer::run()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, and <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00211">arm_compute::test::validation::reference::scale()</a>.</p>

</div>
</div>
<a id="aae7ed4b777e2220a1959b79a7834042c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae7ed4b777e2220a1959b79a7834042c">&#9670;&nbsp;</a></span>dequantize_qsymm16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qsymm16 </td>
          <td>(</td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 16-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00481">481</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;{</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#aae7ed4b777e2220a1959b79a7834042c">dequantize_qsymm16</a>(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>());</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00457">dequantize_qsymm16()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

</div>
</div>
<a id="aae8583b382eaea109164f2f3e16380b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae8583b382eaea109164f2f3e16380b1">&#9670;&nbsp;</a></span>dequantize_qsymm16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qsymm16 </td>
          <td>(</td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 16-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00457">457</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;{</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> value * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::compute_all_anchors_qasymm16()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00150">arm_compute::test::validation::convert_from_symmetric()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00481">dequantize_qsymm16()</a>, and <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>.</p>

</div>
</div>
<a id="af7586ba11d82cc0232d4246a61a4a4f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7586ba11d82cc0232d4246a61a4a4f3">&#9670;&nbsp;</a></span>dequantize_qsymm8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::dequantize_qsymm8 </td>
          <td>(</td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a value given a 8-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to dequantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for dequantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00391">391</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> value * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>.</p>

</div>
</div>
<a id="a6c4a5ca34ebb51d4e2e119a110e4c8f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c4a5ca34ebb51d4e2e119a110e4c8f0">&#9670;&nbsp;</a></span>device_supports_extension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool device_supports_extension </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>extension_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether a given extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">extension_name</td><td>Name of the extension to be checked</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">285</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    std::string <a class="code" href="namespacecheck__header__guards.xhtml#a4397ebd547b206a8f60555ec1d1e0397">extensions</a> = device.getInfo&lt;CL_DEVICE_EXTENSIONS&gt;();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">auto</span>        pos        = <a class="code" href="namespacecheck__header__guards.xhtml#a4397ebd547b206a8f60555ec1d1e0397">extensions</a>.find(extension_name);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">return</span> (pos != std::string::npos);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="check__header__guards_8py_source.xhtml#l00177">check_header_guards::extensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00499">arm_matrix_multiply_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00232">arm_non_uniform_workgroup_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00509">command_buffer_mutable_dispatch_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00504">command_buffer_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00253">dot8_acc_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00242">dot8_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00237">fp16_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00377">image2d_from_buffer_supported()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00212">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="acac1575c0edd329ceb4a54d9fe8dcb08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acac1575c0edd329ceb4a54d9fe8dcb08">&#9670;&nbsp;</a></span>DIV_CEIL()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto arm_compute::DIV_CEIL </td>
          <td>(</td>
          <td class="paramtype">S&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype((val + m - 1) / m)
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the rounded up quotient of val / m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Value to divide and round up. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m</td><td>Value to divide by.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the result. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00037">37</a> of file <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml">Math.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> (val + m - 1) / m;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">ceil_to_multiple()</a>, and <a class="el" href="_shape_calculator_8h_source.xhtml#l00835">arm_compute::misc::shape_calculator::compute_indirect_buffer_shape()</a>.</p>

</div>
</div>
<a id="a4878daab91c6d7173de20283766e0c2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4878daab91c6d7173de20283766e0c2c">&#9670;&nbsp;</a></span>dot8_acc_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool dot8_acc_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether the cl_arm_integer_dot_product_accumulate_int8 extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_arm_integer_dot_product_accumulate_int8&quot;</span>);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

</div>
</div>
<a id="ac07e02c0066cf540a5a2665fa7d54934"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac07e02c0066cf540a5a2665fa7d54934">&#9670;&nbsp;</a></span>dot8_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool dot8_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether the cl_arm_integer_dot_product_int8 extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00242">242</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;{</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::string     device_name = device.getInfo&lt;CL_DEVICE_NAME&gt;();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> gpu_target  = <a class="code" href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">get_target_from_name</a>(device_name);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// SW_WORKAROUND: Workaround for DDK revision r14p0.to enable cl_arm_integer_dot_product_int8</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    std::set&lt;GPUTarget&gt; sw_workaround_issue = {GPUTarget::G76};</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_arm_integer_dot_product_int8&quot;</span>) ||</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            sw_workaround_issue.count(gpu_target) != 0);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">G76</a>, and <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00188">get_target_from_name()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>.</p>

</div>
</div>
<a id="a34b06c0cd94808a77b697e79880b84b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34b06c0cd94808a77b697e79880b84b0">&#9670;&nbsp;</a></span>element_size_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arm_compute::element_size_from_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The size in bytes of the data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The size in bytes of the data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00078">78</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">return</span> 4;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">return</span> 8;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Undefined element size for given data type&quot;</span>);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="reference_2_depth_convert_layer_8cpp_source.xhtml#l00042">arm_compute::test::validation::reference::depth_convert()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00335">SimpleTensor&lt; uint8_t &gt;::element_size()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00177">arm_compute::test::validation::validate()</a>.</p>

</div>
</div>
<a id="a6e51ab3789678d3e0b0b72178dd6c4c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e51ab3789678d3e0b0b72178dd6c4c6">&#9670;&nbsp;</a></span>enqueue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void enqueue </td>
          <td>(</td>
          <td class="paramtype">cl::CommandQueue &amp;&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::NDRange &amp;&#160;</td>
          <td class="paramname"><em>lws_hint</em> = <code><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().default_ndrange()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_dummy_work_items</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the kernel to the command queue with the given window. </p>
<dl class="section note"><dt>Note</dt><dd>Depending on the size of the window, this might translate into several jobs being enqueued.</dd>
<dd>
If kernel-&gt;kernel() is empty then the function will return without adding anything to the queue.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">queue</td><td>OpenCL command queue. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to enqueue </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> the kernel has to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lws_hint</td><td>(Optional) Local workgroup size requested. Default is based on the device target. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">use_dummy_work_items</td><td>(Optional) Use dummy work items in order to have two dimensional power of two NDRange. Default is false Note: it is kernel responsibility to check if the work-item is out-of-range</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>If any dimension of the lws is greater than the global workgroup size then no lws will be passed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (kernel.kernel()() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; Coordinates::num_max_dimensions; ++i)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(window[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() == 0);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment">// Make sure that dimensions &gt; Z are 1</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((i &gt;= 3) &amp;&amp; ((window[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() - window[i].start()) != 1));</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    cl::NDRange gws = ICLKernel::gws_from_window(window, use_dummy_work_items);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// Check for empty NDRange</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span> (gws.dimensions() == 0)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    kernel.cache_gws(gws);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    cl::NDRange valid_lws;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> (lws_hint[0] * lws_hint[1] * lws_hint[2] &gt; kernel.get_max_workgroup_size())</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        valid_lws = cl::NullRange;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        valid_lws = lws_hint;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    cl::NDRange lws = cl::NullRange;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> ((valid_lws[0] &lt;= gws[0]) &amp;&amp; (valid_lws[1] &lt;= gws[1]) &amp;&amp; (valid_lws[2] &lt;= gws[2]))</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        lws = valid_lws;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (CLKernelLibrary::get().is_wbsm_supported())</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a3c10c7c992771d1048fd5fe2708ccdd9">set_wbsm</a>(kernel.kernel(), kernel.wbsm_hint());</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    queue.enqueueNDRangeKernel(kernel.kernel(), cl::NullRange, gws, lws);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00219">ICLKernel::cache_gws()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00185">ICLKernel::get_max_workgroup_size()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00151">ICLKernel::kernel()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00441">set_wbsm()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>, and <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00404">ICLKernel::wbsm_hint()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_simple2_d_kernel_8cpp_source.xhtml#l00030">ICLSimple2DKernel::run()</a>, <a class="el" href="_i_c_l_simple3_d_kernel_8cpp_source.xhtml#l00033">ICLSimple3DKernel::run()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00103">CLBitwiseKernel::run()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00201">CLChannelShuffleLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00126">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00145">CLComputeAllAnchorsKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00254">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00136">CLRangeKernel::run()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00141">CLReorgLayerKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00140">CLTileKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00153">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00141">CLMaxUnpoolingLayerKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00127">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00134">CLGatherKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00142">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00163">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00212">CLPadLayerKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00208">CLFillBorderKernel::run()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00178">CLBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00236">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00138">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00220">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00412">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00231">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_kernel_runtime_8cpp_source.xhtml#l00238">ClKernelRuntime::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00105">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00128">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00131">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00104">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00147">ClWidthConcatenate2TensorsKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00144">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00170">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00104">ClFillKernel::run_op()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00126">ClHeightConcatenateKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00163">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00123">ClWidthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00254">ClPool3dKernel::run_op()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00260">ClTransposedConvolutionKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00138">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00124">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00250">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00184">ClSoftmaxKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00230">ClMatMulLowpNativeMMULKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00182">ClWidthConcatenate4TensorsKernel::run_op()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00115">ClConvertFullyConnectedWeightsKernel::run_op()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00165">ClWinogradFilterTransformKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00238">ClMatMulNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00193">ClGemmReshapeLhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00148">ClCastKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00231">ClMatMulLowpNativeKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00154">ClIndirectConv2dAddressPrecalculationKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00169">ClGemmReshapeRhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00284">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00339">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00185">CLStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00248">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00199">ClMatMulNativeMMULKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00455">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00183">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>, and <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>.</p>

</div>
</div>
<a id="ae7fcde610527b8fa3d9acdf398187962"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7fcde610527b8fa3d9acdf398187962">&#9670;&nbsp;</a></span>error_on_channel_not_in()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_channel_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>cn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>channels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the channel is not in channels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cn</td><td>Input channel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>First channel allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channels</td><td>(Optional) Further allowed channels.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l01036">1036</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;{</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(cn == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Channel::UNKNOWN</a>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160; </div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keyword">const</span> std::array&lt;T, <span class="keyword">sizeof</span>...(Ts)&gt; channels_array{{std::forward&lt;Ts&gt;(channels)...}};</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(channel != cn &amp;&amp; std::none_of(channels_array.begin(), channels_array.end(),</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                                                  [&amp;](<span class="keyword">const</span> T &amp;f) { return f == cn; }),</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                                    <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, and <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_validate_8cpp_source.xhtml#l00127">error_on_channel_not_in_known_format()</a>.</p>

</div>
</div>
<a id="a66876161b2add31c70efb9d1ba9423cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66876161b2add31c70efb9d1ba9423cb">&#9670;&nbsp;</a></span>error_on_channel_not_in_known_format()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_channel_not_in_known_format </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a>&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a>&#160;</td>
          <td class="paramname"><em>cn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the channel is not in format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fmt</td><td>Input channel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cn</td><td>First channel allowed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(fmt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Format::UNKNOWN</a>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(cn == <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Channel::UNKNOWN</a>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">switch</span> (fmt)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a>:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">arm_compute::error_on_channel_not_in</a>(<span class="keyword">function</span>, file, line, cn, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a>,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a>, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">arm_compute::Format::RGBA8888</a>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">arm_compute::error_on_channel_not_in</a>(<span class="keyword">function</span>, file, line, cn, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a>,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a>, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a>,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">arm_compute::Format::UV88</a>:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">arm_compute::error_on_channel_not_in</a>(<span class="keyword">function</span>, file, line, cn, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a>,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">arm_compute::Channel::V</a>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">arm_compute::Format::IYUV</a>:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">arm_compute::Format::UYVY422</a>:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">arm_compute::Format::YUYV422</a>:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">arm_compute::Format::NV12</a>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">arm_compute::Format::NV21</a>:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">arm_compute::Format::YUV444</a>:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">arm_compute::error_on_channel_not_in</a>(<span class="keyword">function</span>, file, line, cn, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">arm_compute::Channel::Y</a>,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a>, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">arm_compute::Channel::V</a>);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <a class="code" href="_error_8h.xhtml#a94b64f1b45be794e8304c238e90be6b0">ARM_COMPUTE_ERROR_LOC</a>(<span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Not supported format.&quot;</span>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, <a class="el" href="_error_8h_source.xhtml#l00375">ARM_COMPUTE_ERROR_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l01036">error_on_channel_not_in()</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

</div>
</div>
<a id="a3c62cc8d5ee934d42c115c9315d66c13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c62cc8d5ee934d42c115c9315d66c13">&#9670;&nbsp;</a></span>error_on_coordinates_dimensions_gte()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_coordinates_dimensions_gte </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>max_dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed coordinates have too many dimensions. </p>
<p>The coordinates have too many dimensions if any of the dimensions greater or equal to max_dim is different from 0.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> to validate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_dim</td><td>Maximum number of dimensions allowed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = max_dim; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Coordinates::num_max_dimensions</a>; ++i)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(pos[i] != 0, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

</div>
</div>
<a id="a0b98606f8d98e828064496148231c0fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b98606f8d98e828064496148231c0fb">&#9670;&nbsp;</a></span>error_on_data_layout_not_in() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_data_layout_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>dl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dls</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data layout of the passed tensor does not match any of the data layout provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dl</td><td>First data layout allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dls</td><td>(Optional) Further allowed data layouts.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00880">880</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;{</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#ac6c243f12870355c0b97ac813b9e7d25">arm_compute::error_on_data_layout_not_in</a>(</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        <span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), std::forward&lt;T&gt;(<a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>), std::forward&lt;Ts&gt;(dls)...));</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00050">dl</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00853">error_on_data_layout_not_in()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="ac6c243f12870355c0b97ac813b9e7d25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6c243f12870355c0b97ac813b9e7d25">&#9670;&nbsp;</a></span>error_on_data_layout_not_in() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_data_layout_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>dl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dls</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data layout of the passed tensor info does not match any of the data layouts provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dl</td><td>First data layout allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dls</td><td>(Optional) Further allowed data layouts.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00853">853</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;{</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160; </div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;tensor_dl = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_layout(); <span class="comment">//NOLINT</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor_dl == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160; </div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keyword">const</span> std::array&lt;T, <span class="keyword">sizeof</span>...(Ts)&gt; dls_array{{std::forward&lt;Ts&gt;(dls)...}};</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <a class="code" href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>(</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        tensor_dl != <a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a> &amp;&amp; std::none_of(dls_array.begin(), dls_array.end(), [&amp;](<span class="keyword">const</span> T &amp;l) { return l == tensor_dl; }),</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;ITensor data layout %s not supported by this kernel&quot;</span>,</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a56b9e25c2e8731ca5488e7b3ccd66f58">string_from_data_layout</a>(tensor_dl).c_str());</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00265">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00303">TensorInfo::data_layout()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00050">dl</a>, <a class="el" href="_data_layout_utils_8cpp_source.xhtml#l00030">string_from_data_layout()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00880">error_on_data_layout_not_in()</a>.</p>

</div>
</div>
<a id="ad3137e73dbd78133d25751abd84540d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3137e73dbd78133d25751abd84540d8">&#9670;&nbsp;</a></span>error_on_data_type_channel_not_in() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_data_type_channel_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type or the number of channels of the passed tensor does not match any of the data types and number of channels provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Number of channels to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>First data type allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dts</td><td>(Optional) Further allowed data types.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00936">936</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;{</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#ad3137e73dbd78133d25751abd84540d8">error_on_data_type_channel_not_in</a>(<span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), num_channels,</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                                                                  std::forward&lt;T&gt;(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>), std::forward&lt;Ts&gt;(dts)...));</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00907">error_on_data_type_channel_not_in()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a499a45039b9bba66384504843d5823d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499a45039b9bba66384504843d5823d4">&#9670;&nbsp;</a></span>error_on_data_type_channel_not_in() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_data_type_channel_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type or the number of channels of the passed tensor info does not match any of the data types and number of channels provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Number of channels to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>First data type allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dts</td><td>(Optional) Further allowed data types.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00907">907</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;{</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#a774ec1fdc7bd1e7973c866d13734bc21">arm_compute::error_on_data_type_not_in</a>(</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, std::forward&lt;T&gt;(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>), std::forward&lt;Ts&gt;(dts)...));</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> tensor_nc = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;num_channels();</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <a class="code" href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>(tensor_nc != num_channels, <span class="keyword">function</span>, file, line,</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                            <span class="stringliteral">&quot;Number of channels %zu. Required number of channels %zu&quot;</span>, tensor_nc,</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                                            num_channels);</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00265">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">error_on_data_type_not_in()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00241">TensorInfo::num_channels()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00936">error_on_data_type_channel_not_in()</a>.</p>

</div>
</div>
<a id="a4ae0ca8176fce8caa48601dc8324ca97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ae0ca8176fce8caa48601dc8324ca97">&#9670;&nbsp;</a></span>error_on_data_type_not_in() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_data_type_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor does not match any of the data types provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>First data type allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dts</td><td>(Optional) Further allowed data types.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00828">828</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;{</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#a774ec1fdc7bd1e7973c866d13734bc21">arm_compute::error_on_data_type_not_in</a>(</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), std::forward&lt;T&gt;(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>), std::forward&lt;Ts&gt;(dts)...));</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">error_on_data_type_not_in()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a774ec1fdc7bd1e7973c866d13734bc21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a774ec1fdc7bd1e7973c866d13734bc21">&#9670;&nbsp;</a></span>error_on_data_type_not_in() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_data_type_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor info does not match any of the data types provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>First data type allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dts</td><td>(Optional) Further allowed data types.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">801</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;{</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160; </div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;tensor_dt = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_type(); <span class="comment">//NOLINT</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor_dt == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160; </div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="keyword">const</span> std::array&lt;T, <span class="keyword">sizeof</span>...(Ts)&gt; dts_array{{std::forward&lt;Ts&gt;(dts)...}};</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <a class="code" href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>(</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        tensor_dt != <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a> &amp;&amp; std::none_of(dts_array.begin(), dts_array.end(), [&amp;](<span class="keyword">const</span> T &amp;d) { return d == tensor_dt; }),</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;ITensor data type %s not supported by this kernel&quot;</span>,</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a142b55a483cadf4e1068a1a09a55e8e9">string_from_data_type</a>(tensor_dt).c_str());</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00265">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00253">TensorInfo::data_type()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="_data_type_utils_8cpp_source.xhtml#l00031">string_from_data_type()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00907">error_on_data_type_channel_not_in()</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00828">error_on_data_type_not_in()</a>.</p>

</div>
</div>
<a id="a0b360558b516e256f0af005a164c674e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b360558b516e256f0af005a164c674e">&#9670;&nbsp;</a></span>error_on_format_not_in()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::error_on_format_not_in </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>object</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Fs &amp;&amp;...&#160;</td>
          <td class="paramname"><em>formats</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Throw an error if the format of the passed tensor/multi-image does not match any of the formats provided. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">object</td><td>Tensor/multi-image to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>First format allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">formats</td><td>(Optional) Further allowed formats. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00767">767</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;{</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <a class="code" href="_error_8h.xhtml#ac90c3bce005225cbaa4a43740917bb58">ARM_COMPUTE_ERROR_ON_LOC</a>(<span class="keywordtype">object</span> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160; </div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;&amp;object_format = <span class="keywordtype">object</span>-&gt;info()-&gt;format();</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(object_format);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160; </div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="_error_8h.xhtml#ac90c3bce005225cbaa4a43740917bb58">ARM_COMPUTE_ERROR_ON_LOC</a>(object_format == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Format::UNKNOWN</a>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160; </div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keyword">const</span> std::array&lt;F, <span class="keyword">sizeof</span>...(Fs)&gt; formats_array{{std::forward&lt;Fs&gt;(formats)...}};</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(formats_array);</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160; </div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <a class="code" href="_error_8h.xhtml#a1b62e396a1789909dadda61ea4cda96f">ARM_COMPUTE_ERROR_ON_LOC_MSG</a>(</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        object_format != <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> &amp;&amp;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            std::none_of(formats_array.begin(), formats_array.end(), [&amp;](<span class="keyword">const</span> F &amp;f) { return f == object_format; }),</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Format %s not supported by this kernel&quot;</span>, <a class="code" href="namespacearm__compute.xhtml#a8b82da7b5e0f6192f415ac347c9e0555">string_from_format</a>(object_format).c_str());</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<span class="keyword">function</span>, <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>, file, line);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00475">ARM_COMPUTE_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00458">ARM_COMPUTE_ERROR_ON_LOC_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="_format_utils_8cpp_source.xhtml#l00031">string_from_format()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

</div>
</div>
<a id="a9f83032f49a13db29baa1af1a62e5627"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f83032f49a13db29baa1af1a62e5627">&#9670;&nbsp;</a></span>error_on_invalid_subtensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_invalid_subtensor </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>parent_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if if the coordinates and shape of the subtensor are within the parent tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">parent_shape</td><td>Parent tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coords</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> inside the parent tensor where the first element of the subtensor is </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the subtensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Check dimensions</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; TensorShape::num_max_dimensions; ++i)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> invalid_idx        = coords[i] &gt;= <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(parent_shape[i]);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> out_of_bounds_size = coords[i] + <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i]) &gt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(parent_shape[i]);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(invalid_idx || out_of_bounds_size, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="ac2ab765daf6f586ceaa12575743361e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2ab765daf6f586ceaa12575743361e7">&#9670;&nbsp;</a></span>error_on_invalid_subtensor_valid_region()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_invalid_subtensor_valid_region </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>parent_valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the valid region of a subtensor is not inside the valid region of the parent tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">parent_valid_region</td><td>Parent valid region. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">valid_region</td><td>Valid region of subtensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00191">191</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// Check valid regions</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; TensorShape::num_max_dimensions; ++d)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>((parent_valid_region.anchor[d] &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[d]), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            (parent_valid_region.anchor[d] + <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(parent_valid_region.shape[d])) &lt;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[d] + <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[d])),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, and <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>.</p>

</div>
</div>
<a id="ae93ff1ca47057b95d0c6fd0d287253a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae93ff1ca47057b95d0c6fd0d287253a8">&#9670;&nbsp;</a></span>error_on_invalid_subwindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_invalid_subwindow </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>sub</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed subwindow is invalid. </p>
<p>The subwindow is invalid if:</p><ul>
<li>It is not a valid window.</li>
<li>It is not fully contained inside the full window</li>
<li>The step for each of its dimension is not identical to the corresponding one of the full window.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">full</td><td>Full size window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sub</td><td>Sub-window to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    full.validate();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    sub.validate();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Coordinates::num_max_dimensions</a>; ++i)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[i].start() &gt; sub[i].start(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() &lt; sub[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() != sub[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>((sub[i].start() - full[i].start()) % sub[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>, and <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>.</p>

</div>
</div>
<a id="ad6e5ea4c65e9a0e7853ce314024c955d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6e5ea4c65e9a0e7853ce314024c955d">&#9670;&nbsp;</a></span>error_on_mismatching_data_layouts() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_data_layouts </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed tensors have different data layouts. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The first tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed tensors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00613">613</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;{</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, std::forward&lt;Ts&gt;(tensors)...));</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#a8355d6db4cebee2724bf4463076526c6">arm_compute::error_on_mismatching_data_layouts</a>(</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), detail::get_tensor_info_t&lt;ITensorInfo *&gt;()(tensors)...));</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00588">error_on_mismatching_data_layouts()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a8355d6db4cebee2724bf4463076526c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8355d6db4cebee2724bf4463076526c6">&#9670;&nbsp;</a></span>error_on_mismatching_data_layouts() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_data_layouts </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensor_infos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed tensor infos have different data layouts. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td>The first tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_infos</td><td>(Optional) Further allowed tensor infos.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00588">588</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;{</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, tensor_infos...));</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>                                         &amp;&amp;tensor_data_layout = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_layout();</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> ITensorInfo *, <span class="keyword">sizeof</span>...(Ts)&gt; tensors_infos_array{{tensor_infos...}};</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(std::any_of(tensors_infos_array.begin(), tensors_infos_array.end(),</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                                    [&amp;](<span class="keyword">const</span> ITensorInfo *tensor_info_obj)</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                                    { return tensor_info_obj-&gt;data_layout() != tensor_data_layout; }),</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensors have different data layouts&quot;</span>);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00303">TensorInfo::data_layout()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00613">error_on_mismatching_data_layouts()</a>.</p>

</div>
</div>
<a id="aa8b68ddd24c352a4cdd4fb1eea263429"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8b68ddd24c352a4cdd4fb1eea263429">&#9670;&nbsp;</a></span>error_on_mismatching_data_types() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_data_types </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed two tensors have different data types. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The first tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed tensors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00665">665</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, tensors...));</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#a85c38583df1a7998d58c51f7c3d4b354">arm_compute::error_on_mismatching_data_types</a>(</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), detail::get_tensor_info_t&lt;ITensorInfo *&gt;()(tensors)...));</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00640">error_on_mismatching_data_types()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a85c38583df1a7998d58c51f7c3d4b354"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85c38583df1a7998d58c51f7c3d4b354">&#9670;&nbsp;</a></span>error_on_mismatching_data_types() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_data_types </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensor_infos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed two tensor infos have different data types. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td>The first tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_infos</td><td>(Optional) Further allowed tensor infos.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00640">640</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, tensor_infos...));</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160; </div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>                                           &amp;&amp;tensor_data_type = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_type();</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> ITensorInfo *, <span class="keyword">sizeof</span>...(Ts)&gt; tensors_infos_array{{tensor_infos...}};</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(std::any_of(tensors_infos_array.begin(), tensors_infos_array.end(),</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                                    [&amp;](<span class="keyword">const</span> ITensorInfo *tensor_info_obj)</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                                    { return tensor_info_obj-&gt;data_type() != tensor_data_type; }),</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensors have different data types&quot;</span>);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00253">TensorInfo::data_type()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00665">error_on_mismatching_data_types()</a>.</p>

</div>
</div>
<a id="ab3f385292b90327061e1276f3e3445c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3f385292b90327061e1276f3e3445c7">&#9670;&nbsp;</a></span>error_on_mismatching_dimensions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_dimensions </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed dimension objects differ. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>The first object to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>The second object to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>(Optional) Further allowed objects.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00280">280</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a2fa22dee7227625fa4516f267235667c">detail::for_each_error</a>(detail::compare_dimension&lt;T&gt;(dim1, <span class="keyword">function</span>, file, line), dim2,</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                       std::forward&lt;Ts&gt;(dims)...));</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00108">arm_compute::detail::for_each_error()</a>.</p>

</div>
</div>
<a id="a3ba911901c6a47649cba6884e0f43a18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ba911901c6a47649cba6884e0f43a18">&#9670;&nbsp;</a></span>error_on_mismatching_quantization_info() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_quantization_info </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor_1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor_2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed tensor have different asymmetric quantized data types or different quantization info. </p>
<dl class="section note"><dt>Note</dt><dd>: If the first tensor doesn't have asymmetric quantized data type, the function returns without throwing an error</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_1</td><td>The first tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_2</td><td>The second tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed tensors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00738">738</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;{</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        ::<a class="code" href="namespacearm__compute.xhtml#a49e1fb8719a6e3b4db298796bdeac758">arm_compute::error_on_mismatching_quantization_info</a>(<span class="keyword">function</span>, file, line, tensor_1-&gt;info(), tensor_2-&gt;info(),</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                                                              detail::get_tensor_info_t&lt;ITensorInfo *&gt;()(tensors)...));</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00695">error_on_mismatching_quantization_info()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>.</p>

</div>
</div>
<a id="a49e1fb8719a6e3b4db298796bdeac758"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49e1fb8719a6e3b4db298796bdeac758">&#9670;&nbsp;</a></span>error_on_mismatching_quantization_info() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_quantization_info </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info_1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info_2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensor_infos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed tensor infos have different asymmetric quantized data types or different quantization info. </p>
<dl class="section note"><dt>Note</dt><dd>: If the first tensor info doesn't have asymmetric quantized data type, the function returns without throwing an error</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info_1</td><td>The first tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info_2</td><td>The second tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_infos</td><td>(Optional) Further allowed tensor infos.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00695">695</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;{</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>             &amp;&amp;first_data_type         = tensor_info_1-&gt;data_type();</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keyword">const</span> QuantizationInfo first_quantization_info = tensor_info_1-&gt;quantization_info();</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(first_data_type))</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    {</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    }</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160; </div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> ITensorInfo *, 1 + <span class="keyword">sizeof</span>...(Ts)&gt; tensor_infos_array{</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        {tensor_info_2, std::forward&lt;Ts&gt;(tensor_infos)...}};</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(std::any_of(tensor_infos_array.begin(), tensor_infos_array.end(),</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                                                    [&amp;](<span class="keyword">const</span> ITensorInfo *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                                                    { return tensor_info-&gt;data_type() != first_data_type; }),</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                                        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensors have different asymmetric quantized data types&quot;</span>);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        std::any_of(tensor_infos_array.begin(), tensor_infos_array.end(),</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                    [&amp;](<span class="keyword">const</span> ITensorInfo *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    { return tensor_info-&gt;quantization_info() != first_quantization_info; }),</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensors have different quantization information&quot;</span>);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160; </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00324">is_data_type_quantized()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00738">error_on_mismatching_quantization_info()</a>.</p>

</div>
</div>
<a id="a196a1a4faf1a8893963fd89d7efaf5d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a196a1a4faf1a8893963fd89d7efaf5d9">&#9670;&nbsp;</a></span>error_on_mismatching_shapes() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_shapes </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor_1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor_2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed two tensors have different shapes from the given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_1</td><td>The first tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_2</td><td>The second tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed tensors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00497">497</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a7a314d37a14fb002f52a148122238499">error_on_mismatching_shapes</a>(<span class="keyword">function</span>, file, line, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, tensor_1, tensor_2, std::forward&lt;Ts&gt;(tensors)...);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00475">error_on_mismatching_shapes()</a>, and <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>.</p>

</div>
</div>
<a id="a900072ec18ac254db40901425e2b35b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a900072ec18ac254db40901425e2b35b2">&#9670;&nbsp;</a></span>error_on_mismatching_shapes() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_shapes </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info_1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info_2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensor_infos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed two tensor infos have different shapes from the given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info_1</td><td>The first tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info_2</td><td>The second tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_infos</td><td>(Optional) Further allowed tensor infos.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00475">475</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a7a314d37a14fb002f52a148122238499">error_on_mismatching_shapes</a>(<span class="keyword">function</span>, file, line, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, tensor_info_1, tensor_info_2,</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                       std::forward&lt;Ts&gt;(tensor_infos)...);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00497">error_on_mismatching_shapes()</a>.</p>

</div>
</div>
<a id="a7a314d37a14fb002f52a148122238499"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a314d37a14fb002f52a148122238499">&#9670;&nbsp;</a></span>error_on_mismatching_shapes() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_shapes </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>upper_dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor_1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor_2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed two tensors have different shapes from the given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">upper_dim</td><td>The dimension from which to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_1</td><td>The first tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_2</td><td>The second tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed tensors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00556">556</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor_1 == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor_2 == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, tensors...));</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        ::<a class="code" href="namespacearm__compute.xhtml#a900072ec18ac254db40901425e2b35b2">arm_compute::error_on_mismatching_shapes</a>(<span class="keyword">function</span>, file, line, upper_dim, tensor_1-&gt;info(), tensor_2-&gt;info(),</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                                                   detail::get_tensor_info_t&lt;ITensorInfo *&gt;()(tensors)...));</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00475">error_on_mismatching_shapes()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>.</p>

</div>
</div>
<a id="a8f08e05970c101f7a9c852dc036f5ffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f08e05970c101f7a9c852dc036f5ffb">&#9670;&nbsp;</a></span>error_on_mismatching_shapes() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_mismatching_shapes </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>upper_dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info_1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info_2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensor_infos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the passed two tensors have different shapes from the given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">upper_dim</td><td>The dimension from which to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info_1</td><td>The first tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info_2</td><td>The second tensor info to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_infos</td><td>(Optional) Further allowed tensor infos.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00519">519</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;{</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor_info_1 == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor_info_2 == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, tensor_infos...));</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160; </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> ITensorInfo *, 2 + <span class="keyword">sizeof</span>...(Ts)&gt; tensors_info_array{</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        {tensor_info_1, tensor_info_2, tensor_infos...}};</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(std::any_of(std::next(tensors_info_array.cbegin()), tensors_info_array.cend(),</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                                    [&amp;](<span class="keyword">const</span> ITensorInfo *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                                    {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                                        return detail::have_different_dimensions(</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                                            (*tensors_info_array.cbegin())-&gt;tensor_shape(),</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                                            tensor_info-&gt;tensor_shape(), upper_dim);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                    }),</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensors have different shapes&quot;</span>);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

</div>
</div>
<a id="ad7f5b38e9d5391afc4a5ce5702e7379b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7f5b38e9d5391afc4a5ce5702e7379b">&#9670;&nbsp;</a></span>error_on_mismatching_windows()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_mismatching_windows </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed window is invalid. </p>
<p>The subwindow is invalid if:</p><ul>
<li>It is not a valid window.</li>
<li>Its dimensions don't match the full window's ones</li>
<li>The step for each of its dimension is not identical to the corresponding one of the full window.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">full</td><td>Full size window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00026">26</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    full.validate();</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    win.validate();</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Coordinates::num_max_dimensions</a>; ++i)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[i].start() != win[i].start(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() != win[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() != win[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>, and <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>.</p>

</div>
</div>
<a id="af4587cd36ddbf2e4dde217d1a1007940"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4587cd36ddbf2e4dde217d1a1007940">&#9670;&nbsp;</a></span>error_on_nullptr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_nullptr </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>pointers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an error if one of the pointers is a nullptr. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointers</td><td>Pointers to check against nullptr.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">151</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">sizeof</span>...(Ts)&gt; pointers_array{{std::forward&lt;Ts&gt;(pointers)...}};</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">bool</span>                                          has_nullptr =</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::any_of(pointers_array.begin(), pointers_array.end(), [&amp;](<span class="keyword">const</span> <span class="keywordtype">void</span> *ptr) { return (ptr == nullptr); });</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(has_nullptr, <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Nullptr object!&quot;</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00588">error_on_mismatching_data_layouts()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00640">error_on_mismatching_data_types()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00519">error_on_mismatching_shapes()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00369">error_on_tensors_not_even()</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00436">error_on_tensors_not_subsampled()</a>.</p>

</div>
</div>
<a id="a398f32595ee55b858853d5bcdcacfef5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a398f32595ee55b858853d5bcdcacfef5">&#9670;&nbsp;</a></span>error_on_tensor_not_2d() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_tensor_not_2d </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the tensor is not 2D. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info() == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info()-&gt;num_dimensions() != 2, <span class="keyword">function</span>, file, line,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                            <span class="stringliteral">&quot;Only 2D Tensors are supported by this kernel (%zu passed)&quot;</span>,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info()-&gt;num_dimensions());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00265">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="aa394a6ffa74616f886c889f04883663d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa394a6ffa74616f886c889f04883663d">&#9670;&nbsp;</a></span>error_on_tensor_not_2d() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_tensor_not_2d </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the tensor info is not 2D. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00115">115</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;num_dimensions() != 2, <span class="keyword">function</span>, file, line,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                            <span class="stringliteral">&quot;Only 2D Tensors are supported by this kernel (%zu passed)&quot;</span>,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;num_dimensions());</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00265">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="aa8bcb895249c9b0207df5d6512433aab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8bcb895249c9b0207df5d6512433aab">&#9670;&nbsp;</a></span>error_on_tensors_not_even()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_tensors_not_even </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed tensor objects are not even. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format to check if odd shape is allowed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor1</td><td>The first object to be compared for odd shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed objects.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00369">369</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor1 == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, std::forward&lt;Ts&gt;(tensors)...));</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> ITensor *, 1 + <span class="keyword">sizeof</span>...(Ts)&gt; tensors_info_array{{tensor1, std::forward&lt;Ts&gt;(tensors)...}};</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        std::any_of(tensors_info_array.cbegin(), tensors_info_array.cend(),</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    [&amp;](<span class="keyword">const</span> ITensor *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        const TensorShape correct_shape = adjust_odd_shape(tensor-&gt;info()-&gt;tensor_shape(), format);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        return detail::have_different_dimensions(tensor-&gt;info()-&gt;tensor_shape(), correct_shape, 2);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    }),</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensor shape has odd dimensions&quot;</span>);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a5865def3a35885dda73dd5f4d555d11c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5865def3a35885dda73dd5f4d555d11c">&#9670;&nbsp;</a></span>error_on_tensors_not_subsampled()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_tensors_not_subsampled </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed tensor objects are not sub-sampled. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format to check if sub-sampling allowed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>The tensor shape to calculate sub-sampling from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor1</td><td>The first object to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>(Optional) Further allowed objects.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00436">436</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(tensor1 == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a>(<span class="keyword">function</span>, file, line, std::forward&lt;Ts&gt;(tensors)...));</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> TensorShape                                    sub2_shape = <a class="code" href="namespacearm__compute.xhtml#a9d714e1b7d9d7818309138b7d830ebcb">calculate_subsampled_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">const</span> std::array&lt;<span class="keyword">const</span> ITensor *, 1 + <span class="keyword">sizeof</span>...(Ts)&gt; tensors_info_array{{tensor1, std::forward&lt;Ts&gt;(tensors)...}};</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        std::any_of(tensors_info_array.cbegin(), tensors_info_array.cend(),</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    [&amp;](<span class="keyword">const</span> ITensor *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    { return detail::have_different_dimensions(tensor-&gt;info()-&gt;tensor_shape(), sub2_shape, 2); }),</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;Tensor shape has mismatch dimensions for sub-sampling&quot;</span>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00400">calculate_subsampled_shape()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">error_on_nullptr()</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="acd11fc94aa2828fee0715de0297eb306"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd11fc94aa2828fee0715de0297eb306">&#9670;&nbsp;</a></span>error_on_unconfigured_kernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_unconfigured_kernel </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the kernel is not configured. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(kernel == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(!kernel-&gt;is_window_configured(), <span class="keyword">function</span>, file, line,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                        <span class="stringliteral">&quot;This kernel hasn&#39;t been configured.&quot;</span>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00050">IKernel::is_window_configured()</a>.</p>

</div>
</div>
<a id="a94bc3f0306f4faa4b7fbced4bd72dcc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94bc3f0306f4faa4b7fbced4bd72dcc9">&#9670;&nbsp;</a></span>error_on_unsupported_cpu_bf16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::error_on_unsupported_cpu_bf16 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor is BFLOAT16 and BFLOAT16 support is not compiled in. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00107">107</a> of file <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#a5bdbea98a86ef8fc1e2d0126c56b9809">arm_compute::error_on_unsupported_cpu_bf16</a>(<span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info()));</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00066">error_on_unsupported_cpu_bf16()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a5bdbea98a86ef8fc1e2d0126c56b9809"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bdbea98a86ef8fc1e2d0126c56b9809">&#9670;&nbsp;</a></span>error_on_unsupported_cpu_bf16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::error_on_unsupported_cpu_bf16 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor info is BFLOAT16 and BFLOAT16 support is not compiled in. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00066">66</a> of file <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">bool</span> bf16_kernels_enabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_ENABLE_BF16)</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    bf16_kernels_enabled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_ENABLE_BF16) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_type() == DataType::BFLOAT16) &amp;&amp; (!<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">CPUInfo::get</a>().<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#ae3a44e5d711e5707a9d974d085bcccdd">has_bf16</a>() || !bf16_kernels_enabled),</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">function</span>, file, line, <span class="stringliteral">&quot;This CPU architecture does not support BFloat16 data type, you need v8.6 or above&quot;</span>);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00253">TensorInfo::data_type()</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00041">CPUInfo::get()</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00064">CPUInfo::has_bf16()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00107">error_on_unsupported_cpu_bf16()</a>.</p>

</div>
</div>
<a id="ad9be320f14c43ee2b2112d4c666a911d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9be320f14c43ee2b2112d4c666a911d">&#9670;&nbsp;</a></span>error_on_unsupported_cpu_fp16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::error_on_unsupported_cpu_fp16 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor is FP16 and FP16 support is not compiled in. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00090">90</a> of file <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(::<a class="code" href="namespacearm__compute.xhtml#a099c79a1240bbbd604928852fd806d05">arm_compute::error_on_unsupported_cpu_fp16</a>(<span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info()));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00042">error_on_unsupported_cpu_fp16()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a099c79a1240bbbd604928852fd806d05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a099c79a1240bbbd604928852fd806d05">&#9670;&nbsp;</a></span>error_on_unsupported_cpu_fp16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::error_on_unsupported_cpu_fp16 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor info is FP16 and FP16 support is not compiled in. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00042">42</a> of file <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">bool</span> fp16_kernels_enabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_ENABLE_FP16) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    fp16_kernels_enabled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_ENABLE_FP16) &amp;&amp; defined(ENABLE_FP16_KERNELS) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>(</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_type() == DataType::F16) &amp;&amp; (!<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">CPUInfo::get</a>().<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a0647761f309e3b3edb5a5501b3ff38d2">has_fp16</a>() || !fp16_kernels_enabled), <span class="keyword">function</span>,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        file, line, <span class="stringliteral">&quot;This CPU architecture does not support F16 data type, you need v8.2 or above&quot;</span>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00253">TensorInfo::data_type()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00041">CPUInfo::get()</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00059">CPUInfo::has_fp16()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00090">error_on_unsupported_cpu_fp16()</a>.</p>

</div>
</div>
<a id="aea2b331c31943c1f726c9f552348c89c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea2b331c31943c1f726c9f552348c89c">&#9670;&nbsp;</a></span>error_on_unsupported_fp16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_unsupported_fp16 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_fp16_supported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor is FP16 and FP16 extension is not supported by the device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_fp16_supported</td><td>Is fp16 supported by the device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00985">985</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;{</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        ::<a class="code" href="namespacearm__compute.xhtml#a76433394f276fbc92390850a15bd2cae">arm_compute::error_on_unsupported_fp16</a>(<span class="keyword">function</span>, file, line, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), is_fp16_supported));</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00966">error_on_unsupported_fp16()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a76433394f276fbc92390850a15bd2cae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76433394f276fbc92390850a15bd2cae">&#9670;&nbsp;</a></span>error_on_unsupported_fp16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_unsupported_fp16 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_fp16_supported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if the data type of the passed tensor info is FP16 and FP16 extension is not supported by the device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info to validate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_fp16_supported</td><td>Is fp16 supported by the device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00966">966</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;{</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> == <span class="keyword">nullptr</span>, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <a class="code" href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>((<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;data_type() == DataType::F16 &amp;&amp; !is_fp16_supported), <span class="keyword">function</span>,</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                                        file, line, <span class="stringliteral">&quot;FP16 not supported by the device&quot;</span>);</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_error_8h_source.xhtml#l00285">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00253">TensorInfo::data_type()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00985">error_on_unsupported_fp16()</a>.</p>

</div>
</div>
<a id="a5c8dc3902d1a2de5b20aa249fb483eea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c8dc3902d1a2de5b20aa249fb483eea">&#9670;&nbsp;</a></span>error_on_unsupported_int64_base_atomics()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::error_on_unsupported_int64_base_atomics </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return an error if int64_base_atomics extension is not supported by the device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_validate_8h_source.xhtml#l00049">49</a> of file <a class="el" href="_c_l_validate_8h_source.xhtml">CLValidate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">if</span> (!CLKernelLibrary::get().int64_base_atomics_supported())</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#a1f6cdb912f3c70a81f27c62ff3f1c569">ARM_COMPUTE_CREATE_ERROR_LOC</a>(<a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7">arm_compute::ErrorCode::UNSUPPORTED_EXTENSION_USE</a>, <span class="keyword">function</span>, file, line,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                            <span class="stringliteral">&quot;Atomic functions are not supported&quot;</span>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00169">ARM_COMPUTE_CREATE_ERROR_LOC</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, and <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7">UNSUPPORTED_EXTENSION_USE</a>.</p>

</div>
</div>
<a id="a7d65985a30fc1229047b7db32caaab43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d65985a30fc1229047b7db32caaab43">&#9670;&nbsp;</a></span>error_on_window_dimensions_gte()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_window_dimensions_gte </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>max_dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the passed window has too many dimensions. </p>
<p>The window has too many dimensions if any of the dimension greater or equal to max_dim is different from 0.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to validate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_dim</td><td>Maximum number of dimensions allowed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = max_dim; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Coordinates::num_max_dimensions</a>; ++i)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>(</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            (win[i].start() != 0) || (win[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() != win[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>()), <span class="keyword">function</span>, file, line,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="stringliteral">&quot;Maximum number of dimensions expected %u but dimension %u is not empty&quot;</span>, max_dim, i);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00265">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

</div>
</div>
<a id="a4f63a617a4897663b386ba5e1f5cb675"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f63a617a4897663b386ba5e1f5cb675">&#9670;&nbsp;</a></span>error_on_window_not_collapsable_at_dimension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> error_on_window_not_collapsable_at_dimension </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an error if the window can't be collapsed at the given dimension. </p>
<p>The window cannot be collapsed if the given dimension not equal to the full window's dimension or not start from 0.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Function in which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Name of the file where the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line on which the error occurred. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">full</td><td>Full size window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to be collapsed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>Dimension need to be checked.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="_validate_8cpp_source.xhtml">Validate.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    full.validate();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    window.validate();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(window[dim].start() != 0, <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(window[dim].start() != full[dim].start(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>(full[dim].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() != window[dim].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), <span class="keyword">function</span>, file, line);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00307">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>.</p>

</div>
</div>
<a id="a6c0dcc38187027dcb89cd9724bc5a823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c0dcc38187027dcb89cd9724bc5a823">&#9670;&nbsp;</a></span>execute_window_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute_window_loop </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L &amp;&amp;&#160;</td>
          <td class="paramname"><em>lambda_function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>iterators</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Iterate through the passed window, automatically adjusting the iterators and calling the lambda_functino for each element. </p>
<p>It passes the x and y positions to the lambda_function for each iteration</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to iterate through. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lambda_function</td><td>The function of type void(function)( const <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> &amp; id ) to call at each iteration. Where id represents the absolute coordinates of the item to process. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">iterators</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> iterators which will be updated by this function before calling lambda_function. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_helpers_8inl_source.xhtml#l00074">74</a> of file <a class="el" href="_helpers_8inl_source.xhtml">Helpers.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>.validate();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; Coordinates::num_max_dimensions; ++i)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() == 0);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    Coordinates id;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    ForEachDimension&lt;Coordinates::num_max_dimensions&gt;::unroll(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, <span class="keywordtype">id</span>, std::forward&lt;L&gt;(lambda_function),</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                                              std::forward&lt;Ts&gt;(iterators)...);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00039">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">arm_compute::cpu::add_sub_q8_neon_fixedpoint()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00039">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00036">arm_compute::cpu::batch_normalization_nchw()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8h_source.xhtml#l00033">arm_compute::cpu::bounding_box_transform()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00344">colorconvert_rgb_to_rgbx()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00377">colorconvert_rgb_to_u8()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01091">colorconvert_rgb_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00407">colorconvert_rgbx_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00440">colorconvert_yuyv_to_rgb()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00827">arm_compute::utils::compare_tensor()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::compute_all_anchors()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::compute_all_anchors_qasymm16()</a>, <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00036">ITensor::copy_from()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">arm_compute::cpu::depthwise_loop_multiplier1_fp()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00038">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00152">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00086">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00075">arm_compute::cpu::elementwise_sve_op()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00174">IImageLoader::fill_image()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l01016">AssetsLibrary::fill_layer_data()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00770">arm_compute::utils::fill_random_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00731">arm_compute::utils::fill_tensor_value()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00752">arm_compute::utils::fill_tensor_vector()</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">arm_compute::cpu::fp_neon_activation_impl()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00154">arm_compute::cpu::fused_batch_normalization_conv()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00266">arm_compute::cpu::fused_batch_normalization_dwc_nchw()</a>, <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::fused_batch_normalization_dwc_nhwc()</a>, <a class="el" href="reference_2_gather_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::gather()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00083">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00681">arm_compute::utils::load_trained_data()</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::matrix_addition_f32()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00232">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="maxunpool_2generic_2neon_2impl_8h_source.xhtml#l00035">arm_compute::cpu::max_unpooling()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::mean_stddev_normalization()</a>, <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">arm_compute::cpu::mul_F32_F32_F32()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00052">arm_compute::cpu::neon_qasymm8_meanstddevnorm()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::neon_range_function()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8h_source.xhtml#l00065">arm_compute::cpu::neon_softmax_float()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::neon_softmax_quantized()</a>, <a class="el" href="norm__layer_2generic_2neon_2impl_8h_source.xhtml#l00058">normalize_float()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">arm_compute::cpu::poolingMxN_fp32_neon_nhwc_kernel_indices()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00086">NEBitwiseNotKernel::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00096">NEBitwiseAndKernel::run()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00093">NEBitwiseOrKernel::run()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00092">NEBitwiseXorKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_f_f_t_scale_kernel_8cpp_source.xhtml#l00118">NEFFTScaleKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00105">NEReorgLayerKernel::run()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01139">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00122">CpuCopyKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00106">CpuFloorKernel::run_op()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00090">CpuConvertFullyConnectedWeightsKernel::run_op()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00088">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00271">CpuCastKernel::run_op()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00106">CpuWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00078">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00145">NEStridedSliceKernel::run_op()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00096">run_reverse()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00626">arm_compute::utils::save_to_npy()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00543">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00041">arm_compute::cpu::select_op()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>, <a class="el" href="reference_2_softmax_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::softmax_layer_generic()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00080">arm_compute::test::validation::reference::strided_slice()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="sub_2neon_2impl_8h_source.xhtml#l00042">arm_compute::cpu::sub_same_neon()</a>, <a class="el" href="sve2_2q8_8cpp_source.xhtml#l00033">arm_compute::cpu::sve2_q8_elementwise_unary()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">arm_compute::cpu::sve2_qsymm16_activation()</a>, <a class="el" href="softmax_2generic_2sve2_2impl_8cpp_source.xhtml#l00039">arm_compute::cpu::sve2_softmax_logits_1d_quantized()</a>, <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">arm_compute::cpu::sve_fp32_activation()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00037">arm_compute::cpu::sve_logits_1d_max()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00078">arm_compute::cpu::sve_softmax_logits_1d_float()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00143">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="aad1276bf6fb54ae42d709743edbe5a21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad1276bf6fb54ae42d709743edbe5a21">&#9670;&nbsp;</a></span>export_to_cl_image()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool export_to_cl_image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00449">449</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;{</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[0] % 4 != 0)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    }</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// If not floating point</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;data_type()))</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="comment">// Check if the cl_khr_image2d_from_buffer extension is supported on the target platform</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">image2d_from_buffer_supported</a>(CLKernelLibrary::get().get_device()))</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    {</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// Check cl image pitch alignment</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">get_cl_image_pitch_alignment</a>(CLKernelLibrary::get().get_device()) == 0)</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160; </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_w     = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[0] / 4;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_h     = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape().total_size() / <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[0];</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_w = CLKernelLibrary::get().get_device().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_WIDTH&gt;();</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_h = CLKernelLibrary::get().get_device().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_HEIGHT&gt;();</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160; </div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">if</span> (image_w &gt; max_image_w || image_h &gt; max_image_h)</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160; </div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00382">get_cl_image_pitch_alignment()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00073">CLKernelLibrary::get_device()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00377">image2d_from_buffer_supported()</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00304">is_data_type_float()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00042">arm_compute::opencl::kernels::gemm::configure_lhs_rhs_info()</a>, <a class="el" href="_cl_d_w_c_native_heuristics_helpers_8cpp_source.xhtml#l00032">arm_compute::cl_dwc::use_cl_image_for_weights()</a>, and <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml#l00111">ClComponentDepthwiseConv2d::validate()</a>.</p>

</div>
</div>
<a id="a583648c2034fae18cf48b7177586da4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a583648c2034fae18cf48b7177586da4f">&#9670;&nbsp;</a></span>finalize_quantization() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8_t arm_compute::finalize_quantization </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>in_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_offset_after_shift_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>min_s8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>max_s8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_bounded_relu</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs final quantization step on single element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_value</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_offset_after_shift_s32</td><td>Result offset parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_s8</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_s8</td><td>Relu upper bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00366">366</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    int32x4_t in_s32 = vdupq_n_s32(in_value);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        in_value = vgetq_lane_s32(</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            vqrdmulhq_n_s32(vmulq_n_s32(in_s32, (1 &lt;&lt; (-result_shift))), result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        in_value = vgetq_lane_s32(vqrdmulhq_n_s32(in_s32, result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="comment">// Shift value by result_shift_s32</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        in_value = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_value, result_shift);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// Add the offset term</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    in_value += result_offset_after_shift_s32;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// Bound the result</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    int8_t out_s8 = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(std::max&lt;int32_t&gt;(-128, std::min&lt;int32_t&gt;(127, in_value)));</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        out_s8 = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(std::max(min_s8, std::min(max_s8, out_s8)));</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> out_s8;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="a9a9dd002faea6691d344f60563f8b499"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a9dd002faea6691d344f60563f8b499">&#9670;&nbsp;</a></span>finalize_quantization() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::finalize_quantization </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>in_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_offset_after_shift_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>min_u8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>max_u8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_bounded_relu</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs final quantization step on single element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_value</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_offset_after_shift_s32</td><td>Result offset parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_u8</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_u8</td><td>Relu upper bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00318">318</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    int32x4_t in_s32 = vdupq_n_s32(in_value);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        in_value = vgetq_lane_s32(</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            vqrdmulhq_n_s32(vmulq_n_s32(in_s32, (1 &lt;&lt; (-result_shift))), result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        in_value = vgetq_lane_s32(vqrdmulhq_n_s32(in_s32, result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="comment">// Shift value by result_shift_s32</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        in_value = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_value, result_shift);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// Add the offset term</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    in_value += result_offset_after_shift_s32;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Bound the result</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    uint8_t out_u8 = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(std::max&lt;int32_t&gt;(0, std::min&lt;int32_t&gt;(255, in_value)));</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        out_u8 = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(std::max(min_u8, std::min(max_u8, out_u8)));</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">return</span> out_u8;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="a85083e9ceeceacbf1afe9dca946c0d7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85083e9ceeceacbf1afe9dca946c0d7a">&#9670;&nbsp;</a></span>finalize_quantization() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x16_t arm_compute::finalize_quantization </td>
          <td>(</td>
          <td class="paramtype">int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>result_offset_after_shift_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8x16_t&#160;</td>
          <td class="paramname"><em>min_s8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8x16_t&#160;</td>
          <td class="paramname"><em>max_s8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_bounded_relu</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs final quantization step on 16 elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_s32</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_offset_after_shift_s32</td><td>Result offset parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_s8</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_s8</td><td>Relu upper bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00161">161</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        in_s32.val[0] = vmulq_n_s32(in_s32.val[0], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        in_s32.val[1] = vmulq_n_s32(in_s32.val[1], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        in_s32.val[2] = vmulq_n_s32(in_s32.val[2], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        in_s32.val[3] = vmulq_n_s32(in_s32.val[3], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        in_s32.val[0] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[0], result_shift);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        in_s32.val[1] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[1], result_shift);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        in_s32.val[2] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[2], result_shift);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        in_s32.val[3] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[3], result_shift);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Add the offset terms</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 = {{vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                 vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))}};</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Convert S16 to S8</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    int8x16_t out_s8 = vcombine_s8(vqmovn_s16(in_s16.val[0]), vqmovn_s16(in_s16.val[1]));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        out_s8 = vmaxq_s8(out_s8, min_s8);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        out_s8 = vminq_s8(out_s8, max_s8);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> out_s8;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="a3479355ca4b6fb389a3aae4da266bd0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3479355ca4b6fb389a3aae4da266bd0e">&#9670;&nbsp;</a></span>finalize_quantization() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x16_t arm_compute::finalize_quantization </td>
          <td>(</td>
          <td class="paramtype">int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>result_offset_after_shift_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8x16_t&#160;</td>
          <td class="paramname"><em>min_u8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8x16_t&#160;</td>
          <td class="paramname"><em>max_u8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_bounded_relu</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs final quantization step on 16 elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_s32</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_offset_after_shift_s32</td><td>Result offset parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_u8</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_u8</td><td>Relu upper bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00084">84</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">static</span> int32x4_t zero_s32 = vdupq_n_s32(0);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        in_s32.val[0] = vmulq_n_s32(in_s32.val[0], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        in_s32.val[1] = vmulq_n_s32(in_s32.val[1], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        in_s32.val[2] = vmulq_n_s32(in_s32.val[2], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        in_s32.val[3] = vmulq_n_s32(in_s32.val[3], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        in_s32.val[0] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[0], result_shift);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        in_s32.val[1] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[1], result_shift);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        in_s32.val[2] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[2], result_shift);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        in_s32.val[3] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[3], result_shift);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Add the offset terms</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Saturate negative values</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    in_s32.val[0] = vmaxq_s32(in_s32.val[0], zero_s32);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    in_s32.val[1] = vmaxq_s32(in_s32.val[1], zero_s32);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    in_s32.val[2] = vmaxq_s32(in_s32.val[2], zero_s32);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    in_s32.val[3] = vmaxq_s32(in_s32.val[3], zero_s32);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 = {{vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                 vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))}};</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Convert S16 to U8</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    uint8x16_t out_u8 = vcombine_u8(vqmovun_s16(in_s16.val[0]), vqmovun_s16(in_s16.val[1]));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        out_u8 = vmaxq_u8(out_u8, min_u8);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        out_u8 = vminq_u8(out_u8, max_u8);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> out_u8;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

<p class="reference">Referenced by <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>.</p>

</div>
</div>
<a id="a395a304366dd27cfa29f2aaf11eeb82a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a395a304366dd27cfa29f2aaf11eeb82a">&#9670;&nbsp;</a></span>finalize_quantization_int16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int16_t arm_compute::finalize_quantization_int16 </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>in_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>min_s16</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>max_s16</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs final quantization step on single signed 16-bit element. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_value</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_s16</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_s16</td><td>Relu upper bound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00100">100</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> int64_t in_64 = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(in_value) * (1 &lt;&lt; (-result_shift)) *</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                              <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        in_value = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((in_64 + (1 &lt;&lt; 30)) &gt;&gt; 31);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">const</span> int64_t in_64 = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(in_value) * <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// Shift value by result_shift_s32</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        in_value = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((in_64 + (1 &lt;&lt; 30)) &gt;&gt; 31), result_shift);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Bound the result</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    int16_t out_s16 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(std::max&lt;int32_t&gt;(-32768, std::min&lt;int32_t&gt;(32767, in_value)));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        out_s16 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(std::max(min_s16, std::min(max_s16, out_s16)));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> out_s16;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="a0a7219ba563658bc8bbcde89f0b31553"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a7219ba563658bc8bbcde89f0b31553">&#9670;&nbsp;</a></span>finalize_quantization_int16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int16x8_t arm_compute::finalize_quantization_int16 </td>
          <td>(</td>
          <td class="paramtype">int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>in_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16x8_t&#160;</td>
          <td class="paramname"><em>min_s16</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16x8_t&#160;</td>
          <td class="paramname"><em>max_s16</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs final quantization step on 8 signed 16-bit elements. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_s32</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_s16</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_s16</td><td>Relu upper bound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00054">54</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        in_s32.val[0] = vmulq_n_s32(in_s32.val[0], (1 &lt;&lt; -result_shift));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        in_s32.val[1] = vmulq_n_s32(in_s32.val[1], (1 &lt;&lt; -result_shift));</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        in_s32.val[0] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[0], result_shift);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        in_s32.val[1] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(in_s32.val[1], result_shift);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    int16x8_t out_s16 = vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1]));</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        out_s16 = vmaxq_s16(out_s16, min_s16);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        out_s16 = vminq_s16(out_s16, max_s16);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> out_s16;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="ac45cafa8ee6ec21f435a6a9af190e40a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac45cafa8ee6ec21f435a6a9af190e40a">&#9670;&nbsp;</a></span>finalize_quantization_symm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x16_t arm_compute::finalize_quantization_symm </td>
          <td>(</td>
          <td class="paramtype">int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>in_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>result_fixedpoint_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>result_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>result_offset_after_shift_s32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>min_s8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>max_s8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_bounded_relu</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs final quantization step on 16 elements for symmetric quantization. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_s32</td><td>Input to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_fixedpoint_multiplier</td><td>Result multiplier parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_shift</td><td>Result shift parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result_offset_after_shift_s32</td><td>Result offset parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min_s8</td><td>Relu lower bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_s8</td><td>Relu upper bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_bounded_relu</td><td>Specified if a fused bounded relu should be applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00230">230</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keyword">static</span> int32x4_t one_s32 = vdupq_n_s32(1);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    int32x4x4_t res_shift_gt0 = {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        vqrdmulhq_s32(in_s32.val[0], result_fixedpoint_multiplier.val[0]),</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        vqrdmulhq_s32(in_s32.val[1], result_fixedpoint_multiplier.val[1]),</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        vqrdmulhq_s32(in_s32.val[2], result_fixedpoint_multiplier.val[2]),</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        vqrdmulhq_s32(in_s32.val[3], result_fixedpoint_multiplier.val[3]),</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    };</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    res_shift_gt0.val[0] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(res_shift_gt0.val[0], result_shift.val[0]);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    res_shift_gt0.val[1] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(res_shift_gt0.val[1], result_shift.val[1]);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    res_shift_gt0.val[2] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(res_shift_gt0.val[2], result_shift.val[2]);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    res_shift_gt0.val[3] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(res_shift_gt0.val[3], result_shift.val[3]);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    int32x4x4_t res_shift_lt0 = {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        vmulq_s32(in_s32.val[0], vshlq_s32(one_s32, vnegq_s32(result_shift.val[0]))),</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        vmulq_s32(in_s32.val[1], vshlq_s32(one_s32, vnegq_s32(result_shift.val[1]))),</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        vmulq_s32(in_s32.val[2], vshlq_s32(one_s32, vnegq_s32(result_shift.val[2]))),</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        vmulq_s32(in_s32.val[3], vshlq_s32(one_s32, vnegq_s32(result_shift.val[3]))),</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    };</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    res_shift_lt0.val[0] = vqrdmulhq_s32(res_shift_lt0.val[0], result_fixedpoint_multiplier.val[0]);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    res_shift_lt0.val[1] = vqrdmulhq_s32(res_shift_lt0.val[1], result_fixedpoint_multiplier.val[1]);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    res_shift_lt0.val[2] = vqrdmulhq_s32(res_shift_lt0.val[2], result_fixedpoint_multiplier.val[2]);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    res_shift_lt0.val[3] = vqrdmulhq_s32(res_shift_lt0.val[3], result_fixedpoint_multiplier.val[3]);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="comment">// Select result depending on shift value</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> uint32x4x4_t mask_lt0 = {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        vcltzq_s32(result_shift.val[0]),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        vcltzq_s32(result_shift.val[1]),</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        vcltzq_s32(result_shift.val[2]),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        vcltzq_s32(result_shift.val[3]),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        vcltq_s32(result_shift.val[0], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        vcltq_s32(result_shift.val[1], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        vcltq_s32(result_shift.val[2], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        vcltq_s32(result_shift.val[3], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    };</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    in_s32.val[0] = vbslq_s32(mask_lt0.val[0], res_shift_lt0.val[0], res_shift_gt0.val[0]);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    in_s32.val[1] = vbslq_s32(mask_lt0.val[1], res_shift_lt0.val[1], res_shift_gt0.val[1]);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    in_s32.val[2] = vbslq_s32(mask_lt0.val[2], res_shift_lt0.val[2], res_shift_gt0.val[2]);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    in_s32.val[3] = vbslq_s32(mask_lt0.val[3], res_shift_lt0.val[3], res_shift_gt0.val[3]);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Add the offset terms</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 = {{vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                 vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))}};</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Convert S16 to S8</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    int8x16_t out_s8 = vcombine_s8(vqmovn_s16(in_s16.val[0]), vqmovn_s16(in_s16.val[1]));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        out_s8 = vmaxq_s8(out_s8, min_s8);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        out_s8 = vminq_s8(out_s8, max_s8);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> out_s8;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="a59cc7dde3c479fa90260c12c992f2cae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59cc7dde3c479fa90260c12c992f2cae">&#9670;&nbsp;</a></span>float_to_string_with_full_precision()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string float_to_string_with_full_precision </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a string with the float in full precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>Floating point value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String with the floating point value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_utils_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_string_utils_8cpp_source.xhtml">StringUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.precision(std::numeric_limits&lt;float&gt;::max_digits10);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; val;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (val != <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(val))</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; <span class="stringliteral">&quot;f&quot;</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00201">ClTemplateLogits1DMaxShiftExpSum::get_tag_lut()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00195">ClTemplateResize::get_tag_lut()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00373">ClTemplatePool2d::get_tag_lut()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00112">ClTemplateActivation::get_tag_lut()</a>, and <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00165">string_from_pixel_value()</a>.</p>

</div>
</div>
<a id="a23062881efd3855d61bae58f330c97db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23062881efd3855d61bae58f330c97db">&#9670;&nbsp;</a></span>floor_to_multiple()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto arm_compute::floor_to_multiple </td>
          <td>(</td>
          <td class="paramtype">S&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>divisor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype((value / divisor) * divisor)
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computes the largest number smaller or equal to value that is a multiple of divisor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Upper bound value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">divisor</td><td>Value to compute multiple of.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the result. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00064">64</a> of file <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml">Math.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(value &lt; 0 || divisor &lt;= 0);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> (value / divisor) * divisor;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

</div>
</div>
<a id="a2ad3c9492d4158b574a89ab798d74e16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ad3c9492d4158b574a89ab798d74e16">&#9670;&nbsp;</a></span>fp16_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fp16_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether the cl_khr_fp16 extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00237">237</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_khr_fp16&quot;</span>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

</div>
</div>
<a id="a2355c2bf5d1950088937416baea24fe6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2355c2bf5d1950088937416baea24fe6">&#9670;&nbsp;</a></span>get_arch_from_target()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> get_arch_from_target </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the GPU arch. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>GPU target</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the GPU target which shows the arch </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00247">247</a> of file <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml">GPUTarget.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> (target &amp; GPUTarget::GPU_ARCH_MASK);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">GPU_ARCH_MASK</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00330">ClFullyConnected::configure()</a>, <a class="el" href="_cl_indirect_conv_kernel_config_8h_source.xhtml#l00046">ClIndirectConvKernelConfigurationFactory::create()</a>, <a class="el" href="_cl_mat_mul_native_kernel_config_8h_source.xhtml#l00046">ClMatMulNativeKernelConfigurationFactory::create()</a>, <a class="el" href="_cl_d_w_c_native_kernel_config_8h_source.xhtml#l00047">ClDWCNativeKernelConfigurationFactory::create()</a>, <a class="el" href="_cl_direct_conv_kernel_config_8h_source.xhtml#l00047">ClDirectConvKernelConfigurationFactory::create()</a>, <a class="el" href="_c_l_g_e_m_m_kernel_selection_8h_source.xhtml#l00047">CLGEMMKernelSelectionFactory::create()</a>, <a class="el" href="_cl_mat_mul_native_kernel_variant_8h_source.xhtml#l00047">ClMatMulNativeKernelVariantFactory::create()</a>, <a class="el" href="_cl_gemm_reshaped_only_rhs_kernel_config_8h_source.xhtml#l00051">ClGemmReshapedOnlyRhsKernelConfigurationFactory::create()</a>, <a class="el" href="_cl_gemm_reshaped_kernel_config_8h_source.xhtml#l00051">ClGemmReshapedKernelConfigurationFactory::create()</a>, <a class="el" href="_cl_gemm_native_kernel_config_8h_source.xhtml#l00052">ClGemmNativeKernelConfigurationFactory::create()</a>, <a class="el" href="_gpu_depthwise_conv2d_8cpp_source.xhtml#l00192">GpuDepthwiseConv2d::create_op()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00190">ClConv2d::get_convolution_method()</a>, and <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00464">ClFullyConnected::validate()</a>.</p>

</div>
</div>
<a id="ade3539162ad0f550f626939e8b67ccfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade3539162ad0f550f626939e8b67ccfd">&#9670;&nbsp;</a></span>get_cl_dot8_acc_type_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_cl_dot8_acc_type_from_data_type </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a tensor data type to the appropriate OpenCL dot8 accumulator type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> to be translated to OpenCL dot8 accumulator type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string specifying the OpenCL dot8 accumulator type to be used. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uint&quot;</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;int&quot;</span>;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type.&quot;</span>);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>.</p>

</div>
</div>
<a id="a97428e76ac2940d45fc9772854b7fd8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97428e76ac2940d45fc9772854b7fd8c">&#9670;&nbsp;</a></span>get_cl_image_pitch_alignment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_cl_image_pitch_alignment </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the cl_image pitch alignment in pixels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the cl_image pitch alignment in pixels. If an error occurs, the function will return 0 </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00382">382</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    cl_uint pixel_aligment = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    cl_int err = <a class="code" href="_open_c_l_8cpp.xhtml#a677990334379f5f91619bfc43af63c4a">clGetDeviceInfo</a>(device(), CL_DEVICE_IMAGE_PITCH_ALIGNMENT, <span class="keyword">sizeof</span>(cl_uint), &amp;pixel_aligment, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">if</span> (err == CL_SUCCESS)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">return</span> pixel_aligment;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    {</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8cpp_source.xhtml#l00904">clGetDeviceInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00062">create_image2d_from_buffer()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00449">export_to_cl_image()</a>, <a class="el" href="_gemm_tuner_helpers_8h_source.xhtml#l00034">examples::gemm_tuner_helpers::update_padding_for_cl_image()</a>, <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00100">arm_compute::opencl::kernels::gemm::update_padding_for_cl_image()</a>, and <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00121">arm_compute::opencl::kernels::gemm::validate_image2d_support_on_rhs()</a>.</p>

</div>
</div>
<a id="a8a5bd4c63b9012c70e5defdc3b344606"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a5bd4c63b9012c70e5defdc3b344606">&#9670;&nbsp;</a></span>get_cl_non_uniform_work_group_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool get_cl_non_uniform_work_group_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether non-uniform work group is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the feature is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00398">398</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;{</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    cl_bool supported = CL_FALSE;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    cl_int err =</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <a class="code" href="_open_c_l_8cpp.xhtml#a677990334379f5f91619bfc43af63c4a">clGetDeviceInfo</a>(device(), CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT, <span class="keyword">sizeof</span>(cl_bool), &amp;supported, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> (err == CL_SUCCESS &amp;&amp; supported == CL_TRUE);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8cpp_source.xhtml#l00904">clGetDeviceInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_device_8h_source.xhtml#l00152">CLDevice::is_non_uniform_workgroup_supported()</a>.</p>

</div>
</div>
<a id="ad090aabdbbec665e3704af55ba7bd563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad090aabdbbec665e3704af55ba7bd563">&#9670;&nbsp;</a></span>get_cl_promoted_type_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_cl_promoted_type_from_data_type </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a tensor data type to the appropriate OpenCL promoted type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> to be used to get the promoted OpenCL type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string specifying the OpenCL type to be used. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ushort&quot;</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;short&quot;</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uint&quot;</span>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;int&quot;</span>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ulong&quot;</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;long&quot;</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;float&quot;</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Cannot get promoted OpenCL type for the input data type.&quot;</span>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

</div>
</div>
<a id="a70d221fbff7bff840ef4d3fdc701cf53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70d221fbff7bff840ef4d3fdc701cf53">&#9670;&nbsp;</a></span>get_cl_select_type_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_cl_select_type_from_data_type </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a tensor data type to the appropriate OpenCL select type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> to be translated to OpenCL select type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string specifying the OpenCL select type to be used. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;char&quot;</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ushort&quot;</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;short&quot;</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uint&quot;</span>;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;int&quot;</span>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ulong&quot;</span>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;long&quot;</span>;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported input data type.&quot;</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a18e791fbf74924fee2ddf8da7790bacf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18e791fbf74924fee2ddf8da7790bacf">&#9670;&nbsp;</a></span>get_cl_signed_type_from_element_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_cl_signed_type_from_element_size </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>element_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates the element size to an signed integer data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">element_size</td><td>Size in bytes of an element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string specifying the OpenCL type to be used. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00125">125</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">switch</span> (element_size)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">case</span> 1:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;char&quot;</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> 2:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;short&quot;</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">case</span> 4:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;int&quot;</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">case</span> 8:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;long&quot;</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>.</p>

</div>
</div>
<a id="a545eeda2eaa3f5a54345ce8169e21184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a545eeda2eaa3f5a54345ce8169e21184">&#9670;&nbsp;</a></span>get_cl_type_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_cl_type_from_data_type </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a tensor data type to the appropriate OpenCL type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> to be translated to OpenCL type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string specifying the OpenCL type to be used. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uchar&quot;</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;char&quot;</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ushort&quot;</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;short&quot;</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uint&quot;</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;int&quot;</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ulong&quot;</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;long&quot;</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;half&quot;</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;float&quot;</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported input data type.&quot;</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00104">ClCol2ImKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00093">CLStackLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00140">ClTemplateCast::get_tag_lut()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00108">ClTemplateLogits1DNorm::get_tag_lut()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00105">ClTemplateReshape::get_tag_lut()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00201">ClTemplateLogits1DMaxShiftExpSum::get_tag_lut()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00224">ClTemplateDepthwiseConv2d::get_tag_lut()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00244">ClTemplateDirectConv2d::get_tag_lut()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00195">ClTemplateResize::get_tag_lut()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00112">ClTemplateActivation::get_tag_lut()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00373">ClTemplatePool2d::get_tag_lut()</a>, and <a class="el" href="_gpu_kernel_variable_table_8cpp_source.xhtml#l00109">TagVal::TagVal()</a>.</p>

</div>
</div>
<a id="a237044b76803b058edd1b23d599bcc6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a237044b76803b058edd1b23d599bcc6d">&#9670;&nbsp;</a></span>get_cl_unsigned_type_from_element_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_cl_unsigned_type_from_element_size </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>element_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates the element size to an unsigned integer data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">element_size</td><td>Size in bytes of an element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string specifying the OpenCL type to be used. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">switch</span> (element_size)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">case</span> 1:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uchar&quot;</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> 2:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ushort&quot;</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">case</span> 4:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;uint&quot;</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">case</span> 8:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;ulong&quot;</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00071">ClReshapeKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00118">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00078">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00125">ClGemmReshapeRhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, and <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00137">CLBatchToSpaceLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a0e62ce01a7a7af6c3d059bb8534cad45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e62ce01a7a7af6c3d059bb8534cad45">&#9670;&nbsp;</a></span>get_cl_version()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">CLVersion</a> get_cl_version </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the highest OpenCL version supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the highest OpenCL version supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00258">258</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    std::string version_str = device.getInfo&lt;CL_DEVICE_VERSION&gt;();</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">if</span> (version_str.find(<span class="stringliteral">&quot;OpenCL 3&quot;</span>) != std::string::npos)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">return</span> CLVersion::CL30;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (version_str.find(<span class="stringliteral">&quot;OpenCL 2&quot;</span>) != std::string::npos)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">return</span> CLVersion::CL20;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (version_str.find(<span class="stringliteral">&quot;OpenCL 1.2&quot;</span>) != std::string::npos)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">return</span> CLVersion::CL12;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (version_str.find(<span class="stringliteral">&quot;OpenCL 1.1&quot;</span>) != std::string::npos)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">return</span> CLVersion::CL11;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (version_str.find(<span class="stringliteral">&quot;OpenCL 1.0&quot;</span>) != std::string::npos)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">return</span> CLVersion::CL10;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">CLVersion::UNKNOWN</a>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea06e5b2cbe2f75bb5eec32613499cf22a">CL10</a>, <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea80e95ed62d0c47e4d8c0696d467d4db3">CL11</a>, <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ead7beedb1bf6bfae8111da26424266675">CL12</a>, <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">CL20</a>, <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">CL30</a>, and <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00080">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_device_8h_source.xhtml#l00055">CLDevice::CLDevice()</a>.</p>

</div>
</div>
<a id="adfef6f05588c3d40195488620ab54b97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfef6f05588c3d40195488620ab54b97">&#9670;&nbsp;</a></span>get_data_layout_dimension_index()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_data_layout_dimension_index </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout_dimension</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the index of the given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>The data layout. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout_dimension</td><td>The dimension which this index is requested for.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The int conversion of the requested data layout index. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_helpers_8inl_source.xhtml#l00201">201</a> of file <a class="el" href="_helpers_8inl_source.xhtml">Helpers.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>,</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                             <span class="stringliteral">&quot;Cannot retrieve the dimension index for an unknown layout!&quot;</span>);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;dims = <a class="code" href="namespacearm__compute.xhtml#a79ff77f9b4506ad55c680f8849317b9f">get_layout_map</a>().at(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;it   = std::find(dims.cbegin(), dims.cend(), data_layout_dimension);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(it == dims.cend(), <span class="stringliteral">&quot;Invalid dimension for the given layout.&quot;</span>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">return</span> it - dims.cbegin();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00107">get_layout_map()</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00218">calculate_same_pad()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">calculate_valid_region_scale()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00388">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00552">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00479">arm_compute::misc::shape_calculator::compute_deconvolution_padding()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00512">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00784">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01243">arm_compute::misc::shape_calculator::compute_depth_to_space_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01662">arm_compute::misc::shape_calculator::compute_pool3d_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00881">arm_compute::misc::shape_calculator::compute_pool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01352">arm_compute::misc::shape_calculator::compute_prior_box_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00133">arm_compute::misc::shape_calculator::compute_reorg_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00949">arm_compute::misc::shape_calculator::compute_roi_align_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01302">arm_compute::misc::shape_calculator::compute_space_to_batch_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01329">arm_compute::misc::shape_calculator::compute_space_to_depth_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00914">arm_compute::misc::shape_calculator::compute_unpool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01433">arm_compute::misc::shape_calculator::compute_upsample_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00095">arm_compute::misc::shape_calculator::compute_vector_to_tensor_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00688">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00713">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00748">arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00097">CpuScale::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00301">CpuPool2dKernel::configure()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">NEDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00108">CpuDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00116">CpuPool3dKernel::configure()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00052">CpuPool2d::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00089">NERNNLayer::configure()</a>, <a class="el" href="_n_e_scale_8cpp_source.xhtml#l00050">NEScale::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00103">CLRNNLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00079">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00106">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00183">ClWinogradConv2d::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00072">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00195">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00086">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00262">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00058">ROIAlignLayerNode::configure_output()</a>, <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00129">SubTensorInfo::dimension()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00220">TensorInfo::dimension()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00309">ClTemplateDirectConv2d::get_build_options()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00068">ClTemplateDirectConv2d::get_component_code()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00339">ClTemplateDirectConv2d::get_config_id()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00190">ClConv2d::get_convolution_method()</a>, <a class="el" href="_cpu_conv2d_8cpp_source.xhtml#l00145">CpuConv2d::get_convolution_method()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00157">CLDeconvolutionLayer::get_deconvolution_method()</a>, <a class="el" href="_normalization_helpers_8h_source.xhtml#l00039">get_normalization_dimension_index()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00602">CpuGemmConv2d::has_opt_impl()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00213">CpuScale::prepare()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">arm_compute::cpu::roi_align()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00105">NEReorgLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00797">CpuGemmConv2d::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_d_w_c_native_heuristics_helpers_8cpp_source.xhtml#l00032">arm_compute::cl_dwc::use_cl_image_for_weights()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00160">CpuScale::validate()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00351">CpuPool2dKernel::validate()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00044">CLDeconvolutionLayerUpsampleKernel::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00054">NERNNLayer::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00055">CLRNNLayer::validate()</a>, <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00072">ClComponentDirectConv2d::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00276">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00173">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00223">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml#l00111">ClComponentDepthwiseConv2d::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00294">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00130">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00233">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::validate_arguments()</a>, <a class="el" href="reference_2_winograd_8cpp_source.xhtml#l00440">arm_compute::test::validation::reference::winograd_output_transform()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>.</p>

</div>
</div>
<a id="ab631f49c436b1f18beff3248c4b1a19e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab631f49c436b1f18beff3248c4b1a19e">&#9670;&nbsp;</a></span>get_data_size_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_data_size_from_data_type </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of a data type in number of bits. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of bits in the data type specified. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00194">194</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;8&quot;</span>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;16&quot;</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;32&quot;</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;64&quot;</span>;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported input data type.&quot;</span>);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;0&quot;</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, and <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a111c697d8e429d9ad91fdb097ebb7f42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a111c697d8e429d9ad91fdb097ebb7f42">&#9670;&nbsp;</a></span>get_default_lws_for_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::NDRange get_default_lws_for_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a>&#160;</td>
          <td class="paramname"><em>kernel_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::NDRange&#160;</td>
          <td class="paramname"><em>gws</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_default_l_w_s_heuristics_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="_default_l_w_s_heuristics_8cpp_source.xhtml">DefaultLWSHeuristics.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> gws_x = gws[0];</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> gws_y = gws[1];</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> gws_z = gws[2];</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">switch</span> (kernel_type)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">CLKernelType::GEMM</a>:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">return</span> get_gemm_lws(gws_x, gws_y, gws_z);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">CLKernelType::DIRECT</a>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">return</span> get_direct_lws(gws_x, gws_y, gws_z);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7">CLKernelType::WINOGRAD</a>:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">return</span> get_winograd_lws(gws_x, gws_y, gws_z);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6d5ec5f6909788df3453f62a3bd6ad78">CLKernelType::DEPTHWISE</a>:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">return</span> get_dwc_lws(gws_x, gws_y, gws_z);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">return</span> CLKernelLibrary::get().default_ndrange();</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00122">CLKernelLibrary::default_ndrange()</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00081">DEPTHWISE</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00082">DIRECT</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00084">GEMM</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, and <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">WINOGRAD</a>.</p>

</div>
</div>
<a id="ad77109c62e70452196236fd03f7dd500"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad77109c62e70452196236fd03f7dd500">&#9670;&nbsp;</a></span>get_index_data_layout_dimension()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> get_index_data_layout_dimension </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the DataLayoutDimension of a given index and layout. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>The data layout. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>The data layout index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The dimension which this index is requested for. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_helpers_8inl_source.xhtml#l00212">212</a> of file <a class="el" href="_helpers_8inl_source.xhtml">Helpers.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                             <span class="stringliteral">&quot;Cannot retrieve the layout dimension for an unknown layout!&quot;</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;dims = <a class="code" href="namespacearm__compute.xhtml#a79ff77f9b4506ad55c680f8849317b9f">get_layout_map</a>().at(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(index &gt;= dims.size(), <span class="stringliteral">&quot;Invalid index for the given layout.&quot;</span>);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> dims[index];</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00107">get_layout_map()</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

</div>
</div>
<a id="af6916ea927eec95c074b917eafc5a667"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6916ea927eec95c074b917eafc5a667">&#9670;&nbsp;</a></span>get_internal() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_context.xhtml">IContext</a>* arm_compute::get_internal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_acl_types_8h.xhtml#ac624458ca531df9ccff14d2316d6dd28">AclContext</a>&#160;</td>
          <td class="paramname"><em>ctx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract internal representation of a Context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>Opaque context pointer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The internal representation as an <a class="el" href="classarm__compute_1_1_i_context.xhtml" title="Context interface.">IContext</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_context_8h_source.xhtml#l00127">127</a> of file <a class="el" href="_i_context_8h_source.xhtml">IContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>IContext *<span class="keyword">&gt;</span>(ctx);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_acl_activation_8cpp_source.xhtml#l00030">AclActivation()</a>, <a class="el" href="_acl_queue_8cpp_source.xhtml#l00045">AclCreateQueue()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00071">AclCreateTensor()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00051">AclCreateTensorPack()</a>, <a class="el" href="_acl_context_8cpp_source.xhtml#l00104">AclDestroyContext()</a>, <a class="el" href="_acl_operator_8cpp_source.xhtml#l00053">AclDestroyOperator()</a>, <a class="el" href="_acl_queue_8cpp_source.xhtml#l00087">AclDestroyQueue()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00144">AclDestroyTensor()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00096">AclDestroyTensorPack()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00034">AclGetClContext()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00088">AclGetClDevice()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00162">AclGetClMem()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00113">AclGetClQueue()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00097">AclMapTensor()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00071">AclPackTensor()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00082">AclPackTensors()</a>, <a class="el" href="_acl_queue_8cpp_source.xhtml#l00072">AclQueueFinish()</a>, <a class="el" href="_acl_operator_8cpp_source.xhtml#l00031">AclRunOperator()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00059">AclSetClContext()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00138">AclSetClQueue()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00130">AclTensorImport()</a>, and <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00116">AclUnmapTensor()</a>.</p>

</div>
</div>
<a id="a39b4bce1b01af39c5449ba4e482fc03d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39b4bce1b01af39c5449ba4e482fc03d">&#9670;&nbsp;</a></span>get_internal() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml">IOperator</a>* arm_compute::get_internal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_acl_types_8h.xhtml#adefdd489a321a9c39178951d57658c60">AclOperator</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract internal representation of an Operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Opaque operator pointer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The internal representation as an <a class="el" href="classarm__compute_1_1_i_operator.xhtml" title="Base class specifying the operator interface.">IOperator</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2common_2_i_operator_8h_source.xhtml#l00113">113</a> of file <a class="el" href="src_2common_2_i_operator_8h_source.xhtml">IOperator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>IOperator *<span class="keyword">&gt;</span>(op);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="afe3596e8ed69b78eb6e7e1d9533b6a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe3596e8ed69b78eb6e7e1d9533b6a70">&#9670;&nbsp;</a></span>get_internal() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_queue.xhtml">IQueue</a>* arm_compute::get_internal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_acl_types_8h.xhtml#ad100d0640d4dff954977840f32e7cfbe">AclQueue</a>&#160;</td>
          <td class="paramname"><em>queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract internal representation of a Queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>Opaque queue pointer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The internal representation as an <a class="el" href="classarm__compute_1_1_i_queue.xhtml" title="Base class specifying the queue interface.">IQueue</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_queue_8h_source.xhtml#l00076">76</a> of file <a class="el" href="_i_queue_8h_source.xhtml">IQueue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>IQueue *<span class="keyword">&gt;</span>(queue);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a338b4f628eac701aac98ebccb0c05ddb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a338b4f628eac701aac98ebccb0c05ddb">&#9670;&nbsp;</a></span>get_internal() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_v2.xhtml">ITensorV2</a>* arm_compute::get_internal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_acl_types_8h.xhtml#a90ea96c40064aa67e45589a99db23e96">AclTensor</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract internal representation of a <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>Opaque tensor pointer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The internal representation as an <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor.">ITensor</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_v2_8h_source.xhtml#l00115">115</a> of file <a class="el" href="_i_tensor_v2_8h_source.xhtml">ITensorV2.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ITensorV2 *<span class="keyword">&gt;</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a9ce0f88ac9f61280ec927f32366a2593"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ce0f88ac9f61280ec927f32366a2593">&#9670;&nbsp;</a></span>get_internal() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_pack.xhtml">TensorPack</a>* arm_compute::get_internal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_acl_types_8h.xhtml#adc3017359ff84d03850580266cb18256">AclTensorPack</a>&#160;</td>
          <td class="paramname"><em>pack</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract internal representation of a TensoPack. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pack</td><td>Opaque tensor pack pointer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The internal representation as an <a class="el" href="classarm__compute_1_1_tensor_pack.xhtml" title="Tensor packing service.">TensorPack</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_pack_8h_source.xhtml#l00107">107</a> of file <a class="el" href="_tensor_pack_8h_source.xhtml">TensorPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad">TensorPack</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>.</p>

</div>
</div>
<a id="a79ff77f9b4506ad55c680f8849317b9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79ff77f9b4506ad55c680f8849317b9f">&#9670;&nbsp;</a></span>get_layout_map()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::map&lt; <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>, std::vector&lt; <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &gt; &gt; &amp; get_layout_map </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a static map used to find an index or dimension based on a data layout. </p>
<p>*** Layouts ***</p>
<p>*** 4D *** [N C H W] [3 2 1 0] [N H W C]</p>
<ul>
<li>*** 5D *** [N C D H W] [4 3 2 1 0] [N D H W C] </li>
</ul>

<p class="definition">Definition at line <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml">Helpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    constexpr <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> W = DataLayoutDimension::WIDTH;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    constexpr <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> H = DataLayoutDimension::HEIGHT;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    constexpr <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> C = DataLayoutDimension::CHANNEL;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    constexpr <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> D = DataLayoutDimension::DEPTH;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    constexpr <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> = DataLayoutDimension::BATCHES;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;DataLayout, std::vector&lt;DataLayoutDimension&gt;&gt; layout_map = {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {DataLayout::NDHWC, {C, W, H, D, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>}},</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {DataLayout::NCDHW, {W, H, D, C, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>}},</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {DataLayout::NHWC, {C, W, H, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>}},</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {DataLayout::NCHW, {W, H, C, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>}}};</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> layout_map;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">BATCHES</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">DEPTH</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00103">N</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">NCDHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">NDHWC</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00201">get_data_layout_dimension_index()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00212">get_index_data_layout_dimension()</a>.</p>

</div>
</div>
<a id="ae69217acf0f0b5d4de030a09ad50a0bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae69217acf0f0b5d4de030a09ad50a0bc">&#9670;&nbsp;</a></span>get_min_max()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt;<a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&gt; arm_compute::get_min_max </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the mininum and maximum values a data type can take. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Data type to get the min/max bounds of</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tuple (min,max) with the minimum and maximum values respectively wrapped in <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00195">195</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    PixelValue min{};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    PixelValue max{};</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            min = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint8_t&gt;::lowest</a>()));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            max = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(std::numeric_limits&lt;uint8_t&gt;::max()));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            min = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int8_t&gt;::lowest</a>()));</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            max = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(std::numeric_limits&lt;int8_t&gt;::max()));</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            min = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint16_t&gt;::lowest</a>()));</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            max = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(std::numeric_limits&lt;uint16_t&gt;::max()));</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            min = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int16_t&gt;::lowest</a>()));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            max = PixelValue(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(std::numeric_limits&lt;int16_t&gt;::max()));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            min = PixelValue(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint32_t&gt;::lowest</a>());</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            max = PixelValue(std::numeric_limits&lt;uint32_t&gt;::max());</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            min = PixelValue(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>());</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            max = PixelValue(std::numeric_limits&lt;int32_t&gt;::max());</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            min = PixelValue(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">bfloat16::lowest</a>());</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            max = PixelValue(bfloat16::max());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            min = PixelValue(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;half&gt;::lowest</a>());</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            max = PixelValue(std::numeric_limits&lt;half&gt;::max());</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            min = PixelValue(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;float&gt;::lowest</a>());</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            max = PixelValue(std::numeric_limits&lt;float&gt;::max());</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Undefined data type!&quot;</span>);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(min, max);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="_bfloat16_8h_source.xhtml#l00117">bfloat16::lowest()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00278">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="_bfloat16_8h_source.xhtml#l00127">bfloat16::max()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00442">get_quantized_activation_min_max()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00183">arm_compute::quantization::get_quantized_asymmetric_output_min_max()</a>, and <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00961">CpuGemmLowpOffsetContributionOutputStageKernel::run_op()</a>.</p>

</div>
</div>
<a id="a7c3d8e17b509d0d18cc7c94b7e0a993d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c3d8e17b509d0d18cc7c94b7e0a993d">&#9670;&nbsp;</a></span>get_next_power_two()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int arm_compute::get_next_power_two </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Given an integer value, this function returns the next power of two. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the next power of two </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00074">74</a> of file <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Decrement by 1</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    x--;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Shift right by 1</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    x |= x &gt;&gt; 1u;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Shift right by 2</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    x |= x &gt;&gt; 2u;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Shift right by 4</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    x |= x &gt;&gt; 4u;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Shift right by 8</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    x |= x &gt;&gt; 8u;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// Shift right by 16</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    x |= x &gt;&gt; 16u;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Increment by 1</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    x++;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00194">ICLKernel::gws_from_window()</a>.</p>

</div>
</div>
<a id="ae76431f34048289454a9cb6dc66d7c6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae76431f34048289454a9cb6dc66d7c6b">&#9670;&nbsp;</a></span>get_normalization_dimension_index()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int arm_compute::get_normalization_dimension_index </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the normalization dimension index for a given normalization type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">layout</td><td>Data layout of the input and output tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Normalization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Normalization dimension index </dd></dl>

<p class="definition">Definition at line <a class="el" href="_normalization_helpers_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_normalization_helpers_8h_source.xhtml">NormalizationHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(layout, DataLayoutDimension::WIDTH);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(layout, DataLayoutDimension::CHANNEL);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_in_map() ? <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a> : <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::channel_idx</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>, and <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">arm_compute::cpu::width_idx</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>, and <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a5f708f4acd49beb7d02d2ec9c2b7552f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f708f4acd49beb7d02d2ec9c2b7552f">&#9670;&nbsp;</a></span>get_padding_info() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *, <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &gt; get_padding_info </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> * &gt;&#160;</td>
          <td class="paramname"><em>tensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stores padding information before configuring a kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>list of tensors to store the padding info for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An unordered map where each tensor info pointer is paired with its original padding info </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00462">462</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; res;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> ITensor *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    {</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            res.insert({<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info()-&gt;padding()});</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160; </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00265">TensorInfo::padding()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a456cc0b26fb17eee9942c8970f1c71db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a456cc0b26fb17eee9942c8970f1c71db">&#9670;&nbsp;</a></span>get_padding_info() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *, <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &gt; get_padding_info </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * &gt;&#160;</td>
          <td class="paramname"><em>infos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stores padding information before configuring a kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">infos</td><td>list of tensor infos to store the padding info for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An unordered map where each tensor info pointer is paired with its original padding info </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00477">477</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; res;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a> : infos)</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    {</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            res.insert({<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;padding()});</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    }</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160; </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00071">ClReshapeKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00053">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00118">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00045">CLBitwiseKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00078">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00319">ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00117">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00452">ClSaturatedArithmeticKernel::configure()</a>, and <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00522">ClArithmeticKernel::configure()</a>.</p>

</div>
</div>
<a id="a5e4254e9c71fffafb79b99d972df8f81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e4254e9c71fffafb79b99d972df8f81">&#9670;&nbsp;</a></span>get_promoted_data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> arm_compute::get_promoted_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the promoted data type of a given data type. </p>
<dl class="section note"><dt>Note</dt><dd>If promoted data type is not supported an error will be thrown</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Data type to get the promoted type of.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Promoted data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00159">159</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">return</span> DataType::U16;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">return</span> DataType::S16;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> DataType::U32;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">return</span> DataType::S32;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type promotions!&quot;</span>);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Undefined data type!&quot;</span>);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

</div>
</div>
<a id="a549f4d59cb7f823d884ffe2424079c3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a549f4d59cb7f823d884ffe2424079c3a">&#9670;&nbsp;</a></span>get_quantized_activation_min_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; int32_t, int32_t &gt; get_quantized_activation_min_max </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>oq_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a pair of minimum and maximum values for a quantized activation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">act_info</td><td>The information for activation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The used data type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oq_info</td><td>The output quantization information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pair with minimum and maximum values </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00442">442</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_qasymm8_signed = <a class="code" href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">is_data_type_quantized_asymmetric_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> a                 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a();</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>                 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b();</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  a_int          = is_qasymm8_signed ? <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(a, oq_info) : <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(a, oq_info);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  b_int          = is_qasymm8_signed ? <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, oq_info) : <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, oq_info);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> type_max_value = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">get_min_max</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)).get&lt;int32_t&gt;();</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keyword">const</span> int32_t min_activation = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation() != ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                       ? std::min(oq_info.offset, type_max_value)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                       : b_int;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> int32_t max_activation =</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation() == ActivationLayerInfo::ActivationFunction::RELU ? type_max_value : a_int;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> std::make_pair(min_activation, max_activation);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00195">get_min_max()</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00365">is_data_type_quantized_asymmetric_signed()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00295">quantize_qasymm8()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00309">quantize_qasymm8_signed()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, and <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>.</p>

</div>
</div>
<a id="a1dcccbff6075b2fad30ebd2a0da6b995"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dcccbff6075b2fad30ebd2a0da6b995">&#9670;&nbsp;</a></span>get_softmax_output_quantization_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> get_softmax_output_quantization_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>input_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_log</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns output quantization information for softmax layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_type</td><td>The data type of the input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_log</td><td>True for log softmax</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantization information for the output tensor </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00421">421</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="comment">// Note: Output quantization info for softmax should always have</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// * Softmax with QASYMM8: scale = 1/256, offset = 0</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// * Softmax with QASYMM8_SIGNED: scale = 1/256, offset = -128</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// * LogSoftmax with QASYMM8: scale = 1/256, offset = 0</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="comment">// * LogSoftmax with QASYMM8_SIGNED: scale = 16/256, offset = 127</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">is_data_type_quantized_asymmetric_signed</a>(input_type))</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <span class="keywordflow">return</span> QuantizationInfo(16.f / 256, 127);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="keywordflow">return</span> QuantizationInfo(1.f / 256, -128);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">return</span> QuantizationInfo(1.f / 256, 0);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_data_type_utils_8h_source.xhtml#l00365">is_data_type_quantized_asymmetric_signed()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00127">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_softmax_layer_node_8cpp_source.xhtml#l00057">SoftmaxLayerNode::configure_output()</a>, and <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00063">ClSoftmaxKernel::validate()</a>.</p>

</div>
</div>
<a id="a281384aa081efe5819eedd6a7c2a429b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a281384aa081efe5819eedd6a7c2a429b">&#9670;&nbsp;</a></span>get_target_from_device()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> get_target_from_device </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the GPU target from CL device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the GPU target </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00224">224</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// Query device name size</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::string device_name = device.getInfo&lt;CL_DEVICE_NAME&gt;();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">get_target_from_name</a>(device_name);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00188">get_target_from_name()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00352">CLCompileContext::default_ndrange()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00166">CLScheduler::init()</a>, and <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00180">ICLKernel::set_target()</a>.</p>

</div>
</div>
<a id="a0dc6fb54ac0bbc7bf512fe0ca7414076"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0dc6fb54ac0bbc7bf512fe0ca7414076">&#9670;&nbsp;</a></span>get_target_from_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> get_target_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>device_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the GPU target from a device name. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device_name</td><td>A device name</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the GPU target </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00188">188</a> of file <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml">GPUTarget.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::regex  mali_regex(R<span class="stringliteral">&quot;(Mali-(.*))&quot;);</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="stringliteral">    std::smatch name_parts;</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="stringliteral">    </span><span class="keyword">const</span> <span class="keywordtype">bool</span>  found_mali = std::regex_search(device_name, name_parts, mali_regex);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">if</span> (!found_mali)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(<span class="stringliteral">&quot;Can&#39;t find valid Arm® Mali™ GPU. Target is set to default.&quot;</span>);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">return</span> GPUTarget::MIDGARD;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>         target  = name_parts.str(1)[0];</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> std::string &amp;version = name_parts.str(1);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::regex future_regex(R<span class="stringliteral">&quot;(.*X)&quot;);</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="stringliteral">    </span><span class="keyword">const</span> <span class="keywordtype">bool</span> is_future_gpu = std::regex_search(version, future_regex);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Work-out gpu target</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> gpu_target;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (target == <span class="charliteral">&#39;G&#39;</span> || is_future_gpu)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// Check for Valhall, Bifrost or 5-th Gen</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        gpu_target = get_fifth_gen_target(version);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">if</span> (gpu_target == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">GPUTarget::UNKNOWN</a>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            gpu_target = get_valhall_target(version);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">if</span> (gpu_target == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">GPUTarget::UNKNOWN</a>)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            gpu_target = get_bifrost_target(version);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="comment">// Default GPUTarget</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">if</span> (gpu_target == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">GPUTarget::UNKNOWN</a>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            gpu_target = GPUTarget::VALHALL;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (target == <span class="charliteral">&#39;T&#39;</span>)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        gpu_target = get_midgard_target(version);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        gpu_target = <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">GPUTarget::UNKNOWN</a>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// Report in case of unknown target</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">if</span> (gpu_target == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">GPUTarget::UNKNOWN</a>)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(<span class="stringliteral">&quot;Arm® Mali™ Mali GPU unknown. Target is set to the default one. (BIFROST)&quot;</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> GPUTarget::BIFROST;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">return</span> gpu_target;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_log_8h_source.xhtml#l00087">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">BIFROST</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, and <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">VALHALL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_device_8h_source.xhtml#l00055">CLDevice::CLDevice()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00242">dot8_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00224">get_target_from_device()</a>, and <a class="el" href="tests_2validation_2_u_n_i_t_2_g_p_u_target_8cpp_source.xhtml#l00038">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="ad419ea339c7291b66d1cd9417b4f7330"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad419ea339c7291b66d1cd9417b4f7330">&#9670;&nbsp;</a></span>get_wbsm_support_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool get_wbsm_support_info </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00429">429</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;{</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    cl_bitfield capabilities = 0;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    cl_int      err = <a class="code" href="_open_c_l_8cpp.xhtml#a677990334379f5f91619bfc43af63c4a">clGetDeviceInfo</a>(device.get(), CL_DEVICE_SCHEDULING_CONTROLS_CAPABILITIES_ARM, <span class="keyword">sizeof</span>(cl_bitfield),</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                      &amp;capabilities, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">if</span> ((err == CL_SUCCESS) &amp;&amp; (capabilities &amp; CL_KERNEL_EXEC_INFO_WORKGROUP_BATCH_SIZE_MODIFIER_ARM))</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8cpp_source.xhtml#l00904">clGetDeviceInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00158">CLCompileContext::CLCompileContext()</a>, and <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00346">CLCompileContext::set_device()</a>.</p>

</div>
</div>
<a id="aab39ce9a593f7e12a4bf4cb47272b917"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab39ce9a593f7e12a4bf4cb47272b917">&#9670;&nbsp;</a></span>gpu_target_is_in() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::gpu_target_is_in </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target_to_check</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Variant of gpu_target_is_in for comparing two targets. </p>

<p class="definition">Definition at line <a class="el" href="_g_p_u_target_8h_source.xhtml#l00115">115</a> of file <a class="el" href="_g_p_u_target_8h_source.xhtml">GPUTarget.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> target_to_check == target;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1da498e9b2c2d24883087f62c6bbe75d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1da498e9b2c2d24883087f62c6bbe75d">&#9670;&nbsp;</a></span>gpu_target_is_in() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::gpu_target_is_in </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target_to_check</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args...&#160;</td>
          <td class="paramname"><em>targets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether a gpu target is equal to the provided targets. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target_to_check</td><td>gpu target to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>First target to compare against </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">targets</td><td>(Optional) Additional targets to compare with</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the target is equal with at least one of the targets. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_g_p_u_target_8h_source.xhtml#l00109">109</a> of file <a class="el" href="_g_p_u_target_8h_source.xhtml">GPUTarget.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> (target_to_check == target) | <a class="code" href="namespacearm__compute.xhtml#aab39ce9a593f7e12a4bf4cb47272b917">gpu_target_is_in</a>(target_to_check, targets...);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="tests_2validation_2_u_n_i_t_2_g_p_u_target_8cpp_source.xhtml#l00069">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a5bbad0e81db8c98c3e6bf6f9aa09c785"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bbad0e81db8c98c3e6bf6f9aa09c785">&#9670;&nbsp;</a></span>handle_cl_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void handle_cl_error </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>function_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int&#160;</td>
          <td class="paramname"><em>error_code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check for CL error code and throw exception accordingly. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function_name</td><td>The name of the CL function being called. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">error_code</td><td>The error returned by the CL function. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (error_code != CL_SUCCESS)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        std::string error_message = function_name + <span class="stringliteral">&quot; - Error code: &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">std::to_string</a>(error_code);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(error_message.c_str());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, and <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00059">CLMutableCommandBuffer::add_kernel()</a>, <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00035">CLMutableCommandBuffer::CLMutableCommandBuffer()</a>, <a class="el" href="_c_l_compat_command_buffer_8cpp_source.xhtml#l00081">CLCompatCommandBuffer::enqueue()</a>, <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00137">CLMutableCommandBuffer::enqueue()</a>, <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00100">CLMutableCommandBuffer::finalize()</a>, and <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00128">CLMutableCommandBuffer::update()</a>.</p>

</div>
</div>
<a id="aa2f22cc01532e0236e438324310fdb94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2f22cc01532e0236e438324310fdb94">&#9670;&nbsp;</a></span>has_format_horizontal_subsampling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::has_format_horizontal_subsampling </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if the given format has horizontal subsampling. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format to determine subsampling.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the format can be subsampled horizontaly. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00304">304</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::YUYV422 || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::UYVY422 || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::NV12 ||</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::NV21 || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::IYUV || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::UV88)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;               ? true</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;               : <span class="keyword">false</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00338">adjust_odd_shape()</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00400">calculate_subsampled_shape()</a>.</p>

</div>
</div>
<a id="a95358b677c5c17f5cc1e369e4a27e2c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95358b677c5c17f5cc1e369e4a27e2c2">&#9670;&nbsp;</a></span>has_format_vertical_subsampling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::has_format_vertical_subsampling </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if the given format has vertical subsampling. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format to determine subsampling.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the format can be subsampled verticaly. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00318">318</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::NV12 || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::NV21 || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::IYUV || <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a> == Format::UV88)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;               ? true</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;               : <span class="keyword">false</span>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00338">adjust_odd_shape()</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00400">calculate_subsampled_shape()</a>.</p>

</div>
</div>
<a id="a7d64d7388c73c6785a20faf58475beb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d64d7388c73c6785a20faf58475beb9">&#9670;&nbsp;</a></span>has_holes() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_holes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the tensor has any holes. </p>
<p>A hole is defined as any gap in the tensor between two consecutive values. This can be a result of extending the paddings or manipulating the strides of the tensor</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info object defining the shape of the input tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function checks for holes in all dimensions. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2helpers_2_utils_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="src_2core_2helpers_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ae5986c8a29ac4fae2e1ac78bf446abd5">has_holes</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_dimensions() - 1);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00127">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00216">CpuReshapeKernel::prepare()</a>, and <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00183">NEStackLayerKernel::prepare()</a>.</p>

</div>
</div>
<a id="ae5986c8a29ac4fae2e1ac78bf446abd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5986c8a29ac4fae2e1ac78bf446abd5">&#9670;&nbsp;</a></span>has_holes() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_holes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the tensor has any holes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info object defining the shape of the input tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Highest dimension to check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function checks for holes in all the dimensions upto and including the highest dimension. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2helpers_2_utils_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="src_2core_2helpers_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>          = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape();</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes();</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordtype">size_t</span>      squashed_bytes = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.element_size();</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> dim = 0; dim &lt;= dimension; ++dim)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">if</span> (strides[dim] != squashed_bytes)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        squashed_bytes *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[dim];</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="a7d5ebe14ba3526c8e2ed3c6949669f9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d5ebe14ba3526c8e2ed3c6949669f9c">&#9670;&nbsp;</a></span>has_padding_changed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_padding_changed </td>
          <td>(</td>
          <td class="paramtype">const std::unordered_map&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *, <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>padding_map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the previously stored padding info has changed after configuring a kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding_map</td><td>an unordered map where each tensor info pointer is paired with its original padding info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if any of the tensor infos has changed its paddings </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00492">492</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">return</span> std::find_if(padding_map.begin(), padding_map.end(),</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                        [](<span class="keyword">const</span> std::pair&lt;const ITensorInfo *, PaddingSize&gt; &amp;padding_info)</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                        { return (padding_info.first-&gt;padding() != padding_info.second); }) != padding_map.end();</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00071">ClFloorKernel::configure()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00071">ClReshapeKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00053">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00086">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00118">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00168">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00045">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00078">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00117">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00087">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00141">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00452">ClSaturatedArithmeticKernel::configure()</a>, and <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00522">ClArithmeticKernel::configure()</a>.</p>

</div>
</div>
<a id="a053a24bb37402fa4b4d8d5963976ba17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a053a24bb37402fa4b4d8d5963976ba17">&#9670;&nbsp;</a></span>ignore_unused()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::ignore_unused </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>...</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ignores unused arguments. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Argument types</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">...</td><td>Ignored arguments </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_error_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_error_8h_source.xhtml">Error.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a777eb2ab77bdf5aea2d25c31b4acee2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a777eb2ab77bdf5aea2d25c31b4acee2c">&#9670;&nbsp;</a></span>image2d_from_buffer_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool image2d_from_buffer_supported </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check whether the cl_khr_image2d_from_buffer extension is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00377">377</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">device_supports_extension</a>(device, <span class="stringliteral">&quot;cl_khr_image2d_from_buffer&quot;</span>);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">device_supports_extension()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00062">create_image2d_from_buffer()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00449">export_to_cl_image()</a>, <a class="el" href="_mat_mul_kernel_8cpp_source.xhtml#l00085">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00121">arm_compute::opencl::kernels::gemm::validate_image2d_support_on_rhs()</a>.</p>

</div>
</div>
<a id="ad34f2150f1c9f8a3ecb7298162124e5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad34f2150f1c9f8a3ecb7298162124e5d">&#9670;&nbsp;</a></span>index2coords()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> index2coords </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a linear index into n-dimensional coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the n-dimensional tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Linear index specifying the i-th element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>n-dimensional coordinates. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_helpers_8inl_source.xhtml#l00164">164</a> of file <a class="el" href="_helpers_8inl_source.xhtml">Helpers.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">int</span> num_elements = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.total_size();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(index &lt; 0 || index &gt;= num_elements, <span class="stringliteral">&quot;Index has to be in [0, num_elements]!&quot;</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_elements == 0, <span class="stringliteral">&quot;Cannot create coordinate from empty shape!&quot;</span>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    Coordinates coord{0};</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() - 1; d &gt;= 0; --d)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        num_elements /= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[d];</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        coord.set(d, index / num_elements);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        index %= num_elements;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> coord;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>.</p>

</div>
</div>
<a id="a6504035918188c363f421a6677b185fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6504035918188c363f421a6677b185fd">&#9670;&nbsp;</a></span>interleave_by()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::interleave_by </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a>&#160;</td>
          <td class="paramname"><em>wf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01652">1652</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;{</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(wf) &gt;&gt; 8) &amp; 0xFFF;</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a133621090cfb0f151340c6e04bd7bcc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a133621090cfb0f151340c6e04bd7bcc8">&#9670;&nbsp;</a></span>intersect_valid_regions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> arm_compute::intersect_valid_regions </td>
          <td>(</td>
          <td class="paramtype">const Ts &amp;...&#160;</td>
          <td class="paramname"><em>regions</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Intersect multiple valid regions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">regions</td><td>Valid regions.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Intersection of all regions. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_helpers_8h_source.xhtml#l00064">64</a> of file <a class="el" href="_window_helpers_8h_source.xhtml">WindowHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">auto</span> intersect = [](<span class="keyword">const</span> ValidRegion &amp;r1, <span class="keyword">const</span> ValidRegion &amp;r2) -&gt; ValidRegion</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        ValidRegion region;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; std::min(r1.anchor.num_dimensions(), r2.anchor.num_dimensions()); ++d)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            region.anchor.set(d, std::max(r1.anchor[d], r2.anchor[d]));</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; std::min(r1.shape.num_dimensions(), r2.shape.num_dimensions()); ++d)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            region.shape.set(d, std::min(r1.shape[d], r2.shape[d]));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">return</span> region;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    };</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">utility::foldl</a>(intersect, regions...);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="_utility_8h_source.xhtml#l00133">arm_compute::utility::foldl()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>.</p>

</div>
</div>
<a id="af5982a092e9eb743fce2d6392bdd8897"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5982a092e9eb743fce2d6392bdd8897">&#9670;&nbsp;</a></span>is_data_type_float()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_data_type_float </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a given data type is of floating point type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if data type is of floating point type, else false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00304">304</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00069">ClDirectConv2d::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00449">export_to_cl_image()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00235">arm_compute::graph::detail::fuse_node_with_activation()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00055">ClTemplateCast::get_component_code()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00057">ClTemplateResize::get_component_code()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00190">ClConv2d::get_convolution_method()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_component_logits1_d_norm_8cpp_source.xhtml#l00041">ClComponentLogits1DNorm::validate()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00471">ClSaturatedArithmeticKernel::validate()</a>, and <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00539">ClArithmeticKernel::validate()</a>.</p>

</div>
</div>
<a id="a0bee325b210f81bb89fe1f9e15badf9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bee325b210f81bb89fe1f9e15badf9c">&#9670;&nbsp;</a></span>is_data_type_quantized()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_data_type_quantized </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a given data type is of quantized type. </p>
<dl class="section note"><dt>Note</dt><dd>Quantized is considered a super-set of fixed-point and asymmetric data types.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if data type is of quantized type, else false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00324">324</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arithmetic_operations_8cpp_source.xhtml#l00188">arm_compute::test::validation::reference::arithmetic_operation()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00038">CpuAddMulAdd::configure()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00082">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00286">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00165">CpuMatMul::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00112">CpuGemmDirectConv2d::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00103">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00047">NEDetectionPostProcessLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00079">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00695">error_on_mismatching_quantization_info()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00055">ClTemplateCast::get_component_code()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00412">needs_serialized_reduction()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01142">operator&lt;&lt;()</a>, <a class="el" href="_quantization_layer_node_8cpp_source.xhtml#l00039">QuantizationLayerNode::QuantizationLayerNode()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00104">CpuAddMulAdd::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_space_to_batch_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::space_to_batch()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00076">CpuAddMulAdd::validate()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00097">CpuMatMul::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00264">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00090">NEDetectionPostProcessLayer::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00376">CpuFullyConnected::validate()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00464">ClFullyConnected::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00173">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, and <a class="el" href="_n_e_convolution_layer_8cpp_source.xhtml#l00121">NEConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a14f46283f316e7f0fad301d5c1507e9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14f46283f316e7f0fad301d5c1507e9f">&#9670;&nbsp;</a></span>is_data_type_quantized_asymmetric()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_data_type_quantized_asymmetric </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a given data type is of asymmetric quantized type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if data type is of asymmetric quantized type, else false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">346</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;{</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00242">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00306">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00370">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00560">GraphBuilder::add_fully_connected_layer()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00127">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00069">ClDirectConv2d::configure()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00056">CpuSoftmaxGeneric::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00099">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00231">CpuFullyConnected::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00330">ClFullyConnected::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00262">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00377">arm_compute::graph::backends::detail::create_concatenate_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00429">arm_compute::graph::backends::detail::create_convolution_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00553">arm_compute::graph::backends::detail::create_depthwise_convolution_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00917">arm_compute::graph::backends::detail::create_fully_connected_layer()</a>, <a class="el" href="reference_2_im2_col_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::im2col_nchw()</a>, <a class="el" href="reference_2_im2_col_8cpp_source.xhtml#l00093">arm_compute::test::validation::reference::im2col_nhwc()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">arm_compute::cpu::roi_align()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00552">CpuGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00180">CpuSoftmaxKernel::run_op()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00171">set_quantization_info_if_empty()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00063">ClSoftmaxKernel::validate()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00120">CpuSoftmaxGeneric::validate()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00163">CpuGemmDirectConv2d::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00557">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00326">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00130">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00142">arm_compute::graph::backends::detail::validate_convolution_layer()</a>.</p>

</div>
</div>
<a id="ab801dca7a1e1cfb228bb169e846b74f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab801dca7a1e1cfb228bb169e846b74f9">&#9670;&nbsp;</a></span>is_data_type_quantized_asymmetric_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_data_type_quantized_asymmetric_signed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a given data type is of asymmetric quantized signed type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if data type is of asymmetric quantized signed type, else false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00365">365</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00410">CpuDirectConv2dOutputStageKernel::configure()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00442">get_quantized_activation_min_max()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00421">get_softmax_output_quantization_info()</a>, and <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">arm_compute::cpu::roi_align_1x1_qasymm8()</a>.</p>

</div>
</div>
<a id="a84437d80241f6a31e1a07c231ee8e3ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84437d80241f6a31e1a07c231ee8e3ac">&#9670;&nbsp;</a></span>is_data_type_quantized_per_channel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_data_type_quantized_per_channel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a given data type is of per channel type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if data type is of per channel type, else false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00401">401</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;{</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00131">CLTensorAllocator::allocate()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00206">CpuDepthwiseConv2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00079">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00304">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="reference_2_dequantization_layer_8cpp_source.xhtml#l00064">arm_compute::test::validation::reference::dequantization_layer()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00157">CLDeconvolutionLayer::get_deconvolution_method()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00559">arm_compute::cpu::run_depthwise_quanitized8bit()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00131">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00264">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00557">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00173">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00326">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, and <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00911">CpuGemmAssemblyDispatch::validate()</a>.</p>

</div>
</div>
<a id="a922cd85c475c0d725fc030116ea57979"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a922cd85c475c0d725fc030116ea57979">&#9670;&nbsp;</a></span>is_data_type_quantized_symmetric()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_data_type_quantized_symmetric </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a given data type is of symmetric quantized type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Input data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if data type is of symmetric quantized type, else false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00382">382</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00304">ClGemmLowpMatrixMultiplyCore::configure()</a>, and <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00557">ClGemmLowpMatrixMultiplyCore::validate()</a>.</p>

</div>
</div>
<a id="a10608f5b5910df56c8dd68f687bc5c54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10608f5b5910df56c8dd68f687bc5c54">&#9670;&nbsp;</a></span>is_fixed_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_fixed_format </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> &amp;&#160;</td>
          <td class="paramname"><em>wf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01660">1660</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;{</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;    <span class="keywordflow">return</span> wf != WeightFormat::UNSPECIFIED &amp;&amp; wf != WeightFormat::ANY;</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">ANY</a>, and <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00163">CpuGemmDirectConv2d::validate()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>.</p>

</div>
</div>
<a id="a36b5c2550292b008aa1f018a7623c6f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36b5c2550292b008aa1f018a7623c6f0">&#9670;&nbsp;</a></span>is_fixed_format_fast_math()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_fixed_format_fast_math </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> &amp;&#160;</td>
          <td class="paramname"><em>wf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">1664</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;{</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(wf) &gt;&gt; 4) &amp; 0x1;</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00376">CpuFullyConnected::validate()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00213">CpuGemm::validate()</a>, and <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00911">CpuGemmAssemblyDispatch::validate()</a>.</p>

</div>
</div>
<a id="a7664c9a93a7007e06a991bb22a42c08e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7664c9a93a7007e06a991bb22a42c08e">&#9670;&nbsp;</a></span>is_pool_3d_region_entirely_outside_input()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_pool_3d_region_entirely_outside_input </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the 3d pool region is entirely outside the input tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> to be checked.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the pool region is entirely outside the input tensor, False otherwise. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00141">141</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.z() == 0)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ps                = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() &lt;= std::max({ps.left, ps.right});</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() &lt;= std::max({ps.top, ps.bottom});</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.z() &lt;= std::max({ps.front, ps.back});</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> pool_le_padding_x || pool_le_padding_y || pool_le_padding_z;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a1a598d7174a66371ea772d4101760c25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a598d7174a66371ea772d4101760c25">&#9670;&nbsp;</a></span>is_pool_region_entirely_outside_input()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_pool_region_entirely_outside_input </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the pool region is entirely outside the input tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> to be checked.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the pool region is entirely outside the input tensor, False otherwise. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00129">129</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.exclude_padding || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() == 0)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ps                = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_stride_info;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() &lt;= std::max({ps.pad_left(), ps.pad_right()});</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() &lt;= std::max({ps.pad_top(), ps.pad_bottom()});</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> pool_le_padding_x || pool_le_padding_y;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00100">CpuPool2dAssemblyWrapperKernel::validate()</a>, and <a class="el" href="_cl_component_pool2d_8cpp_source.xhtml#l00044">ClComponentPool2d::validate()</a>.</p>

</div>
</div>
<a id="a50502af31f1ab8754ec19be799352dd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50502af31f1ab8754ec19be799352dd8">&#9670;&nbsp;</a></span>is_symmetric()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::is_symmetric </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if the 3D padding is symmetric i.e. </p>
<p>padding in each opposite sides are euqal (left=right, top=bottom and front=back)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> input 3D padding object to check if it is symmetric</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if padding is symmetric </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00245">245</a> of file <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">return</span> ((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.left == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.right) &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.top == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.bottom) &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.front == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.back));</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a5277640d2fd61696201c28a01c3de703"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5277640d2fd61696201c28a01c3de703">&#9670;&nbsp;</a></span>join()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string join </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>strings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>sep</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Join a sequence of strings with separator <code>sep</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">strings</td><td>Strings to join </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sep</td><td>Separator to join consecutive strings in the sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>std::string </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_utils_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="_string_utils_8cpp_source.xhtml">StringUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (strings.empty())</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(std::next(strings.begin()), strings.end(), strings.at(0),</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                           [&amp;sep](<span class="keyword">const</span> std::string &amp;a, <span class="keyword">const</span> std::string &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) { return a + sep + b; });</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gemm_tuner_8py_source.xhtml#l00057">GEMMParam::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00072">NativeGEMMConfig::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00098">ReshapedOnlyRHSGEMMConfig::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00129">ReshapedGEMMConfig::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00184">Measurement::__str__()</a>, <a class="el" href="format__code_8py_source.xhtml#l00069">format_code::check_copyright()</a>, <a class="el" href="format__code_8py_source.xhtml#l00136">format_code::check_license()</a>, <a class="el" href="check__header__guards_8py_source.xhtml#l00127">check_header_guards::find_expected_header_guard()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00420">GpuCkwElementwiseBinary::get_name()</a>, <a class="el" href="format__doxygen_8py_source.xhtml#l00006">format_doxygen::process_comment()</a>, <a class="el" href="format__code_8py_source.xhtml#l00370">format_code::run_fix_code_formatting()</a>, and <a class="el" href="_gemm_tuner_8py_source.xhtml#l00347">GEMMBenchmarkResultRecorder::summary()</a>.</p>

</div>
</div>
<a id="a0a7bb17a0a0414a7162f635776a02eb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a7bb17a0a0414a7162f635776a02eb5">&#9670;&nbsp;</a></span>lower_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string lower_string </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Lower a given string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Given string to lower.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The lowered string </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_utils_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_string_utils_8cpp_source.xhtml">StringUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    std::string res = val;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    std::transform(res.begin(), res.end(), res.begin(), ::<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">tolower</a>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00204">arm_compute::utility::tolower()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00118">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00104">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00180">ClTemplateCast::get_config_id()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00134">ClTemplateReshape::get_config_id()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00339">ClTemplateDirectConv2d::get_config_id()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00431">ClTemplatePool2d::get_config_id()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00154">ClTemplateActivation::get_config_id()</a>, <a class="el" href="_graph_utils_8h_source.xhtml#l00505">arm_compute::graph_utils::get_input_accessor()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00420">GpuCkwElementwiseBinary::get_name()</a>, and <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00112">ClTemplateActivation::get_tag_lut()</a>.</p>

</div>
</div>
<a id="ad4e55ae65c8e20e37a1ecb92f83d2266"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4e55ae65c8e20e37a1ecb92f83d2266">&#9670;&nbsp;</a></span>manage_workspace() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a>&gt; arm_compute::manage_workspace </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> &amp;&#160;</td>
          <td class="paramname"><em>mem_reqs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_memory_group.xhtml">MemoryGroup</a> &amp;&#160;</td>
          <td class="paramname"><em>mgroup</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>run_pack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_memory_helpers_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_memory_helpers_8h_source.xhtml">MemoryHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    ITensorPack dummy_pack = ITensorPack();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> manage_workspace&lt;TensorType&gt;(mem_reqs, mgroup, run_pack, dummy_pack);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4fd2b7915607568036f04d45de70f1d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fd2b7915607568036f04d45de70f1d2">&#9670;&nbsp;</a></span>manage_workspace() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a>&gt; arm_compute::manage_workspace </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> &amp;&#160;</td>
          <td class="paramname"><em>mem_reqs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_memory_group.xhtml">MemoryGroup</a> &amp;&#160;</td>
          <td class="paramname"><em>mgroup</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>run_pack</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>prep_pack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_memory_helpers_8h_source.xhtml#l00063">63</a> of file <a class="el" href="_memory_helpers_8h_source.xhtml">MemoryHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    WorkspaceData&lt;TensorType&gt; workspace_memory;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;req : mem_reqs)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">if</span> (req.size == 0)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> aux_info = TensorInfo{TensorShape(req.size), 1, DataType::U8};</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        workspace_memory.emplace_back(</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            WorkspaceDataElement&lt;TensorType&gt;{req.slot, req.lifetime, std::make_unique&lt;TensorType&gt;()});</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">auto</span> aux_tensor = workspace_memory.back().tensor.get();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(aux_tensor);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        aux_tensor-&gt;allocator()-&gt;init(aux_info, req.alignment);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">if</span> (req.lifetime == experimental::MemoryLifetime::Temporary)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            mgroup.manage(aux_tensor);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            prep_pack.add_tensor(req.slot, aux_tensor);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        run_pack.add_tensor(req.slot, aux_tensor);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;mem : workspace_memory)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = mem.tensor.get();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> workspace_memory;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00038">ITensorPack::add_tensor()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00131">CLTensorAllocator::allocate()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00061">CLTensor::allocator()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_memory_group_8h_source.xhtml#l00076">MemoryGroup::manage()</a>, <a class="el" href="_memory_helpers_8h_source.xhtml#l00046">WorkspaceDataElement&lt; TensorType &gt;::slot</a>, <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a10d85d7664a911bcaec89732098c269a">arm_compute::experimental::Temporary</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

</div>
</div>
<a id="ab5a5338878b6fcdb2176175fcf7ba650"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5a5338878b6fcdb2176175fcf7ba650">&#9670;&nbsp;</a></span>multiply_by_quantized_multiplier_2row()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t arm_compute::multiply_by_quantized_multiplier_2row </td>
          <td>(</td>
          <td class="paramtype">int32x4x2_t&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qmul</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply a neon vector using quantized multiplier and shift. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input vector to mutiply values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qmul</td><td>Quantized multipler </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift</td><td>Left bit shift</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the multiplied value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00225">225</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> left_shift  = shift &gt; 0 ? shift : 0;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> right_shift = shift &gt; 0 ? 0 : -shift;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> one_shifted = 1 &lt;&lt; left_shift;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    int32x4x2_t result;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    result.val[0] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(vqrdmulhq_n_s32(vmulq_n_s32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.val[0], one_shifted), qmul), right_shift);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    result.val[1] = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(vqrdmulhq_n_s32(vmulq_n_s32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.val[1], one_shifted), qmul), right_shift);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">rounding_divide_by_pow2()</a>.</p>

</div>
</div>
<a id="a28029771f7c2cd8bbe2855303d38f71f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28029771f7c2cd8bbe2855303d38f71f">&#9670;&nbsp;</a></span>needs_serialized_reduction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool needs_serialized_reduction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the given reduction operation should be handled in a serial way. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Reduction operation to perform </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>Data type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis along which to reduce</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given reduction operation should be handled in a serial way. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00412">412</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;{</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_min_max        = (op == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ReductionOperation::MAX</a> || op == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ReductionOperation::MIN</a>);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized_type = <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_first_dim      = (axis == 0);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">return</span> !is_first_dim || (is_quantized_type &amp;&amp; !is_min_max);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00324">is_data_type_quantized()</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>, and <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">MIN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00095">CLReductionOperationKernel::configure()</a>, and <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>.</p>

</div>
</div>
<a id="a395e18ba1b7e3bdf87f59efdd2f387d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a395e18ba1b7e3bdf87f59efdd2f387d4">&#9670;&nbsp;</a></span>normalize_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::normalize_float </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to perform normalization depending on the given template dimension. </p>
<p>The second template parameter specifies whether the normalization has to be 1D or 2D.</p>
<dl class="section note"><dt>Note</dt><dd>Only supported normalizations are:<ul>
<li>1D over X or Z</li>
<li>2D over X and Y</li>
</ul>
</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Source tensor. 3 lower dims represent a single input with dimensions [width, height, IFM], and an optional 4th dimension for batch of inputs. Data types supported: FP16/F32. Data layouts supported: NCHW/NHWC. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_squared</td><td>Source with each element has been squared. 3 lower dims represent a single input with dimensions [width, height, IFM], Data type and layout supported: same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out</td><td>Destination tensor. Output will have the same number of dimensions as input. Data type and layout supported: same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ninfo</td><td>Normalization layer information like the normalization type, normalization size and other parameters. </td></tr>
  </table>
  </dd>
</dl>
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="norm__layer_2generic_2neon_2impl_8h_source.xhtml#l00058">58</a> of file <a class="el" href="norm__layer_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, S&gt;::tag_type;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    Window win(window);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = S;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    Iterator input_squared(in_squared, win);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim_y                      = in-&gt;info()-&gt;data_layout() == DataLayout::NCHW ? 1 : 2;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> radius                     = ninfo.norm_size() / 2;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_squared_stride_x     = in_squared-&gt;info()-&gt;strides_in_bytes()[0];</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_squared_stride_slice = in_squared-&gt;info()-&gt;strides_in_bytes()[dim];</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_squared_stride_row   = in_squared-&gt;info()-&gt;strides_in_bytes()[dim_y];</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_right  = in-&gt;info()-&gt;dimension(dim) - 1;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_bottom = in-&gt;info()-&gt;dimension(dim_y) - 1;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> coeff_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(ninfo.scale_coeff()), ExactTagType{});</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> beta_vec  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(ninfo.beta()), ExactTagType{});</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kappa_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(ninfo.kappa()), ExactTagType{});</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">auto</span> sequential_normalization = [&amp;](<span class="keyword">const</span> <span class="keywordtype">int</span> x, <span class="keyword">const</span> Coordinates &amp;id, <span class="keyword">const</span> <span class="keywordtype">int</span> current_row, <span class="keyword">const</span> <span class="keywordtype">int</span> first_row,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">int</span> last_row, <span class="keyword">const</span> T *input_ptr, <span class="keyword">const</span> uint8_t *input_squared_start_ptr,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                        T *output_ptr)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> current_slice = dim == 0 ? x : <span class="keywordtype">id</span>[dim];</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> first_slice   = std::max(current_slice - radius, 0);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> last_slice    = std::min(current_slice + radius, max_right);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">const</span> uint8_t *<span class="keyword">const</span> input_squared_x_ptr = input_squared_start_ptr + x * input_squared_stride_x;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Accumulate 2D In-Map values</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keyword">auto</span> accu = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.f);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = first_row; j &lt;= last_row; ++j)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// Compute row displacement</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> uint8_t *<span class="keyword">const</span> input_squared_ptr = input_squared_x_ptr + (j - current_row) * input_squared_stride_row;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = first_slice; i &lt;= last_slice; ++i)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                accu +=</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input_squared_ptr + (i - current_slice) * input_squared_stride_slice);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// Normalize</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> normalized =</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            std::pow(accu * <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(ninfo.scale_coeff()) + <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(ninfo.kappa()), ninfo.beta());</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> normalized_pixel = (*(input_ptr + x)) / normalized;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        *(output_ptr + x)           = normalized_pixel;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    };</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        win,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// Get range to normalize</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> current_row = do_2D_norm ? <span class="keywordtype">id</span>[dim_y] : 0;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> first_row   = do_2D_norm ? std::max(current_row - radius, 0) : 0;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> last_row    = do_2D_norm ? std::min(current_row + radius, max_bottom) : 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment">// Compute serially starting elements for the case x dimension is width</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">for</span> (; x &lt; radius &amp;&amp; x &lt; window_end_x &amp;&amp; dim == 0; ++x)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                sequential_normalization(x, <span class="keywordtype">id</span>, current_row, first_row, last_row, input_ptr, input_squared.ptr(),</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                         output_ptr);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// Compute vectorized</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= window_end_x - window_step_x - radius; x += window_step_x)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> current_slice = dim == 0 ? x : <span class="keywordtype">id</span>[dim];</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> first_slice   = std::max(current_slice - radius, 0);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> last_slice    = std::min(current_slice + radius, max_right);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keyword">const</span> uint8_t *<span class="keyword">const</span> input_squared_x_ptr = input_squared.ptr() + x * input_squared_stride_x;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="comment">// Accumulate 2D In-Map values</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keyword">auto</span> accu = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = first_row; j &lt;= last_row; ++j)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="comment">// Compute row displacement</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keyword">const</span> uint8_t *<span class="keyword">const</span> input_squared_ptr =</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        input_squared_x_ptr + (j - current_row) * input_squared_stride_row;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = first_slice; i &lt;= last_slice; ++i)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        accu = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                            accu, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                      input_squared_ptr + (i - current_slice) * input_squared_stride_slice)));</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment">// Normalize</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> normalized       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">wrapper::vpow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(kappa_vec, coeff_vec, accu), beta_vec);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> normalized_pixel = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">wrapper::vinv</a>(normalized));</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_ptr + x), normalized_pixel);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                sequential_normalization(x, <span class="keywordtype">id</span>, current_row, first_row, last_row, input_ptr, input_squared.ptr(),</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                         output_ptr);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        },</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, input_squared, output);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01567">NormalizationLayerInfo::beta()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01572">NormalizationLayerInfo::kappa()</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01557">NormalizationLayerInfo::norm_size()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01598">NormalizationLayerInfo::scale_coeff()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="inv_8h_source.xhtml#l00048">arm_compute::wrapper::vinv()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="pow_8h_source.xhtml#l00041">arm_compute::wrapper::vpow()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="ab14153fb809c18823af3c9c8bc4286cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab14153fb809c18823af3c9c8bc4286cb">&#9670;&nbsp;</a></span>num_channels_from_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arm_compute::num_channels_from_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of channels for a given single-planar pixel format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Input format</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for a given image format. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_format_utils_8h_source.xhtml#l00302">302</a> of file <a class="el" href="_format_utils_8h_source.xhtml">FormatUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">case</span> Format::U8:</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">case</span> Format::U16:</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">case</span> Format::S16:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">case</span> Format::U32:</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">case</span> Format::S32:</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">case</span> Format::BFLOAT16:</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">case</span> Format::F16:</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">case</span> Format::F32:</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="comment">// Because the U and V channels are subsampled</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="comment">// these formats appear like having only 2 channels:</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">case</span> Format::UV88:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">return</span> 3;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">return</span> 4;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="comment">//Doesn&#39;t make sense for planar formats:</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00142">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00202">TensorInfo::init_auto_padding()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00353">TensorInfo::set_format()</a>.</p>

</div>
</div>
<a id="a22ef3e50f7dbf08c974a120588e1ad90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22ef3e50f7dbf08c974a120588e1ad90">&#9670;&nbsp;</a></span>num_of_elements_in_range()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arm_compute::num_of_elements_in_range </td>
          <td>(</td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of elements required to go from start to end with the wanted step. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>start value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>end value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>step value between each number in the wanted sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>number of elements to go from start value to end value using the wanted step </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00295">295</a> of file <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> == 0, <span class="stringliteral">&quot;Range Step cannot be 0&quot;</span>);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">return</span> size_t(std::ceil((<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - start) / <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00126">NERangeKernel::configure()</a>.</p>

</div>
</div>
<a id="a2a71659def659c8b1c164023a99a25a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a71659def659c8b1c164023a99a25a9">&#9670;&nbsp;</a></span>num_planes_from_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arm_compute::num_planes_from_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of planes for a given format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Input format</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of planes for a given image format. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_format_utils_8h_source.xhtml#l00267">267</a> of file <a class="el" href="_format_utils_8h_source.xhtml">FormatUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">case</span> Format::U8:</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">case</span> Format::S16:</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">case</span> Format::U16:</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">case</span> Format::S32:</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">case</span> Format::U32:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">case</span> Format::BFLOAT16:</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">case</span> Format::F16:</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">case</span> Format::F32:</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">return</span> 3;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported format&quot;</span>);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

</div>
</div>
<a id="a324d709e8fb5568ada56ba4999dfb2f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a324d709e8fb5568ada56ba4999dfb2f1">&#9670;&nbsp;</a></span>offset_int_vec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::offset_int_vec </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_memory_helpers_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_memory_helpers_8h_source.xhtml">MemoryHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5007ca2bff93e4fc849e1f147501a6ea">ACL_INT_VEC</a> + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00070">ACL_INT_VEC</a>, and <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00038">CpuAddMulAdd::configure()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00046">ClSoftmax::configure()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00056">CpuSoftmaxGeneric::configure()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00165">CpuMatMul::configure()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00112">CpuGemmDirectConv2d::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00173">CpuWinogradConv2d::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00231">CpuFullyConnected::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00330">ClFullyConnected::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00304">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00183">ClWinogradConv2d::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00223">CpuGemmDirectConv2d::prepare()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00422">CpuWinogradConv2d::prepare()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00634">ClFullyConnected::prepare()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00877">ClGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00894">ClGemm::prepare()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00296">ClWinogradConv2d::prepare()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00529">CpuFullyConnected::prepare()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00639">ClGemmConv2d::prepare()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00694">CpuGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00888">CpuGemmConv2d::prepare()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00069">ClSoftmax::run()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00104">CpuAddMulAdd::run()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00159">CpuSoftmaxGeneric::run()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00255">CpuMatMul::run()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00356">CpuWinogradConv2d::run()</a>, <a class="el" href="_cl_indirect_conv2d_8cpp_source.xhtml#l00121">ClIndirectConv2d::run()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00579">ClFullyConnected::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00759">ClGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00786">ClGemm::run()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00257">ClWinogradConv2d::run()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00490">CpuFullyConnected::run()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00579">ClGemmConv2d::run()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00552">CpuGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00403">CpuGemm::run()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00797">CpuGemmConv2d::run()</a>.</p>

</div>
</div>
<a id="a5f49decb4b0a74d5361686ab45db8961"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f49decb4b0a74d5361686ab45db8961">&#9670;&nbsp;</a></span>opencl_is_available()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool opencl_is_available </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if OpenCL is available. </p>
<dl class="section return"><dt>Returns</dt><dd>True if OpenCL is available. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    CLSymbols::get().load_default();</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Using static objects that rely on OpenCL in their constructor or</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">// destructor is implementation defined according to the OpenCL API</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Specification. These objects include CLScheduler.</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// For compatibility with OpenCL runtimes that also use static objects to</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// hold their state, we call a harmless OpenCL function (clGetPlatformIDs</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// with invalid parameters must result in CL_INVALID_VALUE) to ensure the</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// runtimes have a chance to initialize their static objects first. Thanks</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// to C++11 rules about normal program completion (cf [basic.start]), this</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// ensures their static objects are destroyed last, i.e. after the</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// singleton CLScheduler is destroyed.</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// When OpenCL is not available, this call results in CL_OUT_OF_RESOURCES,</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// which is equally harmless.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    (void)<a class="code" href="_open_c_l_8cpp.xhtml#a16acb36fde338eaff889484b213c953d">clGetPlatformIDs</a>(0, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">return</span> CLSymbols::get().clBuildProgram_ptr != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00098">CLSymbols::clBuildProgram_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00969">clGetPlatformIDs()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00121">create_opencl_context_and_device()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00158">CLDeviceBackend::is_backend_supported()</a>, <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00546">Framework::run()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00558">arm_compute::test::sync_if_necessary()</a>.</p>

</div>
</div>
<a id="a4e3ff85e1f6c648dfbe264f54c147451"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e3ff85e1f6c648dfbe264f54c147451">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check that given dimensions are not equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>Left-hand side <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Right-hand side <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given dimensions are not equal. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00287">287</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">return</span> !(lhs == rhs);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac1724b70324f3f286b7c373c798ee1c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1724b70324f3f286b7c373c798ee1c6">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two quantization info are not equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>RHS quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>LHS quantization info.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given quantization info is the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00173">173</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> !(<a class="code" href="namespacearm__compute.xhtml#a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd">operator==</a>(lhs, rhs));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00275">operator==()</a>.</p>

</div>
</div>
<a id="a7b0d2413cd8bcca4ec5f8326bd227773"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b0d2413cd8bcca4ec5f8326bd227773">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two quantization info are not equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>RHS quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>LHS quantization info.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given quantization info is the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00197">197</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> !(<a class="code" href="namespacearm__compute.xhtml#a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd">operator==</a>(lhs, rhs));</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00275">operator==()</a>.</p>

</div>
</div>
<a id="a266046e37c7ebb4436ddd9322afa3c97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a266046e37c7ebb4436ddd9322afa3c97">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[1/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> *&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the activation function info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml" title="Activation Layer Information class.">ActivationLayerInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00543">543</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;{</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;enabled())</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        {</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;activation();</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;VAL_A=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;a() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;VAL_B=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;b();</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;disabled&quot;</span>;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        }</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    }</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    {</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;nullptr&quot;</span>;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    }</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a9d79efe2673aeb3f9a9160b6a78de50c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d79efe2673aeb3f9a9160b6a78de50c">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[2/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>act_function</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the activation function type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">act_function</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00460">460</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;{</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">switch</span> (act_function)</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ABS&quot;</span>;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LINEAR&quot;</span>;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LOGISTIC&quot;</span>;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RELU&quot;</span>;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BOUNDED_RELU&quot;</span>;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LEAKY_RELU:</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LEAKY_RELU&quot;</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SOFT_RELU&quot;</span>;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SQRT&quot;</span>;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU:</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LU_BOUNDED_RELU&quot;</span>;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ELU:</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ELU&quot;</span>;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SQUARE&quot;</span>;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TANH&quot;</span>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::IDENTITY:</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IDENTITY&quot;</span>;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::HARD_SWISH:</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;HARD_SWISH&quot;</span>;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SWISH:</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SWISH&quot;</span>;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::GELU:</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GELU&quot;</span>;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>.</p>

</div>
</div>
<a id="a7b94aeca99a5d6b1a5723014a01faac0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b94aeca99a5d6b1a5723014a01faac0">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[3/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the ArithmeticOperation type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Operation to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01746">1746</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;{</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    {</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#af3b709fb668cf93ca09e2a46a2a031a8">ArithmeticOperation::ADD</a>:</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ADD&quot;</span>;</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aafc2c4f262a0686c07f86c7d2e1d8d14">ArithmeticOperation::SUB</a>:</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SUB&quot;</span>;</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">ArithmeticOperation::DIV</a>:</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DIV&quot;</span>;</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ArithmeticOperation::MAX</a>:</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ArithmeticOperation::MIN</a>:</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIN&quot;</span>;</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">ArithmeticOperation::SQUARED_DIFF</a>:</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SQUARED_DIFF&quot;</span>;</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;        <span class="keywordflow">case</span> ArithmeticOperation::POWER:</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;POWER&quot;</span>;</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">ArithmeticOperation::PRELU</a>:</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PRELU&quot;</span>;</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    }</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160; </div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ADD</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">DIV</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">POWER</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">PRELU</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">SQUARED_DIFF</a>, and <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">SUB</a>.</p>

</div>
</div>
<a id="a5a9e70bf9fa34a00e747e36997ab90b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a9e70bf9fa34a00e747e36997ab90b2">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[4/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">arm_compute::CpuMatMulSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td><a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03600">3600</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03601"></a><span class="lineno"> 3601</span>&#160;{</div>
<div class="line"><a name="l03602"></a><span class="lineno"> 3602</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;CpuMatMulSettings=&quot;</span></div>
<div class="line"><a name="l03603"></a><span class="lineno"> 3603</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03604"></a><span class="lineno"> 3604</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;fast_math=&quot;</span> &lt;&lt; settings.<a class="code" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml#ae2d38726d9f14d748185f77798617c8a">fast_math</a>() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03605"></a><span class="lineno"> 3605</span>&#160; </div>
<div class="line"><a name="l03606"></a><span class="lineno"> 3606</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03607"></a><span class="lineno"> 3607</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_mat_mul_8h_source.xhtml#l00040">CpuMatMulSettings::fast_math()</a>.</p>

</div>
</div>
<a id="a23c4340b819fbed22ec80a797910cc9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23c4340b819fbed22ec80a797910cc9d">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[5/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">arm_compute::MatMulInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>matmul_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">matmul_info</td><td><a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03539">3539</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03540"></a><span class="lineno"> 3540</span>&#160;{</div>
<div class="line"><a name="l03541"></a><span class="lineno"> 3541</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;MatMulKernelInfo=&quot;</span></div>
<div class="line"><a name="l03542"></a><span class="lineno"> 3542</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03543"></a><span class="lineno"> 3543</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;adj_lhs=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="classarm__compute_1_1_mat_mul_info.xhtml#a72df5776428a994c4749bf12e1b6dceb">adj_lhs</a>() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03544"></a><span class="lineno"> 3544</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;adj_rhs=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="classarm__compute_1_1_mat_mul_info.xhtml#a39f307e04480a663f207874d42b73347">adj_rhs</a>() &lt;&lt; <span class="stringliteral">&quot;] &quot;</span>;</div>
<div class="line"><a name="l03545"></a><span class="lineno"> 3545</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03546"></a><span class="lineno"> 3546</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mat_mul_info_8h_source.xhtml#l00035">MatMulInfo::adj_lhs()</a>, and <a class="el" href="_mat_mul_info_8h_source.xhtml#l00040">MatMulInfo::adj_rhs()</a>.</p>

</div>
</div>
<a id="a341b658424c1295b77b78789593459af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a341b658424c1295b77b78789593459af">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[6/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>matmul_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">matmul_info</td><td><a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03567">3567</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03568"></a><span class="lineno"> 3568</span>&#160;{</div>
<div class="line"><a name="l03569"></a><span class="lineno"> 3569</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;MatMulKernelInfo=&quot;</span></div>
<div class="line"><a name="l03570"></a><span class="lineno"> 3570</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03571"></a><span class="lineno"> 3571</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;adj_lhs=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a468d621d449f55787e9669d11238d6d9">adj_lhs</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03572"></a><span class="lineno"> 3572</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;adj_rhs=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a2f20a31aa892d300047714b0d6fd11a2">adj_rhs</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03573"></a><span class="lineno"> 3573</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;M0=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a9cf53ea969f7eb15888a94dcdb8e6d2d">m0</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03574"></a><span class="lineno"> 3574</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;N0=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a26e6793dcfcd650c2616faf073af0ab1">n0</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03575"></a><span class="lineno"> 3575</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;K0=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#af7bba8a9fadb39652d5c9c8a800eb5c0">k0</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03576"></a><span class="lineno"> 3576</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;export_rhs_to_cl_image=&quot;</span> &lt;&lt; matmul_info.<a class="code" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a20f077d014370923ca23fd8eeceac94b">export_rhs_to_cl_image</a> &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03577"></a><span class="lineno"> 3577</span>&#160; </div>
<div class="line"><a name="l03578"></a><span class="lineno"> 3578</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03579"></a><span class="lineno"> 3579</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00245">MatMulKernelInfo::adj_lhs</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00246">MatMulKernelInfo::adj_rhs</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00250">MatMulKernelInfo::export_rhs_to_cl_image</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00249">MatMulKernelInfo::k0</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00247">MatMulKernelInfo::m0</a>, and <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00248">MatMulKernelInfo::n0</a>.</p>

</div>
</div>
<a id="acfae87a8a1f4a5af347d08f093e11b85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfae87a8a1f4a5af347d08f093e11b85">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[7/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &amp;&#160;</td>
          <td class="paramname"><em>wf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wf</td><td>WeightFormat to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03241">3241</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03242"></a><span class="lineno"> 3242</span>&#160;{</div>
<div class="line"><a name="l03243"></a><span class="lineno"> 3243</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(wf);</div>
<div class="line"><a name="l03244"></a><span class="lineno"> 3244</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03245"></a><span class="lineno"> 3245</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="a7929032d41d5f23cd1778a70508d0219"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7929032d41d5f23cd1778a70508d0219">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[8/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the BorderMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01014">1014</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;{</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>)</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    {</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="keywordflow">case</span> BorderMode::UNDEFINED:</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNDEFINED&quot;</span>;</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <span class="keywordflow">case</span> BorderMode::CONSTANT:</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CONSTANT&quot;</span>;</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        <span class="keywordflow">case</span> BorderMode::REPLICATE:</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;REPLICATE&quot;</span>;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    }</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160; </div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>, <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules::mode</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">REPLICATE</a>, and <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</a>.</p>

</div>
</div>
<a id="af32c4c5cdd0efde09774eb803bc8a0bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af32c4c5cdd0efde09774eb803bc8a0bd">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[9/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;&#160;</td>
          <td class="paramname"><em>border</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01041">1041</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;{</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    os &lt;&lt; border.top &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; border.right &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; border.bottom &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; border.left;</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160; </div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

</div>
</div>
<a id="af81bb4f87d418311c7ca43a28c74bf03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af81bb4f87d418311c7ca43a28c74bf03">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[10/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>bbox_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" title="Bounding Box Transform information class.">BoundingBoxTransformInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bbox_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00345">345</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">auto</span> weights = bbox_info.weights();</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; bbox_info.img_width() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; bbox_info.img_height() &lt;&lt; <span class="stringliteral">&quot;)~&quot;</span> &lt;&lt; bbox_info.scale() &lt;&lt; <span class="stringliteral">&quot;(weights={&quot;</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;       &lt;&lt; weights[0] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; weights[1] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; weights[2] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; weights[3] &lt;&lt; <span class="stringliteral">&quot;})&quot;</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01493">BoundingBoxTransformInfo::img_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01498">BoundingBoxTransformInfo::img_width()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01503">BoundingBoxTransformInfo::scale()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01483">BoundingBoxTransformInfo::weights()</a>.</p>

</div>
</div>
<a id="ab8052968d0b455bc9378c0df27e8e4ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8052968d0b455bc9378c0df27e8e4ba">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[11/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" title="BoxWithNonMaximaSuppressionLimit Information class.">BoxNMSLimitInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" title="BoxWithNonMaximaSuppressionLimit Information class.">BoxNMSLimitInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03102">3102</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03103"></a><span class="lineno"> 3103</span>&#160;{</div>
<div class="line"><a name="l03104"></a><span class="lineno"> 3104</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{score_thresh=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.score_thresh() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03105"></a><span class="lineno"> 3105</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;nms=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.nms() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03106"></a><span class="lineno"> 3106</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;detections_per_im=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.detections_per_im() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03107"></a><span class="lineno"> 3107</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;soft_nms_enabled=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.soft_nms_enabled() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03108"></a><span class="lineno"> 3108</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;soft_nms_min_score_thres=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.soft_nms_min_score_thres() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03109"></a><span class="lineno"> 3109</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;suppress_size=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.suppress_size() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03110"></a><span class="lineno"> 3110</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;min_size=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.min_size() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03111"></a><span class="lineno"> 3111</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;im_width=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.im_width() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03112"></a><span class="lineno"> 3112</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;im_height=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.im_height() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l03113"></a><span class="lineno"> 3113</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03114"></a><span class="lineno"> 3114</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="aa66be15c012986ebd4c1934b97e08a36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa66be15c012986ebd4c1934b97e08a36">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[12/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> &amp;&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Channel type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00947">947</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;{</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    {</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Channel::UNKNOWN</a>:</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;        <span class="keywordflow">case</span> Channel::C0:</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C0&quot;</span>;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        <span class="keywordflow">case</span> Channel::C1:</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C1&quot;</span>;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;        <span class="keywordflow">case</span> Channel::C2:</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C2&quot;</span>;</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">case</span> Channel::C3:</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C3&quot;</span>;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <span class="keywordflow">case</span> Channel::R:</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;R&quot;</span>;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keywordflow">case</span> Channel::G:</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G&quot;</span>;</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;        <span class="keywordflow">case</span> Channel::B:</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;B&quot;</span>;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <span class="keywordflow">case</span> Channel::A:</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;A&quot;</span>;</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Y&quot;</span>;</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U&quot;</span>;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;V&quot;</span>;</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    }</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160; </div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">C0</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">C1</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">C2</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">C3</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>, and <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>.</p>

</div>
</div>
<a id="a0b4778f9d4687b03b98056042f1e6c1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b4778f9d4687b03b98056042f1e6c1c">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[13/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the pute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes::ElementwiseOp type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00047">47</a> of file <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml">ElementwiseBinary.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> std::map&lt;ClComponentElementwiseBinary::Attributes::ElementwiseOp, std::string&gt; op_name = {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Add, <span class="stringliteral">&quot;add&quot;</span>},</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Div, <span class="stringliteral">&quot;div&quot;</span>},</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Max, <span class="stringliteral">&quot;max&quot;</span>},</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Min, <span class="stringliteral">&quot;min&quot;</span>},</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Mul, <span class="stringliteral">&quot;mul&quot;</span>},</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Power, <span class="stringliteral">&quot;power&quot;</span>},</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Prelu, <span class="stringliteral">&quot;prelu&quot;</span>},</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::SquaredDiff, <span class="stringliteral">&quot;squareddiff&quot;</span>},</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {ClComponentElementwiseBinary::Attributes::ElementwiseOp::Sub, <span class="stringliteral">&quot;sub&quot;</span>}};</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    os &lt;&lt; op_name.at(op);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1aec211f7c20af43e742bf2570c3cb84f9">ElementwiseBinaryCommonAttributes::Add</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a43d11850893d2fe84a1e618121c1cc0a">ElementwiseBinaryCommonAttributes::Div</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a6a061313d22e51e0f25b7cd4dc065233">ElementwiseBinaryCommonAttributes::Max</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a78d811e98514cd165dda532286610fd2">ElementwiseBinaryCommonAttributes::Min</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a62b6d55816cf737bfc6f42e60df1a3f2">ElementwiseBinaryCommonAttributes::Mul</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1add4fe0cc913f704600b97d1f5dd285de">ElementwiseBinaryCommonAttributes::Power</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a0c5967f09e0669c840ebb1ed0da85e32">ElementwiseBinaryCommonAttributes::Prelu</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a3610f846604ac9c4ea75264311d10cd0">ElementwiseBinaryCommonAttributes::SquaredDiff</a>, and <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1ae80155eceb940c89e2de63ad05868db2">ElementwiseBinaryCommonAttributes::Sub</a>.</p>

</div>
</div>
<a id="ac470b79f272c53fc4da4910370a69f24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac470b79f272c53fc4da4910370a69f24">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[14/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>[Print CLTunerMode type] </p>
<p>Formatted output of the CLTunerMode type.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>CLTunerMode to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02577">2577</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;{</div>
<div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(val);</div>
<div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="aac34f5e54ad35f26328f8706b3d28b43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac34f5e54ad35f26328f8706b3d28b43">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[15/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Comparison Operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01856">1856</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;{</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;    {</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Equal:</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Equal&quot;</span>;</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::NotEqual:</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NotEqual&quot;</span>;</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Greater:</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Greater&quot;</span>;</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::GreaterEqual:</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GreaterEqual&quot;</span>;</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Less:</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Less&quot;</span>;</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::LessEqual:</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LessEqual&quot;</span>;</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    }</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160; </div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">Equal</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">Greater</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">GreaterEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">Less</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">LessEqual</a>, and <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">NotEqual</a>.</p>

</div>
</div>
<a id="a59ea8b6694897a281eb3105f5c99f28f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59ea8b6694897a281eb3105f5c99f28f">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[16/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" title="ComputeAnchors information class.">ComputeAnchorsInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">anchors_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00380">380</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; anchors_info.feat_width() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; anchors_info.feat_height() &lt;&lt; <span class="stringliteral">&quot;)~&quot;</span> &lt;&lt; anchors_info.spatial_scale();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01422">ComputeAnchorsInfo::feat_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01428">ComputeAnchorsInfo::feat_width()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01434">ComputeAnchorsInfo::spatial_scale()</a>.</p>

</div>
</div>
<a id="a8ce1b6b7e66e67553c49eb9c76229ce1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ce1b6b7e66e67553c49eb9c76229ce1">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[17/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml" title="Descriptor used by the 2d Convolution function.">Conv2dInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td><a class="el" href="structarm__compute_1_1_conv2d_info.xhtml" title="Descriptor used by the 2d Convolution function.">Conv2dInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02728">2728</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02729"></a><span class="lineno"> 2729</span>&#160;{</div>
<div class="line"><a name="l02730"></a><span class="lineno"> 2730</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{conv_info=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.conv_info &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02731"></a><span class="lineno"> 2731</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;dilation=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.dilation &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02732"></a><span class="lineno"> 2732</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;act_info=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.act_info) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02733"></a><span class="lineno"> 2733</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;enable_fast_math=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.enable_fast_math &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02734"></a><span class="lineno"> 2734</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;num_groups=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.num_groups &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02735"></a><span class="lineno"> 2735</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02736"></a><span class="lineno"> 2736</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02737"></a><span class="lineno"> 2737</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, and <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="a139447eca91a24ca2849e6d9b00cdc49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a139447eca91a24ca2849e6d9b00cdc49">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[18/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv3d_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml" title="Descriptor used by the 3d Convolution function.">Conv3dInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv3d_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03149">3149</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03150"></a><span class="lineno"> 3150</span>&#160;{</div>
<div class="line"><a name="l03151"></a><span class="lineno"> 3151</span>&#160;    os &lt;&lt; conv3d_info.stride;</div>
<div class="line"><a name="l03152"></a><span class="lineno"> 3152</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l03153"></a><span class="lineno"> 3153</span>&#160;    os &lt;&lt; conv3d_info.padding;</div>
<div class="line"><a name="l03154"></a><span class="lineno"> 3154</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l03155"></a><span class="lineno"> 3155</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(conv3d_info.act_info);</div>
<div class="line"><a name="l03156"></a><span class="lineno"> 3156</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l03157"></a><span class="lineno"> 3157</span>&#160;    os &lt;&lt; conv3d_info.dilation;</div>
<div class="line"><a name="l03158"></a><span class="lineno"> 3158</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l03159"></a><span class="lineno"> 3159</span>&#160;    os &lt;&lt; conv3d_info.round_type;</div>
<div class="line"><a name="l03160"></a><span class="lineno"> 3160</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l03161"></a><span class="lineno"> 3161</span>&#160;    os &lt;&lt; conv3d_info.enable_fast_math;</div>
<div class="line"><a name="l03162"></a><span class="lineno"> 3162</span>&#160; </div>
<div class="line"><a name="l03163"></a><span class="lineno"> 3163</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03164"></a><span class="lineno"> 3164</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_function_descriptors_8h_source.xhtml#l00106">Conv3dInfo::act_info</a>, <a class="el" href="_function_descriptors_8h_source.xhtml#l00107">Conv3dInfo::dilation</a>, <a class="el" href="_function_descriptors_8h_source.xhtml#l00109">Conv3dInfo::enable_fast_math</a>, <a class="el" href="_function_descriptors_8h_source.xhtml#l00105">Conv3dInfo::padding</a>, <a class="el" href="_function_descriptors_8h_source.xhtml#l00108">Conv3dInfo::round_type</a>, <a class="el" href="_function_descriptors_8h_source.xhtml#l00104">Conv3dInfo::stride</a>, and <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="a4287c6842a60e5f6bf309e55f8813527"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4287c6842a60e5f6bf309e55f8813527">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[19/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the ConvertPolicy type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01715">1715</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;{</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;    <span class="keywordflow">switch</span> (policy)</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;    {</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;        <span class="keywordflow">case</span> ConvertPolicy::WRAP:</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;WRAP&quot;</span>;</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        <span class="keywordflow">case</span> ConvertPolicy::SATURATE:</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SATURATE&quot;</span>;</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    }</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160; </div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">SATURATE</a>, and <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">WRAP</a>.</p>

</div>
</div>
<a id="a1ee5b5cbe61f0862d907d9db15c3d9d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ee5b5cbe61f0862d907d9db15c3d9d6">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[20/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td><a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02590">2590</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;{</div>
<div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{PadStrideInfo=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_stride_info &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;depth_multiplier=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.depth_multiplier &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;act_info=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.act_info) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;dilation=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.dilation &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, and <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="abd35c1c3fb716078b1f4a25981defac4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd35c1c3fb716078b1f4a25981defac4">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[21/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_method</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the ConvolutionMethod type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_method</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02168">2168</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;{</div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;    <span class="keywordflow">switch</span> (conv_method)</div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;    {</div>
<div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">ConvolutionMethod::GEMM</a>:</div>
<div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GEMM&quot;</span>;</div>
<div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">ConvolutionMethod::DIRECT</a>:</div>
<div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DIRECT&quot;</span>;</div>
<div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7">ConvolutionMethod::WINOGRAD</a>:</div>
<div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;WINOGRAD&quot;</span>;</div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::FFT:</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FFT&quot;</span>;</div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::GEMM_CONV2D:</div>
<div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GEMM_CONV2D&quot;</span>;</div>
<div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;    }</div>
<div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160; </div>
<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">DIRECT</a>, <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28">FFT</a>, <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>, <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84">GEMM_CONV2D</a>, and <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8">WINOGRAD</a>.</p>

</div>
</div>
<a id="a55c00b11e26573f0151cc26a99589a6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55c00b11e26573f0151cc26a99589a6f">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[22/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> &amp;&#160;</td>
          <td class="paramname"><em>coord_2d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" title="Coordinate type.">Coordinates2D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord_2d</td><td><a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" title="Coordinate type.">Coordinates2D</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02908">2908</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160;{</div>
<div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{x=&quot;</span> &lt;&lt; coord_2d.<a class="code" href="struct_coordinates2_d.xhtml#a6150e0515f7202e2fb518f7206ed97dc">x</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;y=&quot;</span> &lt;&lt; coord_2d.<a class="code" href="struct_coordinates2_d.xhtml#a0a2f84ed7838f07779ae24c5a9086d33">y</a> &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Coordinates2D::x</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00387">Coordinates2D::y</a>.</p>

</div>
</div>
<a id="a1698cb24508a2bc45962bc887f18a8d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1698cb24508a2bc45962bc887f18a8d0">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[23/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>[Print DataLayout type] </p>
<p>Formatted output of the DataLayout type.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00695">695</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;{</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>)</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>:</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">case</span> DataLayout::NHWC:</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NHWC&quot;</span>;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">case</span> DataLayout::NCHW:</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NCHW&quot;</span>;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <span class="keywordflow">case</span> DataLayout::NDHWC:</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NDHWC&quot;</span>;</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="keywordflow">case</span> DataLayout::NCDHW:</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NCDHW&quot;</span>;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160; </div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">NCDHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">NDHWC</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

</div>
</div>
<a id="adec19acb64bfca26fa53ef76f03b79ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adec19acb64bfca26fa53ef76f03b79ef">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[24/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout_dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>[Print DataLayout type] </p>
<p>Formatted output of the DataLayoutDimension type.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout_dim</td><td>Data layout dimension to print.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00742">742</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;{</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordflow">switch</span> (data_layout_dim)</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::WIDTH:</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;WIDTH&quot;</span>;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::HEIGHT:</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;HEIGHT&quot;</span>;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::CHANNEL:</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CHANNEL&quot;</span>;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::DEPTH:</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DEPTH&quot;</span>;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::BATCHES:</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BATCHES&quot;</span>;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">BATCHES</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">DEPTH</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>.</p>

</div>
</div>
<a id="a685af15532d70b8682bcc52f06f034f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685af15532d70b8682bcc52f06f034f9">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[25/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the DataType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00774">774</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;{</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    {</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>:</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U8&quot;</span>;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QSYMM8&quot;</span>;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QASYMM8&quot;</span>;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QASYMM8_SIGNED&quot;</span>;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QSYMM8_PER_CHANNEL&quot;</span>;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S8&quot;</span>;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U16&quot;</span>;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S16&quot;</span>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QSYMM16&quot;</span>;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QASYMM16&quot;</span>;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U32&quot;</span>;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S32&quot;</span>;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U64&quot;</span>;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S64&quot;</span>;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BFLOAT16&quot;</span>;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F16&quot;</span>;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F32&quot;</span>;</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F64&quot;</span>;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SIZET&quot;</span>;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    }</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160; </div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">F64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">SIZET</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

</div>
</div>
<a id="a28634df052522fe60e15a0128ba924cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28634df052522fe60e15a0128ba924cc">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[26/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the DetectionOutputLayerCodeType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_code</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02357">2357</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;{</div>
<div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;    <span class="keywordflow">switch</span> (detection_code)</div>
<div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;    {</div>
<div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;        <span class="keywordflow">case</span> DetectionOutputLayerCodeType::CENTER_SIZE:</div>
<div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CENTER_SIZE&quot;</span>;</div>
<div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;        <span class="keywordflow">case</span> DetectionOutputLayerCodeType::CORNER:</div>
<div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CORNER&quot;</span>;</div>
<div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;        <span class="keywordflow">case</span> DetectionOutputLayerCodeType::CORNER_SIZE:</div>
<div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CORNER_SIZE&quot;</span>;</div>
<div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;        <span class="keywordflow">case</span> DetectionOutputLayerCodeType::TF_CENTER:</div>
<div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TF_CENTER&quot;</span>;</div>
<div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;    }</div>
<div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160; </div>
<div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">CENTER_SIZE</a>, <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">CORNER</a>, <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">CORNER_SIZE</a>, and <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">TF_CENTER</a>.</p>

</div>
</div>
<a id="a22b40e983993e76ab39ce878fb111b9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22b40e983993e76ab39ce878fb111b9b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[27/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" title="Detection Output layer info.">DetectionOutputLayerInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_info</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02399">2399</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;{</div>
<div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{Classes=&quot;</span> &lt;&lt; detection_info.num_classes() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ShareLocation=&quot;</span> &lt;&lt; detection_info.share_location() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;CodeType=&quot;</span> &lt;&lt; detection_info.code_type() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;VarianceEncodedInTarget=&quot;</span> &lt;&lt; detection_info.variance_encoded_in_target() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;KeepTopK=&quot;</span> &lt;&lt; detection_info.keep_top_k() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NMSThreshold=&quot;</span> &lt;&lt; detection_info.nms_threshold() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Eta=&quot;</span> &lt;&lt; detection_info.eta() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;BackgroundLabelId=&quot;</span> &lt;&lt; detection_info.background_label_id() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ConfidenceThreshold=&quot;</span> &lt;&lt; detection_info.confidence_threshold() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;TopK=&quot;</span> &lt;&lt; detection_info.top_k() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NumLocClasses=&quot;</span> &lt;&lt; detection_info.num_loc_classes() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160; </div>
<div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00882">DetectionOutputLayerInfo::background_label_id()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00857">DetectionOutputLayerInfo::code_type()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00887">DetectionOutputLayerInfo::confidence_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00877">DetectionOutputLayerInfo::eta()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00867">DetectionOutputLayerInfo::keep_top_k()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00872">DetectionOutputLayerInfo::nms_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00847">DetectionOutputLayerInfo::num_classes()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00897">DetectionOutputLayerInfo::num_loc_classes()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00852">DetectionOutputLayerInfo::share_location()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00892">DetectionOutputLayerInfo::top_k()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00862">DetectionOutputLayerInfo::variance_encoded_in_target()</a>.</p>

</div>
</div>
<a id="a94809adf238fe4a002701316c27b9bec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94809adf238fe4a002701316c27b9bec">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[28/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info.">DetectionPostProcessLayerInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_info</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02435">2435</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;{</div>
<div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{MaxDetections=&quot;</span> &lt;&lt; detection_info.max_detections() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;MaxClassesPerDetection=&quot;</span> &lt;&lt; detection_info.max_classes_per_detection() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NmsScoreThreshold=&quot;</span> &lt;&lt; detection_info.nms_score_threshold() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NmsIouThreshold=&quot;</span> &lt;&lt; detection_info.iou_threshold() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NumClasses=&quot;</span> &lt;&lt; detection_info.num_classes() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_y=&quot;</span> &lt;&lt; detection_info.scale_value_y() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_x=&quot;</span> &lt;&lt; detection_info.scale_value_x() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_h=&quot;</span> &lt;&lt; detection_info.scale_value_h() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_w=&quot;</span> &lt;&lt; detection_info.scale_value_w() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;UseRegularNms=&quot;</span> &lt;&lt; detection_info.use_regular_nms() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;DetectionPerClass=&quot;</span> &lt;&lt; detection_info.detection_per_class() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160; </div>
<div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00976">DetectionPostProcessLayerInfo::detection_per_class()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00986">DetectionPostProcessLayerInfo::iou_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00971">DetectionPostProcessLayerInfo::max_classes_per_detection()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00966">DetectionPostProcessLayerInfo::max_detections()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00981">DetectionPostProcessLayerInfo::nms_score_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00991">DetectionPostProcessLayerInfo::num_classes()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01013">DetectionPostProcessLayerInfo::scale_value_h()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01019">DetectionPostProcessLayerInfo::scale_value_w()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01007">DetectionPostProcessLayerInfo::scale_value_x()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01001">DetectionPostProcessLayerInfo::scale_value_y()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00996">DetectionPostProcessLayerInfo::use_regular_nms()</a>.</p>

</div>
</div>
<a id="a907c93ba5daaabf6af7095f20340d024"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a907c93ba5daaabf6af7095f20340d024">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[29/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_detection_window.xhtml" title="Detection window used for the object detection.">DetectionWindow</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_window</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02338">2338</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;{</div>
<div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{x=&quot;</span> &lt;&lt; detection_window.<a class="code" href="struct_detection_window.xhtml#a0815db32ce16586f5e90a633735df930">x</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;y=&quot;</span> &lt;&lt; detection_window.<a class="code" href="struct_detection_window.xhtml#a45b45124e843a937c3e256edbce64eea">y</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;width=&quot;</span> &lt;&lt; detection_window.<a class="code" href="struct_detection_window.xhtml#a67fe5ca4d6c3f95bf649ef48fe3d221b">width</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;height=&quot;</span> &lt;&lt; detection_window.<a class="code" href="struct_detection_window.xhtml#aa0fb54e3dbe6f7446157eb3f3c1f77f3">height</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;idx_class=&quot;</span> &lt;&lt; detection_window.<a class="code" href="struct_detection_window.xhtml#ad4f986571659dd822695ca58dda00e49">idx_class</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;score=&quot;</span> &lt;&lt; detection_window.<a class="code" href="struct_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">score</a> &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160; </div>
<div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00474">DetectionWindow::height</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00475">DetectionWindow::idx_class</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00476">DetectionWindow::score</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00473">DetectionWindow::width</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00471">DetectionWindow::x</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00472">DetectionWindow::y</a>.</p>

</div>
</div>
<a id="a31a16fbea569d74c328824a60f07f626"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31a16fbea569d74c328824a60f07f626">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[30/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;&#160;</td>
          <td class="paramname"><em>rounding_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the DimensionRoundingType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_type</td><td>DimensionRoundingType Dimension rounding type when down-scaling, or compute output shape of pooling(2D or 3D).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02062">2062</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;{</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;    <span class="keywordflow">switch</span> (rounding_type)</div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;    {</div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::CEIL:</div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CEIL&quot;</span>;</div>
<div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::FLOOR:</div>
<div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FLOOR&quot;</span>;</div>
<div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;    }</div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>, and <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>.</p>

</div>
</div>
<a id="a18d43401e8f84ed020429b41ec4e99f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18d43401e8f84ed020429b41ec4e99f5">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[31/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimensions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dimensions</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00162">162</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">if</span> (dimensions.num_dimensions() &gt; 0)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        os &lt;&lt; dimensions[0];</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 1; d &lt; dimensions.num_dimensions(); ++d)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; dimensions[d];</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>

</div>
</div>
<a id="accfc6f2e5fb354e1fb19a7067b6efdec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accfc6f2e5fb354e1fb19a7067b6efdec">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[32/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Elementwise unary Operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01892">1892</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;{</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;    {</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::RSQRT:</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RSQRT&quot;</span>;</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::EXP:</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;EXP&quot;</span>;</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NEG&quot;</span>;</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOG:</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LOG&quot;</span>;</div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::SIN:</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SIN&quot;</span>;</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ABS&quot;</span>;</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ROUND:</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ROUND&quot;</span>;</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOGICAL_NOT:</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LOGICAL_NOT&quot;</span>;</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    }</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160; </div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">EXP</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680">LOGICAL_NOT</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">NEG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ROUND</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">RSQRT</a>, and <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">SIN</a>.</p>

</div>
</div>
<a id="a80d092dd1ae944fbc9182991800c8551"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80d092dd1ae944fbc9182991800c8551">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[33/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml">experimental::dynamic_fusion::CastAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>cast_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cast_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03388">3388</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03389"></a><span class="lineno"> 3389</span>&#160;{</div>
<div class="line"><a name="l03390"></a><span class="lineno"> 3390</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;CastAttributes=&quot;</span></div>
<div class="line"><a name="l03391"></a><span class="lineno"> 3391</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03392"></a><span class="lineno"> 3392</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Data Type=&quot;</span> &lt;&lt; cast_attr.data_type() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03393"></a><span class="lineno"> 3393</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Convert Policy=&quot;</span> &lt;&lt; cast_attr.convert_policy() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03394"></a><span class="lineno"> 3394</span>&#160; </div>
<div class="line"><a name="l03395"></a><span class="lineno"> 3395</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03396"></a><span class="lineno"> 3396</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cast_attributes_8cpp_source.xhtml#l00044">CastAttributes::convert_policy()</a>, and <a class="el" href="_cast_attributes_8cpp_source.xhtml#l00033">CastAttributes::data_type()</a>.</p>

</div>
</div>
<a id="ae14eb3d3a4bb8abdedd18cd791bbe16a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae14eb3d3a4bb8abdedd18cd791bbe16a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[34/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml">experimental::dynamic_fusion::ClampAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>clamp_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">clamp_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03450">3450</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03451"></a><span class="lineno"> 3451</span>&#160;{</div>
<div class="line"><a name="l03452"></a><span class="lineno"> 3452</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;ClampAttributes=&quot;</span></div>
<div class="line"><a name="l03453"></a><span class="lineno"> 3453</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03454"></a><span class="lineno"> 3454</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Min value=&quot;</span> &lt;&lt; clamp_attr.min_val() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03455"></a><span class="lineno"> 3455</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Max value=&quot;</span> &lt;&lt; clamp_attr.max_val() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03456"></a><span class="lineno"> 3456</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03457"></a><span class="lineno"> 3457</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_clamp_attributes_8cpp_source.xhtml#l00045">ClampAttributes::max_val()</a>, and <a class="el" href="_clamp_attributes_8cpp_source.xhtml#l00034">ClampAttributes::min_val()</a>.</p>

</div>
</div>
<a id="a40d7bf1a197d4186a5b59a6f98b3d208"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40d7bf1a197d4186a5b59a6f98b3d208">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[35/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">experimental::dynamic_fusion::Conv2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>conv2d_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv2d_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03357">3357</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03358"></a><span class="lineno"> 3358</span>&#160;{</div>
<div class="line"><a name="l03359"></a><span class="lineno"> 3359</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Conv2dAttributes=&quot;</span></div>
<div class="line"><a name="l03360"></a><span class="lineno"> 3360</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03361"></a><span class="lineno"> 3361</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Padding=&quot;</span> &lt;&lt; conv2d_attr.pad() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03362"></a><span class="lineno"> 3362</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Size2D=&quot;</span> &lt;&lt; conv2d_attr.stride() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03363"></a><span class="lineno"> 3363</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Dialation=&quot;</span> &lt;&lt; conv2d_attr.dilation() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03364"></a><span class="lineno"> 3364</span>&#160; </div>
<div class="line"><a name="l03365"></a><span class="lineno"> 3365</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03366"></a><span class="lineno"> 3366</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00051">Conv2dAttributes::dilation()</a>, <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00033">Conv2dAttributes::pad()</a>, and <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00042">Conv2dAttributes::stride()</a>.</p>

</div>
</div>
<a id="ae4738bfbf645429b3778372170d8fe55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4738bfbf645429b3778372170d8fe55">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[36/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml">experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>dw_conv2d_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dw_conv2d_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03417">3417</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03419"></a><span class="lineno"> 3419</span>&#160;{</div>
<div class="line"><a name="l03420"></a><span class="lineno"> 3420</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;DepthwiseConv2dAttributes=&quot;</span></div>
<div class="line"><a name="l03421"></a><span class="lineno"> 3421</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03422"></a><span class="lineno"> 3422</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Padding=&quot;</span> &lt;&lt; dw_conv2d_attr.pad() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03423"></a><span class="lineno"> 3423</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Size2D=&quot;</span> &lt;&lt; dw_conv2d_attr.stride() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03424"></a><span class="lineno"> 3424</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Depth Multiplier=&quot;</span> &lt;&lt; dw_conv2d_attr.depth_multiplier() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03425"></a><span class="lineno"> 3425</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Dilation=&quot;</span> &lt;&lt; dw_conv2d_attr.dilation() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l03426"></a><span class="lineno"> 3426</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;DimensionRoundingType: &quot;</span> &lt;&lt; dw_conv2d_attr.dimension_rounding_type() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03427"></a><span class="lineno"> 3427</span>&#160; </div>
<div class="line"><a name="l03428"></a><span class="lineno"> 3428</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03429"></a><span class="lineno"> 3429</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_depthwise_conv2d_attributes_8cpp_source.xhtml#l00061">DepthwiseConv2dAttributes::depth_multiplier()</a>, <a class="el" href="_depthwise_conv2d_attributes_8cpp_source.xhtml#l00051">DepthwiseConv2dAttributes::dilation()</a>, <a class="el" href="_depthwise_conv2d_attributes_8cpp_source.xhtml#l00073">DepthwiseConv2dAttributes::dimension_rounding_type()</a>, <a class="el" href="_depthwise_conv2d_attributes_8cpp_source.xhtml#l00033">DepthwiseConv2dAttributes::pad()</a>, and <a class="el" href="_depthwise_conv2d_attributes_8cpp_source.xhtml#l00042">DepthwiseConv2dAttributes::stride()</a>.</p>

</div>
</div>
<a id="ad0faf30fb6d5ef627a4c2cb3cc83d65d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0faf30fb6d5ef627a4c2cb3cc83d65d">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[37/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">experimental::dynamic_fusion::GpuPool2dSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>arm_compute::dynamic_fusion::GpuPool2dSettings type to output </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03329">3329</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03330"></a><span class="lineno"> 3330</span>&#160;{</div>
<div class="line"><a name="l03331"></a><span class="lineno"> 3331</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Settings=&quot;</span></div>
<div class="line"><a name="l03332"></a><span class="lineno"> 3332</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03333"></a><span class="lineno"> 3333</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;UseInfAsLimit=&quot;</span> &lt;&lt; settings.use_inf_as_limit() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03334"></a><span class="lineno"> 3334</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03335"></a><span class="lineno"> 3335</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00075">GpuPool2dSettings::use_inf_as_limit()</a>.</p>

</div>
</div>
<a id="a9d01286647492c788a246fd80f7c2ee1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d01286647492c788a246fd80f7c2ee1">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[38/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">experimental::dynamic_fusion::Pool2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>pool2d_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool2d_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03298">3298</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03299"></a><span class="lineno"> 3299</span>&#160;{</div>
<div class="line"><a name="l03300"></a><span class="lineno"> 3300</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Pool2dAttributes=&quot;</span></div>
<div class="line"><a name="l03301"></a><span class="lineno"> 3301</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03302"></a><span class="lineno"> 3302</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;PoolingType=&quot;</span> &lt;&lt; pool2d_attr.pool_type() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l03303"></a><span class="lineno"> 3303</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;PoolSize=&quot;</span> &lt;&lt; pool2d_attr.pool_size() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l03304"></a><span class="lineno"> 3304</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Padding=&quot;</span> &lt;&lt; pool2d_attr.pad() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l03305"></a><span class="lineno"> 3305</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Stride=&quot;</span> &lt;&lt; pool2d_attr.stride() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l03306"></a><span class="lineno"> 3306</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ExcludePadding&quot;</span> &lt;&lt; pool2d_attr.exclude_padding() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03307"></a><span class="lineno"> 3307</span>&#160; </div>
<div class="line"><a name="l03308"></a><span class="lineno"> 3308</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03309"></a><span class="lineno"> 3309</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00079">Pool2dAttributes::exclude_padding()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00046">Pool2dAttributes::pad()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00057">Pool2dAttributes::pool_size()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00035">Pool2dAttributes::pool_type()</a>, and <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00068">Pool2dAttributes::stride()</a>.</p>

</div>
</div>
<a id="a0a8318afa53a36694c053b8bdebf8cbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a8318afa53a36694c053b8bdebf8cbb">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[39/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml">experimental::dynamic_fusion::ResizeAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>resize_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">resize_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03478">3478</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03479"></a><span class="lineno"> 3479</span>&#160;{</div>
<div class="line"><a name="l03480"></a><span class="lineno"> 3480</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;ResizeAttributes=&quot;</span></div>
<div class="line"><a name="l03481"></a><span class="lineno"> 3481</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03482"></a><span class="lineno"> 3482</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;AlignCorners=&quot;</span> &lt;&lt; resize_attr.align_corners() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03483"></a><span class="lineno"> 3483</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;InterpolationPolicy=&quot;</span> &lt;&lt; resize_attr.interpolation_policy() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03484"></a><span class="lineno"> 3484</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;OutputHeight=&quot;</span> &lt;&lt; resize_attr.output_height() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03485"></a><span class="lineno"> 3485</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;OutputWidth=&quot;</span> &lt;&lt; resize_attr.output_width() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03486"></a><span class="lineno"> 3486</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;SamplingPolicy=&quot;</span> &lt;&lt; resize_attr.sampling_policy() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03487"></a><span class="lineno"> 3487</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03488"></a><span class="lineno"> 3488</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_resize_attributes_8cpp_source.xhtml#l00077">ResizeAttributes::align_corners()</a>, <a class="el" href="_resize_attributes_8cpp_source.xhtml#l00055">ResizeAttributes::interpolation_policy()</a>, <a class="el" href="_resize_attributes_8cpp_source.xhtml#l00044">ResizeAttributes::output_height()</a>, <a class="el" href="_resize_attributes_8cpp_source.xhtml#l00033">ResizeAttributes::output_width()</a>, and <a class="el" href="_resize_attributes_8cpp_source.xhtml#l00066">ResizeAttributes::sampling_policy()</a>.</p>

</div>
</div>
<a id="aa832ab6a5089acbf50950aeffc6437b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa832ab6a5089acbf50950aeffc6437b5">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[40/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml">experimental::dynamic_fusion::SoftmaxAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>softmax_attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">softmax_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03510">3510</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03512"></a><span class="lineno"> 3512</span>&#160;{</div>
<div class="line"><a name="l03513"></a><span class="lineno"> 3513</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;SoftmaxAttributes=&quot;</span></div>
<div class="line"><a name="l03514"></a><span class="lineno"> 3514</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;[&quot;</span></div>
<div class="line"><a name="l03515"></a><span class="lineno"> 3515</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Beta=&quot;</span> &lt;&lt; softmax_attr.beta() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03516"></a><span class="lineno"> 3516</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Is Log Softmax=&quot;</span> &lt;&lt; softmax_attr.is_log_softmax() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03517"></a><span class="lineno"> 3517</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Axis=&quot;</span> &lt;&lt; softmax_attr.axis() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03518"></a><span class="lineno"> 3518</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03519"></a><span class="lineno"> 3519</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_softmax_attributes_8cpp_source.xhtml#l00055">SoftmaxAttributes::axis()</a>, <a class="el" href="_softmax_attributes_8cpp_source.xhtml#l00033">SoftmaxAttributes::beta()</a>, and <a class="el" href="_softmax_attributes_8cpp_source.xhtml#l00044">SoftmaxAttributes::is_log_softmax()</a>.</p>

</div>
</div>
<a id="a99d2d5ca692cb82f43e17e51ab1bb356"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99d2d5ca692cb82f43e17e51ab1bb356">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[41/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>fft1d_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fft1d_info</td><td><a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02853">2853</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02854"></a><span class="lineno"> 2854</span>&#160;{</div>
<div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{axis=&quot;</span> &lt;&lt; fft1d_info.axis &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;direction=&quot;</span> &lt;&lt; fft1d_info.direction &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_function_descriptors_8h_source.xhtml#l00044">FFT1DInfo::axis</a>, and <a class="el" href="_function_descriptors_8h_source.xhtml#l00045">FFT1DInfo::direction</a>.</p>

</div>
</div>
<a id="a7aabe11f72f8994b26e2a2fd66860738"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aabe11f72f8994b26e2a2fd66860738">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[42/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>fft2d_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" title="Descriptor used by the FFT2D function.">FFT2DInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fft2d_info</td><td><a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" title="Descriptor used by the FFT2D function.">FFT2DInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02880">2880</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;{</div>
<div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{axis=&quot;</span> &lt;&lt; fft2d_info.axis0 &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;axis=&quot;</span> &lt;&lt; fft2d_info.axis1 &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;direction=&quot;</span> &lt;&lt; fft2d_info.direction &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_function_descriptors_8h_source.xhtml#l00051">FFT2DInfo::axis0</a>, <a class="el" href="_function_descriptors_8h_source.xhtml#l00052">FFT2DInfo::axis1</a>, and <a class="el" href="_function_descriptors_8h_source.xhtml#l00053">FFT2DInfo::direction</a>.</p>

</div>
</div>
<a id="a94349811cc9fac558f49c221830565c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94349811cc9fac558f49c221830565c1">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[43/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">FFTDirection</a> &amp;&#160;</td>
          <td class="paramname"><em>fft_dir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the FFTDirection type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fft_dir</td><td>FFTDirection to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02817">2817</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;{</div>
<div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;    <span class="keywordflow">switch</span> (fft_dir)</div>
<div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;    {</div>
<div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160;        <span class="keywordflow">case</span> FFTDirection::Forward:</div>
<div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Forward&quot;</span>;</div>
<div class="line"><a name="l02823"></a><span class="lineno"> 2823</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02824"></a><span class="lineno"> 2824</span>&#160;        <span class="keywordflow">case</span> FFTDirection::Inverse:</div>
<div class="line"><a name="l02825"></a><span class="lineno"> 2825</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Inverse&quot;</span>;</div>
<div class="line"><a name="l02826"></a><span class="lineno"> 2826</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02827"></a><span class="lineno"> 2827</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02828"></a><span class="lineno"> 2828</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02829"></a><span class="lineno"> 2829</span>&#160;    }</div>
<div class="line"><a name="l02830"></a><span class="lineno"> 2830</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a67d2f6740a8eaebf4d5c6f79be8da481">Forward</a>, and <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a9f87f02f2da8f99c571b2a1c2a96132b">Inverse</a>.</p>

</div>
</div>
<a id="a3b22e54b0ac0204c3b89aebcd695fa03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b22e54b0ac0204c3b89aebcd695fa03">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[44/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Format type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00865">865</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;{</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    {</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Format::UNKNOWN</a>:</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">case</span> Format::U8:</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U8&quot;</span>;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        <span class="keywordflow">case</span> Format::S16:</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S16&quot;</span>;</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        <span class="keywordflow">case</span> Format::U16:</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U16&quot;</span>;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;        <span class="keywordflow">case</span> Format::S32:</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S32&quot;</span>;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        <span class="keywordflow">case</span> Format::U32:</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U32&quot;</span>;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <span class="keywordflow">case</span> Format::F16:</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F16&quot;</span>;</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <span class="keywordflow">case</span> Format::F32:</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F32&quot;</span>;</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        <span class="keywordflow">case</span> Format::UV88:</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UV88&quot;</span>;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RGB888&quot;</span>;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RGBA8888&quot;</span>;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;YUV444&quot;</span>;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;YUYV422&quot;</span>;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NV12&quot;</span>;</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NV21&quot;</span>;</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IYUV&quot;</span>;</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UYVY422&quot;</span>;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    }</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160; </div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

</div>
</div>
<a id="affa98488160f8bcb0edfc5b610ce3ff4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affa98488160f8bcb0edfc5b610ce3ff4">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[45/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>layer_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">layer_info</td><td><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02619">2619</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160;{</div>
<div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{activation_info=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(layer_info.activation_info) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;weights_trained_layout=&quot;</span> &lt;&lt; layer_info.weights_trained_layout &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;transpose_weights=&quot;</span> &lt;&lt; layer_info.transpose_weights &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;are_weights_reshaped=&quot;</span> &lt;&lt; layer_info.are_weights_reshaped &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;retain_internal_weights=&quot;</span> &lt;&lt; layer_info.retain_internal_weights &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;fp_mixed_precision=&quot;</span> &lt;&lt; layer_info.fp_mixed_precision &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00036">FullyConnectedLayerInfo::activation_info</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00040">FullyConnectedLayerInfo::are_weights_reshaped</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00044">FullyConnectedLayerInfo::fp_mixed_precision</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00041">FullyConnectedLayerInfo::retain_internal_weights</a>, <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00039">FullyConnectedLayerInfo::transpose_weights</a>, and <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00038">FullyConnectedLayerInfo::weights_trained_layout</a>.</p>

</div>
</div>
<a id="afce06ffb37193572ef548fa9c3511014"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afce06ffb37193572ef548fa9c3511014">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[46/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> &amp;&#160;</td>
          <td class="paramname"><em>fuse_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the FuseBatchNormalizationType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fuse_type</td><td>FuseBatchNormalizationType to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02935">2935</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02936"></a><span class="lineno"> 2936</span>&#160;{</div>
<div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;    <span class="keywordflow">switch</span> (fuse_type)</div>
<div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;    {</div>
<div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160;        <span class="keywordflow">case</span> FuseBatchNormalizationType::CONVOLUTION:</div>
<div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CONVOLUTION&quot;</span>;</div>
<div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;        <span class="keywordflow">case</span> FuseBatchNormalizationType::DEPTHWISECONVOLUTION:</div>
<div class="line"><a name="l02943"></a><span class="lineno"> 2943</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DEPTHWISECONVOLUTION&quot;</span>;</div>
<div class="line"><a name="l02944"></a><span class="lineno"> 2944</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02945"></a><span class="lineno"> 2945</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02946"></a><span class="lineno"> 2946</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02947"></a><span class="lineno"> 2947</span>&#160;    }</div>
<div class="line"><a name="l02948"></a><span class="lineno"> 2948</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02949"></a><span class="lineno"> 2949</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d">CONVOLUTION</a>, and <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4">DEPTHWISECONVOLUTION</a>.</p>

</div>
</div>
<a id="a5fdae5de2d2cf2e7957f0299d17ce5ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fdae5de2d2cf2e7957f0299d17ce5ec">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[47/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01411">1411</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;{</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{is_a_reshaped=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_a_reshaped() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;is_b_reshaped=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_b_reshaped() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;reshape_b_only_on_first_run=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.reshape_b_only_on_first_run() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;depth_output_gemm3d=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.depth_output_gemm3d() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;reinterpret_input_as_3d=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.reinterpret_input_as_3d() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;retain_internal_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.retain_internal_weights() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;fp_mixed_precision=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.fp_mixed_precision() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;broadcast_bias=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.broadcast_bias() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;pretranspose_B=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pretranspose_B() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160; </div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="ad4e600333948efa503cd2e2e7fb6d854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4e600333948efa503cd2e2e7fb6d854">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[48/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">GEMMKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00253">253</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;( m=&quot;</span> &lt;&lt; gemm_info.m;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; n=&quot;</span> &lt;&lt; gemm_info.n;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; k=&quot;</span> &lt;&lt; gemm_info.k;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; depth_output_gemm3d=&quot;</span> &lt;&lt; gemm_info.depth_output_gemm3d;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; reinterpret_input_as_3d=&quot;</span> &lt;&lt; gemm_info.reinterpret_input_as_3d;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; broadcast_bias=&quot;</span> &lt;&lt; gemm_info.broadcast_bias;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; fp_mixed_precision=&quot;</span> &lt;&lt; gemm_info.fp_mixed_precision;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; mult_transpose1xW_width=&quot;</span> &lt;&lt; gemm_info.mult_transpose1xW_width;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; mult_interleave4x4_height=&quot;</span> &lt;&lt; gemm_info.mult_interleave4x4_height;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; a_offset=&quot;</span> &lt;&lt; gemm_info.a_offset;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; b_offset=&quot;</span> &lt;&lt; gemm_info.b_offset;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00109">GEMMKernelInfo::a_offset</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00110">GEMMKernelInfo::b_offset</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00099">GEMMKernelInfo::broadcast_bias</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00097">GEMMKernelInfo::depth_output_gemm3d</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00100">GEMMKernelInfo::fp_mixed_precision</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00096">GEMMKernelInfo::k</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00094">GEMMKernelInfo::m</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00105">GEMMKernelInfo::mult_interleave4x4_height</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00104">GEMMKernelInfo::mult_transpose1xW_width</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00095">GEMMKernelInfo::n</a>, and <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00098">GEMMKernelInfo::reinterpret_input_as_3d</a>.</p>

</div>
</div>
<a id="a8b2f9b5a23de7a67759cb0c25f7fe0ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b2f9b5a23de7a67759cb0c25f7fe0ff">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[49/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00277">277</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;( m0=&quot;</span> &lt;&lt; (<span class="keywordtype">unsigned</span> int)gemm_info.m0 &lt;&lt; <span class="stringliteral">&quot; k0=&quot;</span> &lt;&lt; gemm_info.k0 &lt;&lt; <span class="stringliteral">&quot;  v0=&quot;</span> &lt;&lt; gemm_info.v0</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;  trans=&quot;</span> &lt;&lt; gemm_info.transpose &lt;&lt; <span class="stringliteral">&quot;  inter=&quot;</span> &lt;&lt; gemm_info.interleave &lt;&lt; <span class="stringliteral">&quot;})&quot;</span>;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01907">GEMMLHSMatrixInfo::interleave</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01904">GEMMLHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01903">GEMMLHSMatrixInfo::m0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01906">GEMMLHSMatrixInfo::transpose</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01905">GEMMLHSMatrixInfo::v0</a>.</p>

</div>
</div>
<a id="a4898872476b3f7f30adeaaea9128b585"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4898872476b3f7f30adeaaea9128b585">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[50/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02692">2692</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;{</div>
<div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{type=&quot;</span> &lt;&lt; gemm_info.type &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemlowp_offset=&quot;</span> &lt;&lt; gemm_info.gemmlowp_offset &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_multiplier=&quot;</span> &lt;&lt; gemm_info.gemmlowp_multiplier &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_shift=&quot;</span> &lt;&lt; gemm_info.gemmlowp_shift &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_min_bound=&quot;</span> &lt;&lt; gemm_info.gemmlowp_min_bound &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_max_bound=&quot;</span> &lt;&lt; gemm_info.gemmlowp_max_bound &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_multipliers=&quot;</span> &lt;&lt; gemm_info.gemmlowp_multiplier &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_shifts=&quot;</span> &lt;&lt; gemm_info.gemmlowp_shift &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02702"></a><span class="lineno"> 2702</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;gemmlowp_real_multiplier=&quot;</span> &lt;&lt; gemm_info.gemmlowp_real_multiplier &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;is_quantized_per_channel=&quot;</span> &lt;&lt; gemm_info.is_quantized_per_channel &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;output_data_type=&quot;</span> &lt;&lt; gemm_info.output_data_type &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00054">GEMMLowpOutputStageInfo::gemmlowp_max_bound</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00051">GEMMLowpOutputStageInfo::gemmlowp_min_bound</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00049">GEMMLowpOutputStageInfo::gemmlowp_multiplier</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00048">GEMMLowpOutputStageInfo::gemmlowp_offset</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00059">GEMMLowpOutputStageInfo::gemmlowp_real_multiplier</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00050">GEMMLowpOutputStageInfo::gemmlowp_shift</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00060">GEMMLowpOutputStageInfo::is_quantized_per_channel</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00061">GEMMLowpOutputStageInfo::output_data_type</a>, and <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00047">GEMMLowpOutputStageInfo::type</a>.</p>

</div>
</div>
<a id="ae66eb1f2c65e413518cb5b5ea4a31bd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae66eb1f2c65e413518cb5b5ea4a31bd3">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[51/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the GEMMLowpOutputStageType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_type</td><td>GEMMLowpOutputStageType to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02650">2650</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;{</div>
<div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2ea9f63fa9d0189f82257ca7d35740ff">gemm_type</a>)</div>
<div class="line"><a name="l02653"></a><span class="lineno"> 2653</span>&#160;    {</div>
<div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;        <span class="keywordflow">case</span> GEMMLowpOutputStageType::NONE:</div>
<div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NONE&quot;</span>;</div>
<div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;        <span class="keywordflow">case</span> GEMMLowpOutputStageType::QUANTIZE_DOWN:</div>
<div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QUANTIZE_DOWN&quot;</span>;</div>
<div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;        <span class="keywordflow">case</span> GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT:</div>
<div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QUANTIZE_DOWN_FIXEDPOINT&quot;</span>;</div>
<div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02663"></a><span class="lineno"> 2663</span>&#160;        <span class="keywordflow">case</span> GEMMLowpOutputStageType::QUANTIZE_DOWN_FLOAT:</div>
<div class="line"><a name="l02664"></a><span class="lineno"> 2664</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QUANTIZE_DOWN_FLOAT&quot;</span>;</div>
<div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02668"></a><span class="lineno"> 2668</span>&#160;    }</div>
<div class="line"><a name="l02669"></a><span class="lineno"> 2669</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00560">arm_compute::mlgo::parser::gemm_type()</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">NONE</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">QUANTIZE_DOWN</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">QUANTIZE_DOWN_FIXEDPOINT</a>, and <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">QUANTIZE_DOWN_FLOAT</a>.</p>

</div>
</div>
<a id="a0fc75dce8064a37effa5e71344b6a5d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fc75dce8064a37effa5e71344b6a5d2">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[52/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" title="GEMM reshape information class.">GEMMReshapeInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01392">1392</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;{</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{m=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.m() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;n=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.n() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;k=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.k() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;mult_transpose1xW_width=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.mult_transpose1xW_width() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;mult_interleave4x4_height=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.mult_interleave4x4_height();</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160; </div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="addc5504e0a275f050cc051811518be0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addc5504e0a275f050cc051811518be0a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[53/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00291">291</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;( n0=&quot;</span> &lt;&lt; (<span class="keywordtype">unsigned</span> int)gemm_info.n0 &lt;&lt; <span class="stringliteral">&quot; k0=&quot;</span> &lt;&lt; gemm_info.k0 &lt;&lt; <span class="stringliteral">&quot;  h0=&quot;</span> &lt;&lt; gemm_info.h0</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;  trans=&quot;</span> &lt;&lt; gemm_info.transpose &lt;&lt; <span class="stringliteral">&quot;  inter=&quot;</span> &lt;&lt; gemm_info.interleave</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;       &lt;&lt; <span class="stringliteral">&quot; exp_img=&quot;</span> &lt;&lt; gemm_info.export_to_cl_image &lt;&lt; <span class="stringliteral">&quot;})&quot;</span>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01923">GEMMRHSMatrixInfo::export_to_cl_image</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01920">GEMMRHSMatrixInfo::h0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01922">GEMMRHSMatrixInfo::interleave</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01919">GEMMRHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01918">GEMMRHSMatrixInfo::n0</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01921">GEMMRHSMatrixInfo::transpose</a>.</p>

</div>
</div>
<a id="a1a54a883f8acc0664accdae9bed93494"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a54a883f8acc0664accdae9bed93494">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[54/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>proposals_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" title="Generate Proposals Information class.">GenerateProposalsInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">proposals_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00406">406</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;{</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; proposals_info.im_width() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; proposals_info.im_height() &lt;&lt; <span class="stringliteral">&quot;)~&quot;</span> &lt;&lt; proposals_info.im_scale();</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01345">GenerateProposalsInfo::im_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01355">GenerateProposalsInfo::im_scale()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01350">GenerateProposalsInfo::im_width()</a>.</p>

</div>
</div>
<a id="a1f4d95d65a62a085e929ab0a1a77add2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f4d95d65a62a085e929ab0a1a77add2">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[55/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;&#160;</td>
          <td class="paramname"><em>gpu_target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the GPUTarget type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_target</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02214">2214</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;{</div>
<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;    <span class="keywordflow">switch</span> (gpu_target)</div>
<div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;    {</div>
<div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;        <span class="keywordflow">case</span> GPUTarget::GPU_ARCH_MASK:</div>
<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GPU_ARCH_MASK&quot;</span>;</div>
<div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;        <span class="keywordflow">case</span> GPUTarget::GPU_GENERATION_MASK:</div>
<div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GPU_GENERATION_MASK&quot;</span>;</div>
<div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;        <span class="keywordflow">case</span> GPUTarget::MIDGARD:</div>
<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIDGARD&quot;</span>;</div>
<div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;        <span class="keywordflow">case</span> GPUTarget::BIFROST:</div>
<div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BIFROST&quot;</span>;</div>
<div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;        <span class="keywordflow">case</span> GPUTarget::VALHALL:</div>
<div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;VALHALL&quot;</span>;</div>
<div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;        <span class="keywordflow">case</span> GPUTarget::FIFTHGEN:</div>
<div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FIFTHGEN&quot;</span>;</div>
<div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;        <span class="keywordflow">case</span> GPUTarget::T600:</div>
<div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;T600&quot;</span>;</div>
<div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;        <span class="keywordflow">case</span> GPUTarget::T700:</div>
<div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;T700&quot;</span>;</div>
<div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;        <span class="keywordflow">case</span> GPUTarget::T800:</div>
<div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;T800&quot;</span>;</div>
<div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G71:</div>
<div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G71&quot;</span>;</div>
<div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G72:</div>
<div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G72&quot;</span>;</div>
<div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G51:</div>
<div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G51&quot;</span>;</div>
<div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G51BIG:</div>
<div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G51BIG&quot;</span>;</div>
<div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G51LIT:</div>
<div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G51LIT&quot;</span>;</div>
<div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G31:</div>
<div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G31&quot;</span>;</div>
<div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G76:</div>
<div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G76&quot;</span>;</div>
<div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G52:</div>
<div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G52&quot;</span>;</div>
<div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G52LIT:</div>
<div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G52LIT&quot;</span>;</div>
<div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G77:</div>
<div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G77&quot;</span>;</div>
<div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G57:</div>
<div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G57&quot;</span>;</div>
<div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G78:</div>
<div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G78&quot;</span>;</div>
<div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G68:</div>
<div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G68&quot;</span>;</div>
<div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G78AE:</div>
<div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G78AE&quot;</span>;</div>
<div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G710:</div>
<div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G710&quot;</span>;</div>
<div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G610:</div>
<div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G610&quot;</span>;</div>
<div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G510:</div>
<div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G510&quot;</span>;</div>
<div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G310:</div>
<div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G310&quot;</span>;</div>
<div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G715:</div>
<div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G715&quot;</span>;</div>
<div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G615:</div>
<div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G615&quot;</span>;</div>
<div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G720:</div>
<div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G720&quot;</span>;</div>
<div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;        <span class="keywordflow">case</span> GPUTarget::G620:</div>
<div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G620&quot;</span>;</div>
<div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;    }</div>
<div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160; </div>
<div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">BIFROST</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df">FIFTHGEN</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33">G31</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20">G310</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">G51</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8">G510</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">G51BIG</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">G51LIT</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb">G52</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837">G52LIT</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15">G57</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010">G610</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a">G615</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce">G620</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c">G68</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">G71</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff">G710</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e">G715</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">G72</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96">G720</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">G76</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">G77</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029">G78</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89">G78AE</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">GPU_ARCH_MASK</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a34f809afe4f596c3c28e2f38e572253e">GPU_GENERATION_MASK</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">T600</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">T700</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">T800</a>, and <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">VALHALL</a>.</p>

</div>
</div>
<a id="a509047aefc691398f1bb60b1f967a98b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a509047aefc691398f1bb60b1f967a98b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[56/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the InterpolationPolicy type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01091">1091</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;{</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    <span class="keywordflow">switch</span> (policy)</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    {</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        <span class="keywordflow">case</span> InterpolationPolicy::NEAREST_NEIGHBOR:</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NEAREST_NEIGHBOR&quot;</span>;</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;        <span class="keywordflow">case</span> InterpolationPolicy::BILINEAR:</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BILINEAR&quot;</span>;</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <span class="keywordflow">case</span> InterpolationPolicy::AREA:</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;AREA&quot;</span>;</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    }</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160; </div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">AREA</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">BILINEAR</a>, and <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">NEAREST_NEIGHBOR</a>.</p>

</div>
</div>
<a id="a3495dbac674f6aa93c41efc92f1d3143"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3495dbac674f6aa93c41efc92f1d3143">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[57/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td><a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03001">3001</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03002"></a><span class="lineno"> 3002</span>&#160;{</div>
<div class="line"><a name="l03003"></a><span class="lineno"> 3003</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{input_to_input_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.input_to_input_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03004"></a><span class="lineno"> 3004</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;recurrent_to_input_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.recurrent_to_input_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03005"></a><span class="lineno"> 3005</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;cell_to_input_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.cell_to_input_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03006"></a><span class="lineno"> 3006</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;input_gate_bias=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.input_gate_bias()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03007"></a><span class="lineno"> 3007</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;cell_to_forget_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.cell_to_forget_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03008"></a><span class="lineno"> 3008</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;cell_to_output_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.cell_to_output_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03009"></a><span class="lineno"> 3009</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;projection_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.projection_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03010"></a><span class="lineno"> 3010</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;projection_bias=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.projection_bias()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03011"></a><span class="lineno"> 3011</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;input_layer_norm_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.input_layer_norm_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03012"></a><span class="lineno"> 3012</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;forget_layer_norm_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.forget_layer_norm_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03013"></a><span class="lineno"> 3013</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;cell_layer_norm_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.cell_layer_norm_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03014"></a><span class="lineno"> 3014</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;output_layer_norm_weights=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(lstm_params.output_layer_norm_weights()) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03015"></a><span class="lineno"> 3015</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;cell_clip=&quot;</span> &lt;&lt; lstm_params.cell_clip() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03016"></a><span class="lineno"> 3016</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;projection_clip=&quot;</span> &lt;&lt; lstm_params.projection_clip() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03017"></a><span class="lineno"> 3017</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;input_intermediate_scale=&quot;</span> &lt;&lt; lstm_params.input_intermediate_scale() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03018"></a><span class="lineno"> 3018</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;forget_intermediate_scale=&quot;</span> &lt;&lt; lstm_params.forget_intermediate_scale() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03019"></a><span class="lineno"> 3019</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;cell_intermediate_scale=&quot;</span> &lt;&lt; lstm_params.cell_intermediate_scale() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03020"></a><span class="lineno"> 3020</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;hidden_state_zero=&quot;</span> &lt;&lt; lstm_params.hidden_state_zero() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03021"></a><span class="lineno"> 3021</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;hidden_state_scale=&quot;</span> &lt;&lt; lstm_params.hidden_state_scale() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03022"></a><span class="lineno"> 3022</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;has_peephole_opt=&quot;</span> &lt;&lt; lstm_params.has_peephole_opt() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03023"></a><span class="lineno"> 3023</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;has_projection=&quot;</span> &lt;&lt; lstm_params.has_projection() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03024"></a><span class="lineno"> 3024</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;has_cifg_opt=&quot;</span> &lt;&lt; lstm_params.has_cifg_opt() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l03025"></a><span class="lineno"> 3025</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;use_layer_norm=&quot;</span> &lt;&lt; lstm_params.use_layer_norm() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l03026"></a><span class="lineno"> 3026</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03027"></a><span class="lineno"> 3027</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00263">LSTMParams&lt; T &gt;::cell_clip()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00283">LSTMParams&lt; T &gt;::cell_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00253">LSTMParams&lt; T &gt;::cell_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00223">LSTMParams&lt; T &gt;::cell_to_forget_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00213">LSTMParams&lt; T &gt;::cell_to_input_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00228">LSTMParams&lt; T &gt;::cell_to_output_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00278">LSTMParams&lt; T &gt;::forget_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00248">LSTMParams&lt; T &gt;::forget_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00313">LSTMParams&lt; T &gt;::has_cifg_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00303">LSTMParams&lt; T &gt;::has_peephole_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00308">LSTMParams&lt; T &gt;::has_projection()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00298">LSTMParams&lt; T &gt;::hidden_state_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00293">LSTMParams&lt; T &gt;::hidden_state_zero()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00218">LSTMParams&lt; T &gt;::input_gate_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00273">LSTMParams&lt; T &gt;::input_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00243">LSTMParams&lt; T &gt;::input_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00203">LSTMParams&lt; T &gt;::input_to_input_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00258">LSTMParams&lt; T &gt;::output_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00238">LSTMParams&lt; T &gt;::projection_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00268">LSTMParams&lt; T &gt;::projection_clip()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00233">LSTMParams&lt; T &gt;::projection_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00208">LSTMParams&lt; T &gt;::recurrent_to_input_weights()</a>, <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>, and <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00318">LSTMParams&lt; T &gt;::use_layer_norm()</a>.</p>

</div>
</div>
<a id="a9caac285297030f50a972095e767aff9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9caac285297030f50a972095e767aff9">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[58/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;&#160;</td>
          <td class="paramname"><em>multiples</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Multiples type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiples</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01073">1073</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;{</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; multiples.size() - 1; i++)</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    {</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        os &lt;&lt; multiples[i] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    }</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    os &lt;&lt; multiples.back() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6b383b77aea31f502c2712a034f6286c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b383b77aea31f502c2712a034f6286c">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[59/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> &amp;&#160;</td>
          <td class="paramname"><em>nms_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Available non maxima suppression types. </p>
<p>Formatted output of the NMSType type.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nms_type</td><td>NMSType to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03063">3063</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03064"></a><span class="lineno"> 3064</span>&#160;{</div>
<div class="line"><a name="l03065"></a><span class="lineno"> 3065</span>&#160;    <span class="keywordflow">switch</span> (nms_type)</div>
<div class="line"><a name="l03066"></a><span class="lineno"> 3066</span>&#160;    {</div>
<div class="line"><a name="l03067"></a><span class="lineno"> 3067</span>&#160;        <span class="keywordflow">case</span> NMSType::LINEAR:</div>
<div class="line"><a name="l03068"></a><span class="lineno"> 3068</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LINEAR&quot;</span>;</div>
<div class="line"><a name="l03069"></a><span class="lineno"> 3069</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03070"></a><span class="lineno"> 3070</span>&#160;        <span class="keywordflow">case</span> NMSType::GAUSSIAN:</div>
<div class="line"><a name="l03071"></a><span class="lineno"> 3071</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GAUSSIAN&quot;</span>;</div>
<div class="line"><a name="l03072"></a><span class="lineno"> 3072</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03073"></a><span class="lineno"> 3073</span>&#160;        <span class="keywordflow">case</span> NMSType::ORIGINAL:</div>
<div class="line"><a name="l03074"></a><span class="lineno"> 3074</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ORIGINAL&quot;</span>;</div>
<div class="line"><a name="l03075"></a><span class="lineno"> 3075</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03076"></a><span class="lineno"> 3076</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l03077"></a><span class="lineno"> 3077</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l03078"></a><span class="lineno"> 3078</span>&#160;    }</div>
<div class="line"><a name="l03079"></a><span class="lineno"> 3079</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03080"></a><span class="lineno"> 3080</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9">GAUSSIAN</a>, <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">LINEAR</a>, and <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1">ORIGINAL</a>.</p>

</div>
</div>
<a id="a6e422c610c91f611590173cd595c94c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e422c610c91f611590173cd595c94c5">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[60/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00627">627</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;{</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.type() &lt;&lt; <span class="stringliteral">&quot;:NormSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.norm_size();</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a2ab7370aab6e5698990c50c8871fa6fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ab7370aab6e5698990c50c8871fa6fb">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[61/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> &amp;&#160;</td>
          <td class="paramname"><em>norm_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the NormType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_type</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00587">587</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">switch</span> (norm_type)</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <span class="keywordflow">case</span> NormType::CROSS_MAP:</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CROSS_MAP&quot;</span>;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="keywordflow">case</span> NormType::IN_MAP_1D:</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IN_MAP_1D&quot;</span>;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="keywordflow">case</span> NormType::IN_MAP_2D:</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IN_MAP_2D&quot;</span>;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    }</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160; </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">CROSS_MAP</a>, <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">IN_MAP_1D</a>, and <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">IN_MAP_2D</a>.</p>

</div>
</div>
<a id="a5a6ce866fff96872b6eb71278693450f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a6ce866fff96872b6eb71278693450f">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[62/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> &amp;&#160;</td>
          <td class="paramname"><em>padding2d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_padding2_d.xhtml" title="Padding and stride information class.">Padding2D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding2d</td><td>Padding info for 2D dimension shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03272">3272</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03273"></a><span class="lineno"> 3273</span>&#160;{</div>
<div class="line"><a name="l03274"></a><span class="lineno"> 3274</span>&#160;    os &lt;&lt; padding2d.left &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding2d.right &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding2d.top &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding2d.bottom;</div>
<div class="line"><a name="l03275"></a><span class="lineno"> 3275</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l03276"></a><span class="lineno"> 3276</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00618">Padding2D::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00615">Padding2D::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00616">Padding2D::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00617">Padding2D::top</a>.</p>

</div>
</div>
<a id="ad7d2b4539f3cc7b82c76c60a4b6a7f37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7d2b4539f3cc7b82c76c60a4b6a7f37">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[63/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> &amp;&#160;</td>
          <td class="paramname"><em>padding3d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_padding3_d.xhtml" title="Padding information for 3D operations like Conv3d.">Padding3D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding3d</td><td>Padding info for 3D spatial dimension shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02035">2035</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;{</div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;    os &lt;&lt; padding3d.left &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding3d.right &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding3d.top &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding3d.bottom &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;       &lt;&lt; padding3d.front &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; padding3d.back;</div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00643">Padding3D::back</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00641">Padding3D::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Padding3D::front</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Padding3D::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00639">Padding3D::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Padding3D::top</a>.</p>

</div>
</div>
<a id="af15a06b73e1fde15f0809ce07bf1ab7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af15a06b73e1fde15f0809ce07bf1ab7d">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[64/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the PaddingList type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01055">1055</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;{</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{&quot;</span>;</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp;p : padding)</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    {</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; p.first &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; p.second &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    }</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a23cde8eb733fe42667cd5b2c79141dba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23cde8eb733fe42667cd5b2c79141dba">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[65/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> &amp;&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the PaddingMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01567">1567</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;{</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>)</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    {</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;        <span class="keywordflow">case</span> PaddingMode::CONSTANT:</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CONSTANT&quot;</span>;</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;        <span class="keywordflow">case</span> PaddingMode::REFLECT:</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;REFLECT&quot;</span>;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;        <span class="keywordflow">case</span> PaddingMode::SYMMETRIC:</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SYMMETRIC&quot;</span>;</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    }</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160; </div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>, <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules::mode</a>, <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">REFLECT</a>, and <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">SYMMETRIC</a>.</p>

</div>
</div>
<a id="a8af36ae3a3613112c3a95e57f606359a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8af36ae3a3613112c3a95e57f606359a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[66/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pad_stride_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pad_stride_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01607">1607</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;{</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    os &lt;&lt; pad_stride_info.stride().first &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; pad_stride_info.stride().second;</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    os &lt;&lt; pad_stride_info.pad_left() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; pad_stride_info.pad_right() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; pad_stride_info.pad_top() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;       &lt;&lt; pad_stride_info.pad_bottom();</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160; </div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_core_types_8h_source.xhtml#l00233">PadStrideInfo::pad_bottom()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00223">PadStrideInfo::pad_right()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, and <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>.</p>

</div>
</div>
<a id="ac5826d71db3a92e827e7651bb1e6a15a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5826d71db3a92e827e7651bb1e6a15a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[67/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;&#160;</td>
          <td class="paramname"><em>pixel_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pixel_value</td><td><a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02759">2759</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02760"></a><span class="lineno"> 2760</span>&#160;{</div>
<div class="line"><a name="l02761"></a><span class="lineno"> 2761</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{value.u64=&quot;</span> &lt;&lt; pixel_value.get&lt;uint64_t&gt;() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02762"></a><span class="lineno"> 2762</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02763"></a><span class="lineno"> 2763</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_pixel_value_8h_source.xhtml#l00228">PixelValue::get()</a>.</p>

</div>
</div>
<a id="ac5ed11fc52a25ba597243567bbd8793d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5ed11fc52a25ba597243567bbd8793d">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[68/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Pooling 3d Layer Info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Pooling 3D layer info to print to output stream.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02085">2085</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;{</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{Type=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_type &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;IsGlobalPooling=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling;</div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling)</div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;    {</div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;PoolSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;Stride=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.stride &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;Padding=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;Exclude Padding=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.exclude_padding &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;fp_mixed_precision=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.fp_mixed_precision &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;DimensionRoundingType=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.round_type;</div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;    }</div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="ae72a61a2ca5c962ab1d37065e5598060"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae72a61a2ca5c962ab1d37065e5598060">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[69/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00667">667</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;{</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_type;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a336cf1e870f467e44c184587a13feeec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a336cf1e870f467e44c184587a13feeec">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[70/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the PoolingType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_type</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00640">640</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keywordflow">switch</span> (pool_type)</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    {</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="keywordflow">case</span> PoolingType::AVG:</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;AVG&quot;</span>;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>:</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keywordflow">case</span> PoolingType::L2:</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L2&quot;</span>;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    }</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; </div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">AVG</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</a>, and <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">MAX</a>.</p>

</div>
</div>
<a id="ae7393414bb7b814bf70e0399f2347847"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7393414bb7b814bf70e0399f2347847">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[71/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02485">2485</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;{</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Clip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.clip() &lt;&lt; <span class="stringliteral">&quot;Flip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.flip() &lt;&lt; <span class="stringliteral">&quot;StepX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.steps()[0] &lt;&lt; <span class="stringliteral">&quot;StepY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.steps()[1]</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;MinSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.min_sizes() &lt;&lt; <span class="stringliteral">&quot;MaxSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_sizes() &lt;&lt; <span class="stringliteral">&quot;ImgSizeX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.img_size().x</div>
<div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ImgSizeY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.img_size().y &lt;&lt; <span class="stringliteral">&quot;Offset:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset() &lt;&lt; <span class="stringliteral">&quot;Variances:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.variances();</div>
<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160; </div>
<div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a759d06440ed4adc531dd10c8c76e3b88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a759d06440ed4adc531dd10c8c76e3b88">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[72/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00432">432</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo uqinfo = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Scale:&quot;</span> &lt;&lt; uqinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> &lt;&lt; <span class="stringliteral">&quot;~&quot;</span>;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Offset:&quot;</span> &lt;&lt; uqinfo.offset;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

</div>
</div>
<a id="a17881750c427aedd95deba46a4366ace"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17881750c427aedd95deba46a4366ace">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[73/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_rectangle.xhtml">Rectangle</a> &amp;&#160;</td>
          <td class="paramname"><em>rect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_rectangle.xhtml" title="Rectangle type.">Rectangle</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rect</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01552">1552</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;{</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    os &lt;&lt; rect.width &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; rect.height;</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;+&quot;</span> &lt;&lt; rect.x &lt;&lt; <span class="stringliteral">&quot;+&quot;</span> &lt;&lt; rect.y;</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160; </div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00380">Rectangle::height</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00379">Rectangle::width</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00377">Rectangle::x</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00378">Rectangle::y</a>.</p>

</div>
</div>
<a id="a292505a0ec686541cfe0dcfd1d651ec5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a292505a0ec686541cfe0dcfd1d651ec5">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[74/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Reduction Operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01801">1801</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;{</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    {</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;        <span class="keywordflow">case</span> ReductionOperation::SUM:</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SUM&quot;</span>;</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;        <span class="keywordflow">case</span> ReductionOperation::SUM_SQUARE:</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SUM_SQUARE&quot;</span>;</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;        <span class="keywordflow">case</span> ReductionOperation::MEAN_SUM:</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MEAN_SUM&quot;</span>;</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;        <span class="keywordflow">case</span> ReductionOperation::ARG_IDX_MAX:</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ARG_IDX_MAX&quot;</span>;</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;        <span class="keywordflow">case</span> ReductionOperation::ARG_IDX_MIN:</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ARG_IDX_MIN&quot;</span>;</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;        <span class="keywordflow">case</span> ReductionOperation::PROD:</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PROD&quot;</span>;</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ReductionOperation::MIN</a>:</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIN&quot;</span>;</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ReductionOperation::MAX</a>:</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    }</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160; </div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">ARG_IDX_MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">ARG_IDX_MIN</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">MEAN_SUM</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">PROD</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">SUM</a>, and <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">SUM_SQUARE</a>.</p>

</div>
</div>
<a id="a352b805b77fde4f32f44af271580677b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a352b805b77fde4f32f44af271580677b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[75/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the ROIPoolingInfo type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00227">227</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    os &lt;&lt; pool_info.pooled_width() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; pool_info.pooled_height() &lt;&lt; <span class="stringliteral">&quot;~&quot;</span> &lt;&lt; pool_info.spatial_scale();</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01285">ROIPoolingLayerInfo::pooled_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01280">ROIPoolingLayerInfo::pooled_width()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01290">ROIPoolingLayerInfo::spatial_scale()</a>.</p>

</div>
</div>
<a id="a295edc9f8caf95838db2c5e251153514"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a295edc9f8caf95838db2c5e251153514">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[76/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the RoundingPolicy type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00184">184</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">switch</span> (rounding_policy)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">case</span> RoundingPolicy::TO_ZERO:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TO_ZERO&quot;</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> RoundingPolicy::TO_NEAREST_UP:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TO_NEAREST_UP&quot;</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">case</span> RoundingPolicy::TO_NEAREST_EVEN:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TO_NEAREST_EVEN&quot;</span>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">TO_NEAREST_EVEN</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>, and <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">TO_ZERO</a>.</p>

</div>
</div>
<a id="aab8eb6dc1ba89bb8a69f1c3845988a2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab8eb6dc1ba89bb8a69f1c3845988a2b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[77/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the SamplingPolicy type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01118">1118</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;{</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    <span class="keywordflow">switch</span> (policy)</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    {</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        <span class="keywordflow">case</span> SamplingPolicy::CENTER:</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CENTER&quot;</span>;</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        <span class="keywordflow">case</span> SamplingPolicy::TOP_LEFT:</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TOP_LEFT&quot;</span>;</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    }</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160; </div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">CENTER</a>, and <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">TOP_LEFT</a>.</p>

</div>
</div>
<a id="a8b3427257089fd801e6208bfbf89873a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b3427257089fd801e6208bfbf89873a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[78/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scale_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_info</td><td><a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02785">2785</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02786"></a><span class="lineno"> 2786</span>&#160;{</div>
<div class="line"><a name="l02787"></a><span class="lineno"> 2787</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{interpolation_policy=&quot;</span> &lt;&lt; scale_info.interpolation_policy &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02788"></a><span class="lineno"> 2788</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;BorderMode=&quot;</span> &lt;&lt; scale_info.border_mode &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02789"></a><span class="lineno"> 2789</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;PixelValue=&quot;</span> &lt;&lt; scale_info.constant_border_value &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02790"></a><span class="lineno"> 2790</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;SamplingPolicy=&quot;</span> &lt;&lt; scale_info.sampling_policy &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02791"></a><span class="lineno"> 2791</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;use_padding=&quot;</span> &lt;&lt; scale_info.use_padding &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02792"></a><span class="lineno"> 2792</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;align_corners=&quot;</span> &lt;&lt; scale_info.align_corners &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02793"></a><span class="lineno"> 2793</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;data_layout=&quot;</span> &lt;&lt; scale_info.data_layout &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02794"></a><span class="lineno"> 2794</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02795"></a><span class="lineno"> 2795</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00233">ScaleKernelInfo::align_corners</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00229">ScaleKernelInfo::border_mode</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00230">ScaleKernelInfo::constant_border_value</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00234">ScaleKernelInfo::data_layout</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00228">ScaleKernelInfo::interpolation_policy</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00231">ScaleKernelInfo::sampling_policy</a>, and <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00232">ScaleKernelInfo::use_padding</a>.</p>

</div>
</div>
<a id="ab91d110e020f6ed987e05e82df3e350b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab91d110e020f6ed987e05e82df3e350b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[79/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_size2_d.xhtml" title="Class for specifying the size of an image or rectangle.">Size2D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02141">2141</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;{</div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;    os &lt;&lt; size.width &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; size.height;</div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160; </div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>.</p>

</div>
</div>
<a id="af1f3a48143de769a09a4f668ea16413c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1f3a48143de769a09a4f668ea16413c">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[80/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a> &amp;&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_size3_d.xhtml" title="Class for specifying the size of a 3D shape or object.">Size3D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02008">2008</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;{</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;    os &lt;&lt; size.width &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; size.height &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; size.depth;</div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160; </div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size3_d_8h_source.xhtml#l00093">Size3D::depth</a>, <a class="el" href="_size3_d_8h_source.xhtml#l00092">Size3D::height</a>, and <a class="el" href="_size3_d_8h_source.xhtml#l00091">Size3D::width</a>.</p>

</div>
</div>
<a id="ae80c7006c1bbf755a18e5d26eb4b141c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae80c7006c1bbf755a18e5d26eb4b141c">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[81/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" title="Descriptor used by the softmax kernels.">SoftmaxKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" title="Descriptor used by the softmax kernels.">SoftmaxKernelInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02971">2971</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02972"></a><span class="lineno"> 2972</span>&#160;{</div>
<div class="line"><a name="l02973"></a><span class="lineno"> 2973</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{beta=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.beta &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02974"></a><span class="lineno"> 2974</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;is_log=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_log &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02975"></a><span class="lineno"> 2975</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;input_data_type=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.input_data_type &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l02976"></a><span class="lineno"> 2976</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;axis=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.axis &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02977"></a><span class="lineno"> 2977</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02978"></a><span class="lineno"> 2978</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a248960645748af1bfddffa5ed711530a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a248960645748af1bfddffa5ed711530a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[82/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of a vector of objects. </p>
<dl class="section note"><dt>Note</dt><dd>: Using the overloaded <a class="el" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825" title="Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...">to_string()</a> instead of overloaded <a class="el" href="namespacearm__compute.xhtml#a0b4778f9d4687b03b98056042f1e6c1c" title="Formatted output of the pute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes:...">operator&lt;&lt;()</a>, because <a class="el" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825" title="Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...">to_string()</a> functions are overloaded for all types, where two or more of them can use the same <a class="el" href="namespacearm__compute.xhtml#a0b4778f9d4687b03b98056042f1e6c1c" title="Formatted output of the pute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes:...">operator&lt;&lt;()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor.">ITensor</a> is an example.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of objects to print</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00109">109</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_print_size = 5<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">bool</span>   first = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">size_t</span> i;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.size(); ++i)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">if</span> (i == max_print_size)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (first)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            first = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        os &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>[i]);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span> (i &lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.size())</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;, ...&quot;</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>, and <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>.</p>

</div>
</div>
<a id="ab398837465010958bfccff032ad1ee51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab398837465010958bfccff032ad1ee51">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[83/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>&amp; type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01172">1172</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;{</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    os &lt;&lt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a5972c7131d378f567af9c2961f088a0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5972c7131d378f567af9c2961f088a0b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[84/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_weights_info.xhtml" title="Convolution Layer Weights Information class.">WeightsInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00211">211</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.are_reshaped() &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.num_kernels() &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.kernel_size().first &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;       &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.kernel_size().second;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00165">arm_compute::test::validation::weights_info</a>.</p>

</div>
</div>
<a id="afc6e49991e36423027a467eab1e405b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc6e49991e36423027a467eab1e405b2">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[85/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01447">1447</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;{</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{&quot;</span>;</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; Coordinates::num_max_dimensions; i++)</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    {</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        <span class="keywordflow">if</span> (i &gt; 0)</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        {</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;        }</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;        os &lt;&lt; win[i];</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    }</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160; </div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

</div>
</div>
<a id="a6ed8dc0f587448d14a1a33cbd5fc4f70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ed8dc0f587448d14a1a33cbd5fc4f70">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[86/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Window::Dimension</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01434">1434</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;{</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{start=&quot;</span> &lt;&lt; dim.start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; dim.end() &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; dim.step() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160; </div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>.</p>

</div>
</div>
<a id="af3cba8a4493cee4c431d128eed565ffe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3cba8a4493cee4c431d128eed565ffe">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[87/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_winograd_info.xhtml" title="Winograd information.">WinogradInfo</a> type. </p>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02495">2495</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;{</div>
<div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{OutputTileSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.output_tile_size &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;KernelSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.kernel_size &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;PadStride=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.convolution_info &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;OutputDataLayout=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.output_data_layout &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160; </div>
<div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a2a85ebd528f100a15183253aa819cc2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a85ebd528f100a15183253aa819cc2b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[88/88]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01142">1142</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;{</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;data_type();</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;<a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">data_layout</a>();</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160; </div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Shape=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;tensor_shape() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;DataLayout=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a56b9e25c2e8731ca5488e7b3ccd66f58">string_from_data_layout</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>) &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;DataType=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#a142b55a483cadf4e1068a1a09a55e8e9">string_from_data_type</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160; </div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>))</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    {</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        <span class="keyword">const</span> QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;quantization_info();</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>             scales  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>();</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>             offsets = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a08ffa53eaabde3e18b003f8182ac09bf">offset</a>();</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160; </div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;, QuantizationInfo={&quot;</span></div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;           &lt;&lt; <span class="stringliteral">&quot;scales.size=&quot;</span> &lt;&lt; scales.size() &lt;&lt; <span class="stringliteral">&quot;, scale(s)=&quot;</span> &lt;&lt; scales &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160; </div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;offsets.size=&quot;</span> &lt;&lt; offsets.size() &lt;&lt; <span class="stringliteral">&quot;, offset(s)=&quot;</span> &lt;&lt; offsets &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    }</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00234">ScaleKernelInfo::data_layout</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00324">is_data_type_quantized()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo::offset()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>, <a class="el" href="_data_layout_utils_8cpp_source.xhtml#l00030">string_from_data_layout()</a>, and <a class="el" href="_data_type_utils_8cpp_source.xhtml#l00031">string_from_data_type()</a>.</p>

</div>
</div>
<a id="a096590f2456b9e9bcb8db98175720b60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a096590f2456b9e9bcb8db98175720b60">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check that given dimensions are equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>Left-hand side <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Right-hand side <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given dimensions are equal. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00275">275</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> ((lhs.num_dimensions() == rhs.num_dimensions()) &amp;&amp; std::equal(lhs.cbegin(), lhs.cend(), rhs.cbegin()));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00230">Dimensions&lt; T &gt;::cbegin()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00254">Dimensions&lt; T &gt;::cend()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantization_info_8h_source.xhtml#l00173">operator!=()</a>.</p>

</div>
</div>
<a id="a8f29397a1445e86018388adec5b1d410"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f29397a1445e86018388adec5b1d410">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two quantization info are equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>RHS quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>LHS quantization info.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given quantization info is the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00161">161</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">return</span> (lhs.scale() == rhs.scale()) &amp;&amp; (lhs.offset() == rhs.offset());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo::offset()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>.</p>

</div>
</div>
<a id="aeda80c22c557b92bb84d4a1e86d62591"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeda80c22c557b92bb84d4a1e86d62591">&#9670;&nbsp;</a></span>operator==() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two tensor info are equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>LHS tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>RHS tensor info.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given tensor infos are the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00355">355</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">return</span> (lhs._total_size == rhs._total_size) &amp;&amp;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;           (lhs._offset_first_element_in_bytes == rhs._offset_first_element_in_bytes) &amp;&amp;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;           (lhs._strides_in_bytes == rhs._strides_in_bytes) &amp;&amp; (lhs._num_channels == rhs._num_channels) &amp;&amp;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;           (lhs._tensor_shape == rhs._tensor_shape) &amp;&amp; (lhs._dims_state == rhs._dims_state) &amp;&amp;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;           (lhs._data_type == rhs._data_type) &amp;&amp; (lhs._format == rhs._format) &amp;&amp;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;           (lhs._is_resizable == rhs._is_resizable) &amp;&amp; (lhs._valid_region == rhs._valid_region) &amp;&amp;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;           (lhs._padding == rhs._padding) &amp;&amp; (lhs._quantization_info == rhs._quantization_info) &amp;&amp;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;           (lhs._data_layout == rhs._data_layout) &amp;&amp; (lhs._are_values_constant == rhs._are_values_constant) &amp;&amp;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;           (lhs._id == rhs._id);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd">&#9670;&nbsp;</a></span>operator==() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two quantization info are equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>RHS quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>LHS quantization info.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given quantization info is the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00185">185</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> (lhs.scale == rhs.scale) &amp;&amp; (lhs.offset == rhs.offset);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>.</p>

</div>
</div>
<a id="ae2382694e40b16992c526f074c53e669"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2382694e40b16992c526f074c53e669">&#9670;&nbsp;</a></span>operator==() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>LHS valid region </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>RHS valid region</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the valid regions are the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00225">225</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">return</span> (lhs.anchor == rhs.anchor) &amp;&amp; (lhs.shape == rhs.shape);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>.</p>

</div>
</div>
<a id="a6219039d80bc268a78900b9edb6381f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6219039d80bc268a78900b9edb6381f2">&#9670;&nbsp;</a></span>operator==() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>LHS window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>RHS window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given windows are the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00323">323</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> (lhs._dims == rhs._dims) &amp;&amp; (lhs._is_broadcasted == rhs._is_broadcasted);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1379e5f8a8b4640d7a52d901f0539ccd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1379e5f8a8b4640d7a52d901f0539ccd">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted input of the BorderMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">is</td><td>Input stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Border mode.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the modified input stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_reader_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_type_reader_8h_source.xhtml">TypeReader.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    std::string value;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    is &gt;&gt; value;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::transform(value.begin(), value.end(), value.begin(), [](<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        return std::toupper(c);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    });</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span>(value == <span class="stringliteral">&quot;UNDEFINED&quot;</span>)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> = BorderMode::UNDEFINED;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(value == <span class="stringliteral">&quot;CONSTANT&quot;</span>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> = BorderMode::CONSTANT;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(value == <span class="stringliteral">&quot;REPLICATE&quot;</span>)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> = BorderMode::REPLICATE;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Unsupported value &#39;&quot;</span> + value + <span class="stringliteral">&quot;&#39; for border mode&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> is;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>, <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules::mode</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">REPLICATE</a>, and <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</a>.</p>

</div>
</div>
<a id="a9c4a3d0e80938810dd7b22b16785f5c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c4a3d0e80938810dd7b22b16785f5c8">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Input Stream operator for <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to parse </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">data_layout</td><td>Output data layout</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated stream </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8h_source.xhtml#l00048">48</a> of file <a class="el" href="_type_loader_8h_source.xhtml">TypeLoader.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    std::string value;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    stream &gt;&gt; value;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> = <a class="code" href="namespacearm__compute.xhtml#a834b76c7d21af898f39def3b787d7530">data_layout_from_name</a>(value);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> stream;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, and <a class="el" href="_type_loader_8cpp_source.xhtml#l00032">data_layout_from_name()</a>.</p>

</div>
</div>
<a id="ab567edaca959e3f5013abf442b3235a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab567edaca959e3f5013abf442b3235a2">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> &amp;&#160;</td>
          <td class="paramname"><em>tuner_mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Input Stream operator for <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to parse </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">tuner_mode</td><td>Output tuner mode</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated stream </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_types_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_c_l_tuner_types_8h_source.xhtml">CLTunerTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::string value;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    stream &gt;&gt; value;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    tuner_mode = <a class="code" href="namespacearm__compute.xhtml#aa9c9e5cad47e8136f7136e94cec8b812">tuner_mode_from_name</a>(value);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> stream;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tuner_types_8h_source.xhtml#l00057">tuner_mode_from_name()</a>.</p>

</div>
</div>
<a id="a3fcb9d70356ee46adad39332bb3065a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fcb9d70356ee46adad39332bb3065a2">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Input Stream operator for <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to parse </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">data_type</td><td>Output data type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated stream </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8h_source.xhtml#l00290">290</a> of file <a class="el" href="_data_type_utils_8h_source.xhtml">DataTypeUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    std::string value;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    stream &gt;&gt; value;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute.xhtml#a64e6501d564e950c3d527fb6b1f36f28">data_type_from_name</a>(value);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">return</span> stream;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, and <a class="el" href="_data_type_utils_8cpp_source.xhtml#l00058">data_type_from_name()</a>.</p>

</div>
</div>
<a id="a21c3e11887f3acf9284ca763372c7da0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21c3e11887f3acf9284ca763372c7da0">&#9670;&nbsp;</a></span>permute() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::permute </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>perm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Permutes given <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> according to a permutation vector. </p>
<dl class="section warning"><dt>Warning</dt><dd>Validity of permutation is not checked</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dimensions</td><td><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> to permute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">perm</td><td>Permutation vector </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00144">144</a> of file <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">auto</span> dimensions_copy = utility::make_array&lt;Dimensions&lt;T&gt;::num_max_dimensions&gt;(dimensions.begin(), dimensions.end());</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; perm.num_dimensions(); ++i)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        T dimension_val = (perm[i] &lt; dimensions.num_dimensions()) ? dimensions_copy[perm[i]] : 0;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        dimensions.set(i, dimension_val);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00214">Dimensions&lt; T &gt;::begin()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00238">Dimensions&lt; T &gt;::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00119">arm_compute::misc::shape_calculator::compute_permutation_output_shape()</a>, <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00057">PermuteLayerNode::configure_output()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00587">AssetsLibrary::fill_with_generator()</a>, <a class="el" href="_graph_utils_8h_source.xhtml#l00673">arm_compute::graph_utils::permute_shape()</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00141">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00173">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00130">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00380">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00460">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="a5045aaec85553032a782c44ab8d26341"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5045aaec85553032a782c44ab8d26341">&#9670;&nbsp;</a></span>permute() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::permute </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>perm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Permutes given <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> according to a permutation vector. </p>
<dl class="section warning"><dt>Warning</dt><dd>Validity of permutation is not checked</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">shape</td><td>Shape to permute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">perm</td><td>Permutation vector </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00161">161</a> of file <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    TensorShape shape_copy = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; perm.num_dimensions(); ++i)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordtype">size_t</span> dimension_val = (perm[i] &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions()) ? shape_copy[perm[i]] : 1;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(i, dimension_val, <span class="keyword">false</span>, <span class="keyword">false</span>); <span class="comment">// Avoid changes in _num_dimension</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="afcd35973f3a5d2d4d3015e155f185a81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcd35973f3a5d2d4d3015e155f185a81">&#9670;&nbsp;</a></span>permute_strides()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::permute_strides </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>perm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Permutes the given dimensions according the permutation vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dimensions</td><td><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> to be permuted. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">perm</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> describing the permutation. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00069">69</a> of file <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> old_dim = utility::make_array&lt;Dimensions&lt;T&gt;::num_max_dimensions&gt;(dimensions.begin(), dimensions.end());</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; perm.num_dimensions(); ++i)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        T dimension_val = old_dim[i];</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        dimensions.set(perm[i], dimension_val);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00214">Dimensions&lt; T &gt;::begin()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00238">Dimensions&lt; T &gt;::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>.</p>

</div>
</div>
<a id="a4823543d67a2520c98669e2a5608ef6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4823543d67a2520c98669e2a5608ef6a">&#9670;&nbsp;</a></span>pixel_size_from_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arm_compute::pixel_size_from_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The size in bytes of the pixel format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Input format</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The size in bytes of the pixel format </dd></dl>

<p class="definition">Definition at line <a class="el" href="_format_utils_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_format_utils_8h_source.xhtml">FormatUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> Format::U8:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> Format::U16:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> Format::S16:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> Format::BFLOAT16:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> Format::F16:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> Format::UV88:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span> 3;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> 4;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> Format::U32:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> Format::S32:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">case</span> Format::F32:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">return</span> 4;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">//Doesn&#39;t make sense for planar formats:</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Undefined pixel size for given format&quot;</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

</div>
</div>
<a id="a4f6fe18760340bcec02d095b7099e923"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f6fe18760340bcec02d095b7099e923">&#9670;&nbsp;</a></span>plane_idx_from_channel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::plane_idx_from_channel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the plane index of a given channel given an input format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Input format </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Input channel</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The plane index of the specific channel of the specific format </dd></dl>

<p class="definition">Definition at line <a class="el" href="_format_utils_8h_source.xhtml#l00078">78</a> of file <a class="el" href="_format_utils_8h_source.xhtml">FormatUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// Single planar formats have a single plane</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> Format::U8:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">case</span> Format::U16:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">case</span> Format::S16:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">case</span> Format::U32:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">case</span> Format::S32:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">case</span> Format::BFLOAT16:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> Format::F16:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> Format::F32:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">case</span> Format::UV88:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> Format::RGB888:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> Format::RGBA8888:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">case</span> Format::YUYV422:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> Format::UYVY422:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Multi planar formats</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">case</span> Format::NV12:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">case</span> Format::NV21:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// Channel U and V share the same plane of format UV88</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">case</span> Format::IYUV:</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">case</span> Format::YUV444:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">switch</span> (channel)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">case</span> Channel::Y:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">case</span> Channel::V:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported channel&quot;</span>);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported format&quot;</span>);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

</div>
</div>
<a id="a0c0eeab3eb098f019ae72268636dcc59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c0eeab3eb098f019ae72268636dcc59">&#9670;&nbsp;</a></span>preferred_dummy_work_items_support()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool preferred_dummy_work_items_support </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to check if "dummy work-items" are preferred to have a power of two NDRange In case dummy work-items is enabled, it is OpenCL kernel responsibility to check if the work-item is out-of range or not. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if dummy work-items should be preferred to dispatch the NDRange </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00370">370</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(device);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="comment">// TODO (COMPMID-2044)</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, and <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>.</p>

</div>
</div>
<a id="a1bd532ddb5d86290e40c0b482eb476f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bd532ddb5d86290e40c0b482eb476f2">&#9670;&nbsp;</a></span>preferred_vector_width()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t preferred_vector_width </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the preferred native vector width size for built-in scalar types that can be put into vectors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>data type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>preferred vector width </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00340">340</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;{</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">return</span> device.getInfo&lt;CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR&gt;();</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keywordflow">return</span> device.getInfo&lt;CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT&gt;();</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">return</span> device.getInfo&lt;CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT&gt;();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">return</span> device.getInfo&lt;CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT&gt;();</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">return</span> device.getInfo&lt;CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG&gt;();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

</div>
</div>
<a id="a2ce67542f90c3e1adc608037ccdf9bdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ce67542f90c3e1adc608037ccdf9bdc">&#9670;&nbsp;</a></span>quantize_qasymm16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t arm_compute::quantize_qasymm16 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a 16-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00522">522</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;{</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a2ce67542f90c3e1adc608037ccdf9bdc">quantize_qasymm16</a>(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>());</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00494">quantize_qasymm16()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

</div>
</div>
<a id="a3fcdebf0b2654721ecdfa39b6bbd542d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fcdebf0b2654721ecdfa39b6bbd542d">&#9670;&nbsp;</a></span>quantize_qasymm16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t arm_compute::quantize_qasymm16 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em> = <code><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a 16-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>(Optional) Rounding policy to use. Default: nearest up</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00494">494</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordtype">int</span> quantized = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a>(value / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>, rounding_policy) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a08ffa53eaabde3e18b003f8182ac09bf">offset</a>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    quantized     = arm_compute::utility::clamp&lt;int, uint16_t&gt;(quantized);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">return</span> quantized;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo::offset()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00036">round()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00048">PixelValue::PixelValue()</a>, <a class="el" href="reference_2_quantization_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::quantization_layer()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00522">quantize_qasymm16()</a>.</p>

</div>
</div>
<a id="ab8cef8b31b552b532a14ab8815e06285"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8cef8b31b552b532a14ab8815e06285">&#9670;&nbsp;</a></span>quantize_qasymm8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::quantize_qasymm8 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const INFO_TYPE &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em> = <code><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given an unsigned 8-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>(Optional) Rounding policy to use. Default: nearest up</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00295">295</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">return</span> Qasymm8QuantizationHelper&lt;uint8_t&gt;::quantize(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>, rounding_policy);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00214">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::quantize()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00086">arm_compute::test::validation::convert_to_asymmetric()</a>, <a class="el" href="_scale_helpers_8h_source.xhtml#l00053">arm_compute::scale_helpers::delta_bilinear_c1_quantized()</a>, <a class="el" href="reference_2_depth_concatenate_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::depthconcatenate_layer()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00630">arm_compute::cpu::elementwise_arithm_op_quantized_scalar()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00445">VerifyAccessor&lt; D &gt;::fill_tensor()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00442">get_quantized_activation_min_max()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00183">arm_compute::quantization::get_quantized_asymmetric_output_min_max()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00304">arm_compute::test::validation::get_quantized_bounds()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00048">PixelValue::PixelValue()</a>, <a class="el" href="reference_2_quantization_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::quantization_layer()</a>, <a class="el" href="neon__gemm__qasymm8_8cpp_source.xhtml#l00087">quantize_values()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, and <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>.</p>

</div>
</div>
<a id="a464ea9027ae01e64014040d69302800f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a464ea9027ae01e64014040d69302800f">&#9670;&nbsp;</a></span>quantize_qasymm8_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8_t arm_compute::quantize_qasymm8_signed </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const INFO_TYPE &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em> = <code><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a signed 8-bit asymmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>(Optional) Rounding policy to use. Default: nearest up</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00309">309</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> Qasymm8QuantizationHelper&lt;int8_t&gt;::quantize(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>, rounding_policy);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00214">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::quantize()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_scale_helpers_8h_source.xhtml#l00092">arm_compute::scale_helpers::delta_bilinear_c1_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00637">arm_compute::cpu::elementwise_arithm_op_quantized_signed_scalar()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00442">get_quantized_activation_min_max()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00183">arm_compute::quantization::get_quantized_asymmetric_output_min_max()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00313">arm_compute::test::validation::get_quantized_qasymm8_signed_bounds()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00048">PixelValue::PixelValue()</a>, <a class="el" href="reference_2_quantization_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::quantization_layer()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00783">NEQLSTMLayer::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00714">CLQLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="af4a7d06572ce2a9c8c8fb3e37f1bb1d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4a7d06572ce2a9c8c8fb3e37f1bb1d4">&#9670;&nbsp;</a></span>quantize_qsymm16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int16_t arm_compute::quantize_qsymm16 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a 16-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00469">469</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#af4a7d06572ce2a9c8c8fb3e37f1bb1d4">quantize_qsymm16</a>(value, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>());</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00441">quantize_qsymm16()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

</div>
</div>
<a id="abd9a9e4bfba3b2e6a35099618122d38e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd9a9e4bfba3b2e6a35099618122d38e">&#9670;&nbsp;</a></span>quantize_qsymm16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int16_t arm_compute::quantize_qsymm16 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em> = <code><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a 16-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>(Optional) Rounding policy to use. Default: nearest up</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00441">441</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;{</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordtype">int</span> quantized = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a>(value / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>, rounding_policy);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    quantized     = arm_compute::utility::clamp&lt;int, int16_t&gt;(quantized);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">return</span> quantized;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00036">round()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::compute_all_anchors_qasymm16()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00225">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00193">CLQLSTMLayer::configure()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00134">arm_compute::test::validation::convert_to_symmetric()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00048">PixelValue::PixelValue()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00469">quantize_qsymm16()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00783">NEQLSTMLayer::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00714">CLQLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="aea6dad9b7cd5d5028a50e2aceafa7d1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea6dad9b7cd5d5028a50e2aceafa7d1d">&#9670;&nbsp;</a></span>quantize_qsymm8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8_t arm_compute::quantize_qsymm8 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a 8-bit symmetric quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00323">323</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordtype">int</span> quantized = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a>(value / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, RoundingPolicy::TO_NEAREST_UP);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    quantized     = std::max(-128, std::min(quantized, 127));</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">return</span> quantized;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00036">round()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_pixel_value_8h_source.xhtml#l00048">PixelValue::PixelValue()</a>.</p>

</div>
</div>
<a id="adcbb8a7cd81427846571f9bef039f953"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcbb8a7cd81427846571f9bef039f953">&#9670;&nbsp;</a></span>quantize_qsymm8_per_channel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8_t arm_compute::quantize_qsymm8_per_channel </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>channel_id</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a value given a 8-bit symmetric per channel quantization scheme. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to quantize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qinfo</td><td>Quantization information to use for quantizing </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channel_id</td><td>channel index into the scale vector of quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Quantized value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_quantization_info_8h_source.xhtml#l00338">338</a> of file <a class="el" href="_quantization_info_8h_source.xhtml">QuantizationInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordtype">int</span> quantized = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a>(value / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>()[channel_id], RoundingPolicy::TO_NEAREST_UP);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    quantized     = std::max(-128, std::min(quantized, 127));</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">return</span> quantized;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00036">round()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo::scale()</a>, and <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00322">arm_compute::test::validation::get_symm_quantized_per_channel_bounds()</a>.</p>

</div>
</div>
<a id="ae0d288429eb20baf6da6109f3a21e6bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0d288429eb20baf6da6109f3a21e6bb">&#9670;&nbsp;</a></span>read_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string read_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>binary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load an entire file in memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the file to read. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">binary</td><td>Is it a binary file ?</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The content of the file. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::string   out;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::ifstream fs;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        std::ios_base::openmode <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> = std::ios::in;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> (binary)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> |= std::ios::binary;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        fs.open(filename, <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// Go to the end of the file</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        fs.seekg(0, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::ios::end</a>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Reserve the memory required to store the file&#39;s content</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        out.reserve(fs.tellg());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// Go back to the beginning of the file</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        fs.seekg(0, std::ios::beg);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// Copy the content of the file</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        out.assign(std::istreambuf_iterator&lt;char&gt;(fs), std::istreambuf_iterator&lt;char&gt;());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::ifstream::failure &amp;e)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, filename.c_str(), e.what());</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00348">ARM_COMPUTE_ERROR_VAR</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules::mode</a>.</p>

<p class="reference">Referenced by <a class="el" href="gpu_2cl_2_c_l_kernel_library_8cpp_source.xhtml#l01001">ClKernelLibrary::program()</a>.</p>

</div>
</div>
<a id="a31b0c6ed009adf67db3e7129c551c9d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31b0c6ed009adf67db3e7129c551c9d3">&#9670;&nbsp;</a></span>release_prepare_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::release_prepare_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>workspace</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>prep_pack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_memory_helpers_8h_source.xhtml#l00105">105</a> of file <a class="el" href="_memory_helpers_8h_source.xhtml">MemoryHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    workspace.erase(std::remove_if(workspace.begin(), workspace.end(),</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                   [&amp;prep_pack](<span class="keyword">auto</span> &amp;wk)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                   {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                       const bool to_erase = wk.lifetime == experimental::MemoryLifetime::Prepare;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                       if (to_erase)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                       {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                           prep_pack.remove_tensor(wk.slot);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                       }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                       <span class="keywordflow">return</span> to_erase;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                   }),</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    workspace.end());</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00115">CLWinogradConvolutionLayer::prepare()</a>.</p>

</div>
</div>
<a id="a4a728aef1d0cf2e6f771ece1cf8d22cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a728aef1d0cf2e6f771ece1cf8d22cf">&#9670;&nbsp;</a></span>release_temporaries()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::release_temporaries </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> &amp;&#160;</td>
          <td class="paramname"><em>mem_reqs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#afb5b96463d9758a928795ca117fa7312">WorkspaceData</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>workspace</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Utility function to release tensors with lifetime marked as Prepare. </p>

<p class="definition">Definition at line <a class="el" href="_memory_helpers_8h_source.xhtml#l00122">122</a> of file <a class="el" href="_memory_helpers_8h_source.xhtml">MemoryHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;ws : workspace)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> slot = ws.slot;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;m : mem_reqs)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">if</span> (m.slot == slot &amp;&amp; m.lifetime == experimental::MemoryLifetime::Prepare)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = ws.tensor.get();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;allocator()-&gt;free();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="runtime_2_c_l_2functions_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00121">CLGEMMLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00138">CLGEMMConvolutionLayer::prepare()</a>, and <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00209">CLConvolutionLayer::prepare()</a>.</p>

</div>
</div>
<a id="ac7ed63ed26f02dfeddba85858fad6ada"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7ed63ed26f02dfeddba85858fad6ada">&#9670;&nbsp;</a></span>restore_program_cache_from_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void restore_program_cache_from_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>&quot;cache.bin&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function loads prebuilt opencl kernels from a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the file to be used to load the kernels </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    std::ifstream cache_file(filename, std::ios::binary);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (cache_file.is_open())</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">if</span> (!CLScheduler::get().is_initialised())</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a>();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">while</span> (!cache_file.eof())</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordtype">size_t</span> name_len   = 0;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordtype">size_t</span> binary_len = 0;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            cache_file.read(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;name_len), <span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            cache_file.read(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;binary_len), <span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">if</span> (name_len == 0 || binary_len == 0)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            std::vector&lt;char&gt;          tmp(name_len);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            std::vector&lt;unsigned char&gt; binary(binary_len);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            std::string                <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            cache_file.read(tmp.data(), name_len);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>.assign(tmp.data(), name_len);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            tmp.resize(binary_len);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            cache_file.read(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(binary.data()), binary_len);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            cl::Context             <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a> = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            cl::Program::Binaries   binaries{binary};</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            std::vector&lt;cl::Device&gt; devices = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>.getInfo&lt;CL_CONTEXT_DEVICES&gt;();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            cl::Program             program(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, devices, binaries);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            program.build();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            CLKernelLibrary::get().add_built_program(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, program);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        cache_file.close();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00097">CLKernelLibrary::add_built_program()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00033">CLScheduler::context()</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00134">CLScheduler::default_init()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, and <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">name</a>.</p>

</div>
</div>
<a id="aaae2b6b1c3f4404121346a4c27b22647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaae2b6b1c3f4404121346a4c27b22647">&#9670;&nbsp;</a></span>round()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int round </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a rounded value of x. </p>
<p>Rounding is done according to the rounding_policy.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Float value to be rounded. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Policy determining how rounding is done.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Rounded value of the argument x. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_rounding_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_rounding_8cpp_source.xhtml">Rounding.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">int</span> rounded = 0;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span> (rounding_policy)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> RoundingPolicy::TO_ZERO:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            rounded = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(x);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> RoundingPolicy::TO_NEAREST_UP:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            rounded = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(x));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> RoundingPolicy::TO_NEAREST_EVEN:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keyword">asm</span>(<span class="stringliteral">&quot;fcvtns %x[res], %s[value]&quot;</span> : [res] <span class="stringliteral">&quot;=r&quot;</span>(rounded) : [value] <span class="stringliteral">&quot;w&quot;</span>(x));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;TO_NEAREST_EVEN rounding policy is not supported.&quot;</span>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding policy.&quot;</span>);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> rounded;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00185">arm_compute::support::cpp11::round()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">TO_NEAREST_EVEN</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>, and <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">TO_ZERO</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantization_info_8h_source.xhtml#l00230">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::quantize()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00494">quantize_qasymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00441">quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00323">quantize_qsymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00338">quantize_qsymm8_per_channel()</a>, <a class="el" href="roi__pooling__layer_8cl_source.xhtml#l00151">roi_pooling_layer()</a>, <a class="el" href="nchw_2scale_8cl_source.xhtml#l00091">scale_nearest_neighbour_nchw()</a>, <a class="el" href="_scheduler_utils_8cpp_source.xhtml#l00035">arm_compute::scheduler_utils::split_2d()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, and <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>.</p>

</div>
</div>
<a id="afe3908fe41d9f2559f4a9eab1997fe61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe3908fe41d9f2559f4a9eab1997fe61">&#9670;&nbsp;</a></span>rounding_divide_by_pow2() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32_t rounding_divide_by_pow2 </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round to the nearest division by a power-of-two using exponent. </p>
<dl class="section note"><dt>Note</dt><dd>This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Element to divide. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exponent</td><td>Integer value used to round to nearest division by a power-of-two</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the nearest division by a power-of-two using exponent </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00441">441</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">const</span> int32_t mask      = (1 &lt;&lt; exponent) - 1;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> int32_t threshold = (mask &gt;&gt; 1) + (x &lt; 0 ? 1 : 0);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span> (x &gt;&gt; exponent) + ((x &amp; mask) &gt; threshold ? 1 : 0);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e28a3911204ac952601f512c82b48f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e28a3911204ac952601f512c82b48f1">&#9670;&nbsp;</a></span>rounding_divide_by_pow2() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t rounding_divide_by_pow2 </td>
          <td>(</td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round to the nearest division by a power-of-two using exponent. </p>
<dl class="section note"><dt>Note</dt><dd>This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of 4 elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exponent</td><td>Integer value used to round to nearest division by a power-of-two</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the nearest division by a power-of-two using exponent </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00433">433</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;{</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> int32x4_t shift_vec  = vdupq_n_s32(-exponent);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> int32x4_t fixup      = vshrq_n_s32(vandq_s32(x, shift_vec), 31);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">const</span> int32x4_t fixed_up_x = vqaddq_s32(x, fixup);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed_up_x, shift_vec);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a77e02c19b498c3ff4ee373b0825cfd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77e02c19b498c3ff4ee373b0825cfd19">&#9670;&nbsp;</a></span>rounding_divide_by_pow2() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t rounding_divide_by_pow2 </td>
          <td>(</td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round to the nearest division by a power-of-two using exponent. </p>
<dl class="section note"><dt>Note</dt><dd>This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of 4 elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exponent</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of 4 elements with integer value used to round to nearest division by a power-of-two</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the nearest division by a power-of-two using exponent </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00425">425</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">const</span> int32x4_t shift_vec  = vnegq_s32(exponent);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">const</span> int32x4_t fixup      = vshrq_n_s32(vandq_s32(x, shift_vec), 31);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">const</span> int32x4_t fixed_up_x = vqaddq_s32(x, fixup);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed_up_x, shift_vec);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_asymm_8h_source.xhtml#l00084">finalize_quantization()</a>, <a class="el" href="_n_e_symm_8h_source.xhtml#l00054">finalize_quantization_int16()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00230">finalize_quantization_symm()</a>, and <a class="el" href="_n_e_symm_8h_source.xhtml#l00225">multiply_by_quantized_multiplier_2row()</a>.</p>

</div>
</div>
<a id="a41a6fe8f923746f66337e606961ca43d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41a6fe8f923746f66337e606961ca43d">&#9670;&nbsp;</a></span>run_reverse()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::run_reverse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_inverted_axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml">NEReverseKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis_bit = 0;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    rank     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;num_dimensions();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; axis-&gt;info()-&gt;dimension(0); ++i)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordtype">int</span> axis_i = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(axis-&gt;buffer()) + i);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">// The values of axis tensor must be between [-rank, rank-1].</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span> ((axis_i &lt; -rank) || (axis_i &gt;= rank))</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;the values of the axis tensor must be within [-rank, rank-1].&quot;</span>);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment">// In case of negative axis value i.e targeted axis(i) = rank + axis(i)</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span> (axis_i &lt; 0)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            axis_i = rank + axis_i;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">// Reverse ACL axis indices convention i.e. (inverted)axis = (tensor_rank - 1) - axis</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (use_inverted_axis)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            axis_i = (rank - 1) - axis_i;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        axis_bit |= 1 &lt;&lt; axis_i;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Check if we need a left-over loop for the y dimension</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 16 / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    Window win(window);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, win);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        win,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keyword">auto</span> in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr()) + x);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="comment">// Reverse 0 axis</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">if</span> (axis_bit &amp; 0x1)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7a641703a9c98932d775d915bf7a3e5">wrapper::vrev64</a>(in);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_x = (axis_bit &amp; 0x1) ? output-&gt;info()-&gt;dimension(0) - x - window_step_x : x;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_y = (axis_bit &amp; 0x2) ? output-&gt;info()-&gt;dimension(1) - <span class="keywordtype">id</span>.y() - 1 : <span class="keywordtype">id</span>.y();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_z = (axis_bit &amp; 0x4) ? output-&gt;info()-&gt;dimension(2) - <span class="keywordtype">id</span>.z() - 1 : <span class="keywordtype">id</span>.z();</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_w = (axis_bit &amp; 0x8) ? output-&gt;info()-&gt;dimension(3) - <span class="keywordtype">id</span>[3] - 1 : <span class="keywordtype">id</span>[3];</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keyword">auto</span> out_ptr =</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output-&gt;ptr_to_element(Coordinates(offset_x, offset_y, offset_z, offset_w)));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr, in);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr()) + x);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_x = (axis_bit &amp; 0x1) ? output-&gt;info()-&gt;dimension(0) - x - 1 : x;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_y = (axis_bit &amp; 0x2) ? output-&gt;info()-&gt;dimension(1) - <span class="keywordtype">id</span>.y() - 1 : <span class="keywordtype">id</span>.y();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_z = (axis_bit &amp; 0x4) ? output-&gt;info()-&gt;dimension(2) - <span class="keywordtype">id</span>.z() - 1 : <span class="keywordtype">id</span>.z();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> offset_w = (axis_bit &amp; 0x8) ? output-&gt;info()-&gt;dimension(3) - <span class="keywordtype">id</span>[3] - 1 : <span class="keywordtype">id</span>[3];</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output-&gt;ptr_to_element(Coordinates(offset_x, offset_y, offset_z, offset_w))) =</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    in;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        },</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        input_it);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="rev64_8h_source.xhtml#l00039">arm_compute::wrapper::vrev64()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a3a3405e0e787bc6d6298ff7a2d52e5e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a3405e0e787bc6d6298ff7a2d52e5e4">&#9670;&nbsp;</a></span>save_program_cache_to_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void save_program_cache_to_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>&quot;cache.bin&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function saves opencl kernels library to a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the file to be used to save the library </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (CLScheduler::get().is_initialised())</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::ofstream cache_file(filename, std::ios::binary);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span> (cache_file.is_open())</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it : CLKernelLibrary::get().get_built_programs())</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                std::vector&lt;std::vector&lt;unsigned char&gt;&gt; binaries = it.second.getInfo&lt;CL_PROGRAM_BINARIES&gt;();</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(binaries.size() != 1);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keyword">const</span> std::string <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>      = it.first;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordtype">size_t</span>            kernel_name_size = <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>.length();</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordtype">size_t</span>            binary_size      = binaries[0].size();</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                cache_file.write(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;kernel_name_size), <span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                cache_file.write(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;binary_size), <span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                cache_file.write(<a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>.c_str(), kernel_name_size);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                cache_file.write(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(binaries[0].data()), binaries[0].size());</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            cache_file.close();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Cannot open cache file&quot;</span>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, and <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">kernel_name</a>.</p>

</div>
</div>
<a id="a7058bee3ed710f07d96cb0d856de3bec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7058bee3ed710f07d96cb0d856de3bec">&#9670;&nbsp;</a></span>scaled_3d_dimensions_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; int, int, int &gt; scaled_3d_dimensions_signed </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool3d_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns calculated width, height and depth of output scaled tensor depending on dimensions rounding mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depth</td><td>Depth of input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_width</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> width. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_height</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> height. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_depth</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> depth. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool3d_info</td><td>Pad and stride and round information for 3d pooling</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tuple with the new width in the first position, the new height in the second, and the new depth in the third. Returned values can be &lt; 1 </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00366">366</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pool3d_info.padding.left;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pool3d_info.padding.top;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pool3d_info.padding.right;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pool3d_info.padding.bottom;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_front  = pool3d_info.padding.front;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_back   = pool3d_info.padding.back;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x   = pool3d_info.stride.x();</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y   = pool3d_info.stride.y();</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_z   = pool3d_info.stride.z();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>          = 0;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordtype">int</span>       h          = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordtype">int</span>       d          = 0;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">switch</span> (pool3d_info.round_type)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::FLOOR:</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            d = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(depth + pad_front + pad_back - kernel_depth) / stride_z) + 1));</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::CEIL:</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            d = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(depth + pad_front + pad_back - kernel_depth) / stride_z) + 1));</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(h), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(d));</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00643">Padding3D::back</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00641">Padding3D::bottom</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Padding3D::front</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Padding3D::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01251">Pooling3dLayerInfo::padding</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00639">Padding3D::right</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01255">Pooling3dLayerInfo::round_type</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01250">Pooling3dLayerInfo::stride</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Padding3D::top</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>, <a class="el" href="_size3_d_8h_source.xhtml#l00057">Size3D::x()</a>, <a class="el" href="_size3_d_8h_source.xhtml#l00066">Size3D::y()</a>, and <a class="el" href="_size3_d_8h_source.xhtml#l00075">Size3D::z()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l01662">arm_compute::misc::shape_calculator::compute_pool3d_shape()</a>.</p>

</div>
</div>
<a id="a138beaeb1260b90cb03bc3f761628724"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a138beaeb1260b90cb03bc3f761628724">&#9670;&nbsp;</a></span>scaled_dimensions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pad_stride_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em> = <code><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1U,&#160;1U)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns expected width and height of output scaled tensor depending on dimensions rounding mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of input tensor (Number of columns) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of input tensor (Number of rows) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_width</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> width. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_height</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> height. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pad_stride_info</td><td>Pad and stride information. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation</td><td>(Optional) Dilation, in elements, across x and y. Defaults to (1, 1).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair with the new width in the first position and the new height in the second. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00288">288</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dilation_x = dilation.x();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dilation_y = dilation.y();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.pad_left();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.pad_top();</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.pad_right();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.pad_bottom();</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x   = pad_stride_info.stride().first;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y   = pad_stride_info.stride().second;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>          = 0;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">int</span>       h          = 0;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">switch</span> (pad_stride_info.round())</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::FLOOR:</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - (dilation_x * (kernel_width - 1) + 1)) / stride_x) +</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                1));</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - (dilation_y * (kernel_height - 1) + 1)) /</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                            stride_y) +</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                           1));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::CEIL:</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil(</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - (dilation_x * (kernel_width - 1) + 1)) / stride_x) +</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                1));</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - (dilation_y * (kernel_height - 1) + 1)) /</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                           stride_y) +</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                          1));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = std::max(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    h = std::max(1, h);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">return</span> std::make_pair(<span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(h));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>, <a class="el" href="_core_types_8h_source.xhtml#l00233">PadStrideInfo::pad_bottom()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00223">PadStrideInfo::pad_right()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00239">PadStrideInfo::round()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00218">calculate_same_pad()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00784">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00046">PoolingLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00097">FusedConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00088">FusedDepthwiseConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00084">DepthwiseConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00096">ConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00748">arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="reference_2_convolution_layer_8cpp_source.xhtml#l00045">arm_compute::test::validation::reference::convolution_layer_nchw()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00602">CpuGemmConv2d::has_opt_impl()</a>, <a class="el" href="reference_2_im2_col_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::im2col_nchw()</a>, <a class="el" href="reference_2_im2_col_8cpp_source.xhtml#l00093">arm_compute::test::validation::reference::im2col_nhwc()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>.</p>

</div>
</div>
<a id="a1d8da22845d57d4aacb55b7d5ae6c013"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d8da22845d57d4aacb55b7d5ae6c013">&#9670;&nbsp;</a></span>scaled_dimensions_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; int, int &gt; scaled_dimensions_signed </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pad_stride_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns calculated width and height of output scaled tensor depending on dimensions rounding mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of input tensor (Number of columns) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of input tensor (Number of rows) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_width</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> width. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_height</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> height. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pad_stride_info</td><td>Pad and stride information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair with the new width in the first position and the new height in the second, returned values can be &lt; 1 </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00334">334</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.pad_left();</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.pad_top();</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.pad_right();</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.pad_bottom();</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x   = pad_stride_info.stride().first;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y   = pad_stride_info.stride().second;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>          = 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">int</span>       h          = 0;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">switch</span> (pad_stride_info.round())</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::FLOOR:</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">case</span> DimensionRoundingType::CEIL:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">return</span> std::make_pair(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(h));</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>, <a class="el" href="_core_types_8h_source.xhtml#l00233">PadStrideInfo::pad_bottom()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00223">PadStrideInfo::pad_right()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00239">PadStrideInfo::round()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00881">arm_compute::misc::shape_calculator::compute_pool_shape()</a>.</p>

</div>
</div>
<a id="af4cf1da2467d59160492d2095c66ea26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4cf1da2467d59160492d2095c66ea26">&#9670;&nbsp;</a></span>schedule_kernel_on_ctx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void schedule_kernel_on_ctx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flush</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedules a kernel using the context if not nullptr else uses the legacy scheduling flow. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>Context to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to schedule. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flush</td><td>(Optional) Specifies if the command queue will be flushed after running the kernel. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(kernel);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span> (ctx)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(ctx-&gt;gpu_scheduler() == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        ctx-&gt;gpu_scheduler()-&gt;enqueue(*kernel, flush);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        CLScheduler::get().enqueue(*kernel, flush);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00232">CLScheduler::enqueue()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, and <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00060">CLRuntimeContext::gpu_scheduler()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_simple_function_8cpp_source.xhtml#l00042">ICLSimpleFunction::run()</a>, and <a class="el" href="_c_l_instance_normalization_layer_8cpp_source.xhtml#l00082">CLInstanceNormalizationLayer::run()</a>.</p>

</div>
</div>
<a id="a50617012493fc796beb28d94e4da33c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50617012493fc796beb28d94e4da33c7">&#9670;&nbsp;</a></span>select_preferable_platform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Platform select_preferable_platform </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a>&#160;</td>
          <td class="paramname"><em>cl_backend_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function selects the OpenCL platform based on the backend type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_backend_type</td><td>The OpenCL backend type to use.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A cl::Platform object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::vector&lt;cl::Platform&gt; platforms;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    cl::Platform::get(&amp;platforms);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(platforms.size() == 0, <span class="stringliteral">&quot;Couldn&#39;t find any OpenCL platform&quot;</span>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    cl::Platform selected_platform{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// If the user has selected the Native platform, return the first available.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">switch</span> (cl_backend_type)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> CLBackendType::Native:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            selected_platform = platforms[0];</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">case</span> CLBackendType::Clvk:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> p : platforms)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                std::string res = p.getInfo&lt;CL_PLATFORM_NAME&gt;();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">if</span> (res.find(<span class="stringliteral">&quot;clvk&quot;</span>) != std::string::npos)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    selected_platform = p;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported backend type&quot;</span>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (!selected_platform())</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;No valid platform found&quot;</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> selected_platform;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1">Clvk</a>, and <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">Native</a>.</p>

<p class="reference">Referenced by <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00121">create_opencl_context_and_device()</a>.</p>

</div>
</div>
<a id="abf58d423103fa70e5f30b2d0f4824b8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf58d423103fa70e5f30b2d0f4824b8f">&#9670;&nbsp;</a></span>set_data_layout_if_unknown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::set_data_layout_if_unknown </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data layout to the specified value if the current data layout is unknown. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>New data layout.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the data type has been changed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00152">152</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.<a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_data_layout(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00234">ScaleKernelInfo::data_layout</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

</div>
</div>
<a id="ac358f7701e83eb2bda7ae5b9f03fd7fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac358f7701e83eb2bda7ae5b9f03fd7fe">&#9670;&nbsp;</a></span>set_data_type_if_unknown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::set_data_type_if_unknown </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data type and number of channels to the specified value if the current data type is unknown. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>New data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the data type has been changed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00133">133</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type() == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_data_type(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00270">NELogicalKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00118">CpuSubKernel::configure()</a>, <a class="el" href="_cpu_add_mul_add_kernel_8cpp_source.xhtml#l00121">CpuAddMulAddKernel::configure()</a>, and <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00145">CpuAddKernel::configure()</a>.</p>

</div>
</div>
<a id="a872a3970fd667bb8006f876539eb9277"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a872a3970fd667bb8006f876539eb9277">&#9670;&nbsp;</a></span>set_format_if_unknown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::set_format_if_unknown </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the format, data type and number of channels to the specified value if the current data type is unknown. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>New format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the format has been changed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00114">114</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type() == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_format(<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00058">NEBitwiseNotKernel::configure()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00060">NEBitwiseXorKernel::configure()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00060">NEBitwiseOrKernel::configure()</a>, and <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00063">NEBitwiseAndKernel::configure()</a>.</p>

</div>
</div>
<a id="aa5fa85dd8120143da5d352865be635de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5fa85dd8120143da5d352865be635de">&#9670;&nbsp;</a></span>set_quantization_info_if_empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::set_quantization_info_if_empty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the quantization info to the specified value if the current quantization info is empty and the data type of asymmetric quantized type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>Quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the quantization info has been changed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00171">171</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.quantization_info().empty() &amp;&amp; (<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type())))</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_quantization_info(quantization_info);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">is_data_type_quantized_asymmetric()</a>.</p>

</div>
</div>
<a id="a6bd175f94838df9aed06d32452df92d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bd175f94838df9aed06d32452df92d3">&#9670;&nbsp;</a></span>set_shape_if_empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::set_shape_if_empty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the shape to the specified value if the current assignment is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info used to check and assign. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the shape has been changed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_auto_configuration_8h_source.xhtml#l00095">95</a> of file <a class="el" href="_auto_configuration_8h_source.xhtml">AutoConfiguration.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape().total_size() == 0)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_tensor_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00270">NELogicalKernel::configure()</a>, <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00058">NEBitwiseNotKernel::configure()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00060">NEBitwiseXorKernel::configure()</a>, <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00063">NEBitwiseAndKernel::configure()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00060">NEBitwiseOrKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00118">CpuSubKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_cpu_add_mul_add_kernel_8cpp_source.xhtml#l00121">CpuAddMulAddKernel::configure()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00163">CpuCastKernel::configure()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00145">CpuAddKernel::configure()</a>, and <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel::configure()</a>.</p>

</div>
</div>
<a id="ab31871933f8428576d0589ff5f98224d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab31871933f8428576d0589ff5f98224d">&#9670;&nbsp;</a></span>set_unroll_with_pragma()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_unroll_with_pragma </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>built_opts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; int &gt;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00487">487</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">int</span> value : values)</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keywordflow">if</span> (value &gt; max_manual_loop_unrolling)</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        {</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            built_opts.add_option(<span class="stringliteral">&quot;-DUNROLL_WITH_PRAGMA&quot;</span>);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00041">CLBuildOptions::add_option()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>.</p>

</div>
</div>
<a id="a3c10c7c992771d1048fd5fe2708ccdd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c10c7c992771d1048fd5fe2708ccdd9">&#9670;&nbsp;</a></span>set_wbsm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_wbsm </td>
          <td>(</td>
          <td class="paramtype">cl::Kernel &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int&#160;</td>
          <td class="paramname"><em>wbsm_hint</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00441">441</a> of file <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml">CLHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    cl_int err = <a class="code" href="_open_c_l_8cpp.xhtml#aaf342694786e1e468c55431205f36ced">clSetKernelExecInfo</a>(kernel.get(), CL_KERNEL_EXEC_INFO_WORKGROUP_BATCH_SIZE_MODIFIER_ARM,</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                     <span class="keyword">sizeof</span>(cl_int), &amp;wbsm_hint);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(err);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(err != CL_SUCCESS);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l01080">clSetKernelExecInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00033">enqueue()</a>.</p>

</div>
</div>
<a id="a5f2b06a162f0ca4e7bc8caac9525197f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f2b06a162f0ca4e7bc8caac9525197f">&#9670;&nbsp;</a></span>string_from_activation_func()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_activation_func </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>act</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given activation function to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">act</td><td><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a3344a86d9eb7ba68c838651232789d32">ActivationLayerInfo::ActivationFunction</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the activation function. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_activation_function_utils_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_activation_function_utils_8cpp_source.xhtml">ActivationFunctionUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">static</span> std::map&lt;ActivationFunction, const std::string&gt; act_map = {{ActivationFunction::ABS, <span class="stringliteral">&quot;ABS&quot;</span>},</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                                                      {ActivationFunction::LINEAR, <span class="stringliteral">&quot;LINEAR&quot;</span>},</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                                                      {ActivationFunction::LOGISTIC, <span class="stringliteral">&quot;LOGISTIC&quot;</span>},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                                                      {ActivationFunction::RELU, <span class="stringliteral">&quot;RELU&quot;</span>},</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                                      {ActivationFunction::BOUNDED_RELU, <span class="stringliteral">&quot;BRELU&quot;</span>},</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                                                      {ActivationFunction::LU_BOUNDED_RELU, <span class="stringliteral">&quot;LU_BRELU&quot;</span>},</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                                      {ActivationFunction::LEAKY_RELU, <span class="stringliteral">&quot;LRELU&quot;</span>},</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                                      {ActivationFunction::SOFT_RELU, <span class="stringliteral">&quot;SRELU&quot;</span>},</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                                      {ActivationFunction::ELU, <span class="stringliteral">&quot;ELU&quot;</span>},</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                                      {ActivationFunction::SQRT, <span class="stringliteral">&quot;SQRT&quot;</span>},</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                                      {ActivationFunction::SQUARE, <span class="stringliteral">&quot;SQUARE&quot;</span>},</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                                      {ActivationFunction::TANH, <span class="stringliteral">&quot;TANH&quot;</span>},</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                                                      {ActivationFunction::IDENTITY, <span class="stringliteral">&quot;IDENTITY&quot;</span>},</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                                                      {ActivationFunction::HARD_SWISH, <span class="stringliteral">&quot;HARD_SWISH&quot;</span>},</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                                      {ActivationFunction::SWISH, <span class="stringliteral">&quot;SWISH&quot;</span>},</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                                      {ActivationFunction::GELU, <span class="stringliteral">&quot;GELU&quot;</span>}</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    };</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> act_map[act];</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">BOUNDED_RELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">ELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6c83d4d579e33c2e1b09f2e9825fcbc6">GELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">HARD_SWISH</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">IDENTITY</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">LEAKY_RELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">LINEAR</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">LOGISTIC</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">LU_BOUNDED_RELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">RELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">SOFT_RELU</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">SQRT</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">SQUARE</a>, <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadb3a79f92eca8147eb99ae7d25ee8a65">SWISH</a>, and <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">TANH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, and <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00112">ClTemplateActivation::get_tag_lut()</a>.</p>

</div>
</div>
<a id="ae0204b49ec236bbaedb1cf96def276d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0204b49ec236bbaedb1cf96def276d4">&#9670;&nbsp;</a></span>string_from_border_mode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_border_mode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given border mode policy to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">border_mode</td><td><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the border mode. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">static</span> std::map&lt;BorderMode, const std::string&gt; border_mode_map = {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {BorderMode::UNDEFINED, <span class="stringliteral">&quot;UNDEFINED&quot;</span>},</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {BorderMode::CONSTANT, <span class="stringliteral">&quot;CONSTANT&quot;</span>},</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {BorderMode::REPLICATE, <span class="stringliteral">&quot;REPLICATE&quot;</span>},</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    };</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> border_mode_map[border_mode];</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">REPLICATE</a>, and <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>.</p>

</div>
</div>
<a id="af0dfcd19fb6510cd3c303db6c4583ee6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0dfcd19fb6510cd3c303db6c4583ee6">&#9670;&nbsp;</a></span>string_from_channel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_channel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a channel identity into a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the channel. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00078">78</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">static</span> std::map&lt;Channel, const std::string&gt; channels_map = {{<a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Channel::UNKNOWN</a>, <span class="stringliteral">&quot;UNKNOWN&quot;</span>},</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                                                {Channel::R, <span class="stringliteral">&quot;R&quot;</span>},</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                                                {Channel::G, <span class="stringliteral">&quot;G&quot;</span>},</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                                {Channel::B, <span class="stringliteral">&quot;B&quot;</span>},</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                                                {Channel::A, <span class="stringliteral">&quot;A&quot;</span>},</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                                                {Channel::Y, <span class="stringliteral">&quot;Y&quot;</span>},</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                                                {<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">Channel::U</a>, <span class="stringliteral">&quot;U&quot;</span>},</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                                {Channel::V, <span class="stringliteral">&quot;V&quot;</span>},</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                                                {Channel::C0, <span class="stringliteral">&quot;C0&quot;</span>},</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                                {Channel::C1, <span class="stringliteral">&quot;C1&quot;</span>},</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                                                {Channel::C2, <span class="stringliteral">&quot;C2&quot;</span>},</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                                {Channel::C3, <span class="stringliteral">&quot;C3&quot;</span>}};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> channels_map[channel];</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">C0</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">C1</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">C2</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">C3</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>, and <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>.</p>

</div>
</div>
<a id="a56b9e25c2e8731ca5488e7b3ccd66f58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56b9e25c2e8731ca5488e7b3ccd66f58">&#9670;&nbsp;</a></span>string_from_data_layout()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_data_layout </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dl</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a data layout identity into a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dl</td><td><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the data layout. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_layout_utils_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_data_layout_utils_8cpp_source.xhtml">DataLayoutUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">static</span> std::map&lt;DataLayout, const std::string&gt; dl_map = {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>, <span class="stringliteral">&quot;UNKNOWN&quot;</span>},</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {DataLayout::NCHW, <span class="stringliteral">&quot;NCHW&quot;</span>},</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        {DataLayout::NHWC, <span class="stringliteral">&quot;NHWC&quot;</span>},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> dl_map[<a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>];</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00050">dl</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00079">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00078">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00098">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00853">error_on_data_layout_not_in()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00339">ClTemplateDirectConv2d::get_config_id()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00431">ClTemplatePool2d::get_config_id()</a>, and <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01142">operator&lt;&lt;()</a>.</p>

</div>
</div>
<a id="a142b55a483cadf4e1068a1a09a55e8e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a142b55a483cadf4e1068a1a09a55e8e9">&#9670;&nbsp;</a></span>string_from_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a data type identity into a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the data type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_data_type_utils_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_data_type_utils_8cpp_source.xhtml">DataTypeUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">static</span> std::map&lt;DataType, const std::string&gt; dt_map = {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataType::UNKNOWN</a>, <span class="stringliteral">&quot;UNKNOWN&quot;</span>},</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        {DataType::S8, <span class="stringliteral">&quot;S8&quot;</span>},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        {DataType::U8, <span class="stringliteral">&quot;U8&quot;</span>},</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        {DataType::S16, <span class="stringliteral">&quot;S16&quot;</span>},</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {DataType::U16, <span class="stringliteral">&quot;U16&quot;</span>},</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        {DataType::S32, <span class="stringliteral">&quot;S32&quot;</span>},</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        {DataType::U32, <span class="stringliteral">&quot;U32&quot;</span>},</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        {DataType::S64, <span class="stringliteral">&quot;S64&quot;</span>},</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        {DataType::U64, <span class="stringliteral">&quot;U64&quot;</span>},</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        {DataType::F16, <span class="stringliteral">&quot;F16&quot;</span>},</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        {DataType::F32, <span class="stringliteral">&quot;F32&quot;</span>},</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        {DataType::F64, <span class="stringliteral">&quot;F64&quot;</span>},</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {DataType::SIZET, <span class="stringliteral">&quot;SIZET&quot;</span>},</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        {DataType::QSYMM8, <span class="stringliteral">&quot;QSYMM8&quot;</span>},</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {DataType::QSYMM8_PER_CHANNEL, <span class="stringliteral">&quot;QSYMM8_PER_CHANNEL&quot;</span>},</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {DataType::QASYMM8, <span class="stringliteral">&quot;QASYMM8&quot;</span>},</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        {DataType::QASYMM8_SIGNED, <span class="stringliteral">&quot;QASYMM8_SIGNED&quot;</span>},</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {DataType::QSYMM16, <span class="stringliteral">&quot;QSYMM16&quot;</span>},</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {DataType::QASYMM16, <span class="stringliteral">&quot;QASYMM16&quot;</span>},</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> dt_map[<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>];</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">F64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">SIZET</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00109">CpuQuantizeKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00109">ClActivationKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00118">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00068">CLFFTScaleKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00083">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00073">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00082">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00081">CLReverseKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00104">ClCol2ImKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00107">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00206">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00145">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">error_on_data_type_not_in()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00180">ClTemplateCast::get_config_id()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00142">ClTemplateLogits1DNorm::get_config_id()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00240">ClTemplateLogits1DMaxShiftExpSum::get_config_id()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00134">ClTemplateReshape::get_config_id()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00328">ClTemplateDepthwiseConv2d::get_config_id()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00339">ClTemplateDirectConv2d::get_config_id()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00431">ClTemplatePool2d::get_config_id()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00154">ClTemplateActivation::get_config_id()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00420">GpuCkwElementwiseBinary::get_name()</a>, and <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01142">operator&lt;&lt;()</a>.</p>

</div>
</div>
<a id="a8b82da7b5e0f6192f415ac347c9e0555"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b82da7b5e0f6192f415ac347c9e0555">&#9670;&nbsp;</a></span>string_from_format()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a tensor format into a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the format. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_format_utils_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_format_utils_8cpp_source.xhtml">FormatUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">static</span> std::map&lt;Format, const std::string&gt; formats_map = {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">Format::UNKNOWN</a>, <span class="stringliteral">&quot;UNKNOWN&quot;</span>},   {Format::U8, <span class="stringliteral">&quot;U8&quot;</span>},</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        {Format::S16, <span class="stringliteral">&quot;S16&quot;</span>},           {Format::U16, <span class="stringliteral">&quot;U16&quot;</span>},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        {Format::S32, <span class="stringliteral">&quot;S32&quot;</span>},           {Format::U32, <span class="stringliteral">&quot;U32&quot;</span>},</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        {Format::F16, <span class="stringliteral">&quot;F16&quot;</span>},           {Format::F32, <span class="stringliteral">&quot;F32&quot;</span>},</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {Format::UV88, <span class="stringliteral">&quot;UV88&quot;</span>},         {Format::RGB888, <span class="stringliteral">&quot;RGB888&quot;</span>},</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        {Format::RGBA8888, <span class="stringliteral">&quot;RGBA8888&quot;</span>}, {Format::YUV444, <span class="stringliteral">&quot;YUV444&quot;</span>},</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        {Format::YUYV422, <span class="stringliteral">&quot;YUYV422&quot;</span>},   {Format::NV12, <span class="stringliteral">&quot;NV12&quot;</span>},</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        {Format::NV21, <span class="stringliteral">&quot;NV21&quot;</span>},         {Format::IYUV, <span class="stringliteral">&quot;IYUV&quot;</span>},</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        {Format::UYVY422, <span class="stringliteral">&quot;UYVY422&quot;</span>}};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> formats_map[<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>];</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00767">error_on_format_not_in()</a>.</p>

</div>
</div>
<a id="a291164a04581bf953aa65ae87cc201a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a291164a04581bf953aa65ae87cc201a2">&#9670;&nbsp;</a></span>string_from_gemmlowp_output_stage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_gemmlowp_output_stage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a>&#160;</td>
          <td class="paramname"><em>output_stage</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given GEMMLowp output stage to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stage</td><td><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the GEMMLowp output stage </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">static</span> std::map&lt;GEMMLowpOutputStageType, const std::string&gt; output_stage_map = {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {GEMMLowpOutputStageType::NONE, <span class="stringliteral">&quot;&quot;</span>},</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {GEMMLowpOutputStageType::QUANTIZE_DOWN, <span class="stringliteral">&quot;quantize_down&quot;</span>},</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        {GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT, <span class="stringliteral">&quot;quantize_down_fixedpoint&quot;</span>},</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        {GEMMLowpOutputStageType::QUANTIZE_DOWN_FLOAT, <span class="stringliteral">&quot;quantize_down_float&quot;</span>}};</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> output_stage_map[<a class="code" href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a>];</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">NONE</a>, <a class="el" href="working__space_8hpp_source.xhtml#l00107">output_stage</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">QUANTIZE_DOWN</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">QUANTIZE_DOWN_FIXEDPOINT</a>, and <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">QUANTIZE_DOWN_FLOAT</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>.</p>

</div>
</div>
<a id="a3e4a3ad379526db61e1ebf469b455f83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e4a3ad379526db61e1ebf469b455f83">&#9670;&nbsp;</a></span>string_from_interpolation_policy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_interpolation_policy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given interpolation policy to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the interpolation policy. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_interpolation_policy_utils_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_interpolation_policy_utils_8cpp_source.xhtml">InterpolationPolicyUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">static</span> std::map&lt;InterpolationPolicy, const std::string&gt; interpolation_policy_map = {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        {InterpolationPolicy::AREA, <span class="stringliteral">&quot;AREA&quot;</span>},</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {InterpolationPolicy::BILINEAR, <span class="stringliteral">&quot;BILINEAR&quot;</span>},</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        {InterpolationPolicy::NEAREST_NEIGHBOR, <span class="stringliteral">&quot;NEAREST_NEIGHBOUR&quot;</span>},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> interpolation_policy_map[policy];</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">AREA</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">BILINEAR</a>, and <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">NEAREST_NEIGHBOR</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, and <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>.</p>

</div>
</div>
<a id="a0569839ee85ad0e35edaaf3b4c80d706"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0569839ee85ad0e35edaaf3b4c80d706">&#9670;&nbsp;</a></span>string_from_norm_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_norm_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given normalization type to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td><a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the normalization type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">static</span> std::map&lt;NormType, const std::string&gt; norm_type_map = {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {NormType::IN_MAP_1D, <span class="stringliteral">&quot;IN_MAP_1D&quot;</span>},</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {NormType::IN_MAP_2D, <span class="stringliteral">&quot;IN_MAP_2D&quot;</span>},</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {NormType::CROSS_MAP, <span class="stringliteral">&quot;CROSS_MAP&quot;</span>},</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    };</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> norm_type_map[<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>];</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">CROSS_MAP</a>, <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">IN_MAP_1D</a>, <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">IN_MAP_2D</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="ad6eaf2181f8a8c418acaf3af76239997"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6eaf2181f8a8c418acaf3af76239997">&#9670;&nbsp;</a></span>string_from_pixel_value()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string string_from_pixel_value </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> to a string, represented through the specific data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> to convert </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The type to be used to convert the <code>value</code> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representation of the <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> through the given data type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    std::string       converted_string;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="comment">// Needs conversion to 32 bit, otherwise interpreted as ASCII values</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; uint32_t(value.get&lt;uint8_t&gt;());</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="comment">// Needs conversion to 32 bit, otherwise interpreted as ASCII values</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; int32_t(value.get&lt;int8_t&gt;());</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.get&lt;uint16_t&gt;();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.get&lt;int16_t&gt;();</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.get&lt;uint32_t&gt;();</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.get&lt;int32_t&gt;();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            converted_string = <a class="code" href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">float_to_string_with_full_precision</a>(value.get&lt;<span class="keywordtype">float</span>&gt;());</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            static_assert(<span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>) == 2, <span class="stringliteral">&quot;Half must be 16 bit&quot;</span>);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.get&lt;<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>&gt;();</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not handled&quot;</span>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> converted_string;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="_string_utils_8cpp_source.xhtml#l00052">float_to_string_with_full_precision()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00228">PixelValue::get()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00084">CLPadLayerKernel::configure()</a>, and <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00195">ClTemplateResize::get_tag_lut()</a>.</p>

</div>
</div>
<a id="a1040394085749e4d02a0d4350493ec94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1040394085749e4d02a0d4350493ec94">&#9670;&nbsp;</a></span>string_from_pooling_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_pooling_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given pooling type to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td><a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the pooling type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="src_2core_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">static</span> std::map&lt;PoolingType, const std::string&gt; pool_type_map = {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {<a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>, <span class="stringliteral">&quot;MAX&quot;</span>},</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {PoolingType::AVG, <span class="stringliteral">&quot;AVG&quot;</span>},</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {PoolingType::L2, <span class="stringliteral">&quot;L2&quot;</span>},</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    };</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> pool_type_map[<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>];</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">AVG</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">MAX</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00112">ClPool2dKernel::configure()</a>, and <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00106">ClPool3dKernel::configure()</a>.</p>

</div>
</div>
<a id="af7795707992825c309fe846740dc8cf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7795707992825c309fe846740dc8cf8">&#9670;&nbsp;</a></span>string_from_target()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_target </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates a given gpu device target to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>Given gpu target.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the target. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml">GPUTarget.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">static</span> std::map&lt;GPUTarget, const std::string&gt; gpu_target_map = {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        {GPUTarget::MIDGARD, <span class="stringliteral">&quot;midgard&quot;</span>},   {GPUTarget::BIFROST, <span class="stringliteral">&quot;bifrost&quot;</span>}, {GPUTarget::VALHALL, <span class="stringliteral">&quot;valhall&quot;</span>},</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {GPUTarget::FIFTHGEN, <span class="stringliteral">&quot;fifthgen&quot;</span>},</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {GPUTarget::T600, <span class="stringliteral">&quot;t600&quot;</span>},         {GPUTarget::T700, <span class="stringliteral">&quot;t700&quot;</span>},       {GPUTarget::T800, <span class="stringliteral">&quot;t800&quot;</span>},</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {GPUTarget::G71, <span class="stringliteral">&quot;g71&quot;</span>},           {GPUTarget::G72, <span class="stringliteral">&quot;g72&quot;</span>},         {GPUTarget::G51, <span class="stringliteral">&quot;g51&quot;</span>},</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {GPUTarget::G51BIG, <span class="stringliteral">&quot;g51big&quot;</span>},     {GPUTarget::G51LIT, <span class="stringliteral">&quot;g51lit&quot;</span>},   {GPUTarget::G31, <span class="stringliteral">&quot;g31&quot;</span>},</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {GPUTarget::G76, <span class="stringliteral">&quot;g76&quot;</span>},           {GPUTarget::G52, <span class="stringliteral">&quot;g52&quot;</span>},         {GPUTarget::G52LIT, <span class="stringliteral">&quot;g52lit&quot;</span>},</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {GPUTarget::G77, <span class="stringliteral">&quot;g77&quot;</span>},           {GPUTarget::G57, <span class="stringliteral">&quot;g57&quot;</span>},         {GPUTarget::G78, <span class="stringliteral">&quot;g78&quot;</span>},</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        {GPUTarget::G68, <span class="stringliteral">&quot;g68&quot;</span>},           {GPUTarget::G78AE, <span class="stringliteral">&quot;g78ae&quot;</span>},     {GPUTarget::G710, <span class="stringliteral">&quot;g710&quot;</span>},</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {GPUTarget::G610, <span class="stringliteral">&quot;g610&quot;</span>},         {GPUTarget::G510, <span class="stringliteral">&quot;g510&quot;</span>},       {GPUTarget::G310, <span class="stringliteral">&quot;g310&quot;</span>},</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        {GPUTarget::G715, <span class="stringliteral">&quot;g715&quot;</span>},         {GPUTarget::G615, <span class="stringliteral">&quot;g615&quot;</span>},       {GPUTarget::G720, <span class="stringliteral">&quot;g720&quot;</span>},</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {GPUTarget::G620, <span class="stringliteral">&quot;g620&quot;</span>}};</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> gpu_target_map[target];</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">BIFROST</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df">FIFTHGEN</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33">G31</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20">G310</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">G51</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8">G510</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">G51BIG</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">G51LIT</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb">G52</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837">G52LIT</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15">G57</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010">G610</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a">G615</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce">G620</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c">G68</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">G71</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff">G710</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e">G715</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">G72</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96">G720</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">G76</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">G77</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029">G78</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89">G78AE</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">T600</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">T700</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">T800</a>, and <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">VALHALL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00176">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_native()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00139">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00100">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped_only_rhs()</a>, and <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00049">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_kernel()</a>.</p>

</div>
</div>
<a id="ae70b8de3a0b147a476cabb07b8707d7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae70b8de3a0b147a476cabb07b8707d7f">&#9670;&nbsp;</a></span>swap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>First window to swap. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Second window to swap. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00318">318</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    lhs._dims.swap(rhs._dims);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00104">CaffePreproccessor::CaffePreproccessor()</a>.</p>

</div>
</div>
<a id="a61e7f5901fd23f6009db8eac1a400be9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61e7f5901fd23f6009db8eac1a400be9">&#9670;&nbsp;</a></span>throw_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void throw_error </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Throw an std::runtime_error. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">err</td><td>Error status </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_error_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="_error_8cpp_source.xhtml">Error.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#ad5518fdae84a33ce6fbed540c6e89479">ARM_COMPUTE_THROW</a>(std::runtime_error(err.<a class="code" href="classarm__compute_1_1_status.xhtml#ac8ba59c07d56602367dae64035abb1ef">error_description</a>()));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00479">ARM_COMPUTE_THROW</a>, and <a class="el" href="_error_8h_source.xhtml#l00096">Status::error_description()</a>.</p>

</div>
</div>
<a id="a95b050d661e688bf8ae07bdcc2a32c9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95b050d661e688bf8ae07bdcc2a32c9a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[1/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>CLGEMMKernelType value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding CLGEMMKernelType </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02547">2547</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;{</div>
<div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;    <span class="keywordflow">switch</span> (val)</div>
<div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    {</div>
<div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;        <span class="keywordflow">case</span> CLGEMMKernelType::NATIVE:</div>
<div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;        {</div>
<div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;Native&quot;</span>;</div>
<div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;        }</div>
<div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;        <span class="keywordflow">case</span> CLGEMMKernelType::RESHAPED_ONLY_RHS:</div>
<div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;        {</div>
<div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;Reshaped_Only_RHS&quot;</span>;</div>
<div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;        }</div>
<div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;        <span class="keywordflow">case</span> CLGEMMKernelType::RESHAPED:</div>
<div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;        {</div>
<div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;Reshaped&quot;</span>;</div>
<div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160;        }</div>
<div class="line"><a name="l02563"></a><span class="lineno"> 2563</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160;        {</div>
<div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;Unknown&quot;</span>;</div>
<div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;        }</div>
<div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;    }</div>
<div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aaf78504d96ba7177dc0c6784905ac8743">NATIVE</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">RESHAPED</a>, and <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">RESHAPED_ONLY_RHS</a>.</p>

</div>
</div>
<a id="aca516517d47534e06d4c57e7bc706b2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca516517d47534e06d4c57e7bc706b2a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[2/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Arithmetic Operation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01787">1787</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;{</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; op;</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a72626d2cca3922127c41526e37e9e623"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72626d2cca3922127c41526e37e9e623">&#9670;&nbsp;</a></span>to_string() <span class="overload">[3/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the activation function info type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml" title="Activation Layer Information class.">ActivationLayerInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00526">526</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.enabled())</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.activation();</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a8a18c453150ab547c1add44b3ed3bc56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a18c453150ab547c1add44b3ed3bc56">&#9670;&nbsp;</a></span>to_string() <span class="overload">[4/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>function</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the activation function type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">function</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00573">573</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;{</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="keyword">function</span>;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a20d8490daa1cc6388fb00fd4d8a021d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20d8490daa1cc6388fb00fd4d8a021d4">&#9670;&nbsp;</a></span>to_string() <span class="overload">[5/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">arm_compute::CpuMatMulSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td><a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03614">3614</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03615"></a><span class="lineno"> 3615</span>&#160;{</div>
<div class="line"><a name="l03616"></a><span class="lineno"> 3616</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03617"></a><span class="lineno"> 3617</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; settings;</div>
<div class="line"><a name="l03618"></a><span class="lineno"> 3618</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03619"></a><span class="lineno"> 3619</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03049">to_string()</a>.</p>

</div>
</div>
<a id="ae1240e4698e8a901179e519102b5e033"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1240e4698e8a901179e519102b5e033">&#9670;&nbsp;</a></span>to_string() <span class="overload">[6/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the DataLayout type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00727">727</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;{</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a96b47511b549b48d2ead05b5c757ccc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96b47511b549b48d2ead05b5c757ccc9">&#9670;&nbsp;</a></span>to_string() <span class="overload">[7/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the DataType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00851">851</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;{</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aa44e2a2940e20b68d7a31851a1da2ae9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa44e2a2940e20b68d7a31851a1da2ae9">&#9670;&nbsp;</a></span>to_string() <span class="overload">[8/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">arm_compute::MatMulInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>matmul_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">matmul_info</td><td><a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03553">3553</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03554"></a><span class="lineno"> 3554</span>&#160;{</div>
<div class="line"><a name="l03555"></a><span class="lineno"> 3555</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03556"></a><span class="lineno"> 3556</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; matmul_info;</div>
<div class="line"><a name="l03557"></a><span class="lineno"> 3557</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03558"></a><span class="lineno"> 3558</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aecd4f91cf0333a946a296f1388259fe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aecd4f91cf0333a946a296f1388259fe0">&#9670;&nbsp;</a></span>to_string() <span class="overload">[9/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>matmul_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">matmul_info</td><td><a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03586">3586</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03587"></a><span class="lineno"> 3587</span>&#160;{</div>
<div class="line"><a name="l03588"></a><span class="lineno"> 3588</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03589"></a><span class="lineno"> 3589</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; matmul_info;</div>
<div class="line"><a name="l03590"></a><span class="lineno"> 3590</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03591"></a><span class="lineno"> 3591</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a45dd771bdecbafb975fd267c2ae320a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45dd771bdecbafb975fd267c2ae320a7">&#9670;&nbsp;</a></span>to_string() <span class="overload">[10/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00613">613</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;{</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.type() &lt;&lt; <span class="stringliteral">&quot;:NormSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.norm_size();</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a0604106dd269acd58152a81ba87cc265"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0604106dd269acd58152a81ba87cc265">&#9670;&nbsp;</a></span>to_string() <span class="overload">[11/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the BorderMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01636">1636</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;{</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>;</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules::mode</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a5c9cde9144eaeceaf086377b9bc5a5be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c9cde9144eaeceaf086377b9bc5a5be">&#9670;&nbsp;</a></span>to_string() <span class="overload">[12/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;&#160;</td>
          <td class="paramname"><em>border</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">border</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01649">1649</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;{</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; border;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aadd27b86f0ff4fbb03ed673a549e91a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadd27b86f0ff4fbb03ed673a549e91a8">&#9670;&nbsp;</a></span>to_string() <span class="overload">[13/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>bbox_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" title="Bounding Box Transform information class.">BoundingBoxTransformInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bbox_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00366">366</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;{</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; bbox_info;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a360e44a0287cbeb449768ec22a78828b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a360e44a0287cbeb449768ec22a78828b">&#9670;&nbsp;</a></span>to_string() <span class="overload">[14/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" title="BoxWithNonMaximaSuppressionLimit Information class.">BoxNMSLimitInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" title="BoxWithNonMaximaSuppressionLimit Information class.">BoxNMSLimitInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03122">3122</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03123"></a><span class="lineno"> 3123</span>&#160;{</div>
<div class="line"><a name="l03124"></a><span class="lineno"> 3124</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03125"></a><span class="lineno"> 3125</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l03126"></a><span class="lineno"> 3126</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03127"></a><span class="lineno"> 3127</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a813e71cd70c2bbcbf0743fa83a3608b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a813e71cd70c2bbcbf0743fa83a3608b9">&#9670;&nbsp;</a></span>to_string() <span class="overload">[15/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> &amp;&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Channel type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01000">1000</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;{</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; channel;</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a062b90d0a8defe70b0cd19300fee2825"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a062b90d0a8defe70b0cd19300fee2825">&#9670;&nbsp;</a></span>to_string() <span class="overload">[16/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1">arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attributes::ElementwiseOp</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">68</a> of file <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml">ElementwiseBinary.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; op;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00163">arm_compute::graph::backends::detail::create_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00429">arm_compute::graph::backends::detail::create_convolution_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00553">arm_compute::graph::backends::detail::create_depthwise_convolution_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00204">arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00259">arm_compute::graph::backends::detail::create_fused_depthwise_convolution_batch_normalization_layer()</a>, <a class="el" href="_initializer_list_dataset_8h_source.xhtml#l00085">InitializerListDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00420">GpuCkwElementwiseBinary::get_name()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00120">handle_cl_error()</a>, <a class="el" href="_asserts_8h_source.xhtml#l00047">arm_compute::test::framework::make_printable()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00109">operator&lt;&lt;()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00176">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_native()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00139">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00100">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped_only_rhs()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00049">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_kernel()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01228">to_string()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00074">to_string_if_not_null()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00213">CpuGemm::validate()</a>, <a class="el" href="_dot_graph_printer_8cpp_source.xhtml#l00043">DotGraphVisitor::visit()</a>, and <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00049">CLMutableCommandBuffer::~CLMutableCommandBuffer()</a>.</p>

</div>
</div>
<a id="ad87338ac39245d071b66a4f55cb06a16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad87338ac39245d071b66a4f55cb06a16">&#9670;&nbsp;</a></span>to_string() <span class="overload">[17/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a CLTunerMode value to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>CLTunerMode value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding CLTunerMode. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02518">2518</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;{</div>
<div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;    <span class="keywordflow">switch</span> (val)</div>
<div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;    {</div>
<div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;        <span class="keywordflow">case</span> CLTunerMode::EXHAUSTIVE:</div>
<div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;        {</div>
<div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;Exhaustive&quot;</span>);</div>
<div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;        }</div>
<div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;        <span class="keywordflow">case</span> CLTunerMode::NORMAL:</div>
<div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;        {</div>
<div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;Normal&quot;</span>);</div>
<div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;        }</div>
<div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;        <span class="keywordflow">case</span> CLTunerMode::RAPID:</div>
<div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;        {</div>
<div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;Rapid&quot;</span>);</div>
<div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;        }</div>
<div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;        {</div>
<div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid tuner mode.&quot;</span>);</div>
<div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;UNDEFINED&quot;</span>);</div>
<div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;        }</div>
<div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;    }</div>
<div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">EXHAUSTIVE</a>, <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">NORMAL</a>, and <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">RAPID</a>.</p>

</div>
</div>
<a id="a77007283b591963074b8398202e90f5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77007283b591963074b8398202e90f5a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[18/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Comparison Operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01933">1933</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;{</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; op;</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a24bc4de5c636b56f9b59533fead920c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24bc4de5c636b56f9b59533fead920c2">&#9670;&nbsp;</a></span>to_string() <span class="overload">[19/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" title="ComputeAnchors information class.">ComputeAnchorsInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">anchors_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00392">392</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; anchors_info;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a25786a77392aab8dc06fd9847cfadb21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25786a77392aab8dc06fd9847cfadb21">&#9670;&nbsp;</a></span>to_string() <span class="overload">[20/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td><a class="el" href="structarm__compute_1_1_conv2d_info.xhtml" title="Descriptor used by the 2d Convolution function.">Conv2dInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml" title="Descriptor used by the 2d Convolution function.">Conv2dInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02745">2745</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02746"></a><span class="lineno"> 2746</span>&#160;{</div>
<div class="line"><a name="l02747"></a><span class="lineno"> 2747</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02748"></a><span class="lineno"> 2748</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>;</div>
<div class="line"><a name="l02749"></a><span class="lineno"> 2749</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02750"></a><span class="lineno"> 2750</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a01c3f2109ee2d0889187eb59ac23d47a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01c3f2109ee2d0889187eb59ac23d47a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[21/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv3d_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml" title="Descriptor used by the 3d Convolution function.">Conv3dInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">conv3d_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03172">3172</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03173"></a><span class="lineno"> 3173</span>&#160;{</div>
<div class="line"><a name="l03174"></a><span class="lineno"> 3174</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03175"></a><span class="lineno"> 3175</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; conv3d_info;</div>
<div class="line"><a name="l03176"></a><span class="lineno"> 3176</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03177"></a><span class="lineno"> 3177</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="adcc7e107e7dbd2ffac02189089c33e4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcc7e107e7dbd2ffac02189089c33e4f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[22/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01732">1732</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;{</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; policy;</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a7c300f4790452fc1c97b9f6927f41234"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c300f4790452fc1c97b9f6927f41234">&#9670;&nbsp;</a></span>to_string() <span class="overload">[23/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02605">2605</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;{</div>
<div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a853d44a32a328fb4455f6200a11c4785"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a853d44a32a328fb4455f6200a11c4785">&#9670;&nbsp;</a></span>to_string() <span class="overload">[24/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_method</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the ConvolutionMethod type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_method</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02200">2200</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;{</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; conv_method;</div>
<div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a805a74997e303d29108845956a674387"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a805a74997e303d29108845956a674387">&#9670;&nbsp;</a></span>to_string() <span class="overload">[25/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01378">1378</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;{</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; coord;</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="abb61ef573b258dcd5334042e4d35b0d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb61ef573b258dcd5334042e4d35b0d8">&#9670;&nbsp;</a></span>to_string() <span class="overload">[26/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> &amp;&#160;</td>
          <td class="paramname"><em>coord_2d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="struct_coordinates2_d.xhtml">Coordinates2D</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord_2d</td><td><a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" title="Coordinate type.">Coordinates2D</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" title="Coordinate type.">Coordinates2D</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02921">2921</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;{</div>
<div class="line"><a name="l02923"></a><span class="lineno"> 2923</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02924"></a><span class="lineno"> 2924</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; coord_2d;</div>
<div class="line"><a name="l02925"></a><span class="lineno"> 2925</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02926"></a><span class="lineno"> 2926</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a41c7dc2aa88c4e30effb2e3f550de481"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41c7dc2aa88c4e30effb2e3f550de481">&#9670;&nbsp;</a></span>to_string() <span class="overload">[27/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_code</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the DetectionOutputLayerCodeType type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_code</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02385">2385</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;{</div>
<div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; detection_code;</div>
<div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a4084858fda1caec39457dd70322e6bd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4084858fda1caec39457dd70322e6bd6">&#9670;&nbsp;</a></span>to_string() <span class="overload">[28/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" title="Detection Output layer info.">DetectionOutputLayerInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_info</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02422">2422</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;{</div>
<div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; detection_info;</div>
<div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aca72973a9a95755e65d17de30f4232e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca72973a9a95755e65d17de30f4232e8">&#9670;&nbsp;</a></span>to_string() <span class="overload">[29/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info.">DetectionPostProcessLayerInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_info</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02458">2458</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;{</div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; detection_info;</div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a905d7ec8787e8c4b7e88b0a2faaccd1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a905d7ec8787e8c4b7e88b0a2faaccd1f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[30/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> &amp;&#160;</td>
          <td class="paramname"><em>detection_window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_detection_window.xhtml" title="Detection window used for the object detection.">DetectionWindow</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">detection_window</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02471">2471</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;{</div>
<div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; detection_window;</div>
<div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a71f3cd5e5f519ddbac447c2f76b5b258"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71f3cd5e5f519ddbac447c2f76b5b258">&#9670;&nbsp;</a></span>to_string() <span class="overload">[31/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;&#160;</td>
          <td class="paramname"><em>rounding_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_type</td><td>DimensionRoundingType value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding DimensionRoundingType </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03135">3135</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03136"></a><span class="lineno"> 3136</span>&#160;{</div>
<div class="line"><a name="l03137"></a><span class="lineno"> 3137</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03138"></a><span class="lineno"> 3138</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; rounding_type;</div>
<div class="line"><a name="l03139"></a><span class="lineno"> 3139</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03140"></a><span class="lineno"> 3140</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aa32488ee1dd78e0464ed23e8cc2b6e49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa32488ee1dd78e0464ed23e8cc2b6e49">&#9670;&nbsp;</a></span>to_string() <span class="overload">[32/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimensions</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimensions</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01339">1339</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;{</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; dimensions;</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ab76157462925ad1b13149317ded2e404"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab76157462925ad1b13149317ded2e404">&#9670;&nbsp;</a></span>to_string() <span class="overload">[33/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Elementwise unary Operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01946">1946</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;{</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; op;</div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="af15737dcaf9b02187583ad8b176abab3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af15737dcaf9b02187583ad8b176abab3">&#9670;&nbsp;</a></span>to_string() <span class="overload">[34/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml">experimental::dynamic_fusion::CastAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>cast_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cast_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03403">3403</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03404"></a><span class="lineno"> 3404</span>&#160;{</div>
<div class="line"><a name="l03405"></a><span class="lineno"> 3405</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03406"></a><span class="lineno"> 3406</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; cast_attr;</div>
<div class="line"><a name="l03407"></a><span class="lineno"> 3407</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03408"></a><span class="lineno"> 3408</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a2044c973d96829e0470cbc4f156fac76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2044c973d96829e0470cbc4f156fac76">&#9670;&nbsp;</a></span>to_string() <span class="overload">[35/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml">experimental::dynamic_fusion::ClampAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>clamp_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">clamp_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03464">3464</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03465"></a><span class="lineno"> 3465</span>&#160;{</div>
<div class="line"><a name="l03466"></a><span class="lineno"> 3466</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03467"></a><span class="lineno"> 3467</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; clamp_attr;</div>
<div class="line"><a name="l03468"></a><span class="lineno"> 3468</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03469"></a><span class="lineno"> 3469</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a47e27ac5cf25542aef7d049c2cac9598"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47e27ac5cf25542aef7d049c2cac9598">&#9670;&nbsp;</a></span>to_string() <span class="overload">[36/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">experimental::dynamic_fusion::Conv2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>conv2d_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">conv2d_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03374">3374</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03375"></a><span class="lineno"> 3375</span>&#160;{</div>
<div class="line"><a name="l03376"></a><span class="lineno"> 3376</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03377"></a><span class="lineno"> 3377</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; conv2d_attr;</div>
<div class="line"><a name="l03378"></a><span class="lineno"> 3378</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03379"></a><span class="lineno"> 3379</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ae8bf8d114b9a0276f72b3743ef010330"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8bf8d114b9a0276f72b3743ef010330">&#9670;&nbsp;</a></span>to_string() <span class="overload">[37/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml">experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>dw_conv2d_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dw_conv2d_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03436">3436</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03437"></a><span class="lineno"> 3437</span>&#160;{</div>
<div class="line"><a name="l03438"></a><span class="lineno"> 3438</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03439"></a><span class="lineno"> 3439</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; dw_conv2d_attr;</div>
<div class="line"><a name="l03440"></a><span class="lineno"> 3440</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03441"></a><span class="lineno"> 3441</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aa3dd55fc4d0f9f2a1334f6e120ddab57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3dd55fc4d0f9f2a1334f6e120ddab57">&#9670;&nbsp;</a></span>to_string() <span class="overload">[38/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">experimental::dynamic_fusion::GpuPool2dSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03343">3343</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03344"></a><span class="lineno"> 3344</span>&#160;{</div>
<div class="line"><a name="l03345"></a><span class="lineno"> 3345</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03346"></a><span class="lineno"> 3346</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; settings;</div>
<div class="line"><a name="l03347"></a><span class="lineno"> 3347</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03348"></a><span class="lineno"> 3348</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aa5ccd21b142c0e9201326219b4a51abb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5ccd21b142c0e9201326219b4a51abb">&#9670;&nbsp;</a></span>to_string() <span class="overload">[39/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">experimental::dynamic_fusion::Pool2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>pool2d_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pool2d_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03317">3317</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03318"></a><span class="lineno"> 3318</span>&#160;{</div>
<div class="line"><a name="l03319"></a><span class="lineno"> 3319</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03320"></a><span class="lineno"> 3320</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; pool2d_attr;</div>
<div class="line"><a name="l03321"></a><span class="lineno"> 3321</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03322"></a><span class="lineno"> 3322</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aae76ceb28247fb86fed30541afadcc52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae76ceb28247fb86fed30541afadcc52">&#9670;&nbsp;</a></span>to_string() <span class="overload">[40/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml">experimental::dynamic_fusion::ResizeAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>resize_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">resize_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03496">3496</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03497"></a><span class="lineno"> 3497</span>&#160;{</div>
<div class="line"><a name="l03498"></a><span class="lineno"> 3498</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03499"></a><span class="lineno"> 3499</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; resize_attr;</div>
<div class="line"><a name="l03500"></a><span class="lineno"> 3500</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03501"></a><span class="lineno"> 3501</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a2bde8c082c06332c18ca6593009b695d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bde8c082c06332c18ca6593009b695d">&#9670;&nbsp;</a></span>to_string() <span class="overload">[41/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml">experimental::dynamic_fusion::SoftmaxAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>softmax_attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">softmax_attr</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03526">3526</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03527"></a><span class="lineno"> 3527</span>&#160;{</div>
<div class="line"><a name="l03528"></a><span class="lineno"> 3528</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03529"></a><span class="lineno"> 3529</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; softmax_attr;</div>
<div class="line"><a name="l03530"></a><span class="lineno"> 3530</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03531"></a><span class="lineno"> 3531</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aac86a72b6e929345c7273112de096b0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac86a72b6e929345c7273112de096b0d">&#9670;&nbsp;</a></span>to_string() <span class="overload">[42/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>fft1d_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fft1d_info</td><td><a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02866">2866</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;{</div>
<div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; fft1d_info;</div>
<div class="line"><a name="l02870"></a><span class="lineno"> 2870</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02871"></a><span class="lineno"> 2871</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a10596a1cbbcc6afefb9ee52a38375250"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10596a1cbbcc6afefb9ee52a38375250">&#9670;&nbsp;</a></span>to_string() <span class="overload">[43/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>fft2d_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fft2d_info</td><td><a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" title="Descriptor used by the FFT2D function.">FFT2DInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" title="Descriptor used by the FFT2D function.">FFT2DInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02894">2894</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;{</div>
<div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; fft2d_info;</div>
<div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a1f3b9f93958bbf939d6889d96c0fc043"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f3b9f93958bbf939d6889d96c0fc043">&#9670;&nbsp;</a></span>to_string() <span class="overload">[44/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564">FFTDirection</a> &amp;&#160;</td>
          <td class="paramname"><em>fft_dir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fft_dir</td><td><a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02839">2839</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02840"></a><span class="lineno"> 2840</span>&#160;{</div>
<div class="line"><a name="l02841"></a><span class="lineno"> 2841</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02842"></a><span class="lineno"> 2842</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; fft_dir &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02843"></a><span class="lineno"> 2843</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ab0e6381843dc9901bb59285ec846dc5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0e6381843dc9901bb59285ec846dc5d">&#9670;&nbsp;</a></span>to_string() <span class="overload">[45/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Format type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00933">933</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;{</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a74a21df79a71f282054cf00135e682c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74a21df79a71f282054cf00135e682c9">&#9670;&nbsp;</a></span>to_string() <span class="overload">[46/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02636">2636</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;{</div>
<div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a6d9c6ce35d2c94dd2ec505ae59bae2c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d9c6ce35d2c94dd2ec505ae59bae2c0">&#9670;&nbsp;</a></span>to_string() <span class="overload">[47/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> &amp;&#160;</td>
          <td class="paramname"><em>fuse_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fuse_type</td><td>FuseBatchNormalizationType value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding FuseBatchNormalizationType </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02957">2957</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02958"></a><span class="lineno"> 2958</span>&#160;{</div>
<div class="line"><a name="l02959"></a><span class="lineno"> 2959</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02960"></a><span class="lineno"> 2960</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; fuse_type;</div>
<div class="line"><a name="l02961"></a><span class="lineno"> 2961</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02962"></a><span class="lineno"> 2962</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a8ac2dfdfad6db71a5cf2ecee6b70f722"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ac2dfdfad6db71a5cf2ecee6b70f722">&#9670;&nbsp;</a></span>to_string() <span class="overload">[48/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01495">1495</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;{</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a3c7e41ebd7bc09e91ba0fdb11315fc19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c7e41ebd7bc09e91ba0fdb11315fc19">&#9670;&nbsp;</a></span>to_string() <span class="overload">[49/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">GEMMKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td><a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00331">331</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; gemm_info;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a410b2c68c54cd633b4ed926bdea4a6d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a410b2c68c54cd633b4ed926bdea4a6d6">&#9670;&nbsp;</a></span>to_string() <span class="overload">[50/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td><a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00318">318</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; gemm_info;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="af1304e887f59012f78e2caf39627b2e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1304e887f59012f78e2caf39627b2e4">&#9670;&nbsp;</a></span>to_string() <span class="overload">[51/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02714">2714</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02715"></a><span class="lineno"> 2715</span>&#160;{</div>
<div class="line"><a name="l02716"></a><span class="lineno"> 2716</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02717"></a><span class="lineno"> 2717</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; gemm_info;</div>
<div class="line"><a name="l02718"></a><span class="lineno"> 2718</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02719"></a><span class="lineno"> 2719</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="abed5f21c42d975c4f1c6fac1c0e97ce6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abed5f21c42d975c4f1c6fac1c0e97ce6">&#9670;&nbsp;</a></span>to_string() <span class="overload">[52/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_type</td><td>GEMMLowpOutputStageType value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding GEMMLowpOutputStageType </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02678">2678</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;{</div>
<div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2ea9f63fa9d0189f82257ca7d35740ff">gemm_type</a>;</div>
<div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00560">arm_compute::mlgo::parser::gemm_type()</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="adac3c1908846c6361e664a353ad1c3cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adac3c1908846c6361e664a353ad1c3cf">&#9670;&nbsp;</a></span>to_string() <span class="overload">[53/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" title="GEMM reshape information class.">GEMMReshapeInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01482">1482</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;{</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a80389fddfab744d5439957c739fd1d0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80389fddfab744d5439957c739fd1d0d">&#9670;&nbsp;</a></span>to_string() <span class="overload">[54/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td><a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00305">305</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; gemm_info;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aa597016c0aaa2990ed31b8aaa6f2ccc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa597016c0aaa2990ed31b8aaa6f2ccc3">&#9670;&nbsp;</a></span>to_string() <span class="overload">[55/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>proposals_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" title="Generate Proposals Information class.">GenerateProposalsInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">proposals_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00418">418</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; proposals_info;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aee29ccfc095313663fc954f581ddf40a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee29ccfc095313663fc954f581ddf40a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[56/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;&#160;</td>
          <td class="paramname"><em>gpu_target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the GPUTarget type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_target</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02324">2324</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;{</div>
<div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; gpu_target;</div>
<div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a94bd78942b683c05cba85048537d3ee7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94bd78942b683c05cba85048537d3ee7">&#9670;&nbsp;</a></span>to_string() <span class="overload">[57/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the InterpolationPolicy type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01688">1688</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;{</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; policy;</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ab56ca10105475a301db13c3e40fe4617"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab56ca10105475a301db13c3e40fe4617">&#9670;&nbsp;</a></span>to_string() <span class="overload">[58/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from const ITensor* type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01239">1239</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;{</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    std::string ret_str = <span class="stringliteral">&quot;nullptr&quot;</span>;</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    {</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;ITensor-&gt;info(): &quot;</span> &lt;&lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info();</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        ret_str = <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    }</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keywordflow">return</span> ret_str;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="ac2f0244b78d1f23b9a3265770df5be71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2f0244b78d1f23b9a3265770df5be71">&#9670;&nbsp;</a></span>to_string() <span class="overload">[59/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a>&amp; type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01197">1197</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;{</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a3b1d64a183e573398d79f2db7ee3378f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b1d64a183e573398d79f2db7ee3378f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[60/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the const ITensorInfo* type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01210">1210</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;{</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    std::string ret_str = <span class="stringliteral">&quot;nullptr&quot;</span>;</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    {</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        ret_str = <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    }</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keywordflow">return</span> ret_str;</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a08200627f52a255db721b79aff58ac04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08200627f52a255db721b79aff58ac04">&#9670;&nbsp;</a></span>to_string() <span class="overload">[61/99]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>LSTMParams&lt;T&gt; value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03036">3036</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03037"></a><span class="lineno"> 3037</span>&#160;{</div>
<div class="line"><a name="l03038"></a><span class="lineno"> 3038</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03039"></a><span class="lineno"> 3039</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; lstm_params;</div>
<div class="line"><a name="l03040"></a><span class="lineno"> 3040</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03041"></a><span class="lineno"> 3041</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ad710fdad147ab4ab21e14a7c49b3516a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad710fdad147ab4ab21e14a7c49b3516a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[62/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;&#160;</td>
          <td class="paramname"><em>multiples</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Multiples type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiples</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01675">1675</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;{</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; multiples;</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a5285db5b7a825c241e6fdf99e489e35f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5285db5b7a825c241e6fdf99e489e35f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[63/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a>&#160;</td>
          <td class="paramname"><em>nms_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nms_type</td><td>NMSType value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding NMSType </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03088">3088</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03089"></a><span class="lineno"> 3089</span>&#160;{</div>
<div class="line"><a name="l03090"></a><span class="lineno"> 3090</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03091"></a><span class="lineno"> 3091</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; nms_type;</div>
<div class="line"><a name="l03092"></a><span class="lineno"> 3092</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03093"></a><span class="lineno"> 3093</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ad8b676c38d9b8d9d9bde7caec5720bd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8b676c38d9b8d9d9bde7caec5720bd9">&#9670;&nbsp;</a></span>to_string() <span class="overload">[64/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Norm Type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01959">1959</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;{</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="a64c9ee3d9a92a9dabdad6c97230485a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64c9ee3d9a92a9dabdad6c97230485a6">&#9670;&nbsp;</a></span>to_string() <span class="overload">[65/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> &amp;&#160;</td>
          <td class="paramname"><em>padding2d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding2d</td><td><a class="el" href="structarm__compute_1_1_padding2_d.xhtml" title="Padding and stride information class.">Padding2D</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_padding2_d.xhtml" title="Padding and stride information class.">Padding2D</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03284">3284</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03285"></a><span class="lineno"> 3285</span>&#160;{</div>
<div class="line"><a name="l03286"></a><span class="lineno"> 3286</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03287"></a><span class="lineno"> 3287</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; padding2d;</div>
<div class="line"><a name="l03288"></a><span class="lineno"> 3288</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03289"></a><span class="lineno"> 3289</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aaaafb0628b4052ead4fc866f92056420"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaafb0628b4052ead4fc866f92056420">&#9670;&nbsp;</a></span>to_string() <span class="overload">[66/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> &amp;&#160;</td>
          <td class="paramname"><em>padding3d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding3d</td><td><a class="el" href="structarm__compute_1_1_padding3_d.xhtml" title="Padding information for 3D operations like Conv3d.">Padding3D</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_padding3_d.xhtml" title="Padding information for 3D operations like Conv3d.">Padding3D</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02048">2048</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;{</div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; padding3d;</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a09b674dcee4a1b59f9c7c51ecaae40a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09b674dcee4a1b59f9c7c51ecaae40a6">&#9670;&nbsp;</a></span>to_string() <span class="overload">[67/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the PaddingList type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01662">1662</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;{</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; padding;</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a58c3c62a56ede81c516f987a263bc95a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58c3c62a56ede81c516f987a263bc95a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[68/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> &amp;&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the PaddingMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01593">1593</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;{</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>;</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules::mode</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a2c0e6c1c4cf10da25e7a7362ba151ba2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c0e6c1c4cf10da25e7a7362ba151ba2">&#9670;&nbsp;</a></span>to_string() <span class="overload">[69/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pad_stride_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pad_stride_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01623">1623</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;{</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; pad_stride_info;</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ab397a8d78a6c41e737d0d5b170107541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab397a8d78a6c41e737d0d5b170107541">&#9670;&nbsp;</a></span>to_string() <span class="overload">[70/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;&#160;</td>
          <td class="paramname"><em>pixel_value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pixel_value</td><td><a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02771">2771</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02772"></a><span class="lineno"> 2772</span>&#160;{</div>
<div class="line"><a name="l02773"></a><span class="lineno"> 2773</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02774"></a><span class="lineno"> 2774</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; pixel_value;</div>
<div class="line"><a name="l02775"></a><span class="lineno"> 2775</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02776"></a><span class="lineno"> 2776</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ae816bdec63b59d4dd7a1e1097beb9718"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae816bdec63b59d4dd7a1e1097beb9718">&#9670;&nbsp;</a></span>to_string() <span class="overload">[71/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Pooling 3d Layer Info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02109">2109</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;{</div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="acef515348c5f7f73c89aa4b8a47a02bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acef515348c5f7f73c89aa4b8a47a02bc">&#9670;&nbsp;</a></span>to_string() <span class="overload">[72/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Pooling Layer Info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01985">1985</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;{</div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;{Type=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_type &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;DataLayout=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.<a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">data_layout</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;IsGlobalPooling=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling;</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling)</div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    {</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;        <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;PoolSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.width &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.height &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;PadStride=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_stride_info;</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    }</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00234">ScaleKernelInfo::data_layout</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a2872d19dd10dc3117813d291c08e0383"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2872d19dd10dc3117813d291c08e0383">&#9670;&nbsp;</a></span>to_string() <span class="overload">[73/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Pooling Type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01972">1972</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;{</div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="ae62747a5179626328bf7e67c709d5fcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae62747a5179626328bf7e67c709d5fcf">&#9670;&nbsp;</a></span>to_string() <span class="overload">[74/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml" title="PriorBox layer info.">PriorBoxLayerInfo</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02122">2122</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;{</div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;{&quot;</span>;</div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;Clip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.clip() &lt;&lt; <span class="stringliteral">&quot;Flip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.flip() &lt;&lt; <span class="stringliteral">&quot;StepX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.steps()[0]</div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;StepY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.steps()[1] &lt;&lt; <span class="stringliteral">&quot;MinSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.min_sizes().size()</div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;MaxSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_sizes().size() &lt;&lt; <span class="stringliteral">&quot;ImgSizeX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.img_size().x</div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;ImgSizeY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.img_size().y &lt;&lt; <span class="stringliteral">&quot;Offset:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset() &lt;&lt; <span class="stringliteral">&quot;Variances:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.variances().size();</div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ad9fd48b3c01116b217a684aaeaf8b24f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9fd48b3c01116b217a684aaeaf8b24f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[75/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>quantization_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00446">446</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; quantization_info;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aae534105c7ea67999ccbb34a0ed567cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae534105c7ea67999ccbb34a0ed567cd">&#9670;&nbsp;</a></span>to_string() <span class="overload">[76/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Reduction Operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01842">1842</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;{</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; op;</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ac7e5dca61375f7583860ab07d951a323"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7e5dca61375f7583860ab07d951a323">&#9670;&nbsp;</a></span>to_string() <span class="overload">[77/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the ROIPoolingInfo type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00239">239</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; pool_info;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a25dac68b6321b9e53027e79222a0eb7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25dac68b6321b9e53027e79222a0eb7f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[78/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>rounding_policy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00680">680</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;{</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; rounding_policy;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a5b8e815072ae54278cb1c91e254be4d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b8e815072ae54278cb1c91e254be4d3">&#9670;&nbsp;</a></span>to_string() <span class="overload">[79/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the SamplingPolicy type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01701">1701</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;{</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; policy;</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ade0cbc862083452e8102afd18f639621"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade0cbc862083452e8102afd18f639621">&#9670;&nbsp;</a></span>to_string() <span class="overload">[80/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scale_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_info</td><td><a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02803">2803</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02804"></a><span class="lineno"> 2804</span>&#160;{</div>
<div class="line"><a name="l02805"></a><span class="lineno"> 2805</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02806"></a><span class="lineno"> 2806</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; scale_info;</div>
<div class="line"><a name="l02807"></a><span class="lineno"> 2807</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02808"></a><span class="lineno"> 2808</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aee88a2c259879eb9dc18cb5965e87c29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee88a2c259879eb9dc18cb5965e87c29">&#9670;&nbsp;</a></span>to_string() <span class="overload">[81/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_size2_d.xhtml" title="Class for specifying the size of an image or rectangle.">Size2D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02154">2154</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;{</div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="a4700eba8503b6b8b26ab0f50590108ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4700eba8503b6b8b26ab0f50590108ae">&#9670;&nbsp;</a></span>to_string() <span class="overload">[82/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_size3_d.xhtml" title="Class for specifying the size of a 3D shape or object.">Size3D</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Type to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02021">2021</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;{</div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="a79c3f4124e52a42fbd87b5208a37d4e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79c3f4124e52a42fbd87b5208a37d4e3">&#9670;&nbsp;</a></span>to_string() <span class="overload">[83/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" title="Descriptor used by the softmax kernels.">SoftmaxKernelInfo</a> value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" title="Descriptor used by the softmax kernels.">SoftmaxKernelInfo</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02986">2986</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02987"></a><span class="lineno"> 2987</span>&#160;{</div>
<div class="line"><a name="l02988"></a><span class="lineno"> 2988</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02989"></a><span class="lineno"> 2989</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l02990"></a><span class="lineno"> 2990</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02991"></a><span class="lineno"> 2991</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ae40f748b95cd9329be96b501914f5892"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae40f748b95cd9329be96b501914f5892">&#9670;&nbsp;</a></span>to_string() <span class="overload">[84/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const std::tuple&lt; <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &gt;&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the std::tuple&lt;TensorShape, TensorShape, arm_compute::WeightFormat&gt; tuple. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>tuple of input and output tensor shapes and WeightFormat used.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03253">3253</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03254"></a><span class="lineno"> 3254</span>&#160;{</div>
<div class="line"><a name="l03255"></a><span class="lineno"> 3255</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l03256"></a><span class="lineno"> 3256</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;[Input shape = &quot;</span> &lt;&lt; std::get&lt;0&gt;(values);</div>
<div class="line"><a name="l03257"></a><span class="lineno"> 3257</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l03258"></a><span class="lineno"> 3258</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;Expected output shape = &quot;</span> &lt;&lt; std::get&lt;1&gt;(values);</div>
<div class="line"><a name="l03259"></a><span class="lineno"> 3259</span>&#160; </div>
<div class="line"><a name="l03260"></a><span class="lineno"> 3260</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l03261"></a><span class="lineno"> 3261</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;WeightFormat = &quot;</span> &lt;&lt; std::get&lt;2&gt;(values) &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l03262"></a><span class="lineno"> 3262</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l03263"></a><span class="lineno"> 3263</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a6411da4e87e64e8859f8b725645ee9aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6411da4e87e64e8859f8b725645ee9aa">&#9670;&nbsp;</a></span>to_string() <span class="overload">[85/99]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of a vector of objects. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> of objects to print</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing args. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00147">147</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a1c4486f45128be7156e38e6dea345a16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c4486f45128be7156e38e6dea345a16">&#9670;&nbsp;</a></span>to_string() <span class="overload">[86/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>stride</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stride</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01352">1352</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;{</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; stride;</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a1d8c24abe3cf6edd704d126d1d2a5420"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d8c24abe3cf6edd704d126d1d2a5420">&#9670;&nbsp;</a></span>to_string() <span class="overload">[87/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fallback method: try to use std::to_string: </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Value to convert to string</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing val. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00093">93</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">support::cpp11::to_string</a>(val);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>.</p>

</div>
</div>
<a id="a48fd5e28bdb4975c141841f0b96f8707"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48fd5e28bdb4975c141841f0b96f8707">&#9670;&nbsp;</a></span>to_string() <span class="overload">[88/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>&amp; type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01184">1184</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;{</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a9d9b56d1b106b79fc5c5411372222d0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d9b56d1b106b79fc5c5411372222d0f">&#9670;&nbsp;</a></span>to_string() <span class="overload">[89/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01365">1365</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;{</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="aca07e8e6fa2966cfdeb9fdd77d2f02bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca07e8e6fa2966cfdeb9fdd77d2f02bc">&#9670;&nbsp;</a></span>to_string() <span class="overload">[90/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>uint8_t value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding uint8_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03049">3049</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03050"></a><span class="lineno"> 3050</span>&#160;{</div>
<div class="line"><a name="l03051"></a><span class="lineno"> 3051</span>&#160;    <span class="comment">// Explicity cast the uint8_t to signed integer and call the corresponding overloaded to_string() function.</span></div>
<div class="line"><a name="l03052"></a><span class="lineno"> 3052</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">return ::std::to_string</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(num));</div>
<div class="line"><a name="l03053"></a><span class="lineno"> 3053</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03614">to_string()</a>.</p>

</div>
</div>
<a id="a45d9cdf2b9e92d2ca49ce90e5ee85d35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45d9cdf2b9e92d2ca49ce90e5ee85d35">&#9670;&nbsp;</a></span>to_string() <span class="overload">[91/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a>&#160;</td>
          <td class="paramname"><em>wf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wf</td><td><a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l03185">3185</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l03186"></a><span class="lineno"> 3186</span>&#160;{</div>
<div class="line"><a name="l03187"></a><span class="lineno"> 3187</span>&#160;<span class="preprocessor">#define __CASE_WEIGHT_FORMAT(wf) \</span></div>
<div class="line"><a name="l03188"></a><span class="lineno"> 3188</span>&#160;<span class="preprocessor">    case WeightFormat::wf:       \</span></div>
<div class="line"><a name="l03189"></a><span class="lineno"> 3189</span>&#160;<span class="preprocessor">        return #wf;</span></div>
<div class="line"><a name="l03190"></a><span class="lineno"> 3190</span>&#160;    <span class="keywordflow">switch</span> (wf)</div>
<div class="line"><a name="l03191"></a><span class="lineno"> 3191</span>&#160;    {</div>
<div class="line"><a name="l03192"></a><span class="lineno"> 3192</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(UNSPECIFIED)</div>
<div class="line"><a name="l03193"></a><span class="lineno"> 3193</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(ANY)</div>
<div class="line"><a name="l03194"></a><span class="lineno"> 3194</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWI)</div>
<div class="line"><a name="l03195"></a><span class="lineno"> 3195</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo2)</div>
<div class="line"><a name="l03196"></a><span class="lineno"> 3196</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo4)</div>
<div class="line"><a name="l03197"></a><span class="lineno"> 3197</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo8)</div>
<div class="line"><a name="l03198"></a><span class="lineno"> 3198</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo16)</div>
<div class="line"><a name="l03199"></a><span class="lineno"> 3199</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo32)</div>
<div class="line"><a name="l03200"></a><span class="lineno"> 3200</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo64)</div>
<div class="line"><a name="l03201"></a><span class="lineno"> 3201</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo128)</div>
<div class="line"><a name="l03202"></a><span class="lineno"> 3202</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo4i2)</div>
<div class="line"><a name="l03203"></a><span class="lineno"> 3203</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo4i2_bf16)</div>
<div class="line"><a name="l03204"></a><span class="lineno"> 3204</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo8i2)</div>
<div class="line"><a name="l03205"></a><span class="lineno"> 3205</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo8i2_bf16)</div>
<div class="line"><a name="l03206"></a><span class="lineno"> 3206</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo16i2)</div>
<div class="line"><a name="l03207"></a><span class="lineno"> 3207</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo16i2_bf16)</div>
<div class="line"><a name="l03208"></a><span class="lineno"> 3208</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo32i2)</div>
<div class="line"><a name="l03209"></a><span class="lineno"> 3209</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo32i2_bf16)</div>
<div class="line"><a name="l03210"></a><span class="lineno"> 3210</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo64i2)</div>
<div class="line"><a name="l03211"></a><span class="lineno"> 3211</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo64i2_bf16)</div>
<div class="line"><a name="l03212"></a><span class="lineno"> 3212</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo4i4)</div>
<div class="line"><a name="l03213"></a><span class="lineno"> 3213</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo4i4_bf16)</div>
<div class="line"><a name="l03214"></a><span class="lineno"> 3214</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo8i4)</div>
<div class="line"><a name="l03215"></a><span class="lineno"> 3215</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo8i4_bf16)</div>
<div class="line"><a name="l03216"></a><span class="lineno"> 3216</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo16i4)</div>
<div class="line"><a name="l03217"></a><span class="lineno"> 3217</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo16i4_bf16)</div>
<div class="line"><a name="l03218"></a><span class="lineno"> 3218</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo32i4)</div>
<div class="line"><a name="l03219"></a><span class="lineno"> 3219</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo32i4_bf16)</div>
<div class="line"><a name="l03220"></a><span class="lineno"> 3220</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo64i4)</div>
<div class="line"><a name="l03221"></a><span class="lineno"> 3221</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo64i4_bf16)</div>
<div class="line"><a name="l03222"></a><span class="lineno"> 3222</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo2i8)</div>
<div class="line"><a name="l03223"></a><span class="lineno"> 3223</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo4i8)</div>
<div class="line"><a name="l03224"></a><span class="lineno"> 3224</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo8i8)</div>
<div class="line"><a name="l03225"></a><span class="lineno"> 3225</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo16i8)</div>
<div class="line"><a name="l03226"></a><span class="lineno"> 3226</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo32i8)</div>
<div class="line"><a name="l03227"></a><span class="lineno"> 3227</span>&#160;        <a class="code" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(OHWIo64i8)</div>
<div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l03229"></a><span class="lineno"> 3229</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;invalid value&quot;</span>;</div>
<div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;    }</div>
<div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;<span class="preprocessor">#undef __CASE_WEIGHT_FORMAT</span></div>
<div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">ANY</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541">OHWI</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210">OHWIo128</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9">OHWIo16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b">OHWIo16i2</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee">OHWIo16i2_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0">OHWIo16i4</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096">OHWIo16i4_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f">OHWIo16i8</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6">OHWIo2</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0">OHWIo2i8</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10">OHWIo32</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4">OHWIo32i2</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1">OHWIo32i2_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164">OHWIo32i4</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0">OHWIo32i4_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7">OHWIo32i8</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd">OHWIo4</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde">OHWIo4i2</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27">OHWIo4i2_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9">OHWIo4i4</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee">OHWIo4i4_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31">OHWIo4i8</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a">OHWIo64</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927">OHWIo64i2</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741">OHWIo64i2_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121">OHWIo64i4</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb">OHWIo64i4_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f">OHWIo64i8</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8">OHWIo8</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827">OHWIo8i2</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d">OHWIo8i2_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8">OHWIo8i4</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e">OHWIo8i4_bf16</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626">OHWIo8i8</a>, and <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>.</p>

</div>
</div>
<a id="a26a595cd5522bae4fa1c4f2fb9b8f4d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26a595cd5522bae4fa1c4f2fb9b8f4d5">&#9670;&nbsp;</a></span>to_string() <span class="overload">[92/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_weights_info.xhtml" title="Convolution Layer Weights Information class.">WeightsInfo</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01469">1469</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;{</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a99aba2774f142d36c6a286cbfe027772"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99aba2774f142d36c6a286cbfe027772">&#9670;&nbsp;</a></span>to_string() <span class="overload">[93/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a>&amp; type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01520">1520</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;{</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; win;</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ab6ea50ec0a98c2180e6530cfcb5eb366"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6ea50ec0a98c2180e6530cfcb5eb366">&#9670;&nbsp;</a></span>to_string() <span class="overload">[94/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;&#160;</td>
          <td class="paramname"><em>dim</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Window::Dimension</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01508">1508</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;{</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; dim;</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="a37cc282b0852aab04b13a6e6566adda7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37cc282b0852aab04b13a6e6566adda7">&#9670;&nbsp;</a></span>to_string() <span class="overload">[95/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02505">2505</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;{</div>
<div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div>
<div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="a300e12f3b8d36f3108956d8c692ce98d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a300e12f3b8d36f3108956d8c692ce98d">&#9670;&nbsp;</a></span>to_string() <span class="overload">[96/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from the <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor.">ITensor</a>&amp; type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01268">1268</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;{</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;ITensor.info(): &quot;</span> &lt;&lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info();</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a38419ff7319ef64c2c84c2e9a3cdfb18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38419ff7319ef64c2c84c2e9a3cdfb18">&#9670;&nbsp;</a></span>to_string() <span class="overload">[97/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from the ITensor* type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01257">1257</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;{</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>ITensor *<span class="keyword">&gt;</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>));</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>, and <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="a8b2e4a41ed5fd096ac0c8b57153677e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b2e4a41ed5fd096ac0c8b57153677e5">&#9670;&nbsp;</a></span>to_string() <span class="overload">[98/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the ITensorInfo* type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01228">1228</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;{</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>ITensorInfo *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>));</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="a329c465ec53776c2336d51c447117812"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a329c465ec53776c2336d51c447117812">&#9670;&nbsp;</a></span>to_string() <span class="overload">[99/99]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> *&#160;</td>
          <td class="paramname"><em>win</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formatted output of the Window* type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td>Type to output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01533">1533</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;{</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    std::string ret_str = <span class="stringliteral">&quot;nullptr&quot;</span>;</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <span class="keywordflow">if</span> (win != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    {</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; *win;</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        ret_str = <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str();</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    }</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <span class="keywordflow">return</span> ret_str;</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

</div>
</div>
<a id="ad023d4ca1d3facf3975c941fd728a6f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad023d4ca1d3facf3975c941fd728a6f4">&#9670;&nbsp;</a></span>to_string_if_not_null()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::to_string_if_not_null </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>arg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output if arg is not null. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">arg</td><td>Object to print</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing arg. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00074">74</a> of file <a class="el" href="utils_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (arg == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;nullptr&quot;</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a>(*arg);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">to_string()</a>.</p>

</div>
</div>
<a id="aa9c9e5cad47e8136f7136e94cec8b812"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9c9e5cad47e8136f7136e94cec8b812">&#9670;&nbsp;</a></span>tuner_mode_from_name()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> arm_compute::tuner_mode_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>String to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted CLTunerMode enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_types_8h_source.xhtml#l00057">57</a> of file <a class="el" href="_c_l_tuner_types_8h_source.xhtml">CLTunerTypes.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, CLTunerMode&gt; tuner_modes = {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {<span class="stringliteral">&quot;exhaustive&quot;</span>, CLTunerMode::EXHAUSTIVE},</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {<span class="stringliteral">&quot;normal&quot;</span>, CLTunerMode::NORMAL},</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {<span class="stringliteral">&quot;rapid&quot;</span>, CLTunerMode::RAPID},</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    };</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> tuner_modes.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>));</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::out_of_range &amp;)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">EXHAUSTIVE</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">name</a>, <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">NORMAL</a>, <a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">RAPID</a>, and <a class="el" href="_utility_8h_source.xhtml#l00204">arm_compute::utility::tolower()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_types_8h_source.xhtml#l00087">operator&gt;&gt;()</a>.</p>

</div>
</div>
<a id="ac2a92cae51d2734a65676052adb33c22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2a92cae51d2734a65676052adb33c22">&#9670;&nbsp;</a></span>update_window_and_padding()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::update_window_and_padding </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>win</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>patterns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update window and padding size for each of the access patterns. </p>
<p>First the window size is reduced based on all access patterns that are not allowed to modify the padding of the underlying tensor. Then the padding of the remaining tensors is increased to match the window.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">win</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> that is used by the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">patterns</td><td>Access patterns used to calculate the final window and padding.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the window has been changed. Changes to the padding do not influence the returned value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_helpers_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_window_helpers_8h_source.xhtml">WindowHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">bool</span> window_changed = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<span class="keyword">const</span> IAccessWindow &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>) { window_changed |= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>.update_window_if_needed(win); }, patterns...);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](IAccessWindow &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>) { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>.update_padding_if_needed(win); }, patterns...);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> window_changed;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00111">arm_compute::utility::for_each()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_simple_kernel_8cpp_source.xhtml#l00039">ICLSimpleKernel::configure()</a>, <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00058">NEBitwiseNotKernel::configure()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00060">NEBitwiseOrKernel::configure()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00060">NEBitwiseXorKernel::configure()</a>, and <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00063">NEBitwiseAndKernel::configure()</a>.</p>

</div>
</div>
<a id="a2a58489d9f05d338f612832c0a4c9a8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a58489d9f05d338f612832c0a4c9a8d">&#9670;&nbsp;</a></span>upper_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string upper_string </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Raise a given string to upper case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Given string to lower.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The upper case string </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_utils_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_string_utils_8cpp_source.xhtml">StringUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::string res = val;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::transform(res.begin(), res.end(), res.begin(), ::toupper);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00134">ClMatMulLowpNativeMMULKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00069">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00091">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00099">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00146">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00117">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00125">ClMatMulNativeMMULKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00084">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00168">ClGemmLowpMatrixBReductionKernel::configure()</a>.</p>

</div>
</div>
<a id="a4feaaa70771629f4b5dcf3b219c8b647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4feaaa70771629f4b5dcf3b219c8b647">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>scores_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>boxes_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>batch_splits_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>scores_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>boxes_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>batch_splits_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>keeps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>keeps_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a>&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00243">243</a> of file <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml">CPPBoxWithNonMaximaSuppressionLimit.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(batch_splits_in, batch_splits_out, keeps, keeps_size, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(scores_in, boxes_in, scores_out, boxes_out, classes);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(scores_in, 1, DataType::QASYMM8, DataType::QASYMM8_SIGNED,</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                                         DataType::F16, DataType::F32);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_qasymm8 =</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        scores_in-&gt;data_type() == DataType::QASYMM8 || scores_in-&gt;data_type() == DataType::QASYMM8_SIGNED;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">if</span> (is_qasymm8)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(boxes_in, 1, DataType::QASYMM16);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(boxes_in, boxes_out);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aba910b683652be1f65437ef37a9da2a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_QUANTIZATION_INFO</a>(boxes_in, boxes_out);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo boxes_qinfo = boxes_in-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(boxes_qinfo.scale != 0.125f);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(boxes_qinfo.offset != 0);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00298">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00753">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_QUANTIZATION_INFO</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo::uniform()</a>.</p>

<p class="reference">Referenced by <a class="el" href="gpu_2cl_2operators_2_cl_mat_mul_8cpp_source.xhtml#l00088">ClMatMul::configure()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00063">CpuGemm::configure()</a>, <a class="el" href="_resize_8cpp_source.xhtml#l00236">arm_compute::test::validation::FIXTURE_DATA_TEST_CASE()</a>, <a class="el" href="_cpu_depthwise_conv2d_8cpp_source.xhtml#l00522">CpuDepthwiseConv2d::get_depthwiseconvolution_function()</a>, <a class="el" href="validate__examples_2_run_example_8cpp_source.xhtml#l00110">arm_compute::utils::run_example()</a>, <a class="el" href="_integration_8cpp_source.xhtml#l00067">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00054">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_8cpp_source.xhtml#l00502">CpuDepthwiseConv2d::validate()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00114">ClDirectConv2d::validate()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00078">CLSynthetizeOperator&lt; ClGemmMatrixMultiplyReshapedOnlyRhsKernel &gt;::validate()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00078">NESynthetizeFunction&lt; K &gt;::validate()</a>, <a class="el" href="_cl_indirect_conv2d_8cpp_source.xhtml#l00098">ClIndirectConv2d::validate()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00158">CLSynthetizeFunction&lt; K &gt;::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00783">NEQLSTMLayer::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00714">CLQLSTMLayer::validate()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00063">arm_compute::graph::backends::detail::validate_arg_min_max_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00087">arm_compute::graph::backends::detail::validate_bounding_box_transform_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00112">arm_compute::graph::backends::detail::validate_channel_shuffle_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00142">arm_compute::graph::backends::detail::validate_convolution_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00242">arm_compute::graph::backends::detail::validate_depth_to_space_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00202">arm_compute::graph::backends::detail::validate_depthwise_convolution_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00264">arm_compute::graph::backends::detail::validate_dequantization_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00286">arm_compute::graph::backends::detail::validate_detection_output_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00311">arm_compute::graph::backends::detail::validate_detection_post_process_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00691">arm_compute::graph::backends::detail::validate_eltwise_Layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00340">arm_compute::graph::backends::detail::validate_generate_proposals_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00368">arm_compute::graph::backends::detail::validate_l2_normalize_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00394">arm_compute::graph::backends::detail::validate_normalize_planar_yuv_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00420">arm_compute::graph::backends::detail::validate_pad_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00444">arm_compute::graph::backends::detail::validate_permute_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00468">arm_compute::graph::backends::detail::validate_prelu_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00492">arm_compute::graph::backends::detail::validate_priorbox_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00517">arm_compute::graph::backends::detail::validate_quantization_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00541">arm_compute::graph::backends::detail::validate_reduction_operation_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00566">arm_compute::graph::backends::detail::validate_reorg_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00590">arm_compute::graph::backends::detail::validate_reshape_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00614">arm_compute::graph::backends::detail::validate_roi_align_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00640">arm_compute::graph::backends::detail::validate_slice_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00665">arm_compute::graph::backends::detail::validate_strided_slice_layer()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00743">arm_compute::graph::backends::detail::validate_unary_eltwise_layer()</a>.</p>

</div>
</div>
<a id="a8ffa773c3e171fa1e0abfda9f1f23845"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ffa773c3e171fa1e0abfda9f1f23845">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const int16x8x2_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a neon vector holding 16 16-bit quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00171">171</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.scale;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(qv.val[0]))), vscale),</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(qv.val[0]))), vscale),</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(qv.val[1]))), vscale),</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(qv.val[1]))), vscale),</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }};</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a3838d1ee6a765a3b7ff52dc040edf5c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3838d1ee6a765a3b7ff52dc040edf5c0">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t&#160;</td>
          <td class="paramname"><em>vscale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize following symmetric quantization scheme a neon vector holding 16 quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vscale</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> containing quantization scaling factors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00554">554</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;{</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv))))), vscale.val[0]),</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv))))), vscale.val[1]),</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv))))), vscale.val[2]),</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv))))), vscale.val[3]),</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    }};</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aeff642b4f4d86ed575032d944b9576a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeff642b4f4d86ed575032d944b9576a4">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a neon vector holding 16 signed quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00482">482</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.scale;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.offset;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }};</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a496aa10035fdc8a0e86dde37b64f8228"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a496aa10035fdc8a0e86dde37b64f8228">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize following a symmetric quantization scheme a neon vector holding 16 quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Quantization scaling factor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00572">572</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv))))), vscale),</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv))))), vscale),</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv))))), vscale),</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv))))), vscale),</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }};</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="ac01c85f71885edddd3fc10ea41d2d54f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac01c85f71885edddd3fc10ea41d2d54f">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const int8x16_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a vector of 16 values stored as signed asymmetric. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Quantization scaling factor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Zero quantization offset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00534">534</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;{</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    }};</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="ad4fe1191d25bb6608257e3f4ea868801"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4fe1191d25bb6608257e3f4ea868801">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const int8x8_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a neon vector holding 8 singed quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00432">432</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.scale;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.offset;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">const</span> float32x4x2_t vdequantized_input = {{</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(qv))), voffset)), vscale),</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(qv))), voffset)), vscale),</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    }};</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a7048ece2af58ce75587256d7980db171"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7048ece2af58ce75587256d7980db171">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const uint8x16_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a neon vector holding 16 quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00452">452</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.scale;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.offset;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                  vscale),</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                  vscale),</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                  vscale),</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                  vscale),</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    }};</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="afefd32b0cf61750c523e6d15790a561e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afefd32b0cf61750c523e6d15790a561e">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const uint8x16_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize following an asymmetric quantization scheme a neon vector holding 16 quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Quantization scaling factor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Zero quantization offset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00505">505</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                  vscale),</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                  vscale),</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                  vscale),</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                  vscale),</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }};</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a485ae62f3ade6c8d33c5c2e85b29c3a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a485ae62f3ade6c8d33c5c2e85b29c3a7">&#9670;&nbsp;</a></span>vdequantize() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::vdequantize </td>
          <td>(</td>
          <td class="paramtype">const uint8x8_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a neon vector holding 8 quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">410</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.scale;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.offset;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> float32x4x2_t vdequantized_input = {{</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(qv)))), voffset)),</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                  vscale),</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(qv)))), voffset)),</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                  vscale),</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    }};</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, and <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>.</p>

</div>
</div>
<a id="aa9985607399e329fcb371a92c84a6acd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9985607399e329fcb371a92c84a6acd">&#9670;&nbsp;</a></span>vdequantize_int16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::vdequantize_int16 </td>
          <td>(</td>
          <td class="paramtype">const int16x8_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dequantize a neon vector holding 8 16-bit quantized values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be dequantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Quantization scale</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dequantized values in a neon vector </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00135">135</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> float32x4x2_t vdequantized_input = {{vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(qv))), vscale),</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                               vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(qv))), vscale)}};</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>.</p>

</div>
</div>
<a id="aa107fc2f2937504672fe241943d8260b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa107fc2f2937504672fe241943d8260b">&#9670;&nbsp;</a></span>verfq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::verfq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate error function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input vector in F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated erf. </dd></dl>

</div>
</div>
<a id="ab55486f1153a4c5f507d4923b59fc6a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab55486f1153a4c5f507d4923b59fc6a0">&#9670;&nbsp;</a></span>vexpq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vexpq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate exponential. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input vector value in F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated exponent. </dd></dl>

<p class="reference">Referenced by <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::neon_softmax_quantized()</a>.</p>

</div>
</div>
<a id="af7a0f3e622aa4bc8c6077d2262a04e2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7a0f3e622aa4bc8c6077d2262a04e2e">&#9670;&nbsp;</a></span>vfloorq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vfloorq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate floor of a vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Input vector value in F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated floor vector. </dd></dl>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00224">arm_compute::cpu::elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; int32_t, 4 &gt; &gt;()</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00037">arm_compute::cpu::fp32_neon_floor()</a>.</p>

</div>
</div>
<a id="acc6fd1bcd12ef1141e15401a04d31187"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc6fd1bcd12ef1141e15401a04d31187">&#9670;&nbsp;</a></span>vinv_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x2_t arm_compute::vinv_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x2_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate reciprocal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input value.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated reciprocal. </dd></dl>

</div>
</div>
<a id="a2e0f2412b4d1302272d1aeb85d21ab25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e0f2412b4d1302272d1aeb85d21ab25">&#9670;&nbsp;</a></span>vinvq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vinvq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate reciprocal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input value.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated reciprocal. </dd></dl>

</div>
</div>
<a id="afc415e7fc5e633a0b85b08b2bba5b5cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc415e7fc5e633a0b85b08b2bba5b5cf">&#9670;&nbsp;</a></span>vinvsqrt_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x2_t arm_compute::vinvsqrt_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x2_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate inverse square root. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input value.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated inverse square root. </dd></dl>

</div>
</div>
<a id="ab8970d7aed07d8649f5e3088455948b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8970d7aed07d8649f5e3088455948b8">&#9670;&nbsp;</a></span>vinvsqrtq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vinvsqrtq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate inverse square root. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input value.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated inverse square root. </dd></dl>

</div>
</div>
<a id="a1d090b80b655e7f8fd8977bb93808b04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d090b80b655e7f8fd8977bb93808b04">&#9670;&nbsp;</a></span>vlogq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vlogq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate logarithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input vector value in F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated logarithm. </dd></dl>

</div>
</div>
<a id="ace593813d742d127296b09fa8ab3f85e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace593813d742d127296b09fa8ab3f85e">&#9670;&nbsp;</a></span>vmax2q_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::vmax2q_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4x2_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x2_t&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute lane-by-lane maximum between elements of a float vector with 4x2 elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>Float input vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Float input vector</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The lane-by-lane maximum -&gt; float32x4x2 </dd></dl>

</div>
</div>
<a id="ac7efaafdf526cf144e7f1f24521074d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7efaafdf526cf144e7f1f24521074d1">&#9670;&nbsp;</a></span>vmlaq_qasymm8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> vmlaq_qasymm8 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>&#160;</td>
          <td class="paramname"><em>vd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a multiply-accumulate on all 16 components of a QASYMM8 vector. </p>
<p>vd*vs + vo</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">vd</td><td>Input vector value in QASYMM8 format </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vs</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> multiplier in F32 format. The multiplier value must be duplicated across all four lanes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vo</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> addend in F32 format. The addend value must be duplicated across all four lanes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A 16-component vector in QASYMM8 format, saturated to fit </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8inl_source.xhtml#l00030">30</a> of file <a class="el" href="_n_e_asymm_8inl_source.xhtml">NEAsymm.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// Convert uint8 vectors to uint16 vectors</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">const</span> uint8x8_t vd_low        = vget_low_u8(vd);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">const</span> uint8x8_t vd_high       = vget_high_u8(vd);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    uint16x8_t      vd_low_u16x8  = vmovl_u8(vd_low);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    uint16x8_t      vd_high_u16x8 = vmovl_u8(vd_high);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Convert uint16 vectors to uint32 vectors</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    uint32x4_t A_u32x4 = vmovl_u16(vget_low_u16(vd_low_u16x8));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    uint32x4_t B_u32x4 = vmovl_u16(vget_high_u16(vd_low_u16x8));</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    uint32x4_t C_u32x4 = vmovl_u16(vget_low_u16(vd_high_u16x8));</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    uint32x4_t D_u32x4 = vmovl_u16(vget_high_u16(vd_high_u16x8));</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Convert uint32 vectors to float32 vectors</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    float32x4_t A_f32x4 = vcvtq_f32_u32(A_u32x4);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    float32x4_t B_f32x4 = vcvtq_f32_u32(B_u32x4);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    float32x4_t C_f32x4 = vcvtq_f32_u32(C_u32x4);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    float32x4_t D_f32x4 = vcvtq_f32_u32(D_u32x4);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// vd = vd*vs + vo</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    A_f32x4 = vmlaq_f32(vo, A_f32x4, vs);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    B_f32x4 = vmlaq_f32(vo, B_f32x4, vs);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    C_f32x4 = vmlaq_f32(vo, C_f32x4, vs);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    D_f32x4 = vmlaq_f32(vo, D_f32x4, vs);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Convert float32 vectors to uint32 vectors</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#if __aarch64__</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span> (round_policy == RoundingPolicy::TO_NEAREST_EVEN)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        A_u32x4 = vcvtnq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        B_u32x4 = vcvtnq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        C_u32x4 = vcvtnq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        D_u32x4 = vcvtnq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (round_policy == RoundingPolicy::TO_NEAREST_UP)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        A_u32x4 = vcvtaq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        B_u32x4 = vcvtaq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        C_u32x4 = vcvtaq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        D_u32x4 = vcvtaq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        A_u32x4 = vcvtq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        B_u32x4 = vcvtq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        C_u32x4 = vcvtq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        D_u32x4 = vcvtq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#else  // #if __aarch64__</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// rounding mode only supported in aarch64</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    A_u32x4 = vcvtq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    B_u32x4 = vcvtq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    C_u32x4 = vcvtq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    D_u32x4 = vcvtq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#endif // #if __aarch64__</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Convert uint32 vectors to uint16 vectors (with saturation)</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    vd_low_u16x8  = vcombine_u16(vqmovn_u32(A_u32x4), vqmovn_u32(B_u32x4));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    vd_high_u16x8 = vcombine_u16(vqmovn_u32(C_u32x4), vqmovn_u32(D_u32x4));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// convert uint16 vectors to uint8 vectors (with saturation)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(vqmovn_u16(vd_low_u16x8), vqmovn_u16(vd_high_u16x8));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">TO_NEAREST_EVEN</a>, and <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>.</p>

</div>
</div>
<a id="aa34bc4940191b8b940b77fe0e27c7c7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa34bc4940191b8b940b77fe0e27c7c7b">&#9670;&nbsp;</a></span>vmlaq_qasymm8_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> vmlaq_qasymm8_signed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>&#160;</td>
          <td class="paramname"><em>vd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a multiply-accumulate on all 16 components of a QASYMM8_SIGNED vector. </p>
<p>vd*vs + vo</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">vd</td><td>Input vector value in QASYMM8_SIGNED format </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vs</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> multiplier in F32 format. The multiplier value must be duplicated across all four lanes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vo</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> addend in F32 format. The addend value must be duplicated across all four lanes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A 16-component vector in QASYMM8_SIGNED format, saturated to fit </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8inl_source.xhtml#l00090">90</a> of file <a class="el" href="_n_e_asymm_8inl_source.xhtml">NEAsymm.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Convert uint8 vectors to int16 vectors</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> int8x8_t vd_low        = vget_low_s8(vd);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> int8x8_t vd_high       = vget_high_s8(vd);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    int16x8_t      vd_low_s16x8  = vmovl_s8(vd_low);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    int16x8_t      vd_high_s16x8 = vmovl_s8(vd_high);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Convert int16 vectors to int32 vectors</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    int32x4_t A_s32x4 = vmovl_s16(vget_low_s16(vd_low_s16x8));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    int32x4_t B_s32x4 = vmovl_s16(vget_high_s16(vd_low_s16x8));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    int32x4_t C_s32x4 = vmovl_s16(vget_low_s16(vd_high_s16x8));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    int32x4_t D_s32x4 = vmovl_s16(vget_high_s16(vd_high_s16x8));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Convert int32 vectors to float32 vectors</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    float32x4_t A_f32x4 = vcvtq_f32_s32(A_s32x4);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    float32x4_t B_f32x4 = vcvtq_f32_s32(B_s32x4);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    float32x4_t C_f32x4 = vcvtq_f32_s32(C_s32x4);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    float32x4_t D_f32x4 = vcvtq_f32_s32(D_s32x4);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// vd = vd*vs + vo</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    A_f32x4 = vmlaq_f32(vo, A_f32x4, vs);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    B_f32x4 = vmlaq_f32(vo, B_f32x4, vs);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    C_f32x4 = vmlaq_f32(vo, C_f32x4, vs);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    D_f32x4 = vmlaq_f32(vo, D_f32x4, vs);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#if __aarch64__</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (round_policy == RoundingPolicy::TO_NEAREST_EVEN)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        A_s32x4 = vcvtnq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        B_s32x4 = vcvtnq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        C_s32x4 = vcvtnq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        D_s32x4 = vcvtnq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (round_policy == RoundingPolicy::TO_NEAREST_UP)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        A_s32x4 = vcvtaq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        B_s32x4 = vcvtaq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        C_s32x4 = vcvtaq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        D_s32x4 = vcvtaq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        A_s32x4 = vcvtq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        B_s32x4 = vcvtq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        C_s32x4 = vcvtq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        D_s32x4 = vcvtq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#else  // #if __aarch64__</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// rounding mode only supported in aarch64</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    A_s32x4 = vcvtq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    B_s32x4 = vcvtq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    C_s32x4 = vcvtq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    D_s32x4 = vcvtq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#endif // #if __aarch64__</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Convert int32 vectors to int16 vectors (with saturation)</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    vd_low_s16x8  = vcombine_s16(vqmovn_s32(A_s32x4), vqmovn_s32(B_s32x4));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    vd_high_s16x8 = vcombine_s16(vqmovn_s32(C_s32x4), vqmovn_s32(D_s32x4));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// convert int16 vectors to int8 vectors (with saturation)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> vcombine_s8(vqmovn_s16(vd_low_s16x8), vqmovn_s16(vd_high_s16x8));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">TO_NEAREST_EVEN</a>, and <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">TO_NEAREST_UP</a>.</p>

</div>
</div>
<a id="aa6465367a67af2bae4ca46750231dae0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6465367a67af2bae4ca46750231dae0">&#9670;&nbsp;</a></span>vpowq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vpowq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate n power of a number. </p>
<p>pow(x,n) = e^(n*log(x))</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Input vector value in F32 format. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Powers to raise the input to.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated power. </dd></dl>

</div>
</div>
<a id="a4ff1249e423ae9bfab075f5317c4d004"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ff1249e423ae9bfab075f5317c4d004">&#9670;&nbsp;</a></span>vquantize() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x8_t arm_compute::vquantize </td>
          <td>(</td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a neon vector holding 8 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00591">591</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>     = qi.scale;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>    = qi.offset;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> float32x4_t voffset   = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    }};</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">return</span> vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, and <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>.</p>

</div>
</div>
<a id="a42c040989e7f451dd9f2efa7384b89f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42c040989e7f451dd9f2efa7384b89f6">&#9670;&nbsp;</a></span>vquantize() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x16_t arm_compute::vquantize </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a neon vector holding 16 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00661">661</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;{</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">auto</span>            rf = <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(qv, qi.scale, qi.offset);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(pa, pb);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="_n_e_asymm_8h_source.xhtml#l00634">vquantize_internal()</a>.</p>

</div>
</div>
<a id="ac5986edc0dbcd0c071107cafb98cbc39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5986edc0dbcd0c071107cafb98cbc39">&#9670;&nbsp;</a></span>vquantize_int16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int16x8_t arm_compute::vquantize_int16 </td>
          <td>(</td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a neon vector holding 8 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Quantization scale</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00150">150</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> int32x4x2_t rf = {{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        vcvtnq_s32_f32(vmulq_f32(qv.val[0], vinvscale)), vcvtnq_s32_f32(vmulq_f32(qv.val[1], vinvscale))</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        vcvtq_s32_f32(vmulq_f32(qv.val[0], vinvscale)), vcvtq_s32_f32(vmulq_f32(qv.val[1], vinvscale))</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }};</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1]));</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>.</p>

</div>
</div>
<a id="a3109788e20d3a6113e4b7d2d937c1f64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3109788e20d3a6113e4b7d2d937c1f64">&#9670;&nbsp;</a></span>vquantize_internal()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x4_t arm_compute::vquantize_internal </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00634">634</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;{</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keyword">const</span> int32x4_t   voffset   = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[0], vinvscale)), voffset),</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[1], vinvscale)), voffset),</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[2], vinvscale)), voffset),</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[3], vinvscale)), voffset),</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[0], vinvscale)), voffset),</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[1], vinvscale)), voffset),</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[2], vinvscale)), voffset),</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[3], vinvscale)), voffset),</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    }};</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">return</span> rf;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_asymm_8h_source.xhtml#l00661">vquantize()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00691">vquantize_qasymm16()</a>, and <a class="el" href="_n_e_asymm_8h_source.xhtml#l00676">vquantize_signed()</a>.</p>

</div>
</div>
<a id="a687dee3fd66555374211e3ff676ce5f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a687dee3fd66555374211e3ff676ce5f1">&#9670;&nbsp;</a></span>vquantize_qasymm16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16x8x2_t arm_compute::vquantize_qasymm16 </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize to QASYMM16 a neon vector holding 16 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00691">691</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keyword">auto</span>             rf = <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(qv, qi.scale, qi.offset);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">const</span> uint16x8_t pa = vcombine_u16(vqmovun_s32(rf.val[0]), vqmovun_s32(rf.val[1]));</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">const</span> uint16x8_t pb = vcombine_u16(vqmovun_s32(rf.val[2]), vqmovun_s32(rf.val[3]));</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">return</span> {pa, pb};</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="_n_e_asymm_8h_source.xhtml#l00634">vquantize_internal()</a>.</p>

</div>
</div>
<a id="a926c75703af37a5677a6bac0198902b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a926c75703af37a5677a6bac0198902b0">&#9670;&nbsp;</a></span>vquantize_qsymm16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> arm_compute::vquantize_qsymm16 </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a neon vector holding 16 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_symm_8h_source.xhtml#l00191">191</a> of file <a class="el" href="_n_e_symm_8h_source.xhtml">NESymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = qi.scale;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> == 0.f);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        vcvtnq_s32_f32(vmulq_f32(qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        vcvtnq_s32_f32(vmulq_f32(qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        vcvtnq_s32_f32(vmulq_f32(qv.val[2], vinvscale)),</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        vcvtnq_s32_f32(vmulq_f32(qv.val[3], vinvscale)),</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        vcvtq_s32_f32(vmulq_f32(qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        vcvtq_s32_f32(vmulq_f32(qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        vcvtq_s32_f32(vmulq_f32(qv.val[2], vinvscale)),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        vcvtq_s32_f32(vmulq_f32(qv.val[3], vinvscale)),</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }};</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> res = {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])),</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])),</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    };</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a76f394ac7b594f233f6fd13ad8bd99d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76f394ac7b594f233f6fd13ad8bd99d5">&#9670;&nbsp;</a></span>vquantize_signed() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x8_t arm_compute::vquantize_signed </td>
          <td>(</td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantize a neon vector holding 8 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the singed quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00616">616</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;{</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>     = qi.scale;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>    = qi.offset;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">const</span> float32x4_t voffset   = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    }};</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">return</span> vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, and <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>.</p>

</div>
</div>
<a id="a3460d476add70f38e1d56fb9cccd0f3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3460d476add70f38e1d56fb9cccd0f3a">&#9670;&nbsp;</a></span>vquantize_signed() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x16_t arm_compute::vquantize_signed </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>qv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>qi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Signed quantize a neon vector holding 16 floating point values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">qv</td><td>Input values to be quantized. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qi</td><td>Quantization information to be used in the computation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A neon vector holding the quantized values </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_asymm_8h_source.xhtml#l00676">676</a> of file <a class="el" href="_n_e_asymm_8h_source.xhtml">NEAsymm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;{</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keyword">auto</span>           rf = <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(qv, qi.scale, qi.offset);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">return</span> vcombine_s8(pa, pb);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, and <a class="el" href="_n_e_asymm_8h_source.xhtml#l00634">vquantize_internal()</a>.</p>

</div>
</div>
<a id="a62947a5a80433465f50372c441be3c8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62947a5a80433465f50372c441be3c8c">&#9670;&nbsp;</a></span>vreduce()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float vreduce </td>
          <td>(</td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reduce a vector to be a scalar by accumulating all lanes in the vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> to be reduced.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the wrapped-around number. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00537">537</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keyword">const</span> float32x2_t v0    = vget_high_f32(v);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keyword">const</span> float32x2_t v1    = vget_low_f32(v);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keyword">const</span> float32x2_t v_out = vadd_f32(v0, v1);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a = vget_lane_f32(v_out, 0);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vget_lane_f32(v_out, 1);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">return</span> a + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

<p class="reference">Referenced by <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, and <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>.</p>

</div>
</div>
<a id="a9fb53f220926a32be02f9446aed5bd88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fb53f220926a32be02f9446aed5bd88">&#9670;&nbsp;</a></span>vroundq_rte_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vroundq_rte_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate round value of a vector to nearest with ties to even. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Input vector value in F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated round vector. </dd></dl>

</div>
</div>
<a id="aa9648abfe8fa6a9f3dab23ec9f55e2f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9648abfe8fa6a9f3dab23ec9f55e2f1">&#9670;&nbsp;</a></span>vsin_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x2_t arm_compute::vsin_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x2_t&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate sine. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Input vector value in radians, F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated sine. </dd></dl>

</div>
</div>
<a id="a5b6eb5a8c8e8944d781892928f71a698"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b6eb5a8c8e8944d781892928f71a698">&#9670;&nbsp;</a></span>vsinq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vsinq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate sine. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Input vector value in radians, F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated sine. </dd></dl>

</div>
</div>
<a id="a3e59419da344d02daca9c5b274a1da45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e59419da344d02daca9c5b274a1da45">&#9670;&nbsp;</a></span>vtanhq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vtanhq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate hyperbolic tangent. </p>
<p>tanh(x) = (e^2x - 1)/(e^2x + 1)</p>
<dl class="section note"><dt>Note</dt><dd>We clamp x to [-5,5] to avoid overflowing issues.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Input vector value in F32 format.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated Hyperbolic Tangent. </dd></dl>

</div>
</div>
<a id="a0c10bb00a86edd8d0cd4c33b494f6cd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c10bb00a86edd8d0cd4c33b494f6cd4">&#9670;&nbsp;</a></span>vtaylor_polyq_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::vtaylor_polyq_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; float32x4_t, 8 &gt; &amp;&#160;</td>
          <td class="paramname"><em>coeffs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a 7th degree polynomial approximation using Estrin's method. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input vector value in F32 format. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coeffs</td><td>Polynomial coefficients table.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The calculated approximation. </dd></dl>

</div>
</div>
<a id="aeb6881009f40f57d430752441ec5c4f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb6881009f40f57d430752441ec5c4f4">&#9670;&nbsp;</a></span>wrap_around()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::wrap_around </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wrap-around a number within the range 0 &lt;= x &lt; m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Input value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m</td><td>Range</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the wrapped-around number </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00277">277</a> of file <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span> x &gt;= 0 ? x % m : (x % m + m) % m;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00052">SplitLayerNode::compute_output_descriptor()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00056">CpuSoftmaxGeneric::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00089">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_n_e_stack_layer_8cpp_source.xhtml#l00046">NEStackLayer::configure()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00046">NEL2NormalizeLayer::configure()</a>, <a class="el" href="_c_l_stack_layer_8cpp_source.xhtml#l00053">CLStackLayer::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00060">CLL2NormalizeLayer::configure()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00104">SplitLayerNode::configure_output()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00287">convert_negative_axis()</a>, <a class="el" href="reference_2_softmax_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::softmax_layer_generic()</a>, <a class="el" href="reference_2_unstack_8cpp_source.xhtml#l00087">arm_compute::test::validation::reference::unstack()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00131">SplitLayerNode::validate()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00120">CpuSoftmaxGeneric::validate()</a>, <a class="el" href="_n_e_stack_layer_8cpp_source.xhtml#l00056">NEStackLayer::validate()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00063">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_stack_layer_8cpp_source.xhtml#l00072">CLStackLayer::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00080">CLL2NormalizeLayer::validate()</a>, and <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00103">GpuSoftmax::validate_op()</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a5663e5bad3b65f7fa59105be39d1fe12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5663e5bad3b65f7fa59105be39d1fe12">&#9670;&nbsp;</a></span>erf_f32_lut</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::array&lt; <a class="el" href="structarm__compute_1_1_erf_lut_entry.xhtml">ErfLutEntry</a>&lt; float &gt;, 513 &gt; erf_f32_lut</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The lookup table for FP32 erf(x) calculation. </p>

<p class="definition">Definition at line <a class="el" href="_math_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_math_8cpp_source.xhtml">Math.cpp</a>.</p>

</div>
</div>
<a id="a48fb9cf404e8f7043235bf14105c9793"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48fb9cf404e8f7043235bf14105c9793">&#9670;&nbsp;</a></span>log_tab</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::array&lt;float32x4_t, 8&gt; log_tab</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {{</div>
<div class="line">    vdupq_n_f32(-2.29561495781f),</div>
<div class="line">    vdupq_n_f32(-2.47071170807f),</div>
<div class="line">    vdupq_n_f32(-5.68692588806f),</div>
<div class="line">    vdupq_n_f32(-0.165253549814f),</div>
<div class="line">    vdupq_n_f32(5.17591238022f),</div>
<div class="line">    vdupq_n_f32(0.844007015228f),</div>
<div class="line">    vdupq_n_f32(4.58445882797f),</div>
<div class="line">    vdupq_n_f32(0.0141278216615f),</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p>Logarithm polynomial coefficients. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00034">34</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>

</div>
</div>
<a id="a769d636d7a3c7c84579a5f477a18bc9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a769d636d7a3c7c84579a5f477a18bc9d">&#9670;&nbsp;</a></span>MAX_DIMS</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t MAX_DIMS = 6</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constant value used to indicate maximum dimensions of a <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a>, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> and <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a>. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l01501">arm_compute::misc::shape_calculator::calculate_concatenate_shape()</a>.</p>

</div>
</div>
<a id="ae3e74f28452dea05869826c30b95f54b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3e74f28452dea05869826c30b95f54b">&#9670;&nbsp;</a></span>te_sin_coeff2</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float te_sin_coeff2 = 0.166666666666f</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sin polynomial coefficients. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00046">46</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>

</div>
</div>
<a id="a9c1bcf45a03708a37132c1e2df5cd2b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c1bcf45a03708a37132c1e2df5cd2b0">&#9670;&nbsp;</a></span>te_sin_coeff3</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float te_sin_coeff3 = 0.05f</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00047">47</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>

</div>
</div>
<a id="a542bbd5e844a0a494e3e4078a433d44b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a542bbd5e844a0a494e3e4078a433d44b">&#9670;&nbsp;</a></span>te_sin_coeff4</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float te_sin_coeff4 = 0.023809523810f</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00048">48</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>

</div>
</div>
<a id="afe0353e9228b8be37bcdb4a1770f44e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe0353e9228b8be37bcdb4a1770f44e3">&#9670;&nbsp;</a></span>te_sin_coeff5</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float te_sin_coeff5 = 0.013888888889f</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_math_8inl_source.xhtml#l00049">49</a> of file <a class="el" href="_n_e_math_8inl_source.xhtml">NEMath.inl</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a2bab471e86cd1e7951172eeae0855f40"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2bab471e86cd1e7951172eeae0855f40">AclUnsupportedTarget</a></div><div class="ttdeci">@ AclUnsupportedTarget</div><div class="ttdoc">Call failed as an invalid backend was requested.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00056">AclTypes.h:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27">arm_compute::WeightFormat::OHWIo4i2_bf16</a></div><div class="ttdeci">@ OHWIo4i2_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdeci">@ NCHW</div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9">arm_compute::NMSType::GAUSSIAN</a></div><div class="ttdeci">@ GAUSSIAN</div><div class="ttdoc">Gaussian NMS.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_af22d91f65b56b795fd28f3b302cd3ad2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">arm_compute::test::validation::dst_shape</a></div><div class="ttdeci">TensorShape dst_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">DFT.cpp:164</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a292ea0ca5cb39b9acea91a2c56fbbe60"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a292ea0ca5cb39b9acea91a2c56fbbe60">arm_compute::ACL_SRC_DST</a></div><div class="ttdeci">@ ACL_SRC_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00041">Types.h:41</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3">acl::Target::GpuOcl</a></div><div class="ttdeci">@ GpuOcl</div><div class="ttdoc">Gpu target that leverages OpenCL.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">arm_compute::Channel::V</a></div><div class="ttdeci">@ V</div><div class="ttdoc">Cr/V/Value channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdeci">@ QSYMM8_PER_CHANNEL</div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::ComparisonOperation::LessEqual</a></div><div class="ttdeci">@ LessEqual</div><div class="ttdoc">Less equal comparison (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::DataType::QASYMM16</a></div><div class="ttdeci">@ QASYMM16</div><div class="ttdoc">quantized, asymmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">arm_compute::GPUTarget::T700</a></div><div class="ttdeci">@ T700</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a31b90f34a729e9ce37218c16fe921e33">arm_compute::GPUTarget::G31</a></div><div class="ttdeci">@ G31</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00236">OpenCL.cpp:236</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a31d65cccd6593e4101db93fb878abcaa">arm_compute::Format::U64</a></div><div class="ttdeci">@ U64</div><div class="ttdoc">1 channel, 1 U64 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8357c35fcdfb78cc6d54bf4dd04c2010">arm_compute::GPUTarget::G610</a></div><div class="ttdeci">@ G610</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdeci">@ RGB888</div><div class="ttdoc">3 channels, 1 U8 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ac4e3fbeb8c4b89ef5c98432e80418471"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac4e3fbeb8c4b89ef5c98432e80418471">arm_compute::ACL_DST_1</a></div><div class="ttdeci">@ ACL_DST_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00057">Types.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8355d6db4cebee2724bf4463076526c6"><div class="ttname"><a href="namespacearm__compute.xhtml#a8355d6db4cebee2724bf4463076526c6">arm_compute::error_on_mismatching_data_layouts</a></div><div class="ttdeci">arm_compute::Status error_on_mismatching_data_layouts(const char *function, const char *file, const int line, const ITensorInfo *tensor_info, Ts... tensor_infos)</div><div class="ttdoc">Return an error if the passed tensor infos have different data layouts.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00588">Validate.h:588</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2"><div class="ttname"><a href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2">AclCpu</a></div><div class="ttdeci">@ AclCpu</div><div class="ttdoc">Cpu target that uses SIMD extensions.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00066">AclTypes.h:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9d714e1b7d9d7818309138b7d830ebcb"><div class="ttname"><a href="namespacearm__compute.xhtml#a9d714e1b7d9d7818309138b7d830ebcb">arm_compute::calculate_subsampled_shape</a></div><div class="ttdeci">TensorShape calculate_subsampled_shape(const TensorShape &amp;shape, Format format, Channel channel=Channel::UNKNOWN)</div><div class="ttdoc">Calculate subsampled shape for a given format and channel.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00400">Validate.h:400</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_a01b6a20d51e2db6f1704f2315ead62d3"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">PRELU</a></div><div class="ttdeci">#define PRELU(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00031">elementwise_operation_quantized.cl:31</a></div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_ae81948490ddf54e80a22593640178350"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#ae81948490ddf54e80a22593640178350">GemmTuner.required</a></div><div class="ttdeci">required</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00652">GemmTuner.py:652</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741">arm_compute::WeightFormat::OHWIo64i2_bf16</a></div><div class="ttdeci">@ OHWIo64i2_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">arm_compute::GPUTarget::VALHALL</a></div><div class="ttdeci">@ VALHALL</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea06e5b2cbe2f75bb5eec32613499cf22a"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea06e5b2cbe2f75bb5eec32613499cf22a">arm_compute::CLVersion::CL10</a></div><div class="ttdeci">@ CL10</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00103">CpuGemmAssemblyDispatch.cpp:103</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">arm_compute::ReductionOperation::PROD</a></div><div class="ttdeci">@ PROD</div><div class="ttdoc">Product.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28">arm_compute::ConvolutionMethod::FFT</a></div><div class="ttdeci">@ FFT</div><div class="ttdoc">Convolution using FFT.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Format::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div><div class="ttdoc">Unknown image format.</div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00204">Utility.h:204</a></div></div>
<div class="ttc" id="astruct_detection_window_xhtml_a67fe5ca4d6c3f95bf649ef48fe3d221b"><div class="ttname"><a href="struct_detection_window.xhtml#a67fe5ca4d6c3f95bf649ef48fe3d221b">DetectionWindow::width</a></div><div class="ttdeci">ushort width</div><div class="ttdoc">Width of the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00051">types.h:51</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">arm_compute::GPUTarget::T800</a></div><div class="ttdeci">@ T800</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a33ac5aaccfb4b36763818ca148b44c6c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">arm_compute::cpu::vector_size</a></div><div class="ttdeci">constexpr size_t vector_size</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00043">impl.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::PoolingType::L2</a></div><div class="ttdeci">@ L2</div><div class="ttdoc">L2 Pooling.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4a20779ec9b583a9468b4fa60575d52e"><div class="ttname"><a href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">arm_compute::convert_int8x16_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_int8x16_to_float32x4x4(const int8x16_t &amp;in)</div><div class="ttdoc">Converts from int8x16 to float32x4x4_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00462">NEMath.inl:462</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acc9d7296b395b31b90c3c2ab006a19df">arm_compute::GPUTarget::FIFTHGEN</a></div><div class="ttdeci">@ FIFTHGEN</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">arm_compute::ACL_DST_END</a></div><div class="ttdeci">@ ACL_DST_END</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00059">Types.h:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2ce67542f90c3e1adc608037ccdf9bdc"><div class="ttname"><a href="namespacearm__compute.xhtml#a2ce67542f90c3e1adc608037ccdf9bdc">arm_compute::quantize_qasymm16</a></div><div class="ttdeci">uint16_t quantize_qasymm16(float value, const QuantizationInfo &amp;qinfo)</div><div class="ttdoc">Quantize a value given a 16-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00522">QuantizationInfo.h:522</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">Scale.cpp:263</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac6c243f12870355c0b97ac813b9e7d25"><div class="ttname"><a href="namespacearm__compute.xhtml#ac6c243f12870355c0b97ac813b9e7d25">arm_compute::error_on_data_layout_not_in</a></div><div class="ttdeci">arm_compute::Status error_on_data_layout_not_in(const char *function, const char *file, const int line, const ITensorInfo *tensor_info, T &amp;&amp;dl, Ts &amp;&amp;...dls)</div><div class="ttdoc">Return an error if the data layout of the passed tensor info does not match any of the data layouts p...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00853">Validate.h:853</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8">arm_compute::WeightFormat::OHWIo8i4</a></div><div class="ttdeci">@ OHWIo8i4</div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00075">Dimensions.h:75</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdeci">@ CHANNEL</div><div class="ttdoc">channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div><div class="ttdeci">@ F64</div><div class="ttdoc">64-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::ComparisonOperation::Equal</a></div><div class="ttdeci">@ Equal</div><div class="ttdoc">Equal comparison (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FLOAT</a></div><div class="ttdeci">@ QUANTIZE_DOWN_FLOAT</div><div class="ttdoc">Quantize using a floating point multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0528304f5cada4226582537748c125ce">arm_compute::GPUTarget::G620</a></div><div class="ttdeci">@ G620</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad">arm_compute::detail::ObjectType::TensorPack</a></div><div class="ttdeci">@ TensorPack</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428eafd5dc07b8d30d1ad403905c85f9ba741"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eafd5dc07b8d30d1ad403905c85f9ba741">arm_compute::POOL</a></div><div class="ttdeci">@ POOL</div><div class="ttdoc">Pool CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00085">CLTypes.h:85</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">arm_compute::WeightFormat::ANY</a></div><div class="ttdeci">@ ANY</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">arm_compute::NormType::IN_MAP_1D</a></div><div class="ttdeci">@ IN_MAP_1D</div><div class="ttdoc">Normalization applied within the same map in 1D region.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf65f95fa367a2305970ced3f3532b96">arm_compute::GPUTarget::G720</a></div><div class="ttdeci">@ G720</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">arm_compute::DataLayout::NCDHW</a></div><div class="ttdeci">@ NCDHW</div><div class="ttdoc">Num samples, channels, depth, height, width.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdeci">@ UNDEFINED</div><div class="ttdoc">Borders are left undefined.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">arm_compute::GPUTarget::G51BIG</a></div><div class="ttdeci">@ G51BIG</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a7a59b5478ea9250c2d244831c2c4672aae475aad5997d129ce4dab14a28ddb802"><div class="ttname"><a href="_acl_types_8h.xhtml#a7a59b5478ea9250c2d244831c2c4672aae475aad5997d129ce4dab14a28ddb802">AclHostPtr</a></div><div class="ttdeci">@ AclHostPtr</div><div class="ttdoc">Host allocated memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00188">AclTypes.h:188</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00121">CoreTypes.h:121</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a86a0c8e195c900a895c249662cfaa564a9f87f02f2da8f99c571b2a1c2a96132b"><div class="ttname"><a href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a9f87f02f2da8f99c571b2a1c2a96132b">arm_compute::FFTDirection::Inverse</a></div><div class="ttdeci">@ Inverse</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3109788e20d3a6113e4b7d2d937c1f64"><div class="ttname"><a href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">arm_compute::vquantize_internal</a></div><div class="ttdeci">int32x4x4_t vquantize_internal(const float32x4x4_t &amp;qv, float scale, int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00634">NEAsymm.h:634</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a9be6b6e34915d1ad0cbe68911a25459a"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a9be6b6e34915d1ad0cbe68911a25459a">arm_compute::ACL_INT_0</a></div><div class="ttdeci">@ ACL_INT_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00063">Types.h:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a7cb842ebfe255726066039853a4322f0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">arm_compute::test::validation::weights_info</a></div><div class="ttdeci">weights_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00165">BatchNormalizationLayer.cpp:165</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2">arm_compute::ACL_UNKNOWN</a></div><div class="ttdeci">@ ACL_UNKNOWN</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00040">Types.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">arm_compute::SamplingPolicy::TOP_LEFT</a></div><div class="ttdeci">@ TOP_LEFT</div><div class="ttdoc">Samples are taken at pixel top left corner.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">arm_compute::InterpolationPolicy::AREA</a></div><div class="ttdeci">@ AREA</div><div class="ttdoc">Output values are determined by averaging the source pixels whose areas fall under the area of the de...</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::ComparisonOperation::Greater</a></div><div class="ttdeci">@ Greater</div><div class="ttdoc">Greater comparison (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0">arm_compute::WeightFormat::OHWIo32i4_bf16</a></div><div class="ttdeci">@ OHWIo32i4_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a76433394f276fbc92390850a15bd2cae"><div class="ttname"><a href="namespacearm__compute.xhtml#a76433394f276fbc92390850a15bd2cae">arm_compute::error_on_unsupported_fp16</a></div><div class="ttdeci">arm_compute::Status error_on_unsupported_fp16(const char *function, const char *file, const int line, const ITensorInfo *tensor_info, bool is_fp16_supported)</div><div class="ttdoc">Return an error if the data type of the passed tensor info is FP16 and FP16 extension is not supporte...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00966">Validate.h:966</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">arm_compute::DetectionOutputLayerCodeType::CORNER_SIZE</a></div><div class="ttdeci">@ CORNER_SIZE</div><div class="ttdoc">Use box centers and size.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae5986c8a29ac4fae2e1ac78bf446abd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ae5986c8a29ac4fae2e1ac78bf446abd5">arm_compute::has_holes</a></div><div class="ttdeci">bool has_holes(const ITensorInfo &amp;info, size_t dimension)</div><div class="ttdoc">Check if the tensor has any holes.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2helpers_2_utils_8cpp_source.xhtml#l00033">Utils.cpp:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8b82da7b5e0f6192f415ac347c9e0555"><div class="ttname"><a href="namespacearm__compute.xhtml#a8b82da7b5e0f6192f415ac347c9e0555">arm_compute::string_from_format</a></div><div class="ttdeci">const std::string &amp; string_from_format(Format format)</div><div class="ttdoc">Convert a tensor format into a string.</div><div class="ttdef"><b>Definition:</b> <a href="_format_utils_8cpp_source.xhtml#l00031">FormatUtils.cpp:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">arm_compute::CLVersion::CL30</a></div><div class="ttdeci">@ CL30</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4">arm_compute::WeightFormat::OHWIo32i2</a></div><div class="ttdeci">@ OHWIo32i2</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea80e95ed62d0c47e4d8c0696d467d4db3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea80e95ed62d0c47e4d8c0696d467d4db3">arm_compute::CLVersion::CL11</a></div><div class="ttdeci">@ CL11</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5"><div class="ttname"><a href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5">arm_compute::CLImage2DType::WriteOnly</a></div><div class="ttdeci">@ WriteOnly</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828acc3b8583b5cb467f016926384c85295a"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828acc3b8583b5cb467f016926384c85295a">arm_compute::ACL_INT_2</a></div><div class="ttdeci">@ ACL_INT_2</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00065">Types.h:65</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a5c0200f51580173c58b156cb6c443dce"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5c0200f51580173c58b156cb6c443dce">AclSuccess</a></div><div class="ttdeci">@ AclSuccess</div><div class="ttdoc">Call succeeded, leading to valid state for all involved objects/data.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00052">AclTypes.h:52</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a1b62e396a1789909dadda61ea4cda96f"><div class="ttname"><a href="_error_8h.xhtml#a1b62e396a1789909dadda61ea4cda96f">ARM_COMPUTE_ERROR_ON_LOC_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_LOC_MSG(cond, func, file, line,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00458">Error.h:458</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828afbaa09ed653f4ffe6c94c2bfaa36ddc7"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828afbaa09ed653f4ffe6c94c2bfaa36ddc7">arm_compute::ACL_SHIFTS</a></div><div class="ttdeci">@ ACL_SHIFTS</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="a_n_e_fuse_batch_normalization_kernel_8cpp_xhtml_a6f725602583bcad27d0d2cad1e871128"><div class="ttname"><a href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a></div><div class="ttdeci">DataLayout dl</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00050">NEFuseBatchNormalizationKernel.cpp:50</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00348">Error.h:348</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58"><div class="ttname"><a href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58">AclPreferFastStart</a></div><div class="ttdeci">@ AclPreferFastStart</div><div class="ttdoc">Prioritize performance when a single iterations is expected to be performed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00074">AclTypes.h:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9">arm_compute::WeightFormat::OHWIo4i4</a></div><div class="ttdeci">@ OHWIo4i4</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdeci">@ QSYMM8</div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number</div></div>
<div class="ttc" id="astruct_detection_window_xhtml_aa0fb54e3dbe6f7446157eb3f3c1f77f3"><div class="ttname"><a href="struct_detection_window.xhtml#aa0fb54e3dbe6f7446157eb3f3c1f77f3">DetectionWindow::height</a></div><div class="ttdeci">ushort height</div><div class="ttdoc">Height of the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00052">types.h:52</a></div></div>
<div class="ttc" id="astruct_detection_window_xhtml_a0815db32ce16586f5e90a633735df930"><div class="ttname"><a href="struct_detection_window.xhtml#a0815db32ce16586f5e90a633735df930">DetectionWindow::x</a></div><div class="ttdeci">ushort x</div><div class="ttdoc">Top-left x coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00049">types.h:49</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06">arm_compute::ConvolutionMethod::INDIRECT</a></div><div class="ttdeci">@ INDIRECT</div><div class="ttdoc">Indirect convolution.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationFunction::LOGISTIC</a></div><div class="ttdeci">@ LOGISTIC</div><div class="ttdoc">Logistic (  )</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a3c20d908342087484d883574d55dd482"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">arm_compute::TensorInfo::valid_region</a></div><div class="ttdeci">ValidRegion valid_region() const override</div><div class="ttdoc">Valid region of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00291">TensorInfo.h:291</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6d5ec5f6909788df3453f62a3bd6ad78"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6d5ec5f6909788df3453f62a3bd6ad78">arm_compute::DEPTHWISE</a></div><div class="ttdeci">@ DEPTHWISE</div><div class="ttdoc">Depthwise CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00081">CLTypes.h:81</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6">arm_compute::WeightFormat::OHWIo2</a></div><div class="ttdeci">@ OHWIo2</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a5f63b63606dbbbe54474e6e970a6738c"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">arm_compute::TensorInfo::data_layout</a></div><div class="ttdeci">DataLayout data_layout() const override</div><div class="ttdoc">Get the data layout of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00303">TensorInfo.h:303</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_mat_mul_kernel_info_xhtml_a2f20a31aa892d300047714b0d6fd11a2"><div class="ttname"><a href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a2f20a31aa892d300047714b0d6fd11a2">arm_compute::MatMulKernelInfo::adj_rhs</a></div><div class="ttdeci">bool adj_rhs</div><div class="ttdoc">Get Adjoint RHS flag value.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00246">KernelDescriptors.h:246</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f">arm_compute::WeightFormat::OHWIo64i8</a></div><div class="ttdeci">@ OHWIo64i8</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a2216553ecd7bef833f5e07fdf31ef6c9"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2216553ecd7bef833f5e07fdf31ef6c9">AclUnsupportedConfig</a></div><div class="ttdeci">@ AclUnsupportedConfig</div><div class="ttdoc">Call failed as configuration is unsupported.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00059">AclTypes.h:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a85b962558881e129a7473521ba5b3526"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a85b962558881e129a7473521ba5b3526">arm_compute::test::validation::sampling_policy</a></div><div class="ttdeci">sampling_policy</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00250">Scale.cpp:250</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a5ac8135a2c0a60f10448be0057543ed7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">arm_compute::wrapper::vinv</a></div><div class="ttdeci">float32x2_t vinv(const float32x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="inv_8h_source.xhtml#l00048">inv.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a138beaeb1260b90cb03bc3f761628724"><div class="ttname"><a href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">arm_compute::scaled_dimensions</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(int width, int height, int kernel_width, int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00288">Utils.cpp:288</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a95358b677c5c17f5cc1e369e4a27e2c2"><div class="ttname"><a href="namespacearm__compute.xhtml#a95358b677c5c17f5cc1e369e4a27e2c2">arm_compute::has_format_vertical_subsampling</a></div><div class="ttdeci">bool has_format_vertical_subsampling(Format format)</div><div class="ttdoc">Return true if the given format has vertical subsampling.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00318">Validate.h:318</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a5d55d1ccc47a605f01b9284b3102e979"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5d55d1ccc47a605f01b9284b3102e979">AclInvalidObjectState</a></div><div class="ttdeci">@ AclInvalidObjectState</div><div class="ttdoc">Call failed as an object has invalid state.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00060">AclTypes.h:60</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml_a2a42a2a0b91dce5401678766c088dfa7"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">arm_compute::CPUInfo::get</a></div><div class="ttdeci">static CPUInfo &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00041">CPPTypes.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3c10c7c992771d1048fd5fe2708ccdd9"><div class="ttname"><a href="namespacearm__compute.xhtml#a3c10c7c992771d1048fd5fe2708ccdd9">arm_compute::set_wbsm</a></div><div class="ttdeci">void set_wbsm(cl::Kernel &amp;kernel, cl_int wbsm_hint)</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00441">CLHelpers.cpp:441</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a777eb2ab77bdf5aea2d25c31b4acee2c"><div class="ttname"><a href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">arm_compute::image2d_from_buffer_supported</a></div><div class="ttdeci">bool image2d_from_buffer_supported(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to check whether the cl_khr_image2d_from_buffer extension is supported.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00377">CLHelpers.cpp:377</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827">arm_compute::WeightFormat::OHWIo8i2</a></div><div class="ttdeci">@ OHWIo8i2</div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml_ac8ba59c07d56602367dae64035abb1ef"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml#ac8ba59c07d56602367dae64035abb1ef">arm_compute::Status::error_description</a></div><div class="ttdeci">std::string error_description() const</div><div class="ttdoc">Gets error description if any.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00096">Error.h:96</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">arm_compute::Channel::Y</a></div><div class="ttdeci">@ Y</div><div class="ttdoc">Luma channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a49e1fb8719a6e3b4db298796bdeac758"><div class="ttname"><a href="namespacearm__compute.xhtml#a49e1fb8719a6e3b4db298796bdeac758">arm_compute::error_on_mismatching_quantization_info</a></div><div class="ttdeci">arm_compute::Status error_on_mismatching_quantization_info(const char *function, const char *file, const int line, const ITensorInfo *tensor_info_1, const ITensorInfo *tensor_info_2, Ts... tensor_infos)</div><div class="ttdoc">Return an error if the passed tensor infos have different asymmetric quantized data types or differen...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00695">Validate.h:695</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aaf78504d96ba7177dc0c6784905ac8743"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aaf78504d96ba7177dc0c6784905ac8743">arm_compute::CLGEMMKernelType::NATIVE</a></div><div class="ttdeci">@ NATIVE</div><div class="ttdoc">Native GEMM kernel with configurable block size.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">arm_compute::DimensionRoundingType::CEIL</a></div><div class="ttdeci">@ CEIL</div><div class="ttdoc">Ceil rounding.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae4ed430701598bfaba04ee2dea5f0b0a"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae4ed430701598bfaba04ee2dea5f0b0a">arm_compute::ACL_SRC_3</a></div><div class="ttdeci">@ ACL_SRC_3</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df"><div class="ttname"><a href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df">acl::ExecutionMode::FastRerun</a></div><div class="ttdeci">@ FastRerun</div><div class="ttdoc">Prefer minimum latency in consecutive runs, might introduce higher startup times.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428eacfa76547a04ba6b033f38bc080e4e4c7">arm_compute::WINOGRAD</a></div><div class="ttdeci">@ WINOGRAD</div><div class="ttdoc">Winograd CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">CLTypes.h:86</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a2a36a93e164b484404fe908cefd6099a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">arm_compute::test::colorconvert_helper::detail::yuyv_to_rgb_calculation</a></div><div class="ttdeci">void yuyv_to_rgb_calculation(const SimpleTensor&lt; T &gt; yvec, const SimpleTensor&lt; T &gt; vvec, const SimpleTensor&lt; T &gt; yyvec, const SimpleTensor&lt; T &gt; uvec, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00159">ColorConvertHelper.h:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a142b55a483cadf4e1068a1a09a55e8e9"><div class="ttname"><a href="namespacearm__compute.xhtml#a142b55a483cadf4e1068a1a09a55e8e9">arm_compute::string_from_data_type</a></div><div class="ttdeci">const std::string &amp; string_from_data_type(DataType dt)</div><div class="ttdoc">Convert a data type identity into a string.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8cpp_source.xhtml#l00031">DataTypeUtils.cpp:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">Scale.cpp:262</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aeb6881009f40f57d430752441ec5c4f4"><div class="ttname"><a href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">arm_compute::wrap_around</a></div><div class="ttdeci">T wrap_around(T x, T m)</div><div class="ttdoc">Wrap-around a number within the range 0 &lt;= x &lt; m.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00277">Helpers.h:277</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">arm_compute::ReductionOperation::MEAN_SUM</a></div><div class="ttdeci">@ MEAN_SUM</div><div class="ttdoc">Mean of sum.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3acf78eb6afcc61f0ecf63d21d66e96d2e">arm_compute::GPUTarget::G715</a></div><div class="ttdeci">@ G715</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85">acl::StatusCode::UnsupportedConfig</a></div><div class="ttdeci">@ UnsupportedConfig</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0dc6fb54ac0bbc7bf512fe0ca7414076"><div class="ttname"><a href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">arm_compute::get_target_from_name</a></div><div class="ttdeci">GPUTarget get_target_from_name(const std::string &amp;device_name)</div><div class="ttdoc">Helper function to get the GPU target from a device name.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00188">GPUTarget.cpp:188</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ac2e09218cbf70ed9ba3923c4504d2924"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ac2e09218cbf70ed9ba3923c4504d2924">arm_compute::ACL_SRC_6</a></div><div class="ttdeci">@ ACL_SRC_6</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00051">Types.h:51</a></div></div>
<div class="ttc" id="anamespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_acac1575c0edd329ceb4a54d9fe8dcb08"><div class="ttname"><a href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">arm_compute::DIV_CEIL</a></div><div class="ttdeci">constexpr auto DIV_CEIL(S val, T m) -&gt; decltype((val+m - 1)/m)</div><div class="ttdoc">Calculate the rounded up quotient of val / m.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00037">Math.h:37</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00482">Acl.hpp:482</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">arm_compute::ACL_SRC_END</a></div><div class="ttdeci">@ ACL_SRC_END</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00052">Types.h:52</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_mat_mul_kernel_info_xhtml_a9cf53ea969f7eb15888a94dcdb8e6d2d"><div class="ttname"><a href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a9cf53ea969f7eb15888a94dcdb8e6d2d">arm_compute::MatMulKernelInfo::m0</a></div><div class="ttdeci">int m0</div><div class="ttdoc">Number of output rows processed by each work-item.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00247">KernelDescriptors.h:247</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828aff6d498c21961fa2f6228178fa16b179"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aff6d498c21961fa2f6228178fa16b179">arm_compute::ACL_INT_4</a></div><div class="ttdeci">@ ACL_INT_4</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00067">Types.h:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">arm_compute::ActivationFunction::SOFT_RELU</a></div><div class="ttdeci">@ SOFT_RELU</div><div class="ttdoc">Soft Rectifier (  )</div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_afe3908fe41d9f2559f4a9eab1997fe61"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">arm_compute::quantization::rounding_divide_by_pow2</a></div><div class="ttdeci">int32_t rounding_divide_by_pow2(int32_t x, int exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent, copied from NEMath.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00260">AsymmHelpers.cpp:260</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a></div><div class="ttdeci">@ G</div><div class="ttdoc">Green channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532">arm_compute::BilinearInterpolation::BILINEAR_OLD_NEW</a></div><div class="ttdeci">@ BILINEAR_OLD_NEW</div><div class="ttdoc">Old-new method.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">arm_compute::ActivationFunction::BOUNDED_RELU</a></div><div class="ttdeci">@ BOUNDED_RELU</div><div class="ttdoc">Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdeci">@ S8</div><div class="ttdoc">signed 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">arm_compute::ActivationFunction::TANH</a></div><div class="ttdeci">@ TANH</div><div class="ttdoc">Hyperbolic tangent (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad3137e73dbd78133d25751abd84540d8"><div class="ttname"><a href="namespacearm__compute.xhtml#ad3137e73dbd78133d25751abd84540d8">arm_compute::error_on_data_type_channel_not_in</a></div><div class="ttdeci">arm_compute::Status error_on_data_type_channel_not_in(const char *function, const char *file, const int line, const ITensor *tensor, size_t num_channels, T &amp;&amp;dt, Ts &amp;&amp;...dts)</div><div class="ttdoc">Return an error if the data type or the number of channels of the passed tensor does not match any of...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00936">Validate.h:936</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::ElementWiseUnary::RSQRT</a></div><div class="ttdeci">@ RSQRT</div><div class="ttdoc">Reverse square root.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a6004ef5c66f38e0e45ff8fcc8a30392a"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">arm_compute::support::cpp11::snprintf</a></div><div class="ttdeci">int snprintf(char *s, std::size_t n, const char *fmt, Ts &amp;&amp;...args)</div><div class="ttdoc">Loads the data from the given location, converts them to character string equivalents and writes the ...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00270">ToolchainSupport.h:270</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">Validate.h:677</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541">arm_compute::WeightFormat::OHWI</a></div><div class="ttdeci">@ OHWI</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a566497df1ac44164eb8643f5d469afae"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">arm_compute::wrapper::vpow</a></div><div class="ttdeci">float32x4_t vpow(const float32x4_t &amp;a, const float32x4_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pow_8h_source.xhtml#l00041">pow.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdeci">@ WIDTH</div><div class="ttdoc">width</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">Validate.h:952</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdeci">@ ACL_SRC_2</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7">arm_compute::WeightFormat::OHWIo32i8</a></div><div class="ttdeci">@ OHWIo32i8</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2aae6e50c78015ae9c9f6c03ef2c88356e"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2aae6e50c78015ae9c9f6c03ef2c88356e">AclOutOfMemory</a></div><div class="ttdeci">@ AclOutOfMemory</div><div class="ttdoc">Call failed due to failure to allocate resources.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00054">AclTypes.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdeci">@ QSYMM16</div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">arm_compute::Format::UV88</a></div><div class="ttdeci">@ UV88</div><div class="ttdoc">2 channel, 1 U8 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a115dca124dc6423c7a400b8a8a0270cc">arm_compute::Format::S64</a></div><div class="ttdeci">@ S64</div><div class="ttdoc">1 channel, 1 S64 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10">arm_compute::WeightFormat::OHWIo32</a></div><div class="ttdeci">@ OHWIo32</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::ArithmeticOperation::POWER</a></div><div class="ttdeci">@ POWER</div><div class="ttdoc">x ^ y</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ad395b44e1b70e860751ef71005a9f36a">arm_compute::GPUTarget::G615</a></div><div class="ttdeci">@ G615</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8c35748731709927597cb5a2c227e682"><div class="ttname"><a href="namespacearm__compute.xhtml#a8c35748731709927597cb5a2c227e682">arm_compute::compute_strides</a></div><div class="ttdeci">Strides compute_strides(const ITensorInfo &amp;info)</div><div class="ttdoc">Create a strides object based on the tensor dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2helpers_2_utils_8h_source.xhtml#l00063">Utils.h:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">arm_compute::CLTunerMode::EXHAUSTIVE</a></div><div class="ttdeci">@ EXHAUSTIVE</div><div class="ttdoc">Searches all possible LWS configurations while tuning.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac17b415bc5b5a1f5072ae28aab0f2013"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">Scale.cpp:214</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a34f809afe4f596c3c28e2f38e572253e"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a34f809afe4f596c3c28e2f38e572253e">arm_compute::GPUTarget::GPU_GENERATION_MASK</a></div><div class="ttdeci">@ GPU_GENERATION_MASK</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a56c32b3f13bb519e07dff500804e1a20">arm_compute::GPUTarget::G310</a></div><div class="ttdeci">@ G310</div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_aa2b9b52a4827eeb41f97f92a3781eee8"><div class="ttname"><a href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a></div><div class="ttdeci">const OutputStage &amp; output_stage</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00107">working_space.hpp:107</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_scale_kernel_info_xhtml_a317508a148d55ca7e093b9447c3366e7"><div class="ttname"><a href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">arm_compute::ScaleKernelInfo::data_layout</a></div><div class="ttdeci">DataLayout data_layout</div><div class="ttdoc">Data layout to use.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00234">KernelDescriptors.h:234</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9c673ade3003d5d4e28ebf5875795dc4"><div class="ttname"><a href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">arm_compute::convert_float32x4x4_to_int8x16</a></div><div class="ttdeci">void convert_float32x4x4_to_int8x16(const float32x4x4_t &amp;in, int8x16_t &amp;out)</div><div class="ttdoc">Converts from float32x4x4_t to just one int8x16_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00502">NEMath.inl:502</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a86a0c8e195c900a895c249662cfaa564a67d2f6740a8eaebf4d5c6f79be8da481"><div class="ttname"><a href="namespacearm__compute.xhtml#a86a0c8e195c900a895c249662cfaa564a67d2f6740a8eaebf4d5c6f79be8da481">arm_compute::FFTDirection::Forward</a></div><div class="ttdeci">@ Forward</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN</a></div><div class="ttdeci">@ QUANTIZE_DOWN</div><div class="ttdoc">Quantize using an integer multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">arm_compute::DetectionOutputLayerCodeType::CORNER</a></div><div class="ttdeci">@ CORNER</div><div class="ttdoc">Use box corners.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">arm_compute::GPUTarget::BIFROST</a></div><div class="ttdeci">@ BIFROST</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">arm_compute::DataLayoutDimension::DEPTH</a></div><div class="ttdeci">@ DEPTH</div><div class="ttdoc">depth</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">arm_compute::CLTunerMode::NORMAL</a></div><div class="ttdeci">@ NORMAL</div><div class="ttdoc">Searches a subset of LWS configurations while tuning.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2fa22dee7227625fa4516f267235667c"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2fa22dee7227625fa4516f267235667c">arm_compute::detail::for_each_error</a></div><div class="ttdeci">arm_compute::Status for_each_error(F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00114">Validate.h:114</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1">arm_compute::CLBackendType::Clvk</a></div><div class="ttdeci">@ Clvk</div><div class="ttdoc">CLVK backend.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828aedb025013d5c33ce9834fef9cfe70fcc"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aedb025013d5c33ce9834fef9cfe70fcc">arm_compute::ACL_DST_2</a></div><div class="ttdeci">@ ACL_DST_2</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00058">Types.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::RoundingPolicy::TO_NEAREST_UP</a></div><div class="ttdeci">@ TO_NEAREST_UP</div><div class="ttdoc">Rounds to nearest value; half rounds away from zero.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1b362fecc52ac83bcfbb0850549edce4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_uint8x16_to_float32x4x4(const uint8x16_t &amp;in)</div><div class="ttdoc">Converts from uint8x16 to float32x4x4_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00448">NEMath.inl:448</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::ElementWiseUnary::SIN</a></div><div class="ttdeci">@ SIN</div><div class="ttdoc">Sine.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::ErrorCode::RUNTIME_ERROR</a></div><div class="ttdeci">@ RUNTIME_ERROR</div><div class="ttdoc">Generic runtime error.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">arm_compute::DIRECT</a></div><div class="ttdeci">@ DIRECT</div><div class="ttdoc">Direct Convolution CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00082">CLTypes.h:82</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6589fb7cc98e0a9b5db1af65052f8f89">arm_compute::GPUTarget::G78AE</a></div><div class="ttdeci">@ G78AE</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00036">CoreTypes.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a17fc511e65612b716c9c2f34e096caea"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a17fc511e65612b716c9c2f34e096caea">arm_compute::ACL_SRC_5</a></div><div class="ttdeci">@ ACL_SRC_5</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00050">Types.h:50</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_mat_mul_kernel_info_xhtml_af7bba8a9fadb39652d5c9c8a800eb5c0"><div class="ttname"><a href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#af7bba8a9fadb39652d5c9c8a800eb5c0">arm_compute::MatMulKernelInfo::k0</a></div><div class="ttdeci">int k0</div><div class="ttdoc">Number of inner accumulations.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00249">KernelDescriptors.h:249</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00065">SaturateCast.h:65</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ElementWiseUnary::ABS</a></div><div class="ttdeci">@ ABS</div><div class="ttdoc">Absolute value.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2829e9ffdb98c900b4bf5af09c2bb85ba596d9994cc5f04a23625d24d6b840246"><div class="ttname"><a href="namespacearm__compute.xhtml#a2829e9ffdb98c900b4bf5af09c2bb85ba596d9994cc5f04a23625d24d6b840246">arm_compute::ImportMemoryType::HostPtr</a></div><div class="ttdeci">@ HostPtr</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a">arm_compute::WeightFormat::OHWIo64</a></div><div class="ttdeci">@ OHWIo64</div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">arm_compute::ConvertPolicy::WRAP</a></div><div class="ttdeci">@ WRAP</div><div class="ttdoc">Wrap around.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a900072ec18ac254db40901425e2b35b2"><div class="ttname"><a href="namespacearm__compute.xhtml#a900072ec18ac254db40901425e2b35b2">arm_compute::error_on_mismatching_shapes</a></div><div class="ttdeci">arm_compute::Status error_on_mismatching_shapes(const char *function, const char *file, const int line, const ITensorInfo *tensor_info_1, const ITensorInfo *tensor_info_2, Ts... tensor_infos)</div><div class="ttdoc">Return an error if the passed two tensor infos have different shapes from the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00475">Validate.h:475</a></div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_a16acb36fde338eaff889484b213c953d"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#a16acb36fde338eaff889484b213c953d">clGetPlatformIDs</a></div><div class="ttdeci">cl_int clGetPlatformIDs(cl_uint num_entries, cl_platform_id *platforms, cl_uint *num_platforms)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00969">OpenCL.cpp:969</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::ComparisonOperation::Less</a></div><div class="ttdeci">@ Less</div><div class="ttdoc">Less comparison (  )</div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_ab05bd244cb8823c69d6dce6a23a758fd"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">SQUARED_DIFF</a></div><div class="ttdeci">#define SQUARED_DIFF(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00030">elementwise_operation_quantized.cl:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a79ff77f9b4506ad55c680f8849317b9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a79ff77f9b4506ad55c680f8849317b9f">arm_compute::get_layout_map</a></div><div class="ttdeci">const std::map&lt; DataLayout, std::vector&lt; DataLayoutDimension &gt; &gt; &amp; get_layout_map()</div><div class="ttdoc">Returns a static map used to find an index or dimension based on a data layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00107">Helpers.cpp:107</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31">arm_compute::WeightFormat::OHWIo4i8</a></div><div class="ttdeci">@ OHWIo4i8</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f">arm_compute::WeightFormat::OHWIo16i8</a></div><div class="ttdeci">@ OHWIo16i8</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">arm_compute::GPUTarget::G51</a></div><div class="ttdeci">@ G51</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a834b76c7d21af898f39def3b787d7530"><div class="ttname"><a href="namespacearm__compute.xhtml#a834b76c7d21af898f39def3b787d7530">arm_compute::data_layout_from_name</a></div><div class="ttdeci">arm_compute::DataLayout data_layout_from_name(const std::string &amp;name)</div><div class="ttdoc">Converts a string to a strong types enumeration DataLayout.</div><div class="ttdef"><b>Definition:</b> <a href="_type_loader_8cpp_source.xhtml#l00032">TypeLoader.cpp:32</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0">arm_compute::WeightFormat::OHWIo2i8</a></div><div class="ttdeci">@ OHWIo2i8</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_acf7db09d2dff587cd58187ed58eeec68"><div class="ttname"><a href="namespacearm__compute.xhtml#acf7db09d2dff587cd58187ed58eeec68">arm_compute::dequantize</a></div><div class="ttdeci">float dequantize(uint16_t value, float scale, int32_t offset)</div><div class="ttdoc">Dequantize a value given a 16-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00428">QuantizationInfo.h:428</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927">arm_compute::WeightFormat::OHWIo64i2</a></div><div class="ttdeci">@ OHWIo64i2</div></div>
<div class="ttc" id="astruct_coordinates2_d_xhtml_a6150e0515f7202e2fb518f7206ed97dc"><div class="ttname"><a href="struct_coordinates2_d.xhtml#a6150e0515f7202e2fb518f7206ed97dc">Coordinates2D::x</a></div><div class="ttdeci">int x</div><div class="ttdoc">The x coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00030">types.h:30</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml_ae3a44e5d711e5707a9d974d085bcccdd"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#ae3a44e5d711e5707a9d974d085bcccdd">arm_compute::CPUInfo::has_bf16</a></div><div class="ttdeci">bool has_bf16() const</div><div class="ttdoc">Checks if the cpu model supports bf16.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00064">CPPTypes.cpp:64</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdeci">@ ACL_DST_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a3731064380218cfc2b9613d2b6293cfb">arm_compute::GPUTarget::G52</a></div><div class="ttdeci">@ G52</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">arm_compute::ReductionOperation::SUM_SQUARE</a></div><div class="ttdeci">@ SUM_SQUARE</div><div class="ttdoc">Sum of squares.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdeci">@ B</div><div class="ttdoc">Blue channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a92fd9c05491d0e6c9fb94405c8faae11"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a92fd9c05491d0e6c9fb94405c8faae11">AclInvalidTarget</a></div><div class="ttdeci">@ AclInvalidTarget</div><div class="ttdoc">Call failed as invalid argument was passed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00057">AclTypes.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">arm_compute::PaddingMode::REFLECT</a></div><div class="ttdeci">@ REFLECT</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">arm_compute::DetectionOutputLayerCodeType::TF_CENTER</a></div><div class="ttdeci">@ TF_CENTER</div><div class="ttdoc">Use box centers and size but flip x and y co-ordinates.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5bdbea98a86ef8fc1e2d0126c56b9809"><div class="ttname"><a href="namespacearm__compute.xhtml#a5bdbea98a86ef8fc1e2d0126c56b9809">arm_compute::error_on_unsupported_cpu_bf16</a></div><div class="ttdeci">Status error_on_unsupported_cpu_bf16(const char *function, const char *file, const int line, const ITensorInfo *tensor_info)</div><div class="ttdoc">Return an error if the data type of the passed tensor info is BFLOAT16 and BFLOAT16 support is not co...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00066">Validate.h:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197"><div class="ttname"><a href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197">arm_compute::CLImage2DType::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d">arm_compute::WeightFormat::OHWIo8i2_bf16</a></div><div class="ttdeci">@ OHWIo8i2_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">arm_compute::ActivationFunction::LEAKY_RELU</a></div><div class="ttdeci">@ LEAKY_RELU</div><div class="ttdoc">Leaky Rectifier (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdeci">@ HEIGHT</div><div class="ttdoc">height</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml_a0647761f309e3b3edb5a5501b3ff38d2"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a0647761f309e3b3edb5a5501b3ff38d2">arm_compute::CPUInfo::has_fp16</a></div><div class="ttdeci">bool has_fp16() const</div><div class="ttdoc">Checks if the cpu model supports fp16.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00059">CPPTypes.cpp:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00309">QuantizationInfo.h:309</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a634a498326dcb5b1f977bc1653f64a70"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a634a498326dcb5b1f977bc1653f64a70">arm_compute::ACL_INT_1</a></div><div class="ttdeci">@ ACL_INT_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00064">Types.h:64</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdeci">@ AVG</div><div class="ttdoc">Average Pooling.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828aa5dda325fa2f2394df27cf813b3ffe47"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828aa5dda325fa2f2394df27cf813b3ffe47">arm_compute::ACL_SRC_4</a></div><div class="ttdeci">@ ACL_SRC_4</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00049">Types.h:49</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_afbec2094d42590b94e7eead93710411d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uchar input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from 8-bit asymmetric to floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00062">helpers_asymm.h:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">arm_compute::ActivationFunction::IDENTITY</a></div><div class="ttdeci">@ IDENTITY</div><div class="ttdoc">Identity (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532">arm_compute::BitwiseOperation::AND</a></div><div class="ttdeci">@ AND</div><div class="ttdoc">Bitwise AND operation.</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">acl::StatusCode::InvalidArgument</a></div><div class="ttdeci">@ InvalidArgument</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab801dca7a1e1cfb228bb169e846b74f9"><div class="ttname"><a href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">arm_compute::is_data_type_quantized_asymmetric_signed</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric_signed(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized signed type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00365">DataTypeUtils.h:365</a></div></div>
<div class="ttc" id="autils_2_type_printer_8h_xhtml_ab300564c32cc9f62fb5f79854b4368b6"><div class="ttname"><a href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a></div><div class="ttdeci">#define __CASE_WEIGHT_FORMAT(wf)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a2ea9f63fa9d0189f82257ca7d35740ff"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2ea9f63fa9d0189f82257ca7d35740ff">arm_compute::mlgo::parser::gemm_type</a></div><div class="ttdeci">GEMMType gemm_type(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00560">MLGOParser.cpp:560</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee">arm_compute::WeightFormat::OHWIo16i2_bf16</a></div><div class="ttdeci">@ OHWIo16i2_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde">arm_compute::WeightFormat::OHWIo4i2</a></div><div class="ttdeci">@ OHWIo4i2</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af0a4d6be70322c742c12da1edccbb74da465202c26fd7181c6bc9a80648499073"><div class="ttname"><a href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74da465202c26fd7181c6bc9a80648499073">arm_compute::MappingType::OFFSETS</a></div><div class="ttdeci">@ OFFSETS</div><div class="ttdoc">Mappings are in offset granularity in the same blob.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00036">Rounding.cpp:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">arm_compute::GPUTarget::G77</a></div><div class="ttdeci">@ G77</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fae0aa021e21dddbd6d8cecec71e9cf564"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fae0aa021e21dddbd6d8cecec71e9cf564">arm_compute::ErrorCode::OK</a></div><div class="ttdeci">@ OK</div><div class="ttdoc">No error.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a20d8490daa1cc6388fb00fd4d8a021d4"><div class="ttname"><a href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const arm_compute::CpuMatMulSettings &amp;settings)</div><div class="ttdoc">Formatted output of the arm_compute::CpuMatMulSettings type.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_type_printer_8h_source.xhtml#l03614">TypePrinter.h:3614</a></div></div>
<div class="ttc" id="a_c_p_p_types_8h_xhtml_aede6b5b56c3a6e01efde85e1545a4eb8"><div class="ttname"><a href="_c_p_p_types_8h.xhtml#aede6b5b56c3a6e01efde85e1545a4eb8">ARM_COMPUTE_CPU_MODEL_LIST</a></div><div class="ttdeci">#define ARM_COMPUTE_CPU_MODEL_LIST</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00038">CPPTypes.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_mat_mul_info_xhtml_a72df5776428a994c4749bf12e1b6dceb"><div class="ttname"><a href="classarm__compute_1_1_mat_mul_info.xhtml#a72df5776428a994c4749bf12e1b6dceb">arm_compute::MatMulInfo::adj_lhs</a></div><div class="ttdeci">bool adj_lhs() const</div><div class="ttdef"><b>Definition:</b> <a href="_mat_mul_info_8h_source.xhtml#l00035">MatMulInfo.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_af21c7fddee28e9aa0a37c633300db0e0"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">arm_compute::QuantizationInfo::scale</a></div><div class="ttdeci">const std::vector&lt; float &gt; &amp; scale() const</div><div class="ttdoc">Scale vector accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo.h:116</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d"><div class="ttname"><a href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d">arm_compute::FuseBatchNormalizationType::CONVOLUTION</a></div><div class="ttdeci">@ CONVOLUTION</div><div class="ttdoc">For Convolution weights.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdeci">@ QASYMM8_SIGNED</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaaab31fd732b950bf0d4b98f00e259c0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">arm_compute::test::validation::scale_y</a></div><div class="ttdeci">const float scale_y</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">Scale.cpp:260</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71">acl::StatusCode::InvalidTarget</a></div><div class="ttdeci">@ InvalidTarget</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">arm_compute::Channel::C1</a></div><div class="ttdeci">@ C1</div><div class="ttdoc">Second channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1b09fc16ab06a02188334c4b1f43e2ff"><div class="ttname"><a href="namespacearm__compute.xhtml#a1b09fc16ab06a02188334c4b1f43e2ff">arm_compute::dequantize_qasymm16</a></div><div class="ttdeci">float dequantize_qasymm16(uint16_t value, const QuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 16-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00534">QuantizationInfo.h:534</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdeci">@ REPLICATE</div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a2672804f792afdd929168feaf803fee8">arm_compute::GPUTarget::G510</a></div><div class="ttdeci">@ G510</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::ComparisonOperation::NotEqual</a></div><div class="ttdeci">@ NotEqual</div><div class="ttdoc">NotEqual comparison (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0">arm_compute::WeightFormat::OHWIo16i4</a></div><div class="ttdeci">@ OHWIo16i4</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121">arm_compute::WeightFormat::OHWIo64i4</a></div><div class="ttdeci">@ OHWIo64i4</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdeci">@ SATURATE</div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59cc7dde3c479fa90260c12c992f2cae"><div class="ttname"><a href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">arm_compute::float_to_string_with_full_precision</a></div><div class="ttdeci">std::string float_to_string_with_full_precision(float val)</div><div class="ttdoc">Create a string with the float in full precision.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00052">StringUtils.cpp:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">arm_compute::CLTunerMode::RAPID</a></div><div class="ttdeci">@ RAPID</div><div class="ttdoc">Searches a minimal subset of LWS configurations while tuning.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aab39ce9a593f7e12a4bf4cb47272b917"><div class="ttname"><a href="namespacearm__compute.xhtml#aab39ce9a593f7e12a4bf4cb47272b917">arm_compute::gpu_target_is_in</a></div><div class="ttdeci">bool gpu_target_is_in(GPUTarget target_to_check, GPUTarget target)</div><div class="ttdoc">Variant of gpu_target_is_in for comparing two targets.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00115">GPUTarget.h:115</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079"><div class="ttname"><a href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079">arm_compute::DepthwiseConvolutionFunction::OPTIMIZED</a></div><div class="ttdeci">@ OPTIMIZED</div><div class="ttdoc">Optimized Depthwise Convolution.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84">arm_compute::ConvolutionMethod::GEMM_CONV2D</a></div><div class="ttdeci">@ GEMM_CONV2D</div><div class="ttdoc">Direct 2D GEMM convolution.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">arm_compute::Format::IYUV</a></div><div class="ttdeci">@ IYUV</div><div class="ttdoc">A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes.</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee"><div class="ttname"><a href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee">AclPreferFastRerun</a></div><div class="ttdeci">@ AclPreferFastRerun</div><div class="ttdoc">Prioritize performance when multiple iterations are performed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00073">AclTypes.h:73</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">NEBatchNormalizationLayerKernel.cpp:66</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a9da88e01e6f086c156eda117f84b89e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a9da88e01e6f086c156eda117f84b89e0">arm_compute::ACL_MULTIPLIERS</a></div><div class="ttdeci">@ ACL_MULTIPLIERS</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00080">Types.h:80</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">arm_compute::Format::RGBA8888</a></div><div class="ttdeci">@ RGBA8888</div><div class="ttdoc">4 channels, 1 U8 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee">arm_compute::WeightFormat::OHWIo4i4_bf16</a></div><div class="ttdeci">@ OHWIo4i4_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4"><div class="ttname"><a href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4">arm_compute::FuseBatchNormalizationType::DEPTHWISECONVOLUTION</a></div><div class="ttdeci">@ DEPTHWISECONVOLUTION</div><div class="ttdoc">For Depthwise Convolution weights.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d">arm_compute::BitwiseOperation::XOR</a></div><div class="ttdeci">@ XOR</div><div class="ttdoc">Bitwise XOR operation</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210">arm_compute::WeightFormat::OHWIo128</a></div><div class="ttdeci">@ OHWIo128</div></div>
<div class="ttc" id="a_error_8h_xhtml_ac90c3bce005225cbaa4a43740917bb58"><div class="ttname"><a href="_error_8h.xhtml#ac90c3bce005225cbaa4a43740917bb58">ARM_COMPUTE_ERROR_ON_LOC</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_LOC(cond, func, file, line)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00475">Error.h:475</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e">arm_compute::WeightFormat::OHWIo8i4_bf16</a></div><div class="ttdeci">@ OHWIo8i4_bf16</div></div>
<div class="ttc" id="a_error_8h_xhtml_a5e3e8db314706c6f3d822bafa3d8d761"><div class="ttname"><a href="_error_8h.xhtml#a5e3e8db314706c6f3d822bafa3d8d761">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG_VAR(cond, func, file, line, msg,...)</div><div class="ttdoc">If the condition is true, an error is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00265">Error.h:265</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo.h:140</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_af3b709fb668cf93ca09e2a46a2a031a8"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#af3b709fb668cf93ca09e2a46a2a031a8">ADD</a></div><div class="ttdeci">#define ADD(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00027">elementwise_operation_quantized.cl:27</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096">arm_compute::WeightFormat::OHWIo16i4_bf16</a></div><div class="ttdeci">@ OHWIo16i4_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::ElementWiseUnary::NEG</a></div><div class="ttdeci">@ NEG</div><div class="ttdoc">Negate.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">arm_compute::ActivationFunction::SQUARE</a></div><div class="ttdeci">@ SQUARE</div><div class="ttdoc">Square (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb">arm_compute::WeightFormat::OHWIo64i4_bf16</a></div><div class="ttdeci">@ OHWIo64i4_bf16</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09"><div class="ttname"><a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09">arm_compute::DeviceType::NEON</a></div><div class="ttdeci">@ NEON</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">arm_compute::ReductionOperation::ARG_IDX_MAX</a></div><div class="ttdeci">@ ARG_IDX_MAX</div><div class="ttdoc">Index of the max value.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">arm_compute::Channel::C0</a></div><div class="ttdeci">@ C0</div><div class="ttdoc">Unknown channel format.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">arm_compute::NormType::IN_MAP_2D</a></div><div class="ttdeci">@ IN_MAP_2D</div><div class="ttdoc">Normalization applied within the same map in 2D region.</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7">acl::StatusCode::UnsupportedTarget</a></div><div class="ttdeci">@ UnsupportedTarget</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">arm_compute::Channel::C2</a></div><div class="ttdeci">@ C2</div><div class="ttdoc">Third channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="astruct_detection_window_xhtml_a8c5cd9b525ee73a24b1d9d8e34982d1c"><div class="ttname"><a href="struct_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">DetectionWindow::score</a></div><div class="ttdeci">float score</div><div class="ttdoc">Confidence value for the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00054">types.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a7586a308543e75989742667676cb102d"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a7586a308543e75989742667676cb102d">AclRuntimeError</a></div><div class="ttdeci">@ AclRuntimeError</div><div class="ttdoc">Call failed during execution.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00053">AclTypes.h:53</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">NEBatchNormalizationLayerKernel.cpp:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8">arm_compute::WeightFormat::OHWIo8</a></div><div class="ttdeci">@ OHWIo8</div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf0dd2db07cdbb966d6e385d3cd2605c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">arm_compute::test::validation::context</a></div><div class="ttdeci">auto context</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00167">DirectConv2d.cpp:167</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ab1618b1c126db67c17a2eb6f1e6b237a"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ab1618b1c126db67c17a2eb6f1e6b237a">arm_compute::ACL_SRC_VEC</a></div><div class="ttdeci">@ ACL_SRC_VEC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00068">Types.h:68</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::GPUTarget::MIDGARD</a></div><div class="ttdeci">@ MIDGARD</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a774ec1fdc7bd1e7973c866d13734bc21"><div class="ttname"><a href="namespacearm__compute.xhtml#a774ec1fdc7bd1e7973c866d13734bc21">arm_compute::error_on_data_type_not_in</a></div><div class="ttdeci">arm_compute::Status error_on_data_type_not_in(const char *function, const char *file, const int line, const ITensorInfo *tensor_info, T &amp;&amp;dt, Ts &amp;&amp;...dts)</div><div class="ttdoc">Return an error if the data type of the passed tensor info does not match any of the data types provi...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">Validate.h:801</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ae78a2afc8cb469d8629dc419237e5c68"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">arm_compute::test::validation::scale_x</a></div><div class="ttdeci">const float scale_x</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">Scale.cpp:259</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdeci">@ U8</div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler.cpp:112</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">arm_compute::GEMMLowpOutputStageType::NONE</a></div><div class="ttdeci">@ NONE</div><div class="ttdoc">No quantization.</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60">acl::StatusCode::InvalidObjectState</a></div><div class="ttdeci">@ InvalidObjectState</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a099c79a1240bbbd604928852fd806d05"><div class="ttname"><a href="namespacearm__compute.xhtml#a099c79a1240bbbd604928852fd806d05">arm_compute::error_on_unsupported_cpu_fp16</a></div><div class="ttdeci">Status error_on_unsupported_cpu_fp16(const char *function, const char *file, const int line, const ITensorInfo *tensor_info)</div><div class="ttdoc">Return an error if the data type of the passed tensor info is FP16 and FP16 support is not compiled i...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00042">Validate.h:42</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_aacc3ee1a7f283f8ef65cea31f4436a95"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a></div><div class="ttdeci">#define MAX(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00028">elementwise_operation_quantized.cl:28</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a></div><div class="ttdeci">@ UNSPECIFIED</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdeci">@ BILINEAR</div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00058">CoreTypes.h:58</a></div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_aa31e96a1fb21520f2e391b4f7f46f5a9"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a></div><div class="ttdeci">cl_mem clCreateImage(cl_context context, cl_mem_flags flags, const cl_image_format *image_format, const cl_image_desc *image_desc, void *host_ptr, cl_int *errcode_ret)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l01056">OpenCL.cpp:1056</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">Math.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a61f8cbac2c6d0cd9cefb09955648bd1c">arm_compute::GPUTarget::G68</a></div><div class="ttdeci">@ G68</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_af78b3c8c9ad65dcb4bfa1d2fee424308"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">TensorShape input_shape</div><div class="ttdoc">Validate test suite is to test ARM_COMPUTE_RETURN_ON_* macros we use to check the validity of given a...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00466">LSTMLayerQuantized.cpp:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aeeb430d3bc018806b9ef6143d11130ff">arm_compute::GPUTarget::G710</a></div><div class="ttdeci">@ G710</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">arm_compute::Format::YUYV422</a></div><div class="ttdeci">@ YUYV422</div><div class="ttdoc">A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes.</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a00f188d1f6cef6e569b31a95964d26ca"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a00f188d1f6cef6e569b31a95964d26ca">AclInvalidArgument</a></div><div class="ttdeci">@ AclInvalidArgument</div><div class="ttdoc">Call failed as invalid argument was passed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00058">AclTypes.h:58</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aba910b683652be1f65437ef37a9da2a9"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aba910b683652be1f65437ef37a9da2a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_QUANTIZATION_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_QUANTIZATION_INFO(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00753">Validate.h:753</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56b9e25c2e8731ca5488e7b3ccd66f58"><div class="ttname"><a href="namespacearm__compute.xhtml#a56b9e25c2e8731ca5488e7b3ccd66f58">arm_compute::string_from_data_layout</a></div><div class="ttdeci">const std::string &amp; string_from_data_layout(DataLayout dl)</div><div class="ttdoc">Convert a data layout identity into a string.</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_utils_8cpp_source.xhtml#l00030">DataLayoutUtils.cpp:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8cb8460f7fedf906ecab5621af891707a3a2d5fe857d8f9541136a124c2edec6c"><div class="ttname"><a href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707a3a2d5fe857d8f9541136a124c2edec6c">arm_compute::LogicalOperation::Or</a></div><div class="ttdeci">@ Or</div><div class="ttdoc">Logical Or ||.</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1">acl::StatusCode::RuntimeError</a></div><div class="ttdeci">@ RuntimeError</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></div><div class="ttdeci">GPUTarget</div><div class="ttdoc">Available GPU Targets.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00034">GPUTarget.h:34</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a94b64f1b45be794e8304c238e90be6b0"><div class="ttname"><a href="_error_8h.xhtml#a94b64f1b45be794e8304c238e90be6b0">ARM_COMPUTE_ERROR_LOC</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_LOC(func, file, line, msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00375">Error.h:375</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc">arm_compute::ACL_INT</a></div><div class="ttdeci">@ ACL_INT</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00062">Types.h:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a4b3e9b93a7e833f9d7ab01d4cf9f7837">arm_compute::GPUTarget::G52LIT</a></div><div class="ttdeci">@ G52LIT</div></div>
<div class="ttc" id="astructarm__compute_1_1_mat_mul_kernel_info_xhtml_a468d621d449f55787e9669d11238d6d9"><div class="ttname"><a href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a468d621d449f55787e9669d11238d6d9">arm_compute::MatMulKernelInfo::adj_lhs</a></div><div class="ttdeci">bool adj_lhs</div><div class="ttdoc">Get Adjoint LHS flag value.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00245">KernelDescriptors.h:245</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">arm_compute::Format::YUV444</a></div><div class="ttdeci">@ YUV444</div><div class="ttdoc">A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">arm_compute::Format::UYVY422</a></div><div class="ttdeci">@ UYVY422</div><div class="ttdoc">A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4ee01955c2dd8c14a0d107a36cb62618"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">arm_compute::convert_float32x4x4_to_uint8x16</a></div><div class="ttdeci">void convert_float32x4x4_to_uint8x16(const float32x4x4_t &amp;in, uint8x16_t &amp;out)</div><div class="ttdoc">Converts from two float32x4x4_t to just one uint8x16_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00495">NEMath.inl:495</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="astruct_detection_window_xhtml_a45b45124e843a937c3e256edbce64eea"><div class="ttname"><a href="struct_detection_window.xhtml#a45b45124e843a937c3e256edbce64eea">DetectionWindow::y</a></div><div class="ttdeci">ushort y</div><div class="ttdoc">Top-left y coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00050">types.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Channel::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">arm_compute::CLBackendType::Native</a></div><div class="ttdeci">@ Native</div><div class="ttdoc">OpenCL native backend.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdeci">@ FLOOR</div><div class="ttdoc">Floor rounding.</div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00062">QuantizationInfo.h:62</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846"><div class="ttname"><a href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846">AclGpuOcl</a></div><div class="ttdeci">@ AclGpuOcl</div><div class="ttdoc">OpenCL target for GPU.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00067">AclTypes.h:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a56d8f451f6b30093a49f1b4978681b07"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">arm_compute::CLScheduler::default_init</a></div><div class="ttdeci">void default_init(ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue used by the scheduler to default values and sets a default ...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00134">CLScheduler.cpp:134</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">arm_compute::GPUTarget::G76</a></div><div class="ttdeci">@ G76</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">arm_compute::ReductionOperation::ARG_IDX_MIN</a></div><div class="ttdeci">@ ARG_IDX_MIN</div><div class="ttdoc">Index of the min value.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9ad60d47682e81883cb85a8ca97f3460"><div class="ttname"><a href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">arm_compute::qsymm16x8x2_t</a></div><div class="ttdeci">int16x8x2_t qsymm16x8x2_t</div><div class="ttdoc">16 bit quantized symmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00039">NESymm.h:39</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e">acl::Target::Cpu</a></div><div class="ttdeci">@ Cpu</div><div class="ttdoc">Cpu target that leverages SIMD.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">arm_compute::DeviceType::CL</a></div><div class="ttdeci">@ CL</div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_a74e75242132eaabbc1c512488a135926"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">MIN</a></div><div class="ttdeci">#define MIN(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00029">elementwise_operation_quantized.cl:29</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_cpu_mat_mul_settings_xhtml_ae2d38726d9f14d748185f77798617c8a"><div class="ttname"><a href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml#ae2d38726d9f14d748185f77798617c8a">arm_compute::CpuMatMulSettings::fast_math</a></div><div class="ttdeci">bool fast_math() const</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_mat_mul_8h_source.xhtml#l00040">NEMatMul.h:40</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_a14f4c3a00d20ad742642767c9449993e"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_CORE(msg)</div><div class="ttdoc">Log information level message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00087">Log.h:87</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa9c9e5cad47e8136f7136e94cec8b812"><div class="ttname"><a href="namespacearm__compute.xhtml#aa9c9e5cad47e8136f7136e94cec8b812">arm_compute::tuner_mode_from_name</a></div><div class="ttdeci">CLTunerMode tuner_mode_from_name(const std::string &amp;name)</div><div class="ttdoc">Converts a string to a strong types enumeration CLTunerMode.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00057">CLTunerTypes.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">arm_compute::CLVersion::CL20</a></div><div class="ttdeci">@ CL20</div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00223">Types.h:223</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1">arm_compute::WeightFormat::OHWIo32i2_bf16</a></div><div class="ttdeci">@ OHWIo32i2_bf16</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3"><div class="ttname"><a href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3">acl::ExecutionMode::FastStart</a></div><div class="ttdeci">@ FastStart</div><div class="ttdoc">Prefer minimizing startup time.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea92aed3228e2f4b29698517b9f0a3689e"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea92aed3228e2f4b29698517b9f0a3689e">arm_compute::ELEMENTWISE</a></div><div class="ttdeci">@ ELEMENTWISE</div><div class="ttdoc">Elementwise CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00083">CLTypes.h:83</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7a314d37a14fb002f52a148122238499"><div class="ttname"><a href="namespacearm__compute.xhtml#a7a314d37a14fb002f52a148122238499">arm_compute::error_on_mismatching_shapes</a></div><div class="ttdeci">arm_compute::Status error_on_mismatching_shapes(const char *function, const char *file, const int line, unsigned int upper_dim, const ITensor *tensor_1, const ITensor *tensor_2, Ts... tensors)</div><div class="ttdoc">Return an error if the passed two tensors have different shapes from the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00556">Validate.h:556</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c4a5ca34ebb51d4e2e119a110e4c8f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c4a5ca34ebb51d4e2e119a110e4c8f0">arm_compute::device_supports_extension</a></div><div class="ttdeci">bool device_supports_extension(const cl::Device &amp;device, const char *extension_name)</div><div class="ttdoc">Helper function to check whether a given extension is supported.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00285">CLHelpers.cpp:285</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828acccf11c51785152d39207ba45ab1ab72"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828acccf11c51785152d39207ba45ab1ab72">arm_compute::ACL_INT_3</a></div><div class="ttdeci">@ ACL_INT_3</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00066">Types.h:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785">arm_compute::ACL_BIAS</a></div><div class="ttdeci">@ ACL_BIAS</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00074">Types.h:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdeci">@ A</div><div class="ttdoc">Alpha channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">arm_compute::ActivationFunction::LU_BOUNDED_RELU</a></div><div class="ttdeci">@ LU_BOUNDED_RELU</div><div class="ttdoc">Lower and Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa2f22cc01532e0236e438324310fdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#aa2f22cc01532e0236e438324310fdb94">arm_compute::has_format_horizontal_subsampling</a></div><div class="ttdeci">bool has_format_horizontal_subsampling(Format format)</div><div class="ttdoc">Return true if the given format has horizontal subsampling.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00304">Validate.h:304</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae9cd3d5db8015683dda5f39efa60e553"><div class="ttname"><a href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">arm_compute::create_image2d_from_buffer</a></div><div class="ttdeci">cl::Image2D create_image2d_from_buffer(const cl::Context &amp;ctx, const cl::Buffer &amp;buffer, const TensorShape &amp;shape2d, DataType data_type, size_t image_row_pitch, CLImage2DType image_type)</div><div class="ttdoc">Create a cl::Image2D object from an OpenCL buffer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00062">CLUtils.cpp:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">arm_compute::CPUModel::GENERIC</a></div><div class="ttdeci">@ GENERIC</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">arm_compute::ActivationFunction::RELU</a></div><div class="ttdeci">@ RELU</div><div class="ttdoc">Rectifier (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164">arm_compute::WeightFormat::OHWIo32i4</a></div><div class="ttdeci">@ OHWIo32i4</div></div>
<div class="ttc" id="astruct_detection_window_xhtml_ad4f986571659dd822695ca58dda00e49"><div class="ttname"><a href="struct_detection_window.xhtml#ad4f986571659dd822695ca58dda00e49">DetectionWindow::idx_class</a></div><div class="ttdeci">ushort idx_class</div><div class="ttdoc">Index of the class.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00053">types.h:53</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">arm_compute::Format::NV12</a></div><div class="ttdeci">@ NV12</div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">arm_compute::NMSType::LINEAR</a></div><div class="ttdeci">@ LINEAR</div><div class="ttdoc">Linear NMS.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a062b90d0a8defe70b0cd19300fee2825"><div class="ttname"><a href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const ClComponentElementwiseBinary::Attributes::ElementwiseOp &amp;op)</div><div class="ttdoc">Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...</div><div class="ttdef"><b>Definition:</b> <a href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">ElementwiseBinary.h:68</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1">arm_compute::NMSType::ORIGINAL</a></div><div class="ttdeci">@ ORIGINAL</div><div class="ttdoc">Original NMS.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">arm_compute::PaddingMode::SYMMETRIC</a></div><div class="ttdeci">@ SYMMETRIC</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a93203bd138078ed3c19f335d84f9b3cd"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a93203bd138078ed3c19f335d84f9b3cd">arm_compute::ACL_VEC_COL_SUM</a></div><div class="ttdeci">@ ACL_VEC_COL_SUM</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00078">Types.h:78</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64">arm_compute::BilinearInterpolation::BILINEAR_SCHARR</a></div><div class="ttdeci">@ BILINEAR_SCHARR</div><div class="ttdoc">Scharr method.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::ElementWiseUnary::EXP</a></div><div class="ttdeci">@ EXP</div><div class="ttdoc">Exponential.</div></div>
<div class="ttc" id="anamespaceclang__tidy__rules_xhtml_a1a6b6fb557d8d37d59700faf4e4c9167"><div class="ttname"><a href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">clang_tidy_rules.mode</a></div><div class="ttdeci">mode</div><div class="ttdef"><b>Definition:</b> <a href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules.py:196</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdeci">@ TO_ZERO</div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">arm_compute::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div><div class="ttdoc">Unknown CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00080">CLTypes.h:80</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a85c38583df1a7998d58c51f7c3d4b354"><div class="ttname"><a href="namespacearm__compute.xhtml#a85c38583df1a7998d58c51f7c3d4b354">arm_compute::error_on_mismatching_data_types</a></div><div class="ttdeci">arm_compute::Status error_on_mismatching_data_types(const char *function, const char *file, const int line, const ITensorInfo *tensor_info, Ts... tensor_infos)</div><div class="ttdoc">Return an error if the passed two tensor infos have different data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00640">Validate.h:640</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">arm_compute::GPUTarget::GPU_ARCH_MASK</a></div><div class="ttdeci">@ GPU_ARCH_MASK</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div><div class="ttdeci">@ SIZET</div><div class="ttdoc">size_t</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a></div><div class="ttdeci">@ R</div><div class="ttdoc">Red channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00304">DataTypeUtils.h:304</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_a49f6fecffd852cda3b0ece53dcbb2b87"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">DIV</a></div><div class="ttdeci">#define DIV(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00032">elementwise_operation_quantized.cl:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">arm_compute::NormType::CROSS_MAP</a></div><div class="ttdeci">@ CROSS_MAP</div><div class="ttdoc">Normalization applied cross maps.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a97428e76ac2940d45fc9772854b7fd8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">arm_compute::get_cl_image_pitch_alignment</a></div><div class="ttdeci">size_t get_cl_image_pitch_alignment(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the cl_image pitch alignment in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00382">CLHelpers.cpp:382</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa4361824f1748299245ef0ad0cb7d6111"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa4361824f1748299245ef0ad0cb7d6111">arm_compute::CLGEMMKernelType::RESHAPED_ONLY_RHS_MMUL</a></div><div class="ttdeci">@ RESHAPED_ONLY_RHS_MMUL</div><div class="ttdoc">Reshaped GEMM kernel where only the rhs matrix is reshaped.</div></div>
<div class="ttc" id="astructarm__compute_1_1_mat_mul_kernel_info_xhtml_a20f077d014370923ca23fd8eeceac94b"><div class="ttname"><a href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a20f077d014370923ca23fd8eeceac94b">arm_compute::MatMulKernelInfo::export_rhs_to_cl_image</a></div><div class="ttdeci">bool export_rhs_to_cl_image</div><div class="ttdoc">Flag to know whether the RHS tensor should be exported to cl_image.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00250">KernelDescriptors.h:250</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::ComparisonOperation::GreaterEqual</a></div><div class="ttdeci">@ GreaterEqual</div><div class="ttdoc">Greater equal comparison (  )</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a15541ee1af263ccf663a5dc23de9fb89"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">arm_compute::test::validation::src_info</a></div><div class="ttdeci">TensorInfo src_info(src_shape, 1, data_type)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::CLGEMMKernelType::RESHAPED</a></div><div class="ttdeci">@ RESHAPED</div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00346">DataTypeUtils.h:346</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdeci">@ U</div><div class="ttdoc">Cb/U channel.</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b">arm_compute::WeightFormat::OHWIo16i2</a></div><div class="ttdeci">@ OHWIo16i2</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3add5cf3b4cb835f0b8ce7ccbb09c0ea15">arm_compute::GPUTarget::G57</a></div><div class="ttdeci">@ G57</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a66b6c9e5773b956efa07dafa508ea41a"><div class="ttname"><a href="namespacearm__compute.xhtml#a66b6c9e5773b956efa07dafa508ea41a">arm_compute::IImage</a></div><div class="ttdeci">ITensor IImage</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00100">ITensor.h:100</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdeci">@ NEAREST_NEIGHBOR</div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">1 channel, 1 F16 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d">arm_compute::BitwiseOperation::NOT</a></div><div class="ttdeci">@ NOT</div><div class="ttdoc">Bitwise NOT operation.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">arm_compute::SamplingPolicy::CENTER</a></div><div class="ttdeci">@ CENTER</div><div class="ttdoc">Samples are taken at pixel center.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af4a7d06572ce2a9c8c8fb3e37f1bb1d4"><div class="ttname"><a href="namespacearm__compute.xhtml#af4a7d06572ce2a9c8c8fb3e37f1bb1d4">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const QuantizationInfo &amp;qinfo)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00469">QuantizationInfo.h:469</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00324">DataTypeUtils.h:324</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af0a4d6be70322c742c12da1edccbb74daac354f9e7a5097598cdd933b42fd190e"><div class="ttname"><a href="namespacearm__compute.xhtml#af0a4d6be70322c742c12da1edccbb74daac354f9e7a5097598cdd933b42fd190e">arm_compute::MappingType::BLOBS</a></div><div class="ttdeci">@ BLOBS</div><div class="ttdoc">Mappings are in blob granularity.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2065fcea8e34c2f3ee039d5a0332348b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">arm_compute::cpu::channel_idx</a></div><div class="ttdeci">const size_t channel_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">impl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6">arm_compute::DeconvolutionMethod::UPSCALE_CONV2D</a></div><div class="ttdeci">@ UPSCALE_CONV2D</div><div class="ttdoc">Deconvolution with Upscaling.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a64e6501d564e950c3d527fb6b1f36f28"><div class="ttname"><a href="namespacearm__compute.xhtml#a64e6501d564e950c3d527fb6b1f36f28">arm_compute::data_type_from_name</a></div><div class="ttdeci">DataType data_type_from_name(const std::string &amp;name)</div><div class="ttdoc">Convert a string to DataType.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8cpp_source.xhtml#l00058">DataTypeUtils.cpp:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a5007ca2bff93e4fc849e1f147501a6ea"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5007ca2bff93e4fc849e1f147501a6ea">arm_compute::ACL_INT_VEC</a></div><div class="ttdeci">@ ACL_INT_VEC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00070">Types.h:70</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee">acl::StatusCode::Unimplemented</a></div><div class="ttdeci">@ Unimplemented</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a50617012493fc796beb28d94e4da33c7"><div class="ttname"><a href="namespacearm__compute.xhtml#a50617012493fc796beb28d94e4da33c7">arm_compute::select_preferable_platform</a></div><div class="ttdeci">cl::Platform select_preferable_platform(CLBackendType cl_backend_type)</div><div class="ttdoc">This function selects the OpenCL platform based on the backend type.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00084">CLHelpers.cpp:84</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">arm_compute::ACL_SRC</a></div><div class="ttdeci">@ ACL_SRC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdeci">@ S16</div><div class="ttdoc">1 channel, 1 S16 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">arm_compute::GPUTarget::G71</a></div><div class="ttdeci">@ G71</div></div>
<div class="ttc" id="aclassarm__compute_1_1_mat_mul_info_xhtml_a39f307e04480a663f207874d42b73347"><div class="ttname"><a href="classarm__compute_1_1_mat_mul_info.xhtml#a39f307e04480a663f207874d42b73347">arm_compute::MatMulInfo::adj_rhs</a></div><div class="ttdeci">bool adj_rhs() const</div><div class="ttdef"><b>Definition:</b> <a href="_mat_mul_info_8h_source.xhtml#l00040">MatMulInfo.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::DataLayoutDimension::BATCHES</a></div><div class="ttdeci">@ BATCHES</div><div class="ttdoc">batches</div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_aaf342694786e1e468c55431205f36ced"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#aaf342694786e1e468c55431205f36ced">clSetKernelExecInfo</a></div><div class="ttdeci">cl_int clSetKernelExecInfo(cl_kernel kernel, cl_kernel_exec_info param_name, size_t param_value_size, const void *param_value)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l01080">OpenCL.cpp:1080</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">arm_compute::DetectionOutputLayerCodeType::CENTER_SIZE</a></div><div class="ttdeci">@ CENTER_SIZE</div><div class="ttdoc">Use box centers and size.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd">arm_compute::WeightFormat::OHWIo4</a></div><div class="ttdeci">@ OHWIo4</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9">arm_compute::WeightFormat::OHWIo16</a></div><div class="ttdeci">@ OHWIo16</div></div>
<div class="ttc" id="a_error_8h_xhtml_a1f6cdb912f3c70a81f27c62ff3f1c569"><div class="ttname"><a href="_error_8h.xhtml#a1f6cdb912f3c70a81f27c62ff3f1c569">ARM_COMPUTE_CREATE_ERROR_LOC</a></div><div class="ttdeci">#define ARM_COMPUTE_CREATE_ERROR_LOC(error_code, func, file, line, msg)</div><div class="ttdoc">Creates an error on location with a given message.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00169">Error.h:169</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ead7beedb1bf6bfae8111da26424266675"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ead7beedb1bf6bfae8111da26424266675">arm_compute::CLVersion::CL12</a></div><div class="ttdeci">@ CL12</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2daf774ab1f2b95de283245a361d455f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">arm_compute::cpu::width_idx</a></div><div class="ttdeci">const size_t width_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">impl.h:37</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd">acl::StatusCode::OutOfMemory</a></div><div class="ttdeci">@ OutOfMemory</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">arm_compute::GPUTarget::G51LIT</a></div><div class="ttdeci">@ G51LIT</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae69217acf0f0b5d4de030a09ad50a0bc"><div class="ttname"><a href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">arm_compute::get_min_max</a></div><div class="ttdeci">std::tuple&lt; PixelValue, PixelValue &gt; get_min_max(DataType dt)</div><div class="ttdoc">Compute the mininum and maximum values a data type can take.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00195">DataTypeUtils.h:195</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div><div class="ttdeci">@ CONSTANT</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd"><div class="ttname"><a href="namespacearm__compute.xhtml#a030e4a7f3aa9ea2d6c4e3e6eb94a2fdd">arm_compute::operator==</a></div><div class="ttdeci">bool operator==(const UniformQuantizationInfo &amp;lhs, const UniformQuantizationInfo &amp;rhs)</div><div class="ttdoc">Check whether two quantization info are equal.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00185">QuantizationInfo.h:185</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626">arm_compute::WeightFormat::OHWIo8i8</a></div><div class="ttdeci">@ OHWIo8i8</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616">arm_compute::BitwiseOperation::OR</a></div><div class="ttdeci">@ OR</div><div class="ttdoc">Bitwise OR operation</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">arm_compute::GPUTarget::T600</a></div><div class="ttdeci">@ T600</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::CLGEMMKernelType::RESHAPED_ONLY_RHS</a></div><div class="ttdeci">@ RESHAPED_ONLY_RHS</div><div class="ttdoc">Reshaped GEMM kernel where only the rhs matrix is reshaped.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::Format::BFLOAT16</a></div><div class="ttdeci">@ BFLOAT16</div><div class="ttdoc">16-bit brain floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_aea5d1efe37933e02913aec84db5b9d4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00078">TensorShape.h:78</a></div></div>
<div class="ttc" id="astruct_coordinates2_d_xhtml_a0a2f84ed7838f07779ae24c5a9086d33"><div class="ttname"><a href="struct_coordinates2_d.xhtml#a0a2f84ed7838f07779ae24c5a9086d33">Coordinates2D::y</a></div><div class="ttdeci">int y</div><div class="ttdoc">The y coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00031">types.h:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">arm_compute::Channel::C3</a></div><div class="ttdeci">@ C3</div><div class="ttdoc">Fourth channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="a_error_8h_xhtml_ad5518fdae84a33ce6fbed540c6e89479"><div class="ttname"><a href="_error_8h.xhtml#ad5518fdae84a33ce6fbed540c6e89479">ARM_COMPUTE_THROW</a></div><div class="ttdeci">#define ARM_COMPUTE_THROW(ex)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00479">Error.h:479</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaa6c83d4d579e33c2e1b09f2e9825fcbc6"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6c83d4d579e33c2e1b09f2e9825fcbc6">arm_compute::ActivationFunction::GELU</a></div><div class="ttdeci">@ GELU</div><div class="ttdoc">GELU (  )</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a043270c1f50c73bf9f91fcc4570ccf0c"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">arm_compute::utility::foldl</a></div><div class="ttdeci">T &amp;&amp; foldl(F &amp;&amp;, T &amp;&amp;value)</div><div class="ttdoc">Base case of foldl.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00133">Utility.h:133</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00091">Dimensions.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8cb8460f7fedf906ecab5621af891707aa74c05d080620f087c4e523977230666"><div class="ttname"><a href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707aa74c05d080620f087c4e523977230666">arm_compute::LogicalOperation::Not</a></div><div class="ttdeci">@ Not</div><div class="ttdoc">Logical Not !</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2ad5aecf6979192fb01d94f1acf4844dcd"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2ad5aecf6979192fb01d94f1acf4844dcd">AclUnimplemented</a></div><div class="ttdeci">@ AclUnimplemented</div><div class="ttdoc">Call failed as requested capability is not implemented.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00055">AclTypes.h:55</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">acl::StatusCode::Success</a></div><div class="ttdeci">@ Success</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00111">Utility.h:111</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_mat_mul_kernel_info_xhtml_a26e6793dcfcd650c2616faf073af0ab1"><div class="ttname"><a href="structarm__compute_1_1_mat_mul_kernel_info.xhtml#a26e6793dcfcd650c2616faf073af0ab1">arm_compute::MatMulKernelInfo::n0</a></div><div class="ttdeci">int n0</div><div class="ttdoc">Number of output columns processed by each work-item.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00248">KernelDescriptors.h:248</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">acl::DataType::Unknown</a></div><div class="ttdeci">@ Unknown</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">arm_compute::ActivationFunction::SQRT</a></div><div class="ttdeci">@ SQRT</div><div class="ttdoc">Square root (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b"><div class="ttname"><a href="namespacearm__compute.xhtml#a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b">arm_compute::LogicalOperation::And</a></div><div class="ttdeci">@ And</div><div class="ttdoc">Logical And &amp;&amp;.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a></div><div class="ttdeci">@ QUANTIZE_DOWN_FIXEDPOINT</div><div class="ttdoc">Quantize using a fixed point multiplication.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00142">Dimensions.h:142</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">arm_compute::GEMM</a></div><div class="ttdeci">@ GEMM</div><div class="ttdoc">GEMM CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00084">CLTypes.h:84</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ElementWiseUnary::ROUND</a></div><div class="ttdeci">@ ROUND</div><div class="ttdoc">Round.</div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00068">ClWorkloadRuntime.cpp:68</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a267aa0d9caec7b4f4b87a702e03dfcbc"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a267aa0d9caec7b4f4b87a702e03dfcbc">arm_compute::ACL_DST_VEC</a></div><div class="ttdeci">@ ACL_DST_VEC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_a677990334379f5f91619bfc43af63c4a"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#a677990334379f5f91619bfc43af63c4a">clGetDeviceInfo</a></div><div class="ttdeci">cl_int clGetDeviceInfo(cl_device_id device, cl_device_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00904">OpenCL.cpp:904</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">arm_compute::Format::NV21</a></div><div class="ttdeci">@ NV21</div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a8201f58586be83622450924f1339d95d"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a8201f58586be83622450924f1339d95d">arm_compute::ACL_VEC_ROW_SUM</a></div><div class="ttdeci">@ ACL_VEC_ROW_SUM</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00077">Types.h:77</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680">arm_compute::ElementWiseUnary::LOGICAL_NOT</a></div><div class="ttdeci">@ LOGICAL_NOT</div><div class="ttdoc">Logical Not.</div></div>
<div class="ttc" id="anamespaceupdate__supported__ops_xhtml_a387137c43ed9616d39ba90e890d181eb"><div class="ttname"><a href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">update_supported_ops.format</a></div><div class="ttdeci">format</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops.py:405</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a3cbe27c31092df3dc1fa26c75f47e047"><div class="ttname"><a href="_error_8h.xhtml#a3cbe27c31092df3dc1fa26c75f47e047">ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG(cond, func, file, line, msg)</div><div class="ttdoc">If the condition is true, an error is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00285">Error.h:285</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">arm_compute::ActivationFunction::HARD_SWISH</a></div><div class="ttdeci">@ HARD_SWISH</div><div class="ttdoc">Hard-swish (  )</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aae7ed4b777e2220a1959b79a7834042c"><div class="ttname"><a href="namespacearm__compute.xhtml#aae7ed4b777e2220a1959b79a7834042c">arm_compute::dequantize_qsymm16</a></div><div class="ttdeci">float dequantize_qsymm16(int16_t value, const QuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 16-bit symmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00481">QuantizationInfo.h:481</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00245">TensorInfo.h:245</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00033">CLScheduler.cpp:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">arm_compute::ReductionOperation::SUM</a></div><div class="ttdeci">@ SUM</div><div class="ttdoc">Sum.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a595d09065a2c40fe303ea9bcd801c029">arm_compute::GPUTarget::G78</a></div><div class="ttdeci">@ G78</div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_aafc2c4f262a0686c07f86c7d2e1d8d14"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aafc2c4f262a0686c07f86c7d2e1d8d14">SUB</a></div><div class="ttdeci">#define SUB(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00026">elementwise_operation_quantized.cl:26</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a08ffa53eaabde3e18b003f8182ac09bf"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a08ffa53eaabde3e18b003f8182ac09bf">arm_compute::QuantizationInfo::offset</a></div><div class="ttdeci">const std::vector&lt; int32_t &gt; &amp; offset() const</div><div class="ttdoc">Offset vector accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo.h:124</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa7a641703a9c98932d775d915bf7a3e5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7a641703a9c98932d775d915bf7a3e5">arm_compute::wrapper::vrev64</a></div><div class="ttdeci">uint8x8_t vrev64(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="rev64_8h_source.xhtml#l00039">rev64.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">arm_compute::DataLayout::NDHWC</a></div><div class="ttdeci">@ NDHWC</div><div class="ttdoc">Num samples, depth, height, width, channels.</div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00222">Types.h:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa0ffe8be9137815d1266845a195c053c7">arm_compute::ErrorCode::UNSUPPORTED_EXTENSION_USE</a></div><div class="ttdeci">@ UNSUPPORTED_EXTENSION_USE</div><div class="ttdoc">Unsupported extension used.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdeci">@ U32</div><div class="ttdoc">1 channel, 1 U32 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">arm_compute::GPUTarget::G72</a></div><div class="ttdeci">@ G72</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af4587cd36ddbf2e4dde217d1a1007940"><div class="ttname"><a href="namespacearm__compute.xhtml#af4587cd36ddbf2e4dde217d1a1007940">arm_compute::error_on_nullptr</a></div><div class="ttdeci">arm_compute::Status error_on_nullptr(const char *function, const char *file, const int line, Ts &amp;&amp;...pointers)</div><div class="ttdoc">Create an error if one of the pointers is a nullptr.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00151">Validate.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">arm_compute::ActivationFunction::ELU</a></div><div class="ttdeci">@ ELU</div><div class="ttdoc">Exponential Linear Unit (  )</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9eaadb3a79f92eca8147eb99ae7d25ee8a65"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9eaadb3a79f92eca8147eb99ae7d25ee8a65">arm_compute::ActivationFunction::SWISH</a></div><div class="ttdeci">@ SWISH</div><div class="ttdoc">Swish (  )</div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_a4397ebd547b206a8f60555ec1d1e0397"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#a4397ebd547b206a8f60555ec1d1e0397">check_header_guards.extensions</a></div><div class="ttdeci">extensions</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00177">check_header_guards.py:177</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdeci">@ U16</div><div class="ttdoc">1 channel, 1 U16 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae7fcde610527b8fa3d9acdf398187962"><div class="ttname"><a href="namespacearm__compute.xhtml#ae7fcde610527b8fa3d9acdf398187962">arm_compute::error_on_channel_not_in</a></div><div class="ttdeci">arm_compute::Status error_on_channel_not_in(const char *function, const char *file, const int line, T cn, T &amp;&amp;channel, Ts &amp;&amp;...channels)</div><div class="ttdoc">Return an error if the channel is not in channels.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l01036">Validate.h:1036</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa6d92f521dc4f05ac7f4c856dcfe263e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">arm_compute::cpu::height_idx</a></div><div class="ttdeci">const size_t height_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">impl.h:38</a></div></div>
<div class="ttc" id="a_cl_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">ClIm2ColKernel.cpp:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::ElementWiseUnary::LOG</a></div><div class="ttdeci">@ LOG</div><div class="ttdoc">Natural Logarithm.</div></div>
<div class="ttc" id="a_error_8h_xhtml_aab9171b209dda7cc9bb560486674c9f6"><div class="ttname"><a href="_error_8h.xhtml#aab9171b209dda7cc9bb560486674c9f6">ARM_COMPUTE_RETURN_ERROR_ON_LOC</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_LOC(cond, func, file, line)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00307">Error.h:307</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li>
    <li class="footer">Generated on Mon Mar 18 2024 11:32:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
