<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/NEAsymm.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_asymm_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEAsymm.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_asymm_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020, 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_NEASYMM_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_NEASYMM_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_math_8h.xhtml">src/core/NEON/NEMath.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="intrinsics_8h.xhtml">src/core/NEON/wrapper/intrinsics/intrinsics.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">   34</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">qasymm8x8_t</a>   = uint8x8_t;   <span class="comment">/**&lt; 8 bit quantized asymmetric vector with 8 elements */</span></div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">   35</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">qasymm8x8x2_t</a> = uint8x8x2_t; <span class="comment">/**&lt; 8 bit quantized asymmetric vector with 16 elements */</span></div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">   36</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">qasymm8x8x3_t</a> = uint8x8x3_t; <span class="comment">/**&lt; 8 bit quantized asymmetric vector with 24 elements */</span></div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">   37</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">qasymm8x8x4_t</a> = uint8x8x4_t; <span class="comment">/**&lt; 8 bit quantized asymmetric vector with 32 elements */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">   38</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>  = uint8x16_t;  <span class="comment">/**&lt; 8 bit quantized asymmetric vector with 16 elements */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a25af73d07023d565ec84adc58aedfb80">   40</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a25af73d07023d565ec84adc58aedfb80">qasymm8x8_signed_t</a>   = int8x8_t;   <span class="comment">/**&lt; 8 bit quantized signed asymmetric vector with 8 elements */</span></div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa972284529f4dd47b3ae1d5d68ab1b71">   41</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#aa972284529f4dd47b3ae1d5d68ab1b71">qasymm8x8x2_signed_t</a> = int8x8x2_t; <span class="comment">/**&lt; 8 bit quantized signed asymmetric vector with 16 elements */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aaf0890e0e5842a84a6af5800d2bdcd78">   42</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#aaf0890e0e5842a84a6af5800d2bdcd78">qasymm8x8x3_signed_t</a> = int8x8x3_t; <span class="comment">/**&lt; 8 bit quantized signed asymmetric vector with 24 elements */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9f90599aecfeb44aed19db16d407c1c5">   43</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a9f90599aecfeb44aed19db16d407c1c5">qasymm8x8x4_signed_t</a> = int8x8x4_t; <span class="comment">/**&lt; 8 bit quantized signed asymmetric vector with 32 elements */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">   44</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>  = int8x16_t;  <span class="comment">/**&lt; 8 bit quantized signed asymmetric vector with 16 elements */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/** Perform a multiply-accumulate on all 16 components of a QASYMM8 vector</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * vd*vs + vo</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in] vd Input vector value in QASYMM8 format</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @param[in] vs Vector multiplier in F32 format. The multiplier value must be duplicated across all four lanes.</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @param[in] vo Vector addend in F32 format. The addend value must be duplicated across all four lanes.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @return A 16-component vector in QASYMM8 format, saturated to fit</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">template</span> &lt;RoundingPolicy round_policy = RoundingPolicy::TO_ZERO&gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> <a class="code" href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">vmlaq_qasymm8</a>(<a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> vd, float32x4_t vs, float32x4_t vo);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">/** Perform a multiply-accumulate on all 16 components of a QASYMM8_SIGNED vector</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * vd*vs + vo</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> * @param[in] vd Input vector value in QASYMM8_SIGNED format</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> * @param[in] vs Vector multiplier in F32 format. The multiplier value must be duplicated across all four lanes.</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * @param[in] vo Vector addend in F32 format. The addend value must be duplicated across all four lanes.</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> * @return A 16-component vector in QASYMM8_SIGNED format, saturated to fit</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> &lt;RoundingPolicy round_policy = RoundingPolicy::TO_ZERO&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> <a class="code" href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">vmlaq_qasymm8_signed</a>(<a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> vd, float32x4_t vs, float32x4_t vo);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/** Performs final quantization step on 16 elements</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @param[in] in_s32                        Input to be quantized.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * @param[in] result_fixedpoint_multiplier  Result multiplier parameter</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * @param[in] result_shift                  Result shift parameter</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * @param[in] result_offset_after_shift_s32 Result offset parameter</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * @param[in] min_u8                        Relu lower bound</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @param[in] max_u8                        Relu upper bound</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * @param[in] is_bounded_relu               Specified if a fused bounded relu should be applied</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @return Quantized values</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">   84</a></span>&#160;<span class="keyword">inline</span> uint8x16_t <a class="code" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">finalize_quantization</a>(int32x4x4_t &amp;in_s32,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                        <span class="keywordtype">int</span>          result_fixedpoint_multiplier,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                        int32_t      result_shift,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                        int32x4_t    result_offset_after_shift_s32,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                        uint8x16_t   min_u8,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                        uint8x16_t   max_u8,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                        <span class="keywordtype">bool</span>         is_bounded_relu)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">static</span> int32x4_t zero_s32 = vdupq_n_s32(0);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        in_s32.val[0] = vmulq_n_s32(in_s32.val[0], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        in_s32.val[1] = vmulq_n_s32(in_s32.val[1], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        in_s32.val[2] = vmulq_n_s32(in_s32.val[2], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        in_s32.val[3] = vmulq_n_s32(in_s32.val[3], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        in_s32.val[0] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[0], result_shift);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        in_s32.val[1] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[1], result_shift);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        in_s32.val[2] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[2], result_shift);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        in_s32.val[3] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[3], result_shift);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Add the offset terms</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Saturate negative values</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    in_s32.val[0] = vmaxq_s32(in_s32.val[0], zero_s32);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    in_s32.val[1] = vmaxq_s32(in_s32.val[1], zero_s32);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    in_s32.val[2] = vmaxq_s32(in_s32.val[2], zero_s32);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    in_s32.val[3] = vmaxq_s32(in_s32.val[3], zero_s32);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 = {{vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                 vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))}};</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Convert S16 to U8</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    uint8x16_t out_u8 = vcombine_u8(vqmovun_s16(in_s16.val[0]), vqmovun_s16(in_s16.val[1]));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        out_u8 = vmaxq_u8(out_u8, min_u8);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        out_u8 = vminq_u8(out_u8, max_u8);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> out_u8;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">/** Performs final quantization step on 16 elements</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> * @param[in] in_s32                        Input to be quantized.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * @param[in] result_fixedpoint_multiplier  Result multiplier parameter</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> * @param[in] result_shift                  Result shift parameter</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * @param[in] result_offset_after_shift_s32 Result offset parameter</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * @param[in] min_s8                        Relu lower bound</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * @param[in] max_s8                        Relu upper bound</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * @param[in] is_bounded_relu               Specified if a fused bounded relu should be applied</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * @return Quantized values</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a85083e9ceeceacbf1afe9dca946c0d7a">  161</a></span>&#160;<span class="keyword">inline</span> int8x16_t <a class="code" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">finalize_quantization</a>(int32x4x4_t &amp;in_s32,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                       <span class="keywordtype">int</span>          result_fixedpoint_multiplier,</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                       int32_t      result_shift,</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                       int32x4_t    result_offset_after_shift_s32,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                       int8x16_t    min_s8,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                       int8x16_t    max_s8,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                       <span class="keywordtype">bool</span>         is_bounded_relu)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        in_s32.val[0] = vmulq_n_s32(in_s32.val[0], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        in_s32.val[1] = vmulq_n_s32(in_s32.val[1], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        in_s32.val[2] = vmulq_n_s32(in_s32.val[2], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        in_s32.val[3] = vmulq_n_s32(in_s32.val[3], (1 &lt;&lt; (-result_shift)));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        in_s32.val[0] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[0], result_shift);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        in_s32.val[1] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[1], result_shift);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        in_s32.val[2] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[2], result_shift);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        in_s32.val[3] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_s32.val[3], result_shift);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Add the offset terms</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 = {{vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                 vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))}};</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Convert S16 to S8</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    int8x16_t out_s8 = vcombine_s8(vqmovn_s16(in_s16.val[0]), vqmovn_s16(in_s16.val[1]));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        out_s8 = vmaxq_s8(out_s8, min_s8);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        out_s8 = vminq_s8(out_s8, max_s8);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> out_s8;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">/** Performs final quantization step on 16 elements for symmetric quantization</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * @param[in] in_s32                        Input to be quantized.</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * @param[in] result_fixedpoint_multiplier  Result multiplier parameter</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> * @param[in] result_shift                  Result shift parameter</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * @param[in] result_offset_after_shift_s32 Result offset parameter</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * @param[in] min_s8                        Relu lower bound</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @param[in] max_s8                        Relu upper bound</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * @param[in] is_bounded_relu               Specified if a fused bounded relu should be applied</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @return Quantized values</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac45cafa8ee6ec21f435a6a9af190e40a">  230</a></span>&#160;<span class="keyword">inline</span> int8x16_t <a class="code" href="namespacearm__compute.xhtml#ac45cafa8ee6ec21f435a6a9af190e40a">finalize_quantization_symm</a>(int32x4x4_t       &amp;in_s32,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                            <span class="keyword">const</span> int32x4x4_t &amp;result_fixedpoint_multiplier,</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                            <span class="keyword">const</span> int32x4x4_t &amp;result_shift,</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                            <span class="keyword">const</span> int32x4_t   &amp;result_offset_after_shift_s32,</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                            <span class="keyword">const</span> int8x16_t   &amp;min_s8,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                            <span class="keyword">const</span> int8x16_t   &amp;max_s8,</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">bool</span>         is_bounded_relu)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keyword">static</span> int32x4_t one_s32 = vdupq_n_s32(1);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    int32x4x4_t res_shift_gt0 = {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        vqrdmulhq_s32(in_s32.val[0], result_fixedpoint_multiplier.val[0]),</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        vqrdmulhq_s32(in_s32.val[1], result_fixedpoint_multiplier.val[1]),</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        vqrdmulhq_s32(in_s32.val[2], result_fixedpoint_multiplier.val[2]),</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        vqrdmulhq_s32(in_s32.val[3], result_fixedpoint_multiplier.val[3]),</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    };</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    res_shift_gt0.val[0] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(res_shift_gt0.val[0], result_shift.val[0]);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    res_shift_gt0.val[1] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(res_shift_gt0.val[1], result_shift.val[1]);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    res_shift_gt0.val[2] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(res_shift_gt0.val[2], result_shift.val[2]);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    res_shift_gt0.val[3] = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(res_shift_gt0.val[3], result_shift.val[3]);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    int32x4x4_t res_shift_lt0 = {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        vmulq_s32(in_s32.val[0], vshlq_s32(one_s32, vnegq_s32(result_shift.val[0]))),</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        vmulq_s32(in_s32.val[1], vshlq_s32(one_s32, vnegq_s32(result_shift.val[1]))),</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        vmulq_s32(in_s32.val[2], vshlq_s32(one_s32, vnegq_s32(result_shift.val[2]))),</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        vmulq_s32(in_s32.val[3], vshlq_s32(one_s32, vnegq_s32(result_shift.val[3]))),</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    };</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    res_shift_lt0.val[0] = vqrdmulhq_s32(res_shift_lt0.val[0], result_fixedpoint_multiplier.val[0]);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    res_shift_lt0.val[1] = vqrdmulhq_s32(res_shift_lt0.val[1], result_fixedpoint_multiplier.val[1]);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    res_shift_lt0.val[2] = vqrdmulhq_s32(res_shift_lt0.val[2], result_fixedpoint_multiplier.val[2]);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    res_shift_lt0.val[3] = vqrdmulhq_s32(res_shift_lt0.val[3], result_fixedpoint_multiplier.val[3]);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="comment">// Select result depending on shift value</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> uint32x4x4_t mask_lt0 = {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        vcltzq_s32(result_shift.val[0]),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        vcltzq_s32(result_shift.val[1]),</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        vcltzq_s32(result_shift.val[2]),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        vcltzq_s32(result_shift.val[3]),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        vcltq_s32(result_shift.val[0], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        vcltq_s32(result_shift.val[1], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        vcltq_s32(result_shift.val[2], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        vcltq_s32(result_shift.val[3], vdupq_n_s32(0)),</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    };</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    in_s32.val[0] = vbslq_s32(mask_lt0.val[0], res_shift_lt0.val[0], res_shift_gt0.val[0]);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    in_s32.val[1] = vbslq_s32(mask_lt0.val[1], res_shift_lt0.val[1], res_shift_gt0.val[1]);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    in_s32.val[2] = vbslq_s32(mask_lt0.val[2], res_shift_lt0.val[2], res_shift_gt0.val[2]);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    in_s32.val[3] = vbslq_s32(mask_lt0.val[3], res_shift_lt0.val[3], res_shift_gt0.val[3]);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Add the offset terms</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Convert S32 to S16</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 = {{vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                 vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))}};</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Convert S16 to S8</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    int8x16_t out_s8 = vcombine_s8(vqmovn_s16(in_s16.val[0]), vqmovn_s16(in_s16.val[1]));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        out_s8 = vmaxq_s8(out_s8, min_s8);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        out_s8 = vminq_s8(out_s8, max_s8);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> out_s8;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">/** Performs final quantization step on single element</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> * @param[in] in_value                      Input to be quantized.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> * @param[in] result_fixedpoint_multiplier  Result multiplier parameter</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> * @param[in] result_shift                  Result shift parameter</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> * @param[in] result_offset_after_shift_s32 Result offset parameter</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> * @param[in] min_u8                        Relu lower bound</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> * @param[in] max_u8                        Relu upper bound</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> * @param[in] is_bounded_relu               Specified if a fused bounded relu should be applied</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> * @return Quantized value</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9a9dd002faea6691d344f60563f8b499">  318</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">finalize_quantization</a>(int32_t in_value,</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                     <span class="keywordtype">int</span>     result_fixedpoint_multiplier,</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                     int32_t result_shift,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                     int32_t result_offset_after_shift_s32,</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                     uint8_t min_u8,</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                     uint8_t max_u8,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                     <span class="keywordtype">bool</span>    is_bounded_relu)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    int32x4_t in_s32 = vdupq_n_s32(in_value);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        in_value = vgetq_lane_s32(</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            vqrdmulhq_n_s32(vmulq_n_s32(in_s32, (1 &lt;&lt; (-result_shift))), result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        in_value = vgetq_lane_s32(vqrdmulhq_n_s32(in_s32, result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="comment">// Shift value by result_shift_s32</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        in_value = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_value, result_shift);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// Add the offset term</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    in_value += result_offset_after_shift_s32;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Bound the result</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    uint8_t out_u8 = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(std::max&lt;int32_t&gt;(0, std::min&lt;int32_t&gt;(255, in_value)));</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        out_u8 = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(std::max(min_u8, std::min(max_u8, out_u8)));</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">return</span> out_u8;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">/** Performs final quantization step on single element</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"> * @param[in] in_value                      Input to be quantized.</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> * @param[in] result_fixedpoint_multiplier  Result multiplier parameter</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> * @param[in] result_shift                  Result shift parameter</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> * @param[in] result_offset_after_shift_s32 Result offset parameter</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment"> * @param[in] min_s8                        Relu lower bound</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"> * @param[in] max_s8                        Relu upper bound</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"> * @param[in] is_bounded_relu               Specified if a fused bounded relu should be applied</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"> * @return Quantized value</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a583648c2034fae18cf48b7177586da4f">  366</a></span>&#160;<span class="keyword">inline</span> int8_t <a class="code" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">finalize_quantization</a>(int32_t in_value,</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                    <span class="keywordtype">int</span>     result_fixedpoint_multiplier,</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                    int32_t result_shift,</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                    int32_t result_offset_after_shift_s32,</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                    int8_t  min_s8,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                    int8_t  max_s8,</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                    <span class="keywordtype">bool</span>    is_bounded_relu)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    int32x4_t in_s32 = vdupq_n_s32(in_value);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (result_shift &lt; 0)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        in_value = vgetq_lane_s32(</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            vqrdmulhq_n_s32(vmulq_n_s32(in_s32, (1 &lt;&lt; (-result_shift))), result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        in_value = vgetq_lane_s32(vqrdmulhq_n_s32(in_s32, result_fixedpoint_multiplier), 0);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="comment">// Shift value by result_shift_s32</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        in_value = <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(in_value, result_shift);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// Add the offset term</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    in_value += result_offset_after_shift_s32;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// Bound the result</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    int8_t out_s8 = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(std::max&lt;int32_t&gt;(-128, std::min&lt;int32_t&gt;(127, in_value)));</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span> (is_bounded_relu)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        out_s8 = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(std::max(min_s8, std::min(max_s8, out_s8)));</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> out_s8;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">/** Dequantize a neon vector holding 8 quantized values.</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"> * @param[in] qv Input values to be dequantized.</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">  410</a></span>&#160;<span class="keyword">inline</span> float32x4x2_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> uint8x8_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> float32x4x2_t vdequantized_input = {{</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(qv)))), voffset)),</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                  vscale),</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(qv)))), voffset)),</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                  vscale),</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    }};</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">/** Dequantize a neon vector holding 8 singed quantized values.</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment"> * @param[in] qv Input values to be dequantized.</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad4fe1191d25bb6608257e3f4ea868801">  432</a></span>&#160;<span class="keyword">inline</span> float32x4x2_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> int8x8_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">const</span> float32x4x2_t vdequantized_input = {{</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(qv))), voffset)), vscale),</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(qv))), voffset)), vscale),</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    }};</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">/** Dequantize a neon vector holding 16 quantized values.</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment"> * @param[in] qv Input values to be dequantized.</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7048ece2af58ce75587256d7980db171">  452</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> uint8x16_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                  vscale),</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                  vscale),</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                  vscale),</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                  vscale),</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    }};</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;}</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">/** Dequantize a neon vector holding 16 signed quantized values.</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"> * @param[in] qv Input values to be dequantized.</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00482"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aeff642b4f4d86ed575032d944b9576a4">  482</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> int8x16_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>              = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }};</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">/** Dequantize following an asymmetric quantization scheme a neon vector holding 16 quantized values.</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> * @param[in] qv     Input values to be dequantized.</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @param[in] scale  Quantization scaling factor.</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> * @param[in] offset Zero quantization offset.</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00505"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afefd32b0cf61750c523e6d15790a561e">  505</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> uint8x16_t &amp;qv, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, int32_t <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                  vscale),</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                  vscale),</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                  vscale),</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(qv))))), voffset)),</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                  vscale),</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }};</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">/** Dequantize a vector of 16 values stored as signed asymmetric.</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> * @param[in] qv     Input values to be dequantized.</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> * @param[in] scale  Quantization scaling factor.</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"> * @param[in] offset Zero quantization offset.</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac01c85f71885edddd3fc10ea41d2d54f">  534</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> int8x16_t &amp;qv, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, int32_t <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;{</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset            = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv)))), voffset)), vscale),</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    }};</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;}</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">/** Dequantize following symmetric quantization scheme a neon vector holding 16 quantized values.</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment"> * @param[in] qv     Input values to be dequantized.</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"> * @param[in] vscale Vector containing quantization scaling factors.</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00554"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3838d1ee6a765a3b7ff52dc040edf5c0">  554</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> int8x16_t &amp;qv, <span class="keyword">const</span> float32x4x4_t vscale)</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;{</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv))))), vscale.val[0]),</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv))))), vscale.val[1]),</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv))))), vscale.val[2]),</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv))))), vscale.val[3]),</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    }};</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;}</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">/** Dequantize following a symmetric quantization scheme a neon vector holding 16 quantized values.</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"> * @param[in] qv    Input values to be dequantized.</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment"> * @param[in] scale Quantization scaling factor.</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment"> * @return Dequantized values in a neon vector</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a496aa10035fdc8a0e86dde37b64f8228">  572</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(<span class="keyword">const</span> int8x16_t &amp;qv, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale             = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input = {{</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(qv))))), vscale),</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(qv))))), vscale),</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(qv))))), vscale),</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(qv))))), vscale),</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }};</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">/** Quantize a neon vector holding 8 floating point values.</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment"> * @param[in] qv Input values to be quantized.</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment"> * @return A neon vector holding the quantized values</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00591"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">  591</a></span>&#160;<span class="keyword">inline</span> uint8x8_t <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(<span class="keyword">const</span> float32x4x2_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>     = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>    = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> float32x4_t voffset   = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    }};</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">return</span> vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment">/** Quantize a neon vector holding 8 floating point values.</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment"> * @param[in] qv Input values to be quantized.</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment"> * @return A neon vector holding the singed quantized values</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">  616</a></span>&#160;<span class="keyword">inline</span> int8x8_t <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(<span class="keyword">const</span> float32x4x2_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;{</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>     = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>    = qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">const</span> float32x4_t voffset   = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    }};</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">return</span> vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;}</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160; </div>
<div class="line"><a name="l00634"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">  634</a></span>&#160;<span class="keyword">inline</span> int32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(<span class="keyword">const</span> float32x4x4_t &amp;qv, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, int32_t <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;{</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keyword">const</span> int32x4_t   voffset   = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf        = {{</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[0], vinvscale)), voffset),</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[1], vinvscale)), voffset),</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[2], vinvscale)), voffset),</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        vaddq_s32(vcvtaq_s32_f32(vmulq_f32(qv.val[3], vinvscale)), voffset),</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[0], vinvscale)), voffset),</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[1], vinvscale)), voffset),</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[2], vinvscale)), voffset),</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        vaddq_s32(vcvtq_s32_f32(vmulq_f32(qv.val[3], vinvscale)), voffset),</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    }};</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">return</span> rf;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment">/** Quantize a neon vector holding 16 floating point values.</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment"> * @param[in] qv Input values to be quantized.</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="comment"> * @return A neon vector holding the quantized values</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00661"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a42c040989e7f451dd9f2efa7384b89f6">  661</a></span>&#160;<span class="keyword">inline</span> uint8x16_t <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(<span class="keyword">const</span> float32x4x4_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;{</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">auto</span>            rf = <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(qv, qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(pa, pb);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment">/** Signed quantize a neon vector holding 16 floating point values.</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment"> * @param[in] qv Input values to be quantized.</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"> * @return A neon vector holding the quantized values</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00676"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3460d476add70f38e1d56fb9cccd0f3a">  676</a></span>&#160;<span class="keyword">inline</span> int8x16_t <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(<span class="keyword">const</span> float32x4x4_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;{</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keyword">auto</span>           rf = <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(qv, qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">return</span> vcombine_s8(pa, pb);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">/** Quantize to QASYMM16 a neon vector holding 16 floating point values.</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment"> * @param[in] qv Input values to be quantized.</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment"> * @param[in] qi Quantization information to be used in the computation.</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"> * @return A neon vector holding the quantized values</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00691"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a687dee3fd66555374211e3ff676ce5f1">  691</a></span>&#160;<span class="keyword">inline</span> uint16x8x2_t <a class="code" href="namespacearm__compute.xhtml#a687dee3fd66555374211e3ff676ce5f1">vquantize_qasymm16</a>(<span class="keyword">const</span> float32x4x4_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi)</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keyword">auto</span>             rf = <a class="code" href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">vquantize_internal</a>(qv, qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, qi.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">const</span> uint16x8_t pa = vcombine_u16(vqmovun_s32(rf.val[0]), vqmovun_s32(rf.val[1]));</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">const</span> uint16x8_t pb = vcombine_u16(vqmovun_s32(rf.val[2]), vqmovun_s32(rf.val[3]));</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">return</span> {pa, pb};</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;}</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160; </div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_asymm_8inl.xhtml">src/core/NEON/NEAsymm.inl</a>&quot;</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_NEASYMM_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a805d740633d70a5f0b019d72c517e67d"><div class="ttname"><a href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">arm_compute::qasymm8x8x2_t</a></div><div class="ttdeci">uint8x8x2_t qasymm8x8x2_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00035">NEAsymm.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00410">NEAsymm.h:410</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9f90599aecfeb44aed19db16d407c1c5"><div class="ttname"><a href="namespacearm__compute.xhtml#a9f90599aecfeb44aed19db16d407c1c5">arm_compute::qasymm8x8x4_signed_t</a></div><div class="ttdeci">int8x8x4_t qasymm8x8x4_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 32 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00043">NEAsymm.h:43</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00063">QuantizationInfo.h:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00038">NEAsymm.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3109788e20d3a6113e4b7d2d937c1f64"><div class="ttname"><a href="namespacearm__compute.xhtml#a3109788e20d3a6113e4b7d2d937c1f64">arm_compute::vquantize_internal</a></div><div class="ttdeci">int32x4x4_t vquantize_internal(const float32x4x4_t &amp;qv, float scale, int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00634">NEAsymm.h:634</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a687dee3fd66555374211e3ff676ce5f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a687dee3fd66555374211e3ff676ce5f1">arm_compute::vquantize_qasymm16</a></div><div class="ttdeci">uint16x8x2_t vquantize_qasymm16(const float32x4x4_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize to QASYMM16 a neon vector holding 16 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00691">NEAsymm.h:691</a></div></div>
<div class="ttc" id="aintrinsics_8h_xhtml"><div class="ttname"><a href="intrinsics_8h.xhtml">intrinsics.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="a_n_e_math_8h_xhtml"><div class="ttname"><a href="_n_e_math_8h.xhtml">NEMath.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a25af73d07023d565ec84adc58aedfb80"><div class="ttname"><a href="namespacearm__compute.xhtml#a25af73d07023d565ec84adc58aedfb80">arm_compute::qasymm8x8_signed_t</a></div><div class="ttdeci">int8x8_t qasymm8x8_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 8 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00040">NEAsymm.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac7efaafdf526cf144e7f1f24521074d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">arm_compute::vmlaq_qasymm8</a></div><div class="ttdeci">qasymm8x16_t vmlaq_qasymm8(qasymm8x16_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8 vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00030">NEAsymm.inl:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0c6e16826765130b480af53eda3635be"><div class="ttname"><a href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">arm_compute::qasymm8x8x3_t</a></div><div class="ttdeci">uint8x8x3_t qasymm8x8x3_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 24 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00036">NEAsymm.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa972284529f4dd47b3ae1d5d68ab1b71"><div class="ttname"><a href="namespacearm__compute.xhtml#aa972284529f4dd47b3ae1d5d68ab1b71">arm_compute::qasymm8x8x2_signed_t</a></div><div class="ttdeci">int8x8x2_t qasymm8x8x2_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00041">NEAsymm.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa34bc4940191b8b940b77fe0e27c7c7b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">arm_compute::vmlaq_qasymm8_signed</a></div><div class="ttdeci">qasymm8x16_signed_t vmlaq_qasymm8_signed(qasymm8x16_signed_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8_SIGNED vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00090">NEAsymm.inl:90</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41d3460ff424e2e21c629b3f27386a8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">arm_compute::qasymm8x8x4_t</a></div><div class="ttdeci">uint8x8x4_t qasymm8x8x4_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 32 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00037">NEAsymm.h:37</a></div></div>
<div class="ttc" id="a_n_e_asymm_8inl_xhtml"><div class="ttname"><a href="_n_e_asymm_8inl.xhtml">NEAsymm.inl</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aaf0890e0e5842a84a6af5800d2bdcd78"><div class="ttname"><a href="namespacearm__compute.xhtml#aaf0890e0e5842a84a6af5800d2bdcd78">arm_compute::qasymm8x8x3_signed_t</a></div><div class="ttdeci">int8x8x3_t qasymm8x8x3_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 24 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00042">NEAsymm.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac45cafa8ee6ec21f435a6a9af190e40a"><div class="ttname"><a href="namespacearm__compute.xhtml#ac45cafa8ee6ec21f435a6a9af190e40a">arm_compute::finalize_quantization_symm</a></div><div class="ttdeci">int8x16_t finalize_quantization_symm(int32x4x4_t &amp;in_s32, const int32x4x4_t &amp;result_fixedpoint_multiplier, const int32x4x4_t &amp;result_shift, const int32x4_t &amp;result_offset_after_shift_s32, const int8x16_t &amp;min_s8, const int8x16_t &amp;max_s8, const bool is_bounded_relu)</div><div class="ttdoc">Performs final quantization step on 16 elements for symmetric quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00230">NEAsymm.h:230</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00062">QuantizationInfo.h:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a70ecc99f2f6b646579b58463dc026671"><div class="ttname"><a href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">arm_compute::qasymm8x8_t</a></div><div class="ttdeci">uint8x8_t qasymm8x8_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 8 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00034">NEAsymm.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00591">NEAsymm.h:591</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a77e02c19b498c3ff4ee373b0825cfd19"><div class="ttname"><a href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">arm_compute::rounding_divide_by_pow2</a></div><div class="ttdeci">int32x4_t rounding_divide_by_pow2(int32x4_t x, int32x4_t exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00425">NEMath.inl:425</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3479355ca4b6fb389a3aae4da266bd0e"><div class="ttname"><a href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">arm_compute::finalize_quantization</a></div><div class="ttdeci">uint8x16_t finalize_quantization(int32x4x4_t &amp;in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int32x4_t result_offset_after_shift_s32, uint8x16_t min_u8, uint8x16_t max_u8, bool is_bounded_relu)</div><div class="ttdoc">Performs final quantization step on 16 elements.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00084">NEAsymm.h:84</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00616">NEAsymm.h:616</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adc8234d074c193f521029e81cda80bb2"><div class="ttname"><a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">arm_compute::qasymm8x16_signed_t</a></div><div class="ttdeci">int8x16_t qasymm8x16_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00044">NEAsymm.h:44</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_asymm_8h.xhtml">NEAsymm.h</a></li>
    <li class="footer">Generated on Mon Mar 18 2024 11:32:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
