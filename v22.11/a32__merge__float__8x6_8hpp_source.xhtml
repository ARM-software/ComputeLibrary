<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/merges/a32_merge_float_8x6.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a32__merge__float__8x6_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">a32_merge_float_8x6.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a32__merge__float__8x6_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2018 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifdef __arm__</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keywordtype">void</span> MergeResults&lt;8, 6, false&gt;(<span class="keywordtype">float</span> *out, <span class="keyword">const</span> <span class="keywordtype">float</span> *in, <span class="keyword">const</span> <span class="keywordtype">int</span> ldout, <span class="keyword">const</span> <span class="keywordtype">int</span> y0, <span class="keyword">const</span> <span class="keywordtype">int</span> ymax, <span class="keyword">const</span> <span class="keywordtype">int</span> x0, <span class="keyword">const</span> <span class="keywordtype">int</span> xmax, <span class="keyword">const</span> <span class="keywordtype">float</span> *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a> act, <span class="keywordtype">bool</span> append) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *inptr = in;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    prefetch_6x(inptr);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    prefetch_6x(inptr + 96);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordtype">float</span> nullbias[8];</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordtype">float</span> minval = - std::numeric_limits&lt;float&gt;::infinity();</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">float</span> maxval =   std::numeric_limits&lt;float&gt;::infinity();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span>(act.type)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">Activation::Type::None</a>:</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> Activation::Type::BoundedReLU:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            maxval = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(act.param1);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="comment">/* fall through */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> Activation::Type::ReLU:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            minval = 0.0f;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    float32x4_t minv = vdupq_n_f32(minval);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    float32x4_t maxv = vdupq_n_f32(maxval);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (!append &amp;&amp; !<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        memset(nullbias, 0, (8 * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y=y0; y&lt;ymax; y+=8) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordtype">float</span> *outptr0 = out + (y * ldout) + x0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">float</span> *outptr1 = outptr0 + ldout;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">float</span> *outptr2 = outptr1 + ldout;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordtype">float</span> *outptr3 = outptr2 + ldout;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">float</span> *outptr4 = outptr3 + ldout;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">float</span> *outptr5 = outptr4 + ldout;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        prefetch_2x(outptr0);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        prefetch_2x(outptr1);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        prefetch_2x(outptr2);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        prefetch_2x(outptr3);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        prefetch_2x(outptr4);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        prefetch_2x(outptr5);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=x0; i&lt;xmax; i+=8) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordtype">float</span> dummyres[8];</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment">/* Make sure we throw away results if Y isn&#39;t a multiple of 8.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">             * We do this by pointing the result pointer at a dummy buffer</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">             * we later discard.  */</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">if</span> ((y+5) &gt;= ymax) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keywordflow">switch</span> ((y + 5) - ymax) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keywordflow">case</span> 4:</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        outptr1 = dummyres;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <span class="comment">/* fall through */</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        outptr2 = dummyres;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        <span class="comment">/* fall through */</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        outptr3 = dummyres;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        <span class="comment">/* fall through */</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        outptr4 = dummyres;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        <span class="comment">/* fall through */</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        outptr5 = dummyres;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        <a class="code" href="utils_8hpp.xhtml#aa468b37bb9d2901433139d01b79036b0">UNREACHABLE</a>(<span class="stringliteral">&quot;Impossible.&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">if</span> (append) {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;               <span class="comment">/* Append mode: Read, activate, write. */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="comment">/* For ragged X, manually copy over the valid results. */</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">if</span> ((i+7) &gt;= xmax) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xi=0; xi&lt;8; xi++) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        <span class="keywordflow">if</span> ((i+xi) &lt; xmax) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                            *outptr0 = std::min(std::max(minval, inptr[xi] + *outptr0), maxval);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                            outptr0++;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                            *outptr1 = std::min(std::max(minval, inptr[xi + 8] + *outptr1), maxval);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                            outptr1++;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                            *outptr2 = std::min(std::max(minval, inptr[xi + 16] + *outptr2), maxval);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                            outptr2++;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                            *outptr3 = std::min(std::max(minval, inptr[xi + 24] + *outptr3), maxval);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                            outptr3++;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                            *outptr4 = std::min(std::max(minval, inptr[xi + 32] + *outptr4), maxval);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                            outptr4++;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                            *outptr5 = std::min(std::max(minval, inptr[xi + 40] + *outptr5), maxval);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                            outptr5++;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    inptr += 48;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="comment">/* Optimized routine to copy an entire block */</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    __asm __volatile (</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        <span class="comment">// Rows 0-1</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d0-d3},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d8-d11},  [%[outptr0]]\n&quot;</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d4-d7},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d12-d15}, [%[outptr1]]\n&quot;</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q4, q4, q0\n&quot;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[inptr], #352]&quot;</span>)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q5, q5, q1\n&quot;</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q6, q6, q2\n&quot;</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q7, q7, q3\n&quot;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[inptr], #416]&quot;</span>)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q4, q4, %q[minv]\n&quot;</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q5, q5, %q[minv]\n&quot;</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q6, q6, %q[minv]\n&quot;</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[inptr], #480]&quot;</span>)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q7, q7, %q[minv]\n&quot;</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q4, q4, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q5, q5, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d8-d11}, [%[outptr0]]!\n&quot;</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q6, q6, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q7, q7, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d12-d15}, [%[outptr1]]!\n&quot;</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        <span class="comment">// Rows 2-3</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d0-d3},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d8-d11},  [%[outptr2]]\n&quot;</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d4-d7},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d12-d15}, [%[outptr3]]\n&quot;</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q4, q4, q0\n&quot;</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr0], #96]&quot;</span>)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q5, q5, q1\n&quot;</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q6, q6, q2\n&quot;</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q7, q7, q3\n&quot;</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr1], #96]&quot;</span>)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q4, q4, %q[minv]\n&quot;</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q5, q5, %q[minv]\n&quot;</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q6, q6, %q[minv]\n&quot;</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr2], #128]&quot;</span>)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q7, q7, %q[minv]\n&quot;</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q4, q4, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q5, q5, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d8-d11}, [%[outptr2]]!\n&quot;</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q6, q6, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q7, q7, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d12-d15}, [%[outptr3]]!\n&quot;</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        <span class="comment">// Rows 4-5</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d0-d3},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d8-d11},  [%[outptr4]]\n&quot;</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d4-d7},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d12-d15}, [%[outptr5]]\n&quot;</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q4, q4, q0\n&quot;</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr3], #96]&quot;</span>)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q5, q5, q1\n&quot;</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q6, q6, q2\n&quot;</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q7, q7, q3\n&quot;</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr4], #128]&quot;</span>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q4, q4, %q[minv]\n&quot;</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q5, q5, %q[minv]\n&quot;</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q6, q6, %q[minv]\n&quot;</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr5], #128]&quot;</span>)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q7, q7, %q[minv]\n&quot;</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q4, q4, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q5, q5, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d8-d11}, [%[outptr4]]!\n&quot;</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q6, q6, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q7, q7, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d12-d15}, [%[outptr5]]!\n&quot;</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    : [outptr0] <span class="stringliteral">&quot;+r&quot;</span> (outptr0), [outptr1] <span class="stringliteral">&quot;+r&quot;</span> (outptr1), [outptr2] <span class="stringliteral">&quot;+r&quot;</span> (outptr2), [outptr3] <span class="stringliteral">&quot;+r&quot;</span> (outptr3),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                      [outptr4] <span class="stringliteral">&quot;+r&quot;</span> (outptr4), [outptr5] <span class="stringliteral">&quot;+r&quot;</span> (outptr5), [inptr] <span class="stringliteral">&quot;+r&quot;</span> (inptr)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    : [minv] <span class="stringliteral">&quot;w&quot;</span> (minv), [maxv] <span class="stringliteral">&quot;w&quot;</span> (maxv)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    : <span class="stringliteral">&quot;q0&quot;</span>, <span class="stringliteral">&quot;q1&quot;</span>, <span class="stringliteral">&quot;q2&quot;</span>, <span class="stringliteral">&quot;q3&quot;</span>, <span class="stringliteral">&quot;q4&quot;</span>, <span class="stringliteral">&quot;q5&quot;</span>, <span class="stringliteral">&quot;q6&quot;</span>, <span class="stringliteral">&quot;q7&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    );</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="comment">/* Bias mode: Add bias to everything, then min/max/write as before. */</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *biasptr = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a> ? <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a> + i : nullbias;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="comment">/* For ragged X, manually copy over the valid results. */</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">if</span> ((i+7) &gt;= xmax) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xi=0; xi&lt;7; xi++) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        <span class="keywordflow">if</span> ((i+xi) &lt; xmax) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                            *outptr0 = std::min(std::max(minval, inptr[xi] + biasptr[xi]), maxval);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            outptr0++;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            *outptr1 = std::min(std::max(minval, inptr[xi + 8] + biasptr[xi]), maxval);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            outptr1++;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            *outptr2 = std::min(std::max(minval, inptr[xi + 16] + biasptr[xi]), maxval);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            outptr2++;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                            *outptr3 = std::min(std::max(minval, inptr[xi + 24] + biasptr[xi]), maxval);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            outptr3++;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                            *outptr4 = std::min(std::max(minval, inptr[xi + 32] + biasptr[xi]), maxval);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                            outptr4++;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                            *outptr5 = std::min(std::max(minval, inptr[xi + 40] + biasptr[xi]), maxval);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            outptr5++;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    inptr += 48;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="comment">/* Optimized routine to copy an entire block */</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    __asm __volatile (</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        <span class="comment">// Rows 0-1</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d8-d11},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d0-d3},   [%[biasptr]]\n&quot;</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d12-d15},  [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q4, q4, q0\n&quot;</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[inptr], #352]&quot;</span>)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q5, q5, q1\n&quot;</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q6, q6, q0\n&quot;</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q7, q7, q1\n&quot;</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[inptr], #416]&quot;</span>)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q4, q4, %q[minv]\n&quot;</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q5, q5, %q[minv]\n&quot;</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q6, q6, %q[minv]\n&quot;</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[inptr], #480]&quot;</span>)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q7, q7, %q[minv]\n&quot;</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q4, q4, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q5, q5, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d8-d11}, [%[outptr0]]!\n&quot;</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q6, q6, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q7, q7, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d12-d15}, [%[outptr1]]!\n&quot;</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                        <span class="comment">// Rows 2-3</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d8-d11},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d12-d15},  [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q4, q4, q0\n&quot;</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr0], #96]&quot;</span>)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q5, q5, q1\n&quot;</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q6, q6, q0\n&quot;</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q7, q7, q1\n&quot;</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr1], #96]&quot;</span>)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q4, q4, %q[minv]\n&quot;</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q5, q5, %q[minv]\n&quot;</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q6, q6, %q[minv]\n&quot;</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr2], #128]&quot;</span>)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q7, q7, %q[minv]\n&quot;</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q4, q4, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q5, q5, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d8-d11}, [%[outptr2]]!\n&quot;</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q6, q6, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q7, q7, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d12-d15}, [%[outptr3]]!\n&quot;</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        <span class="comment">// Rows 4-5</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d8-d11},   [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        <span class="stringliteral">&quot;VLD1.32    {d12-d15},  [%[inptr]]!\n&quot;</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q4, q4, q0\n&quot;</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr3], #96]&quot;</span>)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q5, q5, q1\n&quot;</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q6, q6, q0\n&quot;</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        <span class="stringliteral">&quot;VADD.f32   q7, q7, q1\n&quot;</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr4], #128]&quot;</span>)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q4, q4, %q[minv]\n&quot;</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q5, q5, %q[minv]\n&quot;</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q6, q6, %q[minv]\n&quot;</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        <a class="code" href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a>(<span class="stringliteral">&quot;[%[outptr5], #128]&quot;</span>)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        <span class="stringliteral">&quot;VMAX.f32   q7, q7, %q[minv]\n&quot;</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q4, q4, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q5, q5, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d8-d11}, [%[outptr4]]!\n&quot;</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q6, q6, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                        <span class="stringliteral">&quot;VMIN.f32   q7, q7, %q[maxv]\n&quot;</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                        <span class="stringliteral">&quot;VST1.32    {d12-d15}, [%[outptr5]]!\n&quot;</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    : [outptr0] <span class="stringliteral">&quot;+r&quot;</span> (outptr0), [outptr1] <span class="stringliteral">&quot;+r&quot;</span> (outptr1), [outptr2] <span class="stringliteral">&quot;+r&quot;</span> (outptr2), [outptr3] <span class="stringliteral">&quot;+r&quot;</span> (outptr3),</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                      [outptr4] <span class="stringliteral">&quot;+r&quot;</span> (outptr4), [outptr5] <span class="stringliteral">&quot;+r&quot;</span> (outptr5), [inptr] <span class="stringliteral">&quot;+r&quot;</span> (inptr)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    : [minv] <span class="stringliteral">&quot;w&quot;</span> (minv), [maxv] <span class="stringliteral">&quot;w&quot;</span> (maxv), [biasptr] <span class="stringliteral">&quot;r&quot;</span> (biasptr)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    : <span class="stringliteral">&quot;q0&quot;</span>, <span class="stringliteral">&quot;q1&quot;</span>, <span class="stringliteral">&quot;q2&quot;</span>, <span class="stringliteral">&quot;q3&quot;</span>, <span class="stringliteral">&quot;q4&quot;</span>, <span class="stringliteral">&quot;q5&quot;</span>, <span class="stringliteral">&quot;q6&quot;</span>, <span class="stringliteral">&quot;q7&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    );</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#endif // __arm__</span></div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">Types.h:73</a></div></div>
<div class="ttc" id="namespacetf__frozen__model__extractor_xhtml_ac7485dcc8d256a6f197ed7802687f252"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">tf_frozen_model_extractor.None</a></div><div class="ttdeci">None</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor.py:41</a></div></div>
<div class="ttc" id="asmlib_8hpp_xhtml_aaca0205a239e6ef80e4e2788837579e8"><div class="ttname"><a href="asmlib_8hpp.xhtml#aaca0205a239e6ef80e4e2788837579e8">ASM_PREFETCH</a></div><div class="ttdeci">#define ASM_PREFETCH(address)</div><div class="ttdef"><b>Definition:</b> <a href="asmlib_8hpp_source.xhtml#l00045">asmlib.hpp:45</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml_aa468b37bb9d2901433139d01b79036b0"><div class="ttname"><a href="utils_8hpp.xhtml#aa468b37bb9d2901433139d01b79036b0">UNREACHABLE</a></div><div class="ttdeci">#define UNREACHABLE(why)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00034">utils.hpp:34</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="dir_736b7cb5ae91601e9fac1dc1b70c4612.xhtml">merges</a></li><li class="navelem"><a class="el" href="a32__merge__float__8x6_8hpp.xhtml">a32_merge_float_8x6.hpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:51 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
