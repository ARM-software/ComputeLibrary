<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/INode.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_i_node_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">INode.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_node_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2019,2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_GRAPH_INODE_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GRAPH_INODE_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_layer_descriptors_8h.xhtml">arm_compute/graph/LayerDescriptors.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_descriptor_8h.xhtml">arm_compute/graph/TensorDescriptor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// Forward declarations</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span>Graph;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">class </span>Edge;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">class </span>INodeVisitor;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">class </span><a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/** Node interface */</span></div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_i_node.xhtml">   46</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">    /** Constructor */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a>();<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /** Destructor **/</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1356f0d04912be3ec8d8ce7a2b0cddd2">~INode</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /** Prevent instances of this class from being copy assigned (As this class contains pointers) */</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /** Allow instances of this class to be move assigned */</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">operator=</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">    /** Validate node</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * @return Status containing any errors</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a0f3b12aedc549ea5ba08cbb36871da15">validate</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">    /** Returns node&#39;s type</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * @return Node&#39;s type</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>() <span class="keyword">const</span> = 0;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /** Accepts a node visitor</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * @param[in] v Visitor to accept</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69a6e8613e2e1b00de98610c2ae6288a">accept</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">INodeVisitor</a> &amp;v) = 0;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">    /** Forwards descriptor information to outputs if possible</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     * @return True if descriptor information could be forwarded otherwise false</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">forward_descriptors</a>() = 0;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /** Calculates output configuration</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     * @param[in] idx Output index to configure</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     * @return Output descriptor configuration</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a98dd474c332ea76a71bd81b790d7e0d9">configure_output</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span> = 0;<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /** Returns node&#39;s name</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     * @return Node name</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    std::string <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /** Returns node&#39;s ID</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     * @return Node&#39;s ID</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">    /** Returns node&#39;s Graph</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @return Node&#39;s graph</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">graph</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    /** Returns node&#39;s Graph</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * @return Node&#39;s graph</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">graph</a>();<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /** Sets the graph that this node is registered to</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * @param[in] g Back reference to graph</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">set_graph</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *g);<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    /** Sets the node id</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     * @param[in] id Node id</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">set_id</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <span class="keywordtype">id</span>);<span class="comment"></span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /** Sets common node parameters</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * @param[in] common_params Common node parameters to set</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">set_common_node_parameters</a>(<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params);<span class="comment"></span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">    /** Sets target preference</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     * @note This is not the target that the graph executor might choose, its just an indication</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * @param[in] target Target preference</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab4d8c49b8b04fae8561238b8efb472f5">set_requested_target</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    /** Sets the final execution target</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * @note GraphManager might change this target</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * @param[in] target Final execution target</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">set_assigned_target</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);<span class="comment"></span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">    /** Sets the output tensor of at a given index</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * @note All edges will get updated</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * @param[in] tid Tensor ID</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * @param[in] idx Output index</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a09dab02145c91bb9be20fe98cbedc300">set_output_tensor</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> tid, <span class="keywordtype">size_t</span> idx);<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">    /** Returns inputs of the node</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     * @return Inputs of the node</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> std::vector&lt;TensorID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7c77caaf0ff3ccc12220871c6dfed704">inputs</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">    /** Returns outputs of the node</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     * @return Outputs of the node</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> std::vector&lt;TensorID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">outputs</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /** Returns input edge set</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @return Set of input edges</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> std::vector&lt;EdgeID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3fd5d1d4dea9bb355f9baa9b4d44402f">input_edges</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /** Returns output edge set</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @return Set of output edges</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> std::set&lt;EdgeID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">    /** Returns the tensor ID of a given input of the node</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * @note Precondition : idx should be a valid input index</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * @param[in] idx Index of the node input</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @return TensorID of the requested input</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6a156d1ea7a01d8b27131f30aacaf40b">input_id</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">    /** Returns the tensor ID of a given output of the node</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     * @note Precondition : idx should be a valid output index</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     * @param[in] idx Index of the node output</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * @return TensorID of the requested output</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a339f9817d95cb065b7670d35c03f4d88">output_id</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">    /** Returns the tensor of a given input of the node</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     * @note Precondition : idx should be a valid input index</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     * @param[in] idx Index of the node input</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * @return Tensor of the requested input</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">    /** Returns the tensor of a given output of the node</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     * @note Precondition : idx should be a valid output index</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * @param[in] idx Index of the node output</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * @return Tensor of the requested output</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">    /** Returns the edge ID of a given input of the node</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * @note Precondition : idx should be a valid input index</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     * @param[in] idx Index of the node input</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">     * @return EdgeID of the requested input</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a283425ac27acd897fb075e0cee215020">input_edge_id</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">    /** Returns the edge of a given input of the node</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">     * @note Precondition : idx should be a valid input index</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">     * @param[in] idx Index of the node input</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">     * @return Edge of the requested input</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">input_edge</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">    /** Returns number of inputs of the node</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * @return Number of inputs</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">    /** Returns number of outputs of the node</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     * @return Number of outputs</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">    /** Returns common node parameters</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     * @return Common node parameters</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a106f54af67828d3da9f8098397d3b4ea">common_node_params</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">    /** Returns requested target for this node</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     * @return Requested execution target</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afc6514aa006c1820217d9a8d832cc656">requested_target</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">    /** Returns assigned target for this node</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     * @return Assigned target of this node</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">assigned_target</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">    /** Post operator info list</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     * @return Post operator info list</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> std::list&lt;std::unique_ptr&lt;ConvPostOpInfo&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7fbe231e896c1e3a148097a439694ea3">post_op_info_list</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">    /** Post operator info list</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">     * @return Post operator info list</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    std::list&lt;std::unique_ptr&lt;ConvPostOpInfo&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7fbe231e896c1e3a148097a439694ea3">post_op_info_list</a>();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afab89afd724f1b07b1aaad6bdc61c47a">  256</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>                                     *_graph;             <span class="comment">/**&lt; Backward reference to graph owning the node */</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>                                     _id;                <span class="comment">/**&lt; Node ID */</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>                                 _common_params;     <span class="comment">/**&lt; Node common params */</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::vector&lt;TensorID&gt;                      _outputs;           <span class="comment">/**&lt; Output of the node */</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::vector&lt;EdgeID&gt;                        _input_edges;       <span class="comment">/**&lt; Inputs edge set */</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    std::set&lt;EdgeID&gt;                           _output_edges;      <span class="comment">/**&lt; Output edge set */</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                                     _assigned_target;   <span class="comment">/**&lt; Assigned target by the Graph executor */</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    std::list&lt;std::unique_ptr&lt;ConvPostOpInfo&gt;&gt; _post_op_info_list; <span class="comment">/**&lt; Post operator info list */</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;};</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_INODE_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a7c77caaf0ff3ccc12220871c6dfed704"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7c77caaf0ff3ccc12220871c6dfed704">arm_compute::graph::INode::inputs</a></div><div class="ttdeci">const std::vector&lt; TensorID &gt; &amp; inputs() const</div><div class="ttdoc">Returns inputs of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6bca7473aa08cb0ecba36cb5dda2badf"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">arm_compute::graph::INode::input_edge</a></div><div class="ttdeci">Edge * input_edge(size_t idx) const</div><div class="ttdoc">Returns the edge of a given input of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00172">INode.cpp:172</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_node_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_params.xhtml">arm_compute::graph::NodeParams</a></div><div class="ttdoc">Common node parameters. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00270">Types.h:270</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a7069f1901ff50cd2ac6ba152cb106058"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">arm_compute::graph::INode::set_assigned_target</a></div><div class="ttdeci">void set_assigned_target(Target target)</div><div class="ttdoc">Sets the final execution target. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00072">INode.cpp:72</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns node&amp;#39;s name. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00108">INode.cpp:108</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a1356f0d04912be3ec8d8ce7a2b0cddd2"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1356f0d04912be3ec8d8ce7a2b0cddd2">arm_compute::graph::INode::~INode</a></div><div class="ttdeci">virtual ~INode()=default</div><div class="ttdoc">Destructor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_abbf8678d888561b348dd1c34d9e34af9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">arm_compute::graph::INode::output_edges</a></div><div class="ttdeci">const std::set&lt; EdgeID &gt; &amp; output_edges() const</div><div class="ttdoc">Returns output edge set. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00133">INode.cpp:133</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a69a6e8613e2e1b00de98610c2ae6288a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69a6e8613e2e1b00de98610c2ae6288a">arm_compute::graph::INode::accept</a></div><div class="ttdeci">virtual void accept(INodeVisitor &amp;v)=0</div><div class="ttdoc">Accepts a node visitor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_aa26cd423e8fc9233bd2bff46f82f46ab"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">arm_compute::graph::INode::assigned_target</a></div><div class="ttdeci">Target assigned_target() const</div><div class="ttdoc">Returns assigned target for this node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00199">INode.cpp:199</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a75d7c8bdf0059bb235880f8ef8d190bc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const</div><div class="ttdoc">Returns number of outputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00184">INode.cpp:184</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a88421a0f6fd8896906a4a4b86f41ca4f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">arm_compute::graph::INode::graph</a></div><div class="ttdeci">const Graph * graph() const</div><div class="ttdoc">Returns node&amp;#39;s Graph. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00113">INode.cpp:113</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a98dd474c332ea76a71bd81b790d7e0d9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a98dd474c332ea76a71bd81b790d7e0d9">arm_compute::graph::INode::configure_output</a></div><div class="ttdeci">virtual TensorDescriptor configure_output(size_t idx) const =0</div><div class="ttdoc">Calculates output configuration. </div></div>
<div class="ttc" id="_tensor_descriptor_8h_xhtml"><div class="ttname"><a href="_tensor_descriptor_8h.xhtml">TensorDescriptor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ac2f34bc6eaa698b25680f2091dc29170"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">arm_compute::graph::INode::operator=</a></div><div class="ttdeci">INode &amp; operator=(const INode &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copy assigned (As this class contains pointers) ...</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a283425ac27acd897fb075e0cee215020"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a283425ac27acd897fb075e0cee215020">arm_compute::graph::INode::input_edge_id</a></div><div class="ttdeci">EdgeID input_edge_id(size_t idx) const</div><div class="ttdoc">Returns the edge ID of a given input of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00166">INode.cpp:166</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ab4d8c49b8b04fae8561238b8efb472f5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab4d8c49b8b04fae8561238b8efb472f5">arm_compute::graph::INode::set_requested_target</a></div><div class="ttdeci">void set_requested_target(Target target)</div><div class="ttdoc">Sets target preference. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00067">INode.cpp:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a41ea547ddf32e27b4d3b6cc565ad67d1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">arm_compute::graph::INode::INode</a></div><div class="ttdeci">INode()</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00037">INode.cpp:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a3ace781433ede299fb1dc8d0b02667b9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">arm_compute::graph::INode::set_graph</a></div><div class="ttdeci">void set_graph(Graph *g)</div><div class="ttdoc">Sets the graph that this node is registered to. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00051">INode.cpp:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a3fd5d1d4dea9bb355f9baa9b4d44402f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3fd5d1d4dea9bb355f9baa9b4d44402f">arm_compute::graph::INode::input_edges</a></div><div class="ttdeci">const std::vector&lt; EdgeID &gt; &amp; input_edges() const</div><div class="ttdoc">Returns input edge set. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00128">INode.cpp:128</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00159">INode.cpp:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_afc6514aa006c1820217d9a8d832cc656"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#afc6514aa006c1820217d9a8d832cc656">arm_compute::graph::INode::requested_target</a></div><div class="ttdeci">Target requested_target() const</div><div class="ttdoc">Returns requested target for this node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00194">INode.cpp:194</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5ea90a25ef8059df2d2e51b82991ebf3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const</div><div class="ttdoc">Returns node&amp;#39;s ID. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00103">INode.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6a156d1ea7a01d8b27131f30aacaf40b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6a156d1ea7a01d8b27131f30aacaf40b">arm_compute::graph::INode::input_id</a></div><div class="ttdeci">TensorID input_id(size_t idx) const</div><div class="ttdoc">Returns the tensor ID of a given input of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00138">INode.cpp:138</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">arm_compute::graph::NodeType</a></div><div class="ttdeci">NodeType</div><div class="ttdoc">Supported nodes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00199">Types.h:199</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a74e6b1e9d4924f2fb12baed6a432d3a5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">arm_compute::graph::INode::outputs</a></div><div class="ttdeci">const std::vector&lt; TensorID &gt; &amp; outputs() const</div><div class="ttdoc">Returns outputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00123">INode.cpp:123</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a483b76accbb02199c359bd5cf23dd476"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">arm_compute::graph::INode::set_id</a></div><div class="ttdeci">void set_id(NodeID id)</div><div class="ttdoc">Sets the node id. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00057">INode.cpp:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">Types.h:100</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_aeadb909ea02bec78f92ca35ff0ccbaea"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">arm_compute::graph::INode::set_common_node_parameters</a></div><div class="ttdeci">void set_common_node_parameters(NodeParams common_params)</div><div class="ttdoc">Sets common node parameters. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00062">INode.cpp:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_abba17a56bbf16c7cbc7acd4aa54abcea"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">arm_compute::graph::EdgeID</a></div><div class="ttdeci">unsigned int EdgeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00070">Types.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00053">Graph.h:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a106f54af67828d3da9f8098397d3b4ea"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a106f54af67828d3da9f8098397d3b4ea">arm_compute::graph::INode::common_node_params</a></div><div class="ttdeci">NodeParams common_node_params() const</div><div class="ttdoc">Returns common node parameters. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00189">INode.cpp:189</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml">arm_compute::graph::Edge</a></div><div class="ttdoc">Graph Edge. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00039">Edge.h:39</a></div></div>
<div class="ttc" id="_layer_descriptors_8h_xhtml"><div class="ttname"><a href="_layer_descriptors_8h.xhtml">LayerDescriptors.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a0f3b12aedc549ea5ba08cbb36871da15"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a0f3b12aedc549ea5ba08cbb36871da15">arm_compute::graph::INode::validate</a></div><div class="ttdeci">virtual Status validate() const</div><div class="ttdoc">Validate node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00046">INode.cpp:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_abe0cb3e4411a1c289e3e40e3f9d79fec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const</div><div class="ttdoc">Returns number of inputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00179">INode.cpp:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a339f9817d95cb065b7670d35c03f4d88"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a339f9817d95cb065b7670d35c03f4d88">arm_compute::graph::INode::output_id</a></div><div class="ttdeci">TensorID output_id(size_t idx) const</div><div class="ttdoc">Returns the tensor ID of a given output of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00145">INode.cpp:145</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a09dab02145c91bb9be20fe98cbedc300"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a09dab02145c91bb9be20fe98cbedc300">arm_compute::graph::INode::set_output_tensor</a></div><div class="ttdeci">void set_output_tensor(TensorID tid, size_t idx)</div><div class="ttdoc">Sets the output tensor of at a given index. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00077">INode.cpp:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5edbd8a4a1b75060bb3b49bc0ba2c6b0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">arm_compute::graph::INode::forward_descriptors</a></div><div class="ttdeci">virtual bool forward_descriptors()=0</div><div class="ttdoc">Forwards descriptor information to outputs if possible. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node&amp;#39;s type. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_visitor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">arm_compute::graph::INodeVisitor</a></div><div class="ttdoc">Node visitor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_visitor_8h_source.xhtml#l00034">INodeVisitor.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00151">INode.cpp:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a615af95e19b5d9f74d2760183566a9a3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">arm_compute::graph::TensorID</a></div><div class="ttdeci">unsigned int TensorID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00068">Types.h:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a7fbe231e896c1e3a148097a439694ea3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7fbe231e896c1e3a148097a439694ea3">arm_compute::graph::INode::post_op_info_list</a></div><div class="ttdeci">const std::list&lt; std::unique_ptr&lt; ConvPostOpInfo &gt; &gt; &amp; post_op_info_list() const</div><div class="ttdoc">Post operator info list. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00204">INode.cpp:204</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="_i_node_8h.xhtml">INode.h</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:48 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
