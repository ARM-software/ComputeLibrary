<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: IPostOp&lt; TensorRelatedT &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('structarm__compute_1_1experimental_1_1_i_post_op.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">IPostOp&lt; TensorRelatedT &gt; Struct Template Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operators It contains:  
 <a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a250e7d345c2d50bcd57b6ec1154450d3"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a250e7d345c2d50bcd57b6ec1154450d3">arity</a> () const</td></tr>
<tr class="memdesc:a250e7d345c2d50bcd57b6ec1154450d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the arity of the post op.  <a href="#a250e7d345c2d50bcd57b6ec1154450d3">More...</a><br /></td></tr>
<tr class="separator:a250e7d345c2d50bcd57b6ec1154450d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bbd4d392a079c87e431448252c2f2b6"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a4bbd4d392a079c87e431448252c2f2b6">prev_dst_pos</a> () const =0</td></tr>
<tr class="memdesc:a4bbd4d392a079c87e431448252c2f2b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The position of previous op's dst in current op's argument list.  <a href="#a4bbd4d392a079c87e431448252c2f2b6">More...</a><br /></td></tr>
<tr class="separator:a4bbd4d392a079c87e431448252c2f2b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030d8e278c7546f95b401c6b56c87fb9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a030d8e278c7546f95b401c6b56c87fb9">type</a> () const =0</td></tr>
<tr class="memdesc:a030d8e278c7546f95b401c6b56c87fb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml" title="An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operato...">IPostOp</a> type.  <a href="#a030d8e278c7546f95b401c6b56c87fb9">More...</a><br /></td></tr>
<tr class="separator:a030d8e278c7546f95b401c6b56c87fb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accfebd7a33870b8d8ad63b5913ad9412"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; TensorRelatedT * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#accfebd7a33870b8d8ad63b5913ad9412">arguments</a> ()=0</td></tr>
<tr class="memdesc:accfebd7a33870b8d8ad63b5913ad9412"><td class="mdescLeft">&#160;</td><td class="mdescRight">The argument tensors The order of the argument tensor is strictly preserved.  <a href="#accfebd7a33870b8d8ad63b5913ad9412">More...</a><br /></td></tr>
<tr class="separator:accfebd7a33870b8d8ad63b5913ad9412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9056ce9cb9b416f109419a222741365"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; const TensorRelatedT * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#ab9056ce9cb9b416f109419a222741365">arguments</a> () const =0</td></tr>
<tr class="separator:ab9056ce9cb9b416f109419a222741365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c5c95c91f2bd85a36610883501662c5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a>&lt; TensorRelatedT &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a2c5c95c91f2bd85a36610883501662c5">clone</a> () const =0</td></tr>
<tr class="memdesc:a2c5c95c91f2bd85a36610883501662c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clone method used in cases where PostOps are owned by unique_ptr.  <a href="#a2c5c95c91f2bd85a36610883501662c5">More...</a><br /></td></tr>
<tr class="separator:a2c5c95c91f2bd85a36610883501662c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad838b4b6a05386b4584895ff25709002"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#ad838b4b6a05386b4584895ff25709002">~IPostOp</a> ()</td></tr>
<tr class="separator:ad838b4b6a05386b4584895ff25709002"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename TensorRelatedT&gt;<br />
struct arm_compute::experimental::IPostOp&lt; TensorRelatedT &gt;</h3>

<p>An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operators It contains: </p>
<ol type="1">
<li>The attributes of the original operator.</li>
<li>Any additional tensor argument.</li>
<li>The position of the previous op's dst tensor in its argument list ( <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a4bbd4d392a079c87e431448252c2f2b6">prev_dst_pos</a> )</li>
</ol>
<p>For example, a series of chained ops: </p><pre class="fragment">    div(src1, relu(conv(src0, weights, bias, conv_info), act_info), div_info)

translates to

    dst = conv(src0, weights, bias, conv_info)  // main op
    dst = relu(dst, act_info)                   // previous dst is placed in the first (and only) argument
    dst = div(src1, dst, div_info)              // previous dst is placed in the second argument

which in turn translates to:

    main op: conv(src0, weights, bias, conv_info)
    post op1: relu(act_info, prev_dst_pos = 0)
    post op2: div(div_info, src1, prev_dst_pos = 1)
</pre><dl class="section note"><dt>Note</dt><dd>: On Broadcasting For n-ary post ops, the tensor arguments must not "widen" the dst tensor of the main op For example, for a dst of shape [14, 1, 34]:<ul>
<li>post_op_arg1 = [1, 1, 34] is allowed: broadcast in dim 0</li>
<li>post_op_arg1 = [14, 1, 34] is allowed: no broadcast</li>
<li>post_op_arg1 = [1, 1, 34] is allowed: broadcast in dims 0 and 1</li>
<li>post_op_arg1 = [14, 15, 34] is NOT allowed: broadcast widens the dst tensor</li>
</ul>
</dd>
<dd>
: On Data layout All post ops are data layout agnostic. This means post ops do not have an inherent idea of "width", "height" and so on. Should we want to perform a post op with 2 tensors of different data layouts (where data layouts are significant to both), then we need to perform necessary permutation op beforehand to unify their data layout before they can be fused with a post op</dd></dl>
<p>Note although post ops themselves should be able to support any data layout, the main op they fuse to may impose additional restrictions in the presence of post ops. For example, the implementation of a gemm op may only allow NHWC data layout if post ops are provided. Such restrictions are main op implementation specific.</p>
<dl class="section note"><dt>Note</dt><dd>: PostOps do not own any resources pointed to by TensorRelatedT if it's a pointer type </dd>
<dd>
: If TensorRelatedT points to a resource, <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml" title="An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operato...">IPostOp</a> assumes that resource is valid throughout its lifetime and the lifetime of its copies. This is almost guaranteed as <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml" title="An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operato...">IPostOp</a> is only meant to be used at configure time after the <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor. ">ITensor</a> or <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> objects are already constructed </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_post_op_8h_source.xhtml#l00089">89</a> of file <a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad838b4b6a05386b4584895ff25709002"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad838b4b6a05386b4584895ff25709002">&#9670;&nbsp;</a></span>~IPostOp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_post_op_8h_source.xhtml#l00112">112</a> of file <a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="accfebd7a33870b8d8ad63b5913ad9412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accfebd7a33870b8d8ad63b5913ad9412">&#9670;&nbsp;</a></span>arguments() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::vector&lt;TensorRelatedT *&gt; arguments </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The argument tensors The order of the argument tensor is strictly preserved. </p>

<p>Implemented in <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">PostOpEltwisePRelu&lt; TensorRelatedT &gt;</a>, <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">PostOpEltwiseAdd&lt; TensorRelatedT &gt;</a>, and <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">PostOpAct&lt; TensorRelatedT &gt;</a>.</p>

</div>
</div>
<a id="ab9056ce9cb9b416f109419a222741365"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9056ce9cb9b416f109419a222741365">&#9670;&nbsp;</a></span>arguments() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::vector&lt;const TensorRelatedT *&gt; arguments </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a379268971da504167565643f1fa6d91c">PostOpEltwisePRelu&lt; TensorRelatedT &gt;</a>, <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a379268971da504167565643f1fa6d91c">PostOpEltwiseAdd&lt; TensorRelatedT &gt;</a>, and <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a379268971da504167565643f1fa6d91c">PostOpAct&lt; TensorRelatedT &gt;</a>.</p>

</div>
</div>
<a id="a250e7d345c2d50bcd57b6ec1154450d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a250e7d345c2d50bcd57b6ec1154450d3">&#9670;&nbsp;</a></span>arity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t arity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the arity of the post op. </p>
<dl class="section note"><dt>Note</dt><dd>: that this is one fewer than the arity of the original op, because we implicitly pass the previous op's dst tensor as one of the arguments </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_post_op_8h_source.xhtml#l00095">95</a> of file <a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00259">type</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#accfebd7a33870b8d8ad63b5913ad9412">arguments</a>().size();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1experimental_1_1_i_post_op_xhtml_accfebd7a33870b8d8ad63b5913ad9412"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#accfebd7a33870b8d8ad63b5913ad9412">arm_compute::experimental::IPostOp::arguments</a></div><div class="ttdeci">virtual std::vector&lt; TensorRelatedT * &gt; arguments()=0</div><div class="ttdoc">The argument tensors The order of the argument tensor is strictly preserved. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2c5c95c91f2bd85a36610883501662c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c5c95c91f2bd85a36610883501662c5">&#9670;&nbsp;</a></span>clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a>&lt;TensorRelatedT&gt; &gt; clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clone method used in cases where PostOps are owned by unique_ptr. </p>
<dl class="section note"><dt>Note</dt><dd>: This performs a shallow copy of the TensorRelatedT if TensorRelatedT points to a resource </dd></dl>

<p>Implemented in <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a96b6699a97fec64563d91cbc69209830">PostOpEltwisePRelu&lt; TensorRelatedT &gt;</a>, <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a96b6699a97fec64563d91cbc69209830">PostOpEltwiseAdd&lt; TensorRelatedT &gt;</a>, and <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a96b6699a97fec64563d91cbc69209830">PostOpAct&lt; TensorRelatedT &gt;</a>.</p>

</div>
</div>
<a id="a4bbd4d392a079c87e431448252c2f2b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bbd4d392a079c87e431448252c2f2b6">&#9670;&nbsp;</a></span>prev_dst_pos()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int prev_dst_pos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The position of previous op's dst in current op's argument list. </p>

<p>Implemented in <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">PostOpEltwisePRelu&lt; TensorRelatedT &gt;</a>, <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">PostOpEltwiseAdd&lt; TensorRelatedT &gt;</a>, and <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">PostOpAct&lt; TensorRelatedT &gt;</a>.</p>

</div>
</div>
<a id="a030d8e278c7546f95b401c6b56c87fb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030d8e278c7546f95b401c6b56c87fb9">&#9670;&nbsp;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml" title="An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operato...">IPostOp</a> type. </p>

<p>Implemented in <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#abe3f4fb4f063604571dc8906dab9c520">PostOpEltwisePRelu&lt; TensorRelatedT &gt;</a>, <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#abe3f4fb4f063604571dc8906dab9c520">PostOpEltwiseAdd&lt; TensorRelatedT &gt;</a>, and <a class="el" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#abe3f4fb4f063604571dc8906dab9c520">PostOpAct&lt; TensorRelatedT &gt;</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>arm_compute/core/experimental/<a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
