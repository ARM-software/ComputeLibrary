<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/TensorAllocator.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('src_2runtime_2_tensor_allocator_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TensorAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="src_2runtime_2_tensor_allocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_allocator_8h.xhtml">arm_compute/runtime/TensorAllocator.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_group_8h.xhtml">arm_compute/runtime/MemoryGroup.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_region_8h.xhtml">arm_compute/runtime/MemoryRegion.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keywordtype">bool</span> validate_subtensor_shape(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;parent_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;child_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coords)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">bool</span>               is_valid     = <span class="keyword">true</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;parent_shape = parent_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;child_shape  = child_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       parent_dims  = parent_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">num_dimensions</a>();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       child_dims   = child_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">num_dimensions</a>();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span>(child_dims &lt;= parent_dims)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> num_dimensions = child_dims; num_dimensions &gt; 0; --num_dimensions)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> child_dim_size = coords[num_dimensions - 1] + child_shape[num_dimensions - 1];</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">if</span>((coords[num_dimensions - 1] &lt; 0) || (child_dim_size &gt; parent_shape[num_dimensions - 1]))</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                is_valid = <span class="keyword">false</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        is_valid = <span class="keyword">false</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> is_valid;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a10ccec9a08d4c97e4d90d9a1771cbfe8">   68</a></span>&#160;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a10ccec9a08d4c97e4d90d9a1771cbfe8">TensorAllocator::TensorAllocator</a>(<a class="code" href="classarm__compute_1_1_i_memory_manageable.xhtml">IMemoryManageable</a> *owner)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    : _owner(owner), _associated_memory_group(nullptr), _memory()</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a27f8b115e4571d52d83419aaea4eeee1">   73</a></span>&#160;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a27f8b115e4571d52d83419aaea4eeee1">TensorAllocator::~TensorAllocator</a>()</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">set_is_resizable</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#aa5d534fb1ab7a62ef81d80f47af1679b">   78</a></span>&#160;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a10ccec9a08d4c97e4d90d9a1771cbfe8">TensorAllocator::TensorAllocator</a>(<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml">TensorAllocator</a> &amp;&amp;o) noexcept</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    : <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a049b4734a319a583b6eef3edc3472cc2">ITensorAllocator</a>(std::move(o)),</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      _owner(o._owner),</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      _associated_memory_group(o._associated_memory_group),</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      _memory(std::move(o._memory))</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    o._owner                   = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    o._associated_memory_group = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    o._memory                  = <a class="code" href="classarm__compute_1_1_memory.xhtml">Memory</a>();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#ace0f71b15cbb5b468070f5a2fd4110ad">   89</a></span>&#160;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml">TensorAllocator</a> &amp;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a943854ce6f3aafac2714340e0915de75">TensorAllocator::operator=</a>(<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml">TensorAllocator</a> &amp;&amp;o) noexcept</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span>(&amp;o != <span class="keyword">this</span>)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        _owner   = o._owner;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        o._owner = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        _associated_memory_group   = o._associated_memory_group;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        o._associated_memory_group = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        _memory   = std::move(o._memory);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        o._memory = <a class="code" href="classarm__compute_1_1_memory.xhtml">Memory</a>();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a12e5f2915e2461321b130dcf84f3e268">ITensorAllocator::operator=</a>(std::move(o));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">  107</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">TensorAllocator::init</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml">TensorAllocator</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coords, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;sub_info)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// Get parent info</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> parent_info = allocator.<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Check if coordinates and new shape are within the parent tensor</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!validate_subtensor_shape(parent_info, sub_info, coords));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(validate_subtensor_shape);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Copy pointer to buffer</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    _memory = <a class="code" href="classarm__compute_1_1_memory.xhtml">Memory</a>(allocator._memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>());</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// Init tensor info with new dimensions</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">size_t</span> total_size = parent_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">offset_element_in_bytes</a>(coords) + sub_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>() - sub_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    sub_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(sub_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>(), sub_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>(), parent_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>(), parent_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">offset_element_in_bytes</a>(coords), total_size);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// Set TensorInfo</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">init</a>(sub_info);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a344325f71f51323330de47f307ebecfd">  127</a></span>&#160;uint8_t *<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a344325f71f51323330de47f307ebecfd">TensorAllocator::data</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> (_memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>() == <span class="keyword">nullptr</span>) ? <span class="keyword">nullptr</span> : reinterpret_cast&lt;uint8_t *&gt;(_memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_memory_region.xhtml#af4cf95f81e1b269a31d2d9a7e0429a24">buffer</a>());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">  132</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">TensorAllocator::allocate</a>()</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// Align to 64-byte boundaries by default if alignment is not specified</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> alignment_to_use = (<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>() != 0) ? <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>() : 64;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span>(_associated_memory_group == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        _memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#af2d30bc4b38a0f4703ff154a39f1b422">set_owned_region</a>(std::make_unique&lt;MemoryRegion&gt;(<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().total_size(), alignment_to_use));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        _associated_memory_group-&gt;<a class="code" href="classarm__compute_1_1_i_memory_group.xhtml#afe894be960031e036ae121a4c5111043">finalize_memory</a>(_owner, _memory, <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().total_size(), alignment_to_use);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">set_is_resizable</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a1468b0adb6ec3f9d38aa7d60b8a91974">  147</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a1468b0adb6ec3f9d38aa7d60b8a91974">TensorAllocator::free</a>()</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    _memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a5e343ebd0fb1c7816e7abfee53d2578b">set_region</a>(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">set_is_resizable</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a84052cebf66a6126051a166a078253a4">  153</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a84052cebf66a6126051a166a078253a4">TensorAllocator::import_memory</a>(<span class="keywordtype">void</span> *memory)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(memory == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(_associated_memory_group != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>() != 0 &amp;&amp; !<a class="code" href="namespacearm__compute_1_1utility.xhtml#a9eed476cf46a22a3ce6ebd8ba22e8945">arm_compute::utility::check_aligned</a>(memory, <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>()));</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    _memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#af2d30bc4b38a0f4703ff154a39f1b422">set_owned_region</a>(std::make_unique&lt;MemoryRegion&gt;(memory, <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().total_size()));</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">info</a>().<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">set_is_resizable</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_tensor_allocator.xhtml#a34177e00ce3d627e8a6a9ca215aaddfb">  165</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a34177e00ce3d627e8a6a9ca215aaddfb">TensorAllocator::set_associated_memory_group</a>(<a class="code" href="classarm__compute_1_1_i_memory_group.xhtml">IMemoryGroup</a> *associated_memory_group)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(associated_memory_group == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_associated_memory_group != <span class="keyword">nullptr</span> &amp;&amp; _associated_memory_group != associated_memory_group);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>() != <span class="keyword">nullptr</span> &amp;&amp; _memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_memory_region.xhtml#af4cf95f81e1b269a31d2d9a7e0429a24">buffer</a>() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    _associated_memory_group = associated_memory_group;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;uint8_t *TensorAllocator::lock()</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_memory.<a class="code" href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">region</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_memory_region.xhtml#af4cf95f81e1b269a31d2d9a7e0429a24">buffer</a>());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">void</span> TensorAllocator::unlock()</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_memory_group_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_memory_group.xhtml">arm_compute::IMemoryGroup</a></div><div class="ttdoc">Memory group interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_group_8h_source.xhtml#l00037">IMemoryGroup.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_xhtml"><div class="ttname"><a href="classarm__compute_1_1_memory.xhtml">arm_compute::Memory</a></div><div class="ttdoc">CPU implementation of memory object. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_8h_source.xhtml#l00037">Memory.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml">arm_compute::TensorAllocator</a></div><div class="ttdoc">Basic implementation of a CPU memory tensor allocator. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_allocator_8h_source.xhtml#l00042">TensorAllocator.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a3fc6adad84b23f10d54d5a7b6928f872"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">arm_compute::TensorAllocator::init</a></div><div class="ttdeci">void init(const TensorAllocator &amp;allocator, const Coordinates &amp;coords, TensorInfo &amp;sub_info)</div><div class="ttdoc">Shares the same backing memory with another tensor allocator, while the tensor info might be differen...</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator.cpp:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a344325f71f51323330de47f307ebecfd"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a344325f71f51323330de47f307ebecfd">arm_compute::TensorAllocator::data</a></div><div class="ttdeci">uint8_t * data() const</div><div class="ttdoc">Returns the pointer to the allocated data. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00127">TensorAllocator.cpp:127</a></div></div>
<div class="ttc" id="_tensor_allocator_8h_xhtml"><div class="ttname"><a href="_tensor_allocator_8h.xhtml">TensorAllocator.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_xhtml_a146cb960b44f4b1fb11ef4420382021a"><div class="ttname"><a href="classarm__compute_1_1_memory.xhtml#a146cb960b44f4b1fb11ef4420382021a">arm_compute::Memory::region</a></div><div class="ttdeci">IMemoryRegion * region() final</div><div class="ttdoc">Region accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_8cpp_source.xhtml#l00048">Memory.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_a12e5f2915e2461321b130dcf84f3e268"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a12e5f2915e2461321b130dcf84f3e268">arm_compute::ITensorAllocator::operator=</a></div><div class="ttdeci">ITensorAllocator &amp; operator=(const ITensorAllocator &amp;)=default</div><div class="ttdoc">Allow instances of this class to be copied. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_memory_region_xhtml_af4cf95f81e1b269a31d2d9a7e0429a24"><div class="ttname"><a href="classarm__compute_1_1_i_memory_region.xhtml#af4cf95f81e1b269a31d2d9a7e0429a24">arm_compute::IMemoryRegion::buffer</a></div><div class="ttdeci">virtual void * buffer()=0</div><div class="ttdoc">Returns the pointer to the allocated data. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a5f1ca9d674346287cae57a6c5b5c24ec"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">arm_compute::TensorInfo::strides_in_bytes</a></div><div class="ttdeci">const Strides &amp; strides_in_bytes() const override</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00213">TensorInfo.h:213</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac4b36cc1e56b0b7e579bb4b7196490db"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">arm_compute::TensorInfo::format</a></div><div class="ttdeci">Format format() const override</div><div class="ttdoc">Colour format of the image. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00246">TensorInfo.h:246</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_xhtml_a5e343ebd0fb1c7816e7abfee53d2578b"><div class="ttname"><a href="classarm__compute_1_1_memory.xhtml#a5e343ebd0fb1c7816e7abfee53d2578b">arm_compute::Memory::set_region</a></div><div class="ttdeci">void set_region(IMemoryRegion *region) final</div><div class="ttdoc">Sets a memory region. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_8cpp_source.xhtml#l00058">Memory.cpp:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_xhtml_af2d30bc4b38a0f4703ff154a39f1b422"><div class="ttname"><a href="classarm__compute_1_1_memory.xhtml#af2d30bc4b38a0f4703ff154a39f1b422">arm_compute::Memory::set_owned_region</a></div><div class="ttdeci">void set_owned_region(std::unique_ptr&lt; IMemoryRegion &gt; region) final</div><div class="ttdoc">Sets a memory region. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_8cpp_source.xhtml#l00064">Memory.cpp:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a13622133d9b41900a6a3e8f89e59a78b"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">arm_compute::TensorInfo::num_dimensions</a></div><div class="ttdeci">size_t num_dimensions() const override</div><div class="ttdoc">The number of dimensions of the tensor (rank) </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00226">TensorInfo.h:226</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a27f8b115e4571d52d83419aaea4eeee1"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a27f8b115e4571d52d83419aaea4eeee1">arm_compute::TensorAllocator::~TensorAllocator</a></div><div class="ttdeci">~TensorAllocator()</div><div class="ttdoc">Default destructor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00073">TensorAllocator.cpp:73</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_memory_group_xhtml_afe894be960031e036ae121a4c5111043"><div class="ttname"><a href="classarm__compute_1_1_i_memory_group.xhtml#afe894be960031e036ae121a4c5111043">arm_compute::IMemoryGroup::finalize_memory</a></div><div class="ttdeci">virtual void finalize_memory(IMemoryManageable *obj, IMemory &amp;obj_memory, size_t size, size_t alignment)=0</div><div class="ttdoc">Finalizes memory for a given object. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_af398466b602a02b42d8df19fb66a6c60"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">arm_compute::TensorInfo::total_size</a></div><div class="ttdeci">size_t total_size() const override</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00250">TensorInfo.h:250</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator.cpp:132</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_a32899157b4898866a4a58440f2f7b13f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">arm_compute::ITensorAllocator::alignment</a></div><div class="ttdeci">size_t alignment() const</div><div class="ttdoc">Return underlying&amp;#39;s tensor buffer alignment. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00056">ITensorAllocator.cpp:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a78bf77b2d9b959259f77a32b9a412184"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">arm_compute::TensorInfo::set_is_resizable</a></div><div class="ttdeci">ITensorInfo &amp; set_is_resizable(bool is_resizable) override</div><div class="ttdoc">Set the flag whether the tensor size can be changed. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00274">TensorInfo.h:274</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="_memory_region_8h_xhtml"><div class="ttname"><a href="_memory_region_8h.xhtml">MemoryRegion.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a1468b0adb6ec3f9d38aa7d60b8a91974"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a1468b0adb6ec3f9d38aa7d60b8a91974">arm_compute::TensorAllocator::free</a></div><div class="ttdeci">void free() override</div><div class="ttdoc">Free allocated CPU memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00147">TensorAllocator.cpp:147</a></div></div>
<div class="ttc" id="_memory_group_8h_xhtml"><div class="ttname"><a href="_memory_group_8h.xhtml">MemoryGroup.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3d45498be87235b5165d9972b2d0644d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">arm_compute::test::validation::allocator</a></div><div class="ttdeci">input allocator() -&gt; allocate()</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_a29737b25723597c9708c662c7088e6c3"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a29737b25723597c9708c662c7088e6c3">arm_compute::ITensorAllocator::info</a></div><div class="ttdeci">TensorInfo &amp; info()</div><div class="ttdoc">Return a reference to the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00046">ITensorAllocator.cpp:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ad6b64f33be1e66dcf7612483ffb8fd63"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">arm_compute::TensorInfo::init</a></div><div class="ttdeci">void init(Format format)</div><div class="ttdoc">Initialize the tensor info with just a format. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00123">TensorInfo.cpp:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_a049b4734a319a583b6eef3edc3472cc2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a049b4734a319a583b6eef3edc3472cc2">arm_compute::ITensorAllocator::ITensorAllocator</a></div><div class="ttdeci">ITensorAllocator()=default</div><div class="ttdoc">Default constructor. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a10ccec9a08d4c97e4d90d9a1771cbfe8"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a10ccec9a08d4c97e4d90d9a1771cbfe8">arm_compute::TensorAllocator::TensorAllocator</a></div><div class="ttdeci">TensorAllocator(IMemoryManageable *owner)</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00068">TensorAllocator.cpp:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_memory_manageable_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_memory_manageable.xhtml">arm_compute::IMemoryManageable</a></div><div class="ttdoc">Interface of an object than can be memory managed. </div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_group_8h_source.xhtml#l00069">IMemoryGroup.h:69</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a7888888b7f18215ae83fd3660d38eccb"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">arm_compute::TensorInfo::offset_element_in_bytes</a></div><div class="ttdeci">int32_t offset_element_in_bytes(const Coordinates &amp;pos) const override</div><div class="ttdoc">The offset in bytes from the beginning of the memory allocation to access the element at position (x...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00388">TensorInfo.cpp:388</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a84052cebf66a6126051a166a078253a4"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a84052cebf66a6126051a166a078253a4">arm_compute::TensorAllocator::import_memory</a></div><div class="ttdeci">Status import_memory(void *memory)</div><div class="ttdoc">Import an existing memory as a tensor&amp;#39;s backing memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00153">TensorAllocator.cpp:153</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ab54246abe670b06f5624add7e7022904"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">arm_compute::TensorInfo::offset_first_element_in_bytes</a></div><div class="ttdeci">size_t offset_first_element_in_bytes() const override</div><div class="ttdoc">The offset from the beginning of the memory allocation to the first element of the tensor...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00217">TensorInfo.h:217</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a34177e00ce3d627e8a6a9ca215aaddfb"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a34177e00ce3d627e8a6a9ca215aaddfb">arm_compute::TensorAllocator::set_associated_memory_group</a></div><div class="ttdeci">void set_associated_memory_group(IMemoryGroup *associated_memory_group)</div><div class="ttdoc">Associates the tensor with a memory group. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00165">TensorAllocator.cpp:165</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a943854ce6f3aafac2714340e0915de75"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a943854ce6f3aafac2714340e0915de75">arm_compute::TensorAllocator::operator=</a></div><div class="ttdeci">TensorAllocator &amp; operator=(const TensorAllocator &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copy assigned (As this class contains pointers) ...</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00234">TensorInfo.h:234</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a9eed476cf46a22a3ce6ebd8ba22e8945"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a9eed476cf46a22a3ce6ebd8ba22e8945">arm_compute::utility::check_aligned</a></div><div class="ttdeci">bool check_aligned(void *ptr, const size_t alignment)</div><div class="ttdoc">Checks if a pointer complies with a given alignment. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00194">Utility.h:194</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="src_2runtime_2_tensor_allocator_8cpp.xhtml">TensorAllocator.cpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:54 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
