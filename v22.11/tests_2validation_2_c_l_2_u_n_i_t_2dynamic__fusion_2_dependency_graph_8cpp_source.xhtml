<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/CL/UNIT/dynamic_fusion/DependencyGraph.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('tests_2validation_2_c_l_2_u_n_i_t_2dynamic__fusion_2_dependency_graph_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DependencyGraph.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="tests_2validation_2_c_l_2_u_n_i_t_2dynamic__fusion_2_dependency_graph_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef ENABLE_EXPERIMENTAL_DYNAMIC_FUSION</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_dependency_graph_8h.xhtml">arm_compute/core/experimental/DependencyGraph.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asserts_8h.xhtml">tests/framework/Asserts.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2framework_2_macros_8h.xhtml">tests/framework/Macros.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">arm_compute::experimental::dynamic_fusion</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#acd09bed517e43d28823e69494f259835">TEST_SUITE</a>(CL)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#acd09bed517e43d28823e69494f259835">TEST_SUITE</a>(UNIT)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#acd09bed517e43d28823e69494f259835">TEST_SUITE</a>(DYNAMIC_FUSION)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#acd09bed517e43d28823e69494f259835">TEST_SUITE</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a347bf89626357da914ccb6b094ee20a2">   44</a></span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a>(Correct_Graph_Creation_Should_Pass, framework::<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>::ALL)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> graph{};</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t0 = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t1 = graph.add_tensor();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t2 = graph.add_tensor();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t3 = graph.add_tensor();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t4 = graph.add_tensor();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> o0 = graph.add_operator({ t0, t1 }, { t2 }).second;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> o1 = graph.add_operator({ t3, t2 }, { t4 }).second;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(graph.number_of_ops(), 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, framework::LogLevel::ERRORS);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(graph.number_of_tensors(), 5<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, framework::LogLevel::ERRORS);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> ref_graph</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="comment">// src_tensors</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            { o0, { t0, t1 } },</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            { o1, { t3, t2 } },</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        },</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="comment">// dst_tensors</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            { o0, { t2 } },</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            { o1, { t4 } },</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        },</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="comment">// src_ops</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            { t0, {} },</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            { t1, {} },</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            { t2, { o0 } },</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            { t3, {} },</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            { t4, { o1 } },</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        },</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="comment">// dst_ops</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            { t0, { o0 } },</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            { t1, { o0 } },</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            { t2, { o1 } },</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            { t3, { o1 } },</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            { t4, {} },</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    };</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(graph == ref_graph, framework::LogLevel::ERRORS);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cd9363ef9189341b8a4ebe7a6c60354">   92</a></span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a>(Correct_Merge_Points_Should_Enable_Graph_Expansion, framework::DatasetMode::ALL)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// Merge points are a simple way to collapse &quot;graph of graphs&quot; into a single graph</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Suppose we have a top-level graph g0</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> g0{};</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      g0_t0 = g0.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      g0_t1 = g0.add_tensor();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      g0_t2 = g0.add_tensor();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      g0_t3 = g0.add_tensor();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      g0_t4 = g0.add_tensor();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    g0.add_operator({ g0_t0, g0_t1 }, { g0_t2 }); <span class="comment">// g0_o0</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    g0.add_operator({ g0_t3, g0_t2 }, { g0_t4 }); <span class="comment">// g0_o1</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Then g0 expands into g1, with additional nodes added in-between &quot;merge point tensors&quot;</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Note that the expansion logic may be local to each operator node</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> g1{};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// g0_o0 expands into g1_o0, g1_o1, g1_o2</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t0 = g1.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>(g0_t0);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t1 = g1.add_tensor(g0_t1);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t2 = g1.add_tensor();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t3 = g1.add_tensor();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t4 = g1.add_tensor(g0_t2);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_o0 = g1.add_operator({ g1_t0 }, { g1_t2 }).second;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_o1 = g1.add_operator({ g1_t1 }, { g1_t3 }).second;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_o2 = g1.add_operator({ g1_t2, g1_t3 }, { g1_t4 }).second;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// g0_o1 expands into g1_o3</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t5 = g1.add_tensor(g0_t3);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t6 = g1.add_tensor(g0_t2);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_t7 = g1.add_tensor(g0_t4);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(g1_t4, g1_t6, framework::LogLevel::ERRORS); <span class="comment">// both associate with the same merge point g0_t2, thus they should point to the same tensor in g1</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> g1_o3 = g1.add_operator({ g1_t5, g1_t6 }, { g1_t7 }).second;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> ref_graph</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">// src_tensors</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            { g1_o0, { g1_t0 } },</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            { g1_o1, { g1_t1 } },</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            { g1_o2, { g1_t2, g1_t3 } },</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            { g1_o3, { g1_t5, g1_t4 } },</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        },</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="comment">// dst_tensors</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            { g1_o0, { g1_t2 } },</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            { g1_o1, { g1_t3 } },</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            { g1_o2, { g1_t4 } },</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            { g1_o3, { g1_t7 } },</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        },</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="comment">// src_ops</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            { g1_t0, {} },</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            { g1_t1, {} },</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            { g1_t2, { g1_o0 } },</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            { g1_t3, { g1_o1 } },</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            { g1_t4, { g1_o2 } },</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            { g1_t5, {} },</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            { g1_t7, { g1_o3 } },</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        },</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="comment">// dst_ops</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            { g1_t0, { g1_o0 } },</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            { g1_t1, { g1_o1 } },</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            { g1_t2, { g1_o2 } },</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            { g1_t3, { g1_o2 } },</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            { g1_t4, { g1_o3 } },</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            { g1_t5, { g1_o3 } },</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            { g1_t7, {} },</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        },</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">// merge points</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            { g0_t0, g1_t0 },</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            { g0_t1, g1_t1 },</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            { g0_t2, g1_t4 },</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            { g0_t3, g1_t5 },</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            { g0_t4, g1_t7 },</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    };</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(g1 == ref_graph, framework::LogLevel::ERRORS);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4b3cb118ac10027f6f2c31d71ca613a1">  173</a></span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a>(Path_Existence_Check_0, framework::DatasetMode::ALL)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> graph{};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t0 = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t1 = graph.add_tensor();</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t2 = graph.add_tensor();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t3 = graph.add_tensor();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t4 = graph.add_tensor();</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t5 = graph.add_tensor();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t6 = graph.add_tensor();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t7 = graph.add_tensor();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o0 = graph.add_operator({ t1 }, { t3, t4 }).second;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o1 = graph.add_operator({ t3 }, { t5 }).second;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o2 = graph.add_operator({ t5, t6 }, { t7 }).second;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o3 = graph.add_operator({ t4 }, { t6 }).second;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o4 = graph.add_operator({ t0, t5 }, { t2 }).second;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(o1, o3);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>((graph.path_exists_from_tensor_to_op(t3, o2)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>((graph.path_exists_from_tensor_to_op(t1, o4)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(!(graph.path_exists_from_tensor_to_op(t2, o4)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(!(graph.path_exists_from_tensor_to_op(t0, o2)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>((graph.path_exists_from_op_to_op(o0, o2)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(!(graph.path_exists_from_op_to_op(o2, o0)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(!(graph.path_exists_from_op_to_op(o2, o4)), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad26710cd3a149387d415c1785511db20">  203</a></span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a>(Correct_Topological_Sort_Should_Pass, framework::DatasetMode::ALL)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> graph{};</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t0 = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t1 = graph.add_tensor();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t2 = graph.add_tensor();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t3 = graph.add_tensor();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t4 = graph.add_tensor();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t5 = graph.add_tensor();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t6 = graph.add_tensor();</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t7 = graph.add_tensor();</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o0 = graph.add_operator({ t1 }, { t3, t4 }).second;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o1 = graph.add_operator({ t3 }, { t5 }).second;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o2 = graph.add_operator({ t5, t6 }, { t7 }).second;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o3 = graph.add_operator({ t4 }, { t6 }).second;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      o4 = graph.add_operator({ t0, t5 }, { t2 }).second;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> res = graph.topological_sort();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(<span class="keywordtype">bool</span>(res.first), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::vector&lt;DependencyGraph::OpPack&gt; ref_sorted_op_packs</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        { o0, { t1 }, { t3, t4 } },</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        { o1, { t3 }, { t5 } },</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        { o3, { t4 }, { t6 } },</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        { o4, { t0, t5 }, { t2 } },</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        { o2, { t5, t6 }, { t7 } },</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    };</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>((res.second == ref_sorted_op_packs), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5be6ac8ab0608f55f9fa1b2058cde096">  234</a></span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a>(Cycles_Should_Fail, framework::DatasetMode::ALL)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> graph{};</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t0 = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t1 = graph.add_tensor();</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t2 = graph.add_tensor();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t3 = graph.add_tensor();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    graph.add_operator({ t0, t1 }, { t2 });</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    graph.add_operator({ t2 }, { t1, t3 }); <span class="comment">// Ideally error should occur here</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> res = graph.topological_sort();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(!<span class="keywordtype">bool</span>(res.first), framework::LogLevel::ERRORS);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a98822cf3475c604b4ee829ae18110330">  248</a></span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a>(Loops_Should_Fail, framework::DatasetMode::ALL)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;{</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> graph{};</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t0 = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t1 = graph.add_tensor();</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      t2 = graph.add_tensor();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="_asserts_8h.xhtml#a7eff2fef79d86eaa0510cb8ae0cf83d3">ARM_COMPUTE_EXPECT_THROW</a>(graph.add_operator({ t0, t2 }, { t1, t2 }).first, framework::LogLevel::ERRORS);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(t0, t1, t2);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a603cb7f45efd81606e51686da9aeebd9">TEST_SUITE_END</a>() <span class="comment">// DependencyGraph</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a603cb7f45efd81606e51686da9aeebd9">TEST_SUITE_END</a>() <span class="comment">// DYNAMIC_FUSION</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a603cb7f45efd81606e51686da9aeebd9">TEST_SUITE_END</a>() <span class="comment">// UNIT</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<a class="code" href="tests_2framework_2_macros_8h.xhtml#a603cb7f45efd81606e51686da9aeebd9">TEST_SUITE_END</a>() <span class="comment">// CL</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_EXPERIMENTAL_DYNAMIC_FUSION */</span><span class="preprocessor"></span></div><div class="ttc" id="arm__compute_2core_2experimental_2_dependency_graph_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_dependency_graph_8h.xhtml">DependencyGraph.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">arm_compute::experimental::dynamic_fusion::DependencyGraph</a></div><div class="ttdoc">The dependency graph of a workload, where the nodes are of 2 types: Tensor or Operator Represented as...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_dependency_graph_8h_source.xhtml#l00051">DependencyGraph.h:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a21d46af8bdb7e587be804b405b63ac3d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_tensor</a></div><div class="ttdeci">Id add_tensor(Id merge_tensor=empty_id())</div><div class="ttdoc">Add a new tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00061">DependencyGraph.cpp:61</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_a7eff2fef79d86eaa0510cb8ae0cf83d3"><div class="ttname"><a href="_asserts_8h.xhtml#a7eff2fef79d86eaa0510cb8ae0cf83d3">ARM_COMPUTE_EXPECT_THROW</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT_THROW(X, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00187">Asserts.h:187</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_ac057d80e0c27881ee453299d98a878f4"><div class="ttname"><a href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT_EQUAL(X, Y, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00111">Asserts.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="tests_2framework_2_macros_8h_xhtml_acd09bed517e43d28823e69494f259835"><div class="ttname"><a href="tests_2framework_2_macros_8h.xhtml#acd09bed517e43d28823e69494f259835">TEST_SUITE</a></div><div class="ttdeci">#define TEST_SUITE(SUITE_NAME)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_macros_8h_source.xhtml#l00034">Macros.h:34</a></div></div>
<div class="ttc" id="tests_2framework_2_macros_8h_xhtml_a846b2e70d2ba2180ccb81045c88b8409"><div class="ttname"><a href="tests_2framework_2_macros_8h.xhtml#a846b2e70d2ba2180ccb81045c88b8409">TEST_CASE</a></div><div class="ttdeci">#define TEST_CASE(TEST_NAME, MODE)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_macros_8h_source.xhtml#l00180">Macros.h:180</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">arm_compute::test::framework::DatasetMode</a></div><div class="ttdeci">DatasetMode</div><div class="ttdoc">Possible dataset modes. </div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00040">DatasetModes.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="tests_2framework_2_macros_8h_xhtml"><div class="ttname"><a href="tests_2framework_2_macros_8h.xhtml">Macros.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">arm_compute::experimental::dynamic_fusion</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00041">ClWorkload.h:41</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_adc60af942e951dc93e22b97b41809b51"><div class="ttname"><a href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT(X, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00131">Asserts.h:131</a></div></div>
<div class="ttc" id="tests_2framework_2_macros_8h_xhtml_a603cb7f45efd81606e51686da9aeebd9"><div class="ttname"><a href="tests_2framework_2_macros_8h.xhtml#a603cb7f45efd81606e51686da9aeebd9">TEST_SUITE_END</a></div><div class="ttdeci">#define TEST_SUITE_END()</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_macros_8h_source.xhtml#l00039">Macros.h:39</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml"><div class="ttname"><a href="_asserts_8h.xhtml">Asserts.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_f7024513cd67abef53e86ee9382ac5ce.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_4fe3055359cf5438733b5e64b064b197.xhtml">UNIT</a></li><li class="navelem"><a class="el" href="dir_1841df5e0440ca053396ba06955277a7.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2dynamic__fusion_2_dependency_graph_8cpp.xhtml">DependencyGraph.cpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:49 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
