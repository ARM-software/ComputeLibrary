<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/NEON/LSTMLayerQuantized.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_n_e_o_n_2_l_s_t_m_layer_quantized_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">LSTMLayerQuantized.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_o_n_2_l_s_t_m_layer_quantized_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_l_s_t_m_layer_quantized_8h.xhtml">arm_compute/runtime/NEON/functions/NELSTMLayerQuantized.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_accessor_8h.xhtml">tests/NEON/Accessor.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_padding_calculator_8h.xhtml">tests/PaddingCalculator.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_utils_8h.xhtml">tests/Utils.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;tests/datasets/LSTMLayerDataset.h&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asserts_8h.xhtml">tests/framework/Asserts.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2framework_2_macros_8h.xhtml">tests/framework/Macros.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_datasets_8h.xhtml">tests/framework/datasets/Datasets.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validation_8h.xhtml">tests/validation/Validation.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(Tensor &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;v)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Import memory accounting for padding</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    TensorShape t_shape = tensor.info()-&gt;tensor_shape();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Window      window;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    window.use_tensor_dimensions(t_shape);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Iterator out(&amp;tensor, window);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) = v[<a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(t_shape, <span class="keywordtype">id</span>)];</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    },</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    out);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(SimpleTensor&lt;T&gt; &amp;tensor, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;v)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::memcpy(tensor.data(), v.data(), <span class="keyword">sizeof</span>(T) * v.size());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/** Tolerance for quantized asymmetric operations */</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#if defined(__aarch64__)</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;constexpr AbsoluteTolerance&lt;int16_t&gt; tolerance_qsymm16(0);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#else  // defined(__aarch64__)</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;constexpr AbsoluteTolerance&lt;int16_t&gt; tolerance_qsymm16(1);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#endif // defined(__aarch64__)</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cedfa50a34b1c89477ba0d8e7bb4c3c">TEST_SUITE</a>(NEON)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cedfa50a34b1c89477ba0d8e7bb4c3c">TEST_SUITE</a>(LSTMLayerQuantized)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">// *INDENT-OFF*</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">// clang-format off</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cedfa50a34b1c89477ba0d8e7bb4c3c">TEST_SUITE</a>(IntegrationTestCase)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cedfa50a34b1c89477ba0d8e7bb4c3c">TEST_SUITE</a>(MultSmallerEq1)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad1506e225a5eac0b0b0a4b98b38750df">TEST_CASE</a>(RunSmall, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfab829534c7b40afdbd3c3ffea05202a97">framework::DatasetMode::PRECOMMIT</a>)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size  = 2;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>  = 2;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a> = 4;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>(1.f / 128.f, 128);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>(1.f / 128.f, 128);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a20c95b3935143dddbf37176fa0562685">qsymm_3</a>(8.f / 32768.f, 0);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">qsymm_4</a>(16.f / 32768.f, 0);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>, batch_size };</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>, output_size };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, output_size };</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, batch_size};</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>{ output_size };</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>      = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>     = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>       = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>     = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3586fa7cce76c57e1cce83b2add420de">recurrent_to_input_weights</a>  = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a> = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>   = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a> = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5061c02d0093b981703ab63fa7ddb13e">input_gate_bias</a>             = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>            = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a69aaf7df811f8c7750cae785ea6f9719">cell_gate_bias</a>              = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>            = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// LSTM input</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// LSTM output state</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8e8cda25052994ca279b7ab21a8beda8">output_state</a> = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// LSTM cell state</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a34e65b7d309d497fc82a9515166cde38">cell_state</a> = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">qsymm_4</a>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    NELSTMLayerQuantized <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0dad1220a6a2995196ead0bd79956bbc">lstmq</a>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    lstmq.<a class="code" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml#ab90e9ae19db4dbc4f316851b03402bfa">configure</a>(&amp;input, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>, &amp;input_to_forget_weights, &amp;input_to_cell_weights, &amp;input_to_output_weights,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    &amp;recurrent_to_input_weights, &amp;recurrent_to_forget_weights, &amp;recurrent_to_cell_weights, &amp;recurrent_to_output_weights,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    &amp;input_gate_bias, &amp;forget_gate_bias, &amp;cell_gate_bias, &amp;output_gate_bias, &amp;cell_state, &amp;output_state, &amp;cell_state, &amp;output_state);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    input.allocator()-&gt;allocate();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>.allocator()-&gt;allocate();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    input_to_forget_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    input_to_cell_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    input_to_output_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    recurrent_to_input_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    recurrent_to_forget_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    recurrent_to_cell_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    recurrent_to_output_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    input_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    forget_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    cell_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    output_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    cell_state.allocator()-&gt;allocate();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    output_state.allocator()-&gt;allocate();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Fill weights and biases</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>, std::vector&lt;uint8_t&gt;{ 47,  168,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                              66,  239,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                                               6,   42,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                                             237,  236 });</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_forget_weights, std::vector&lt;uint8_t&gt; { 204,  193,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                                148,  59,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                                113,  17,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                                 66, 197 });</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_cell_weights, std::vector&lt;uint8_t&gt; { 172,  101,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                                              184, 209,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                                              165,  82,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                                              108, 209 });</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_output_weights, std::vector&lt;uint8_t&gt; { 203, 244,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                                                219, 114,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                                                130,  16,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                                                163, 222 });</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_input_weights, std::vector&lt;uint8_t&gt; { 162, 168,  7,  95,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                                                    91, 155, 108, 216,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                                                   255, 100,  48, 188,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                                                    58,  37, 186, 147 });</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_forget_weights, std::vector&lt;uint8_t&gt; {  46,  58,  47, 170,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                                    246,  96,  12,  99,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                                     68,  23, 186, 161,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                    237, 164,  89,   6 });</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_cell_weights, std::vector&lt;uint8_t&gt; { 234,  99,   71, 206,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                                                  205, 159,   64, 253,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                                  191, 148,  116,   8,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                                  209, 136,   59, 138 });</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_output_weights, std::vector&lt;uint8_t&gt; {  23, 241, 137, 36,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                                                    206,   5, 227, 56,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                                    254, 176, 231, 47,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                                     18, 201, 161, 11 });</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_gate_bias, std::vector&lt;int&gt;  {-103038,   30525,  115255, -38154 });</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(forget_gate_bias, std::vector&lt;int&gt; { -23428,  126970,  116806,  46307 });</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(cell_gate_bias, std::vector&lt;int&gt;   { 128006,   69949,  -42808,  42568 });</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(output_gate_bias, std::vector&lt;int&gt; { -67066,  -53607,   47233,  7300  });</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    SimpleTensor&lt;uint8_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>(output_shape, DataType::QASYMM8, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Initialize state</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(output_state, std::vector&lt;uint8_t&gt; { 128, 128, 128, 128,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                                     128, 128, 128, 128 });</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(cell_state, std::vector&lt;int16_t&gt; { 0, 0, 0, 0,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                                   0, 0, 0, 0 });</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// First input</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input, std::vector&lt;uint8_t&gt; { 106,  193,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                              155,  150 });</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 128, 130,  36, 134,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                        128, 131,  35, 133 });</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    lstmq.run();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, tolerance_qsymm16);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Second input</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 128, 129, 12, 137,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                                        128, 131, 10, 136 });</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    lstmq.run();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, tolerance_qsymm16);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// Third input</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 128, 129, 8, 140,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                        128, 130, 6, 138 });</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    lstmq.run();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, tolerance_qsymm16);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad1506e225a5eac0b0b0a4b98b38750df">TEST_CASE</a>(RunLarge, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfab829534c7b40afdbd3c3ffea05202a97">framework::DatasetMode::PRECOMMIT</a>)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size  = 16;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_size  = 8;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> output_size = 8;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>(1.f / 128.f, 128);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>(1.f / 128.f, 128);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a20c95b3935143dddbf37176fa0562685">qsymm_3</a>(8.f / 32768.f, 0);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">qsymm_4</a>(16.f / 32768.f, 0);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    TensorShape input_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>, batch_size };</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    TensorShape input_weights_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>, output_size };</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    TensorShape recurrent_weights_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, output_size };</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    TensorShape output_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, batch_size};</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    TensorShape bias_shape{ output_size };</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>      = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">auto</span> input_to_forget_weights     = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">auto</span> input_to_cell_weights       = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">auto</span> input_to_output_weights     = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">auto</span> recurrent_to_input_weights  = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">auto</span> recurrent_to_forget_weights = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">auto</span> recurrent_to_cell_weights   = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">auto</span> recurrent_to_output_weights = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">auto</span> input_gate_bias             = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">auto</span> forget_gate_bias            = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">auto</span> cell_gate_bias              = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">auto</span> output_gate_bias            = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// LSTM input</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">auto</span> input = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// LSTM output state</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">auto</span> output_state = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// LSTM cell state</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">auto</span> cell_state = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">qsymm_4</a>);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    NELSTMLayerQuantized <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0dad1220a6a2995196ead0bd79956bbc">lstmq</a>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    lstmq.<a class="code" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml#ab90e9ae19db4dbc4f316851b03402bfa">configure</a>(&amp;input, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>, &amp;input_to_forget_weights, &amp;input_to_cell_weights, &amp;input_to_output_weights,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    &amp;recurrent_to_input_weights, &amp;recurrent_to_forget_weights, &amp;recurrent_to_cell_weights, &amp;recurrent_to_output_weights,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    &amp;input_gate_bias, &amp;forget_gate_bias, &amp;cell_gate_bias, &amp;output_gate_bias, &amp;cell_state, &amp;output_state, &amp;cell_state, &amp;output_state);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    input.allocator()-&gt;allocate();</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>.allocator()-&gt;allocate();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    input_to_forget_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    input_to_cell_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    input_to_output_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    recurrent_to_input_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    recurrent_to_forget_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    recurrent_to_cell_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    recurrent_to_output_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    input_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    forget_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    cell_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    output_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    cell_state.allocator()-&gt;allocate();</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    output_state.allocator()-&gt;allocate();</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Fill weights and biases</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>, std::vector&lt;uint8_t&gt;{ 141,  89, 200, 180,  46,  50,  87, 128,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                                              149, 227, 177, 187, 212, 229,  54, 111,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                                              131, 116,   3,  58, 196,  26, 131, 255,</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                                               22, 106, 216,  69, 239,  12, 232, 207,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                              184,  56, 236, 172,  28, 143, 161, 124,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                              255,  33, 197, 122,  47, 197,  26, 229,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                               91,  79,  11, 160,  26,  80, 100,  36,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                                              248, 186,  97,  61, 125,  46,  14, 100, });</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_forget_weights, std::vector&lt;uint8_t&gt; { 237, 165, 141, 249,  72, 116, 36 , 115,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                                234, 213,  85,  84,  59,  62, 150, 246,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                                182, 102, 158, 214, 182, 183,  94,  11,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                                158, 192,  92, 189, 160, 219, 206, 249,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                                                 88, 213, 193, 244, 151,  72, 129,  49,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                                239,  83, 106,   9, 169, 187, 125, 171,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                                 32, 141, 126,  92,  13,  36, 224, 150,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                                187, 250, 178, 169,  89, 214,  91, 173 });</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_cell_weights, std::vector&lt;uint8_t&gt; {  93, 103, 226, 139, 185, 252, 129, 171,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                              159,  32,  25, 175, 224, 183, 165,  35,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                              207,  69, 238, 228, 149, 214,  79,   6,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                                5,  66, 102,  14,  19, 111,  36, 143,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                               22,  85,  13,  78, 236, 121, 122,  77,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                              249,  39,  88,  12, 205, 143,  93, 240,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                              167,  89, 188,  50,  73,  69, 201, 251,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                               59,  32, 203, 184, 139, 191, 199,  74});</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_output_weights, std::vector&lt;uint8_t&gt; { 205,   7,  95, 104, 252, 143, 226,  73,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                                                229, 114, 152, 171, 221, 153,  73, 229,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                                                153, 165, 223, 239, 100,  38, 172, 211,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                                                226, 133, 239, 207, 116, 230, 170, 100,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                                                241,  95, 171, 124,  63, 115,  32, 127,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                                                141, 239,  53, 193, 201,  53, 104, 178,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                                186, 212, 167, 107, 226, 230,  71, 213,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                                148, 217,  19, 248, 233, 195, 183, 156 });</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_input_weights, std::vector&lt;uint8_t&gt; { 147, 112, 140, 103,   3, 255,  17,  49,</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                                                    84, 112, 144, 213, 138, 142, 112,  66,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                                                   117,  30, 101,  35,  25, 132, 211, 229,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                                                   183, 208, 102,  16,  38,  85, 101, 152,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                                   226,  83, 132,  22, 161, 110, 157, 129,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                                   184,  63, 168,  42, 220, 126, 209, 157,</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                                                     5,  88, 243,  83, 249,  19, 226, 209,</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                                   173,  96, 185,  77, 146, 227, 238, 136 });</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_forget_weights, std::vector&lt;uint8_t&gt; {  52, 132,  92, 200, 213,  32, 213,  37,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                                                    116, 142, 116, 180,   4, 172, 158, 143,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                                    110,  40,  99,  28, 221, 153, 133,   2,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                                                    247, 144, 198, 100,  20,  15, 221, 196,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                                    159, 178, 188, 151, 171,  15,  25, 217,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                                    178, 109, 110, 118, 128,  39, 232, 234,</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                                    184, 214, 177,  13,  56,   6,  28, 252,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                                                     89, 187, 242,  59, 146, 111, 132, 129});</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_cell_weights, std::vector&lt;uint8_t&gt; {  70,  44, 137,  29,  36, 127,   1, 241,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                                                   26, 241, 142, 114,  67, 181,  49,  57,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                                                  131, 152, 175,  77,  23,  63,  37, 124,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                                                  150, 113,  95, 103, 110, 201,  69,  97,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                                                  196, 242,  62, 214,  66,  19,  45, 135,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                                                   22, 168, 149, 104,  77, 101,  36,  68,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                                                  170, 116, 222, 100, 109,   1, 154,  18,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                                                  133, 215, 105,  93,  31,  57, 231, 112 });</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_output_weights, std::vector&lt;uint8_t&gt; { 45 ,  181 ,  220 ,  219 ,   49  ,  63 ,   49  , 129,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                                     7 ,  166 ,  104 ,  114 ,   83  ,  40 ,    1  , 195,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                                                   245 ,  142 ,   82 ,  232 ,  104  , 245 ,   82  , 196,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                                                   111 ,   56 ,  156 ,    9 ,  141  , 240 ,  180  , 148,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                                                   247 ,  198 ,  234 ,  137 ,   13  , 210 ,  161  , 192,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                                   196 ,   59 ,  233 ,  184 ,  142  , 187 ,  140  , 166,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                                                     2 ,   95 ,  152 ,   46 ,   71  ,  46 ,  113  ,  32,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                                                   175 ,  229 ,   86 ,   87 ,   62  ,  93 ,   74  , 130});</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_gate_bias, std::vector&lt;int&gt;  {  -40040, -106916,  -92315,  -79123,   45160, -17954,   50962, -63758 });</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(forget_gate_bias, std::vector&lt;int&gt; { -128514,    8463,  -57831,  116977,  106547, -28132, -124557,  44941 });</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(cell_gate_bias, std::vector&lt;int&gt;   { 88388  ,  123601, -116148,  -13022,   21619,  48926,   57523,  39332 });</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(output_gate_bias, std::vector&lt;int&gt; {  59485 ,  -33070,   21386, -100633, -115959, 125768,  -56407,  24897 });</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    SimpleTensor&lt;uint8_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>(output_shape, DataType::QASYMM8, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// Initialize state</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(output_state, std::vector&lt;uint8_t&gt; { 128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                                     128, 128, 128, 128, 128, 128, 128, 128 });</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(cell_state, std::vector&lt;int16_t&gt; { 0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                                   0, 0, 0, 0, 0, 0, 0, 0});</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="comment">// First input</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input, std::vector&lt;uint8_t&gt; { 247,  203, 159, 131, 182, 114, 207, 195,</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                              48 ,  61 , 154,  16,  80, 101, 116, 255,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                              50 , 115 ,  45, 186,  75, 212,  98,  48,</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                              88 , 146 ,  24, 143, 218, 174, 203, 200,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                             239 ,  16 ,  66, 136, 234,  54,  94,  51,</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                             101 , 128 , 220, 213, 164,  82, 137, 255,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                              70 , 165 , 234, 220,  66,  35, 183, 206,</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                              39 ,  57 , 180, 202,  23, 172, 224, 109,</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                             102 , 215 , 186,  82, 215, 147,  85, 187,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                              96 , 249 ,  59, 116, 150,  44, 167, 128,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                              34 , 217 , 148, 193, 243,  38, 250, 208,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                             112 , 130 , 208,  29,  16, 122,  20,  92,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                              24 ,  72 , 104,  29, 150, 233, 151,  19,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                             158 , 192 , 254,  70,  73, 142, 106, 152,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                               3 ,  61 ,  24, 135, 212,   9,  80, 234,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                             147 , 246 ,  83, 249,  49,  14,  68,  50});</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; {131, 128,  128,  128,  128,  180,  129,  133,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                       136, 128,  126,  128,  128,  173,  135,  130,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                       160, 128,  128,  128,  128,  138,  132,  129,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                       131, 128,  127,  128,  128,  169,  129,  131,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                       133, 128,  128,  128,  128,  182,  130,  129,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                       131, 128,  128,  128,  128,  163,  129,  130,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                                       131, 128,  128,  128,  128,  149,  132,  129,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                                       143, 128,  127,  128,  128,  150,  134,  131,</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                                       134, 128,  128,  128,  128,  167,  130,  130,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                                       131, 128,  128,  128,  128,  152,  132,  129,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                                       128, 128,  128,  128,  128,  169,  130,  130,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                                       173, 128,  128,  128,  128,  148,  139,  130,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                                       152, 128,  128,  128,  128,  168,  139,  132,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                                       147, 128,  128,  128,  128,  161,  131,  132,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                                       130, 128,  128,  128,  128,  159,  134,  128,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                       140, 128,  128,  128,  128,  133,  132,  128 });</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    lstmq.run();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, tolerance_qsymm16);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// Second input</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 130,   128,   128,   128,   128,   205,   129,   137,</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                        135,   128,   127,   128,   128,   190,   137,   132,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                                        160,   128,   128,   128,   128,   142,   133,   131,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                                        130,   128,   128,   128,   128,   185,   129,   133,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                                        132,   128,   128,   128,   128,   198,   131,   130,</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                                        130,   128,   128,   128,   128,   178,   130,   131,</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                                                        131,   128,   128,   128,   128,   158,   132,   131,</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                                        142,   128,   127,   128,   128,   158,   135,   134,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                                        133,   128,   128,   128,   128,   178,   131,   132,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                                        131,   128,   128,   128,   128,   160,   132,   130,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                                        128,   128,   128,   128,   128,   190,   131,   131,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                                        170,   128,   128,   128,   128,   157,   142,   131,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                                        149,   128,   128,   128,   128,   178,   142,   135,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                                        145,   128,   128,   128,   129,   173,   132,   135,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                                        129,   128,   128,   128,   128,   171,   134,   129,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                                        140,   128,   128,   128,   128,   135,   132,   129});</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    lstmq.run();</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, tolerance_qsymm16);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a512eb649fdb115f2dee5df9f1d156b16">TEST_SUITE_END</a>() <span class="comment">// MultSmallerEq1</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cedfa50a34b1c89477ba0d8e7bb4c3c">TEST_SUITE</a>(MultGreater1)</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad1506e225a5eac0b0b0a4b98b38750df">TEST_CASE</a>(RunSmall, framework::<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>::PRECOMMIT)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="comment">//Input sequence length is 1</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size  = 2;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_size  = 2;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> output_size = 4;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>(1.f / 128.f, 128);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>(1.f / 16.f, 16);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a20c95b3935143dddbf37176fa0562685">qsymm_3</a>(8.f / 32768.f, 0);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">qsymm_4</a>(16.f / 32768.f, 0);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    TensorShape input_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>, batch_size };</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    TensorShape input_weights_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>, output_size };</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    TensorShape recurrent_weights_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, output_size };</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    TensorShape output_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, batch_size};</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    TensorShape bias_shape{ output_size };</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>      = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keyword">auto</span> input_to_forget_weights     = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keyword">auto</span> input_to_cell_weights       = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">auto</span> input_to_output_weights     = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">input_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">auto</span> recurrent_to_input_weights  = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">auto</span> recurrent_to_forget_weights = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">auto</span> recurrent_to_cell_weights   = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keyword">auto</span> recurrent_to_output_weights = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">recurrent_weights_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">qweights</a>);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keyword">auto</span> input_gate_bias             = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keyword">auto</span> forget_gate_bias            = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keyword">auto</span> cell_gate_bias              = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keyword">auto</span> output_gate_bias            = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">bias_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="comment">// LSTM input</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keyword">auto</span> input = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="comment">// LSTM output state</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">auto</span> output_state = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// LSTM cell state</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keyword">auto</span> cell_state = create_tensor&lt;Tensor&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">qsymm_4</a>);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    NELSTMLayerQuantized <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0dad1220a6a2995196ead0bd79956bbc">lstmq</a>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    lstmq.<a class="code" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml#ab90e9ae19db4dbc4f316851b03402bfa">configure</a>(&amp;input, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>, &amp;input_to_forget_weights, &amp;input_to_cell_weights, &amp;input_to_output_weights,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    &amp;recurrent_to_input_weights, &amp;recurrent_to_forget_weights, &amp;recurrent_to_cell_weights, &amp;recurrent_to_output_weights,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                    &amp;input_gate_bias, &amp;forget_gate_bias, &amp;cell_gate_bias, &amp;output_gate_bias, &amp;cell_state, &amp;output_state, &amp;cell_state, &amp;output_state);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    input.allocator()-&gt;allocate();</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>.allocator()-&gt;allocate();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    input_to_forget_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    input_to_cell_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    input_to_output_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    recurrent_to_input_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    recurrent_to_forget_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    recurrent_to_cell_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    recurrent_to_output_weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    input_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    forget_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    cell_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    output_gate_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    cell_state.allocator()-&gt;allocate();</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    output_state.allocator()-&gt;allocate();</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="comment">// Fill weights and biases</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">input_to_input_weights</a>, std::vector&lt;uint8_t&gt;{ 122,  130,</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                                                              124,  134,</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                                                               120,   122,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                                                             134,  134 });</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_forget_weights, std::vector&lt;uint8_t&gt; { 204,  193,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                                                148,  59,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                                113,  17,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                                                 66, 197 });</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_cell_weights, std::vector&lt;uint8_t&gt; { 172,  101,</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                                              184, 209,</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                                              165,  82,</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                                              108, 209 });</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_to_output_weights, std::vector&lt;uint8_t&gt; { 203, 244,</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                                                219, 114,</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                                                130,  16,</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                                163, 222 });</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_input_weights, std::vector&lt;uint8_t&gt; { 162, 168,  7,  95,</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                                                    91, 155, 108, 216,</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                                                                   255, 100,  48, 188,</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                                                    58,  37, 186, 147 });</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_forget_weights, std::vector&lt;uint8_t&gt; {  46,  58,  47, 170,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                                                    246,  96,  12,  99,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                                                     68,  23, 186, 161,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                                                    237, 164,  89,   6 });</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_cell_weights, std::vector&lt;uint8_t&gt; { 234,  99,   71, 206,</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                                                  205, 159,   64, 253,</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                                                  191, 148,  116,   8,</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                                                                  209, 136,   59, 138 });</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(recurrent_to_output_weights, std::vector&lt;uint8_t&gt; {  23, 241, 137, 36,</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                                                    206,   5, 227, 56,</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                                    254, 176, 231, 47,</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                                                     18, 201, 161, 11 });</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input_gate_bias, std::vector&lt;int&gt;  {-103038,   30525,  115255, -38154 });</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(forget_gate_bias, std::vector&lt;int&gt; { -23428,  126970,  116806,  46307 });</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(cell_gate_bias, std::vector&lt;int&gt;   { 128006,   69949,  -42808,  42568 });</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(output_gate_bias, std::vector&lt;int&gt; { -67066,  -53607,   47233,  7300  });</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    SimpleTensor&lt;uint8_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>(output_shape, DataType::QASYMM8, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">qasymm</a>);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="comment">// Initialize state</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(output_state, std::vector&lt;uint8_t&gt; { 128, 128, 128, 128,</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                                     128, 128, 128, 128 });</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(cell_state, std::vector&lt;int16_t&gt; { 0, 0, 0, 0,</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                                   0, 0, 0, 0 });</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// First input</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(input, std::vector&lt;uint8_t&gt; { 106,  193,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                              155,  150 });</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 128, 128,  31, 128,</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                                                        128, 128,  31, 128 });</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    lstmq.run();</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="comment">// Second input</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 128, 128, 5, 128,</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                                                        128, 128, 5, 128 });</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    lstmq.run();</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// Third input</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">fill_tensor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>, std::vector&lt;uint8_t&gt; { 128, 128, 1, 128,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                                        128, 128, 1, 128, });</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    lstmq.run();</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">validate</a>(Accessor(output_state), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">expected_output</a>);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a512eb649fdb115f2dee5df9f1d156b16">TEST_SUITE_END</a>() <span class="comment">// MultGreater1</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a512eb649fdb115f2dee5df9f1d156b16">TEST_SUITE_END</a>() <span class="comment">// IntegrationTestCase</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">// clang-format on</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">// *INDENT-ON*</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a512eb649fdb115f2dee5df9f1d156b16">TEST_SUITE_END</a>() <span class="comment">// LSTMLayerQuantized</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a512eb649fdb115f2dee5df9f1d156b16">TEST_SUITE_END</a>() <span class="comment">// Neon</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="_accessor_8h_xhtml"><div class="ttname"><a href="_accessor_8h.xhtml">Accessor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a507bd7e4d98cb3e45d3e820d8bac422a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">arm_compute::test::validation::output_gate_bias</a></div><div class="ttdeci">auto output_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00483">LSTMLayerQuantized.cpp:483</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number </div></div>
<div class="ttc" id="_padding_calculator_8h_xhtml"><div class="ttname"><a href="_padding_calculator_8h.xhtml">PaddingCalculator.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a55daaf57fb833fc416d779c28f7a3c85"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">arm_compute::test::validation::forget_gate_bias</a></div><div class="ttdeci">auto forget_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00481">LSTMLayerQuantized.cpp:481</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a93550027861552f1292b652d85b27b7c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a93550027861552f1292b652d85b27b7c">arm_compute::test::validation::input_to_input_weights</a></div><div class="ttdeci">auto input_to_input_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00472">LSTMLayerQuantized.cpp:472</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_add0cebf7f56d2fb24512082e80eb00dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#add0cebf7f56d2fb24512082e80eb00dc">arm_compute::test::validation::qweights</a></div><div class="ttdeci">QuantizationInfo qweights(1.f/16.f, 16)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac62dfdcc14798598d953342789c9927e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">arm_compute::test::validation::recurrent_to_forget_weights</a></div><div class="ttdeci">auto recurrent_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00477">LSTMLayerQuantized.cpp:477</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8ad4a9123e325f198138c3ecf1993616"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8ad4a9123e325f198138c3ecf1993616">arm_compute::test::validation::expected_output</a></div><div class="ttdeci">SimpleTensor&lt; uint8_t &gt; expected_output(output_shape, DataType::QASYMM8, 1, qasymm)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a14f78505947c1a1bd529fca96241a771"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a14f78505947c1a1bd529fca96241a771">arm_compute::test::validation::recurrent_weights_shape</a></div><div class="ttdeci">TensorShape recurrent_weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00468">LSTMLayerQuantized.cpp:468</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a34e65b7d309d497fc82a9515166cde38"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a34e65b7d309d497fc82a9515166cde38">arm_compute::test::validation::cell_state</a></div><div class="ttdeci">auto cell_state</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00492">LSTMLayerQuantized.cpp:492</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cfab829534c7b40afdbd3c3ffea05202a97"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfab829534c7b40afdbd3c3ffea05202a97">arm_compute::test::framework::DatasetMode::PRECOMMIT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00388">Utils.h:388</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized_xhtml_ab90e9ae19db4dbc4f316851b03402bfa"><div class="ttname"><a href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml#ab90e9ae19db4dbc4f316851b03402bfa">arm_compute::CLLSTMLayerQuantized::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, const ICLTensor *input_to_input_weights, const ICLTensor *input_to_forget_weights, const ICLTensor *input_to_cell_weights, const ICLTensor *input_to_output_weights, const ICLTensor *recurrent_to_input_weights, const ICLTensor *recurrent_to_forget_weights, const ICLTensor *recurrent_to_cell_weights, const ICLTensor *recurrent_to_output_weights, const ICLTensor *input_gate_bias, const ICLTensor *forget_gate_bias, const ICLTensor *cell_bias, const ICLTensor *output_gate_bias, ICLTensor *cell_state_in, const ICLTensor *output_state_in, ICLTensor *cell_state_out, ICLTensor *output_state_out)</div><div class="ttdoc">Initialize function&amp;#39;s tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00060">CLLSTMLayerQuantized.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac547a66fe26967afb94760061ee0d0d1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">arm_compute::test::validation::input_to_cell_weights</a></div><div class="ttdeci">auto input_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">LSTMLayerQuantized.cpp:474</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a20c95b3935143dddbf37176fa0562685"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a20c95b3935143dddbf37176fa0562685">arm_compute::test::validation::qsymm_3</a></div><div class="ttdeci">QuantizationInfo qsymm_3(8.f/32768.f, 0)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af607b7b3379e1f6a6d4f4cbcceaaec94"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af607b7b3379e1f6a6d4f4cbcceaaec94">arm_compute::test::validation::input_weights_shape</a></div><div class="ttdeci">TensorShape input_weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00467">LSTMLayerQuantized.cpp:467</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aab02df8a9ee45153f2fd76e934407fbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">arm_compute::test::validation::recurrent_to_output_weights</a></div><div class="ttdeci">auto recurrent_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">LSTMLayerQuantized.cpp:479</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a79820c7442073b8eb22fb3eaef6fd6ba"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a79820c7442073b8eb22fb3eaef6fd6ba">arm_compute::test::validation::bias_shape</a></div><div class="ttdeci">TensorShape bias_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00470">LSTMLayerQuantized.cpp:470</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ace4dd633420fa8d8aa71f60ff730f01f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">arm_compute::test::validation::input_to_output_weights</a></div><div class="ttdeci">auto input_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">LSTMLayerQuantized.cpp:475</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af78b3c8c9ad65dcb4bfa1d2fee424308"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">const auto input_shape</div><div class="ttdoc">Validate test suite is to test ARM_COMPUTE_RETURN_ON_* macros we use to check the validity of given a...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00405">ConvolutionLayer.cpp:405</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">arm_compute::test::framework::DatasetMode</a></div><div class="ttdeci">DatasetMode</div><div class="ttdoc">Possible dataset modes. </div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00040">DatasetModes.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">const auto output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00408">ConvolutionLayer.cpp:408</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6a5eef7d8485a2b8c04bf9b4638a90e9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">arm_compute::test::validation::fill_tensor</a></div><div class="ttdeci">fill_tensor(input_to_input_weights, std::vector&lt; uint8_t &gt;{ 122, 130, 124, 134, 120, 122, 134, 134 })</div></div>
<div class="ttc" id="_datasets_8h_xhtml"><div class="ttname"><a href="_datasets_8h.xhtml">Datasets.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3586fa7cce76c57e1cce83b2add420de"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3586fa7cce76c57e1cce83b2add420de">arm_compute::test::validation::recurrent_to_input_weights</a></div><div class="ttdeci">auto recurrent_to_input_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">LSTMLayerQuantized.cpp:476</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a512eb649fdb115f2dee5df9f1d156b16"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a512eb649fdb115f2dee5df9f1d156b16">arm_compute::test::validation::TEST_SUITE_END</a></div><div class="ttdeci">TEST_SUITE_END() FIXTURE_DATA_TEST_CASE(RunSmall</div><div class="ttdoc">[CLActivationLayer Test snippet] </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_dequantization_layer_8cpp_source.xhtml#l00111">DequantizationLayer.cpp:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="_n_e_l_s_t_m_layer_quantized_8h_xhtml"><div class="ttname"><a href="_n_e_l_s_t_m_layer_quantized_8h.xhtml">NELSTMLayerQuantized.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a69aaf7df811f8c7750cae785ea6f9719"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a69aaf7df811f8c7750cae785ea6f9719">arm_compute::test::validation::cell_gate_bias</a></div><div class="ttdeci">auto cell_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">LSTMLayerQuantized.cpp:482</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2236dfe2a3fc5fa4e125348829cbeb2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">arm_compute::test::validation::recurrent_to_cell_weights</a></div><div class="ttdeci">auto recurrent_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">LSTMLayerQuantized.cpp:478</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a975901e0b4d6e387107c4d785c22edd5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">arm_compute::test::validation::validate</a></div><div class="ttdeci">validate(CLAccessor(output_state), expected_output)</div></div>
<div class="ttc" id="tests_2framework_2_macros_8h_xhtml"><div class="ttname"><a href="tests_2framework_2_macros_8h.xhtml">Macros.h</a></div></div>
<div class="ttc" id="tests_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5061c02d0093b981703ab63fa7ddb13e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5061c02d0093b981703ab63fa7ddb13e">arm_compute::test::validation::input_gate_bias</a></div><div class="ttdeci">auto input_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">LSTMLayerQuantized.cpp:480</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8e8cda25052994ca279b7ab21a8beda8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8e8cda25052994ca279b7ab21a8beda8">arm_compute::test::validation::output_state</a></div><div class="ttdeci">auto output_state</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00489">LSTMLayerQuantized.cpp:489</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6bb1fa96fb01419887f07ecd236c8cd4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">arm_compute::test::validation::input_size</a></div><div class="ttdeci">const int input_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00458">LSTMLayerQuantized.cpp:458</a></div></div>
<div class="ttc" id="_validation_8h_xhtml"><div class="ttname"><a href="_validation_8h.xhtml">Validation.h</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aee13fc8e41cf0443bbeab64e23eee1ec"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aee13fc8e41cf0443bbeab64e23eee1ec">arm_compute::test::validation::qasymm</a></div><div class="ttdeci">QuantizationInfo qasymm(1.f/128.f, 128)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad1506e225a5eac0b0b0a4b98b38750df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad1506e225a5eac0b0b0a4b98b38750df">arm_compute::test::validation::TEST_CASE</a></div><div class="ttdeci">TEST_CASE(FusedActivation, framework::DatasetMode::ALL)</div><div class="ttdoc">Validate fused activation expecting the following behaviours: </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00090">ArithmeticAddition.cpp:90</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a66b9829d1b2750c8f7bd6dad961cdc62"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a66b9829d1b2750c8f7bd6dad961cdc62">arm_compute::test::validation::qsymm_4</a></div><div class="ttdeci">QuantizationInfo qsymm_4(16.f/32768.f, 0)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a0dad1220a6a2995196ead0bd79956bbc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a0dad1220a6a2995196ead0bd79956bbc">arm_compute::test::validation::lstmq</a></div><div class="ttdeci">CLLSTMLayerQuantized lstmq</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00494">LSTMLayerQuantized.cpp:494</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6cedfa50a34b1c89477ba0d8e7bb4c3c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6cedfa50a34b1c89477ba0d8e7bb4c3c">arm_compute::test::validation::TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(QASYMM8_to_F32) FIXTURE_DATA_TEST_CASE(RunSmall</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad44f86834ae016bf696e8e664f39c136"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">arm_compute::test::validation::output_size</a></div><div class="ttdeci">const int output_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00459">LSTMLayerQuantized.cpp:459</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3b793c410cba57a1395184692a018356"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">arm_compute::test::validation::input_to_forget_weights</a></div><div class="ttdeci">auto input_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00473">LSTMLayerQuantized.cpp:473</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml"><div class="ttname"><a href="_asserts_8h.xhtml">Asserts.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_0538a82dae0483a21d0f1e9d7e0a45c6.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_o_n_2_l_s_t_m_layer_quantized_8cpp.xhtml">LSTMLayerQuantized.cpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
