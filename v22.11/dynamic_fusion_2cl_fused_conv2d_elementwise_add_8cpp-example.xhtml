<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<p>This example demonstrates how to fuse a Conv2d with an Addition using the new OperatorGraph API, and to run it with the Async Composite Operator.</p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><span class="comment"> * SOFTWARE.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">/// @example dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</span></div><div class="line"><span class="comment">/// @copybrief example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @page example_dynamic_fusion_cl_conv2d_elementwise_add Dynamic Fusion Example: Conv2d + Elementwise Addition (OpenCL target)</span></div><div class="line"><span class="comment">/// This example demonstrates how to fuse a Conv2d with an Addition using the new OperatorGraph API, and to run it with the Async Composite Operator</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="preprocessor">#ifdef ENABLE_EXPERIMENTAL_DYNAMIC_FUSION</span></div><div class="line"><span class="preprocessor">#ifndef ARM_COMPUTE_CL </span><span class="comment">/* Needed by Utils.cpp to handle OpenCL exceptions properly */</span><span class="preprocessor"></span></div><div class="line"><span class="preprocessor">#error &quot;This example needs to be built with -DARM_COMPUTE_CL&quot;</span></div><div class="line"><span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_cl_workload_8h.xhtml">arm_compute/core/experimental/ClWorkload.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_operator_graph_8h.xhtml">arm_compute/core/experimental/OperatorGraph.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h.xhtml">arm_compute/runtime/CL/CLTensor.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_8h.xhtml">arm_compute/runtime/CL/CLTuner.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_cl_composite_operator_8h.xhtml">arm_compute/runtime/experimental/ClCompositeOperator.h</a>&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="utils_2_type_printer_8h.xhtml">utils/TypePrinter.h</a>&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &quot;utils/Utils.h&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceutils.xhtml">utils</a>;</div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">arm_compute::experimental::dynamic_fusion</a>;</div><div class="line"></div><div class="line"><span class="preprocessor">#define TICK(clock_name) \</span></div><div class="line"><span class="preprocessor">    auto clock_name##_tick = std::chrono::high_resolution_clock::now();</span></div><div class="line"><span class="preprocessor">#define TOCK(clock_name, measurement_map)                                               \</span></div><div class="line"><span class="preprocessor">    auto clock_name##_tock                 = std::chrono::high_resolution_clock::now(); \</span></div><div class="line"><span class="preprocessor">    measurement_map[&quot;\&quot;&quot; #clock_name &quot;\&quot;&quot;] = duration_cast&lt;microseconds&gt;(clock_name##_tock - clock_name##_tick);</span></div><div class="line"><span class="preprocessor">#define TOCK_AVG(clock_name, measurement_map, num_iterations)                           \</span></div><div class="line"><span class="preprocessor">    auto clock_name##_tock                 = std::chrono::high_resolution_clock::now(); \</span></div><div class="line"><span class="preprocessor">    measurement_map[&quot;\&quot;&quot; #clock_name &quot;\&quot;&quot;] = duration_cast&lt;microseconds&gt;((clock_name##_tock - clock_name##_tick) / (num_iterations));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> std::chrono::duration_cast;</div><div class="line"><span class="keyword">using</span> std::chrono::microseconds;</div><div class="line"></div><div class="line"><span class="keyword">class </span>ClFusedConv2dEltwiseAddExample : <span class="keyword">public</span> Example</div><div class="line">{</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keywordtype">bool</span> do_setup(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)<span class="keyword"> override</span></div><div class="line"><span class="keyword">    </span>{</div><div class="line">        <span class="keywordtype">size_t</span>       ih;</div><div class="line">        <span class="keywordtype">size_t</span>       iw;</div><div class="line">        <span class="keywordtype">size_t</span>       ifm;</div><div class="line">        <span class="keywordtype">size_t</span>       wh;</div><div class="line">        <span class="keywordtype">size_t</span>       ww;</div><div class="line">        <span class="keywordtype">size_t</span>       ofm;</div><div class="line">        <span class="keywordtype">size_t</span>       tuner_choice;</div><div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_x;</div><div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_y;</div><div class="line">        <span class="keywordflow">if</span>(argc &lt; 10)</div><div class="line">        {</div><div class="line">            <span class="comment">// Print help</span></div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage:  ./cl_fused_conv2d_elementwise_add ih iw ifm wh ww ofm tuner_choice(0=Disable, 1=Rapid, 2=Normal, 3=Exhaustive) pad_x pad_y\n&quot;</span>;</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Too few or no input_matrices provided. Using shape config = SRGAN_0, tuner_choice=2\n\n&quot;</span>;</div><div class="line">            ih           = 512;</div><div class="line">            iw           = 512;</div><div class="line">            ifm          = 64;</div><div class="line">            wh           = 1;</div><div class="line">            ww           = 1;</div><div class="line">            ofm          = 3;</div><div class="line">            tuner_choice = 2;</div><div class="line">            pad_x        = 0;</div><div class="line">            pad_y        = 0;</div><div class="line">        }</div><div class="line">        <span class="keywordflow">else</span></div><div class="line">        {</div><div class="line">            ih           = strtol(argv[1], <span class="keyword">nullptr</span>, 10);</div><div class="line">            iw           = strtol(argv[2], <span class="keyword">nullptr</span>, 10);</div><div class="line">            ifm          = strtol(argv[3], <span class="keyword">nullptr</span>, 10);</div><div class="line">            wh           = strtol(argv[4], <span class="keyword">nullptr</span>, 10);</div><div class="line">            ww           = strtol(argv[5], <span class="keyword">nullptr</span>, 10);</div><div class="line">            ofm          = strtol(argv[6], <span class="keyword">nullptr</span>, 10);</div><div class="line">            tuner_choice = strtol(argv[7], <span class="keyword">nullptr</span>, 10);</div><div class="line">            pad_x        = strtol(argv[8], <span class="keyword">nullptr</span>, 10);</div><div class="line">            pad_y        = strtol(argv[9], <span class="keyword">nullptr</span>, 10);</div><div class="line">        }</div><div class="line"></div><div class="line">        <a name="_a0"></a><a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> *tuner_to_use;</div><div class="line">        <span class="keywordflow">switch</span>(tuner_choice)</div><div class="line">        {</div><div class="line">            <span class="keywordflow">case</span> 0:</div><div class="line">            {</div><div class="line">                tuner_to_use = <span class="keyword">nullptr</span>;</div><div class="line">                <span class="keywordflow">break</span>;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">case</span> 1:</div><div class="line">            {</div><div class="line">                tuner.<a name="a1"></a><a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a>(<a name="a2"></a><a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">CLTunerMode::RAPID</a>);</div><div class="line">                tuner_to_use = &amp;tuner;</div><div class="line">                <span class="keywordflow">break</span>;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">case</span> 3:</div><div class="line">            {</div><div class="line">                tuner.<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a>(<a name="a3"></a><a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">CLTunerMode::EXHAUSTIVE</a>);</div><div class="line">                tuner_to_use = &amp;tuner;</div><div class="line">                <span class="keywordflow">break</span>;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">case</span> 2:</div><div class="line">            <span class="keywordflow">default</span>:</div><div class="line">            {</div><div class="line">                tuner.<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a>(<a name="a4"></a><a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">CLTunerMode::NORMAL</a>);</div><div class="line">                tuner_to_use = &amp;tuner;</div><div class="line">                <span class="keywordflow">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <a name="a5"></a><a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a name="a6"></a><a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a>(tuner_to_use);</div><div class="line"></div><div class="line">        <a name="a7"></a><a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(startup_time);</div><div class="line">        <a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(<a name="a8"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">configure</a>);</div><div class="line">        <span class="comment">/* Computation:</span></div><div class="line"><span class="comment">         * out = add_desc(addend, conv2d1x1(direct_conv)(input, weights, bias))</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> <a name="a9"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>   = <a name="a10"></a><a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> <a name="a11"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = <a name="a12"></a><a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> t_input_shape     = <a name="_a13"></a><a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ifm, iw, ih);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> t_weight_shape    = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ifm, ww, wh, ofm);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> t_bias_shape      = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ofm);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> t_l1_addend_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ofm, iw);</div><div class="line"></div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;input_shape: &quot;</span> &lt;&lt; t_input_shape &lt;&lt; std::endl;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;weight_shape: &quot;</span> &lt;&lt; t_weight_shape &lt;&lt; std::endl;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;bias_shape: &quot;</span> &lt;&lt; t_bias_shape &lt;&lt; std::endl;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;addend_shape: &quot;</span> &lt;&lt; t_l1_addend_shape &lt;&lt; std::endl;</div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// @section describe_workload_using_operator_graph Describe the workload to run using OperatorGraph</span></div><div class="line"><span class="comment">        /// OperatorGraph is a graph of Tensors and Operators. Let&#39;s first default-construct it</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Construct OperatorGraph</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Construct OperatorGraph]</span></div><div class="line">        <a name="_a14"></a><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> <a name="a15"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>;</div><div class="line">        <span class="comment">// [Construct OperatorGraph]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// @subsection add_conv2d Add the first operator (root operator) Conv2d</span></div><div class="line"><span class="comment">        /// The first operator to be added to the graph is called the &quot;root operator&quot; of the entire graph.</span></div><div class="line"><span class="comment">        /// @note As of now, operators need to be inserted according to their dependency order. This is because output tensor auto-initialization occurs during construction time.</span></div><div class="line"><span class="comment">        ///       Later this might be changed to allow out-of-order insertion.</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// Before we insert the operator, we need to initialize the required TensorInfo objects.</span></div><div class="line"><span class="comment">        /// We can choose not to initialize an output TensorInfo; if so, they will be auto-initialized during the construction of the OperatorGraph</span></div><div class="line"><span class="comment">        /// The &quot;t_acc_info&quot; is the TensorInfo of the accumulator tensor, which is the output tensor of our first operator conv2d</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp  Initialize Conv2d TensorInfo</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Initialize Conv2d TensorInfo]</span></div><div class="line">        <span class="keyword">auto</span> t_input_info  = <a name="_a16"></a><a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_input_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line">        <span class="keyword">auto</span> t_weight_info = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_weight_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line">        <span class="keyword">auto</span> t_bias_info   = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_bias_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line">        <span class="keyword">auto</span> t_acc_info    = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>();</div><div class="line">        <span class="comment">// [Initialize Conv2d TensorInfo]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// Next we associate the TensorInfo with the OpTensor s created in the op_graph.</span></div><div class="line"><span class="comment">        /// @note The associated TensorInfo objects must be in scope and remain valid until the ClWorkload building is completed</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// @note The associated TensorInfo objects must be declard as non-const, since they may be updated during the OperatorGraph construction</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp  Add OpTensors</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Add OpTensors]</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_input  = <a name="a17"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_input_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_weight = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_weight_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_bias   = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_bias_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_acc    = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_acc_info);</div><div class="line">        <span class="comment">// [Add OpTensors]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// Finally we add the Conv2d operator to op_graph. The Conv2dDescriptor contains all the TOSA-compliant attribute parameters</span></div><div class="line"><span class="comment">        /// The add_op... group of functions accept the OpTensors created by the add_tensor function, and return an Operator handle.</span></div><div class="line"><span class="comment">        /// This handle can be used to further query and modify the operator inside the OperatorGraph after its creation</span></div><div class="line"><span class="comment">        /// For example, here we use the handle to force the ConvolutionMethod to be Direct Convolution</span></div><div class="line"><span class="comment">        /// @note The force_conv2d_method is only for debug purpose for now, as the end user is not expected to decide on the ConvolutionMethod</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp  Add Conv2d Operator</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Add Conv2d Operator]</span></div><div class="line">        <a name="_a18"></a><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> <a name="a19"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a562285808c3bd1107ae49be79d24d41f">conv2d_desc</a>{ <a name="_a20"></a><a class="code" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a>{ pad_x, pad_x, pad_y, pad_y } };</div><div class="line">        <span class="keyword">auto</span>             conv2d = <a name="a21"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a>(op_graph, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a562285808c3bd1107ae49be79d24d41f">conv2d_desc</a>, op_t_input, op_t_weight, op_t_bias, op_t_acc);</div><div class="line">        <a name="a22"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0500494c1c88e005019c1046023207b9">force_conv2d_method</a>(op_graph, conv2d, <a name="a23"></a><a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">ConvolutionMethod::DIRECT</a>); <span class="comment">// Only for debug purposes</span></div><div class="line">        <span class="comment">// [Add Conv2d Operator]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// @subsection add_elementwise_add Add the second operator Elementwise Add</span></div><div class="line"><span class="comment">        /// This is similar to adding the first operator to op_graph, except that we link the two operators together by their common tensor,</span></div><div class="line"><span class="comment">        /// namely the accumulator tensor op_t_acc, which is the output of conv2d and the input (lhs) of the addition</span></div><div class="line"><span class="comment">        /// @note At the moment, it is recommended to always declare a separate TensorInfo (even if empty) for each OpTensor.</span></div><div class="line"><span class="comment">        ///       For example, here op_t_dst could be associated with op_t_acc info as they are the same,</span></div><div class="line"><span class="comment">        ///       but we still recommend creating a separate object.</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp  Add Elementwise Add Operator</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Add Elementwise Add Operator]</span></div><div class="line">        <span class="keyword">auto</span>                  t_l1_addend_info = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_l1_addend_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line">        <span class="keyword">auto</span>                  <a name="a24"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>       = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>();</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span>            op_t_l1_addend   = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_l1_addend_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span>            <a name="a25"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a53144a6a6a841acf8ac499db4834af08">op_t_dst</a>         = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line">        <a name="_a26"></a><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> add_desc{ <a name="a27"></a><a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> };</div><div class="line">        <a name="a28"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6ddaa43fa5e752d3a4804654ef17890b">add_op_elementwise_op</a>(op_graph, add_desc, op_t_acc, op_t_l1_addend, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a53144a6a6a841acf8ac499db4834af08">op_t_dst</a>);</div><div class="line">        <span class="comment">// [Add Elementwise Add Operator]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// @section build_clworkload Build ClWorkload</span></div><div class="line"><span class="comment">        /// ClWorkload is an intermediate object which contains all the built kernel codes and all other descriptors on how to schedule them</span></div><div class="line"><span class="comment">        /// We build ClWorkload from the op_graph object that we just described</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp  Build ClWorkload</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Build ClWorkload]</span></div><div class="line">        <span class="keyword">const</span> <a name="_a29"></a><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a> <a name="a30"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a08e850b331ef9cf5122b021b85f27af6">workload_ctx</a></div><div class="line">        {</div><div class="line">            <a name="_a31"></a><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_info.xhtml">GpuInfo</a>{ <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a name="a32"></a><a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>() }</div><div class="line">        };</div><div class="line">        <a name="_a33"></a><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> <a name="a34"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>;</div><div class="line">        <a name="a35"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">build</a>(workload, op_graph, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a08e850b331ef9cf5122b021b85f27af6">workload_ctx</a>);</div><div class="line">        <span class="comment">// [Build ClWorkload]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// @section run_fused_op_with_clcompositeoperator Run the fused operator workload with ClCompositeOperator</span></div><div class="line"><span class="comment">        /// @subsection configure_and_validate_clcompositeoperator Validate ClWorkload and Configure ClCompositeOperator</span></div><div class="line"><span class="comment">        /// After ClWorkload is built, we need to configure it with the Compute Library runtime ClCompositeOperator to run it.</span></div><div class="line"><span class="comment">        /// Optionally we can explicitly validate the workload to check if the workload has been built successfully.</span></div><div class="line"><span class="comment">        /// The validate is automatically run inside configure and would throw if it fails.</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Construct ClCompositeOperator</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp  Validate and configure ClCompositeOperator</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Validate and configure ClCompositeOperator]</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> <a name="a36"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">success</a> = <a name="a37"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ClCompositeOperator::validate</a>(workload); <span class="comment">// Optional</span></div><div class="line">        op.configure(<a name="a38"></a><a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), workload);</div><div class="line">        <span class="comment">// [Validate and configure ClCompositeOperator]</span></div><div class="line">        <a name="a39"></a><a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">configure</a>, measurements);</div><div class="line"></div><div class="line">        <a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(tensor_allocation);<span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// @subsection run_clcompositeoperator Run ClCompositeOperator</span></div><div class="line"><span class="comment">        /// Construct the runtime CLTensor s with backing memory</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Construct CLTensor objects</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// Initialize, allocate and fill the CLTensor objects</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Initialize, Allocate and Fill CLTensor objects</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Initialize, Allocate and Fill CLTensor objects]</span></div><div class="line">        t_input.allocator()-&gt;init(t_input_info);</div><div class="line">        t_weight.allocator()-&gt;init(t_weight_info);</div><div class="line">        t_bias.allocator()-&gt;init(t_bias_info);</div><div class="line">        t_l1_addend.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line">        t_dst.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line"></div><div class="line">        t_input.allocator()-&gt;allocate();</div><div class="line">        t_weight.allocator()-&gt;allocate();</div><div class="line">        t_bias.allocator()-&gt;allocate();</div><div class="line">        t_l1_addend.allocator()-&gt;allocate();</div><div class="line">        t_dst.allocator()-&gt;allocate();</div><div class="line"></div><div class="line">        <a name="a40"></a><a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_input, -1.f, 1.f);</div><div class="line">        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_weight, -1.f, 1.f);</div><div class="line">        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_l1_addend, -1.f, 1.f);</div><div class="line">        <span class="comment">// [Initialize, Allocate and Fill CLTensor objects]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// The OpTensorBinding creates a mapping from the OpTensor handles that we created early to the real CLTensors</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Create OpTensorBinding</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Create OpTensorBinding]</span></div><div class="line">        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> op_tensors({ { op_t_input, &amp;t_input },</div><div class="line">            { op_t_weight, &amp;t_weight },</div><div class="line">            { op_t_bias, &amp;t_bias },</div><div class="line">            { op_t_l1_addend, &amp;t_l1_addend },</div><div class="line">            { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a53144a6a6a841acf8ac499db4834af08">op_t_dst</a>, &amp;t_dst }</div><div class="line">        });</div><div class="line">        <span class="comment">// [Create OpTensorBinding]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// Bind the CLTensor objects to the prepare_pack_map and run_pack_map, which are used to prepare and run the op</span></div><div class="line"><span class="comment">        /// This step additionally creates empty auxiliary CLTensor objects if any, and contain them inside a ClAuxTensorData aux_tensor_data</span></div><div class="line"><span class="comment">        /// @note This step associates all the CLTensors contained in op_tensors and aux_tensor_data, with prepare_pack_map and run_pack_map</span></div><div class="line"><span class="comment">        ///       Make sure these CLTensors remain valid as long as the two pack_maps are still in use</span></div><div class="line"><span class="comment"></span><span class="comment"></span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Construct ClAuxTensorData</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Construct TensorPackMaps</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Bind Tensors</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Bind Tensors]</span></div><div class="line">        <a name="a41"></a><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">bind_tensors</a>(aux_tensor_data, prepare_pack_map, run_pack_map, workload, op_tensors);</div><div class="line">        <span class="comment">// [Bind Tensors]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// Initialize and Allocate Auxiliary CLTensor objects.</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Initialize and Allocate Auxiliary CLTensor objects</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Initialize and Allocate Auxiliary CLTensor objects]</span></div><div class="line">        <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor_data : aux_tensor_data.get_tensors())</div><div class="line">        {</div><div class="line">            tensor_data.tensor-&gt;allocator()-&gt;init(tensor_data.tensor_info);</div><div class="line">            tensor_data.tensor-&gt;allocator()-&gt;allocate();</div><div class="line">        }</div><div class="line">        <span class="comment">// [Initialize and Allocate Auxiliary CLTensor objects]</span></div><div class="line">        <a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(tensor_allocation, measurements);</div><div class="line"></div><div class="line">        <a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(dummy_run);<span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// Run the ClCompositeOperator prepare job. This performs any jobs that are required for the first run, like</span></div><div class="line"><span class="comment">        /// reshaping tensors for a more performant format.</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Prepare ClCompositeOperator</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Prepare ClCompositeOperator]</span></div><div class="line">        op.prepare(prepare_pack_map);</div><div class="line">        <span class="comment">// [Prepare ClCompositeOperator]</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        /// @page example_dynamic_fusion_cl_conv2d_elementwise_add</span></div><div class="line"><span class="comment">        /// At last, we run our operator</span></div><div class="line"><span class="comment">        /// @snippet dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp Run ClCompositeOperator</span></div><div class="line"><span class="comment"></span>        <span class="comment">// [Run ClCompositeOperator]</span></div><div class="line">        op.run(run_pack_map);</div><div class="line">        <span class="comment">// [Run ClCompositeOperator]</span></div><div class="line">        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a name="a42"></a><a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div><div class="line">        <a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(dummy_run, measurements);</div><div class="line">        <a class="code" href="cl__fused__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(startup_time, measurements);</div><div class="line">        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keywordtype">void</span> do_run()<span class="keyword"> override</span></div><div class="line"><span class="keyword">    </span>{</div><div class="line">        <span class="comment">// Run the fused op</span></div><div class="line">        op.run(run_pack_map);</div><div class="line"></div><div class="line">        <span class="comment">// Make sure all the OpenCL jobs are done executing:</span></div><div class="line">        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordtype">void</span> do_teardown()<span class="keyword"> override</span></div><div class="line"><span class="keyword">    </span>{</div><div class="line">        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a name="a43"></a><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> : measurements)</div><div class="line">        {</div><div class="line">            std::cout &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.first &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.second.count() &lt;&lt; <span class="stringliteral">&quot;us&quot;</span> &lt;&lt; std::endl;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// [Construct CLTensor objects]</span></div><div class="line">    <a name="_a44"></a><a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> t_input{};</div><div class="line">    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> t_weight{};</div><div class="line">    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> t_bias{};</div><div class="line">    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> t_l1_addend{};</div><div class="line">    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> t_dst{};</div><div class="line">    <span class="comment">// [Construct CLTensor objects]</span></div><div class="line">    <span class="comment">// [Construct ClAuxTensorData]</span></div><div class="line">    <a name="_a45"></a><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml">ClAuxTensorData</a> aux_tensor_data{};</div><div class="line">    <span class="comment">// [Construct ClAuxTensorData]</span></div><div class="line">    <span class="comment">// [Construct TensorPackMaps]</span></div><div class="line">    <a name="_a46"></a><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> prepare_pack_map{};</div><div class="line">    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> run_pack_map{};</div><div class="line">    <span class="comment">// [Construct TensorPackMaps]</span></div><div class="line">    <span class="comment">// [Construct ClCompositeOperator]</span></div><div class="line">    <a name="_a47"></a><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml">ClCompositeOperator</a> op{};</div><div class="line">    <span class="comment">// [Construct ClCompositeOperator]</span></div><div class="line">    <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> tuner{};</div><div class="line">    std::map&lt;std::string, std::chrono::microseconds&gt; measurements{};</div><div class="line">};</div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">/** Main program for sgemm test</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param[in] argc Number of arguments</span></div><div class="line"><span class="comment"> * @param[in] argv Arguments ( [optional] Matrix A, [optional] Matrix B, [optional] Matrix C, [optional] alpha, [optional] beta )</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> <a name="a48"></a><a class="code" href="cl__cache_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> utils::run_example&lt;ClFusedConv2dEltwiseAddExample&gt;(argc, argv);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#undef TICK</span></div><div class="line"><span class="preprocessor">#undef TOCK</span></div><div class="line"><span class="preprocessor">#undef TOCK_AVG</span></div><div class="line"><span class="preprocessor">#endif </span><span class="comment">/* ENABLE_EXPERIMENTAL_DYNAMIC_FUSION */</span><span class="preprocessor"></span></div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:47 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
