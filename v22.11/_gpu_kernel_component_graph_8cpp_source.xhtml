<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/gpu/GpuKernelComponentGraph.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_gpu_kernel_component_graph_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GpuKernelComponentGraph.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gpu_kernel_component_graph_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_kernel_component_graph_8h.xhtml">GpuKernelComponentGraph.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_descriptor_8h.xhtml">arm_compute/dynamic_fusion/sketch/MemoryDescriptor.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/** Automatically create memory descriptors for all tensors in the graph</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @param[in] tensors @ref ITensorInfo map</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * @param[in] graph   @ref DependencyGraph of which the @p tensors are a part</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @return MemoryDescriptorMap  An assignment map of @ref MemoryDescriptors for each ITensorInfo in the graph</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> assign_memory_descriptors(<span class="keyword">const</span> std::map&lt;ITensorInfo::Id, const ITensorInfo *&gt; tensors, <span class="keyword">const</span> DependencyGraph &amp;graph)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> mem_map{};</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> t_id : graph.all_tensors())</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = tensors.at(t_id);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// Only global src and dst tensors to the entire component graph are &quot;User&quot; tensors, which are user-specified memories</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab05719fb0811c6eb8a452864575501e2">is_in</a>(t_id, graph.global_src_tensors()) || <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab05719fb0811c6eb8a452864575501e2">is_in</a>(t_id, graph.global_dst_tensors()))</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            mem_map[t_id] = MemoryDescriptor{ <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">MemoryType::User</a> };</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            AuxMemoryInfo aux_mem_info{ <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;total_size() };</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            mem_map[t_id] = MemoryDescriptor{ <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">MemoryType::Auxiliary</a>, aux_mem_info };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> mem_map;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;std::vector&lt;DependencyGraph::TensorId&gt; GpuKernelComponentGraph::get_tensor_ids(<span class="keyword">const</span> std::vector&lt;const ITensorInfo *&gt; tensors)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::vector&lt;DependencyGraph::TensorId&gt; tensor_ids{};</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    std::transform(</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        std::begin(tensors), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(tensors),</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        std::back_inserter(tensor_ids),</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;id();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    });</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> tensor_ids;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a43caf41f9e4cf110c168620e4cb538d3">   78</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a43caf41f9e4cf110c168620e4cb538d3">GpuKernelComponentGraph::GpuKernelComponentGraph</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a> *services)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    : _services{ services }, _components{}, _tensors{}, _dependency_graph{}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#abba9024ebb27161d77bd0e74e5b0f779">   83</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#abba9024ebb27161d77bd0e74e5b0f779">GpuKernelComponentGraph::fuse</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Obtain memory descriptor map</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> mem_map = assign_memory_descriptors(_tensors, _dependency_graph);<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /// @note Fusion constraints (for kernel components) are exactly the same as the invariants of @ref GpuKernelComponentGroup</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /// Fusion can be framed as a mathematical optimization problem:</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    /// Given fusion constraints, find the &quot;best&quot; fusion patterns possible</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    /// &quot;Best&quot; is ill-defined at the moment. For now we define &quot;best&quot; fusion pattern as one</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /// which results in the least number of fused kernels ( @ref GpuKernelComponentGroup ) at the end</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /// As the first iteration, we offer a sub-optimal algorithm here which ensures all</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    /// constraints are met, but provides no guarantee that the fusion pattern is optimal</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a> stream{ _services, mem_map };</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Break down into linear groups of components (constraint 1), preserving topological order</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> linear_graphs = _dependency_graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5c196ee5dd001e2a2a9ea08b70fdfa31">topological_partition</a>();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Further divide up the linear groups based on rest of the fusion constraints (rely on component group&#39;s invariants)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;graph : linear_graphs)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; graph.size(); ++i)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> comp = _components.at(graph[i].op).get();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">// Each new linear graph signals a new component group in the stream</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span>(i == 0)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                stream.new_component_group();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// If it violates the component group&#39;s invariant / fusion constraint, breaks up the stream by inserting a new group</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">success</a> = stream.add_component(comp);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">if</span>(!success)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                stream.new_component_group();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                success = stream.add_component(comp);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!success);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">arm_compute::experimental::dynamic_fusion::GpuKernelComponentStream</a></div><div class="ttdoc">A linear sequence of component groups serialized from the GpuKernelComponentGraph Each component grou...</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_stream_8h_source.xhtml#l00047">GpuKernelComponentStream.h:47</a></div></div>
<div class="ttc" id="_memory_descriptor_8h_xhtml"><div class="ttname"><a href="_memory_descriptor_8h.xhtml">MemoryDescriptor.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph_xhtml_a43caf41f9e4cf110c168620e4cb538d3"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a43caf41f9e4cf110c168620e4cb538d3">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGraph::GpuKernelComponentGraph</a></div><div class="ttdeci">GpuKernelComponentGraph(GpuComponentServices *services)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_graph_8cpp_source.xhtml#l00078">GpuKernelComponentGraph.cpp:78</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab05719fb0811c6eb8a452864575501e2"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab05719fb0811c6eb8a452864575501e2">arm_compute::experimental::dynamic_fusion::is_in</a></div><div class="ttdeci">bool is_in(const T &amp;v, const std::vector&lt; T &gt; &amp;vec)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_dependency_graph_8h_source.xhtml#l00041">DependencyGraph.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph_xhtml_abba9024ebb27161d77bd0e74e5b0f779"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#abba9024ebb27161d77bd0e74e5b0f779">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGraph::fuse</a></div><div class="ttdeci">GpuKernelComponentStream fuse() const</div><div class="ttdoc">Perform component fusion and serialize the graph into a stream of component groups. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_graph_8cpp_source.xhtml#l00083">GpuKernelComponentGraph.cpp:83</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">arm_compute::experimental::dynamic_fusion::MemoryType::Auxiliary</a></div><div class="ttdoc">Auxiliary memory required by the Workload Tensor, e.g. </div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a5c196ee5dd001e2a2a9ea08b70fdfa31"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5c196ee5dd001e2a2a9ea08b70fdfa31">arm_compute::experimental::dynamic_fusion::DependencyGraph::topological_partition</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; OpPack &gt; &gt; topological_partition() const</div><div class="ttdoc">Partition the graph into a list of linear sub-&quot;graphs&quot;, while preserving the topological order...</div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2sketch_2utils_2_dependency_graph_8h_source.xhtml#l00303">DependencyGraph.h:303</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_abe5718c3616edd5134e3058a1bb50b76"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">arm_compute::experimental::dynamic_fusion::MemoryDescriptorMap</a></div><div class="ttdeci">std::map&lt; ITensorInfo::Id, MemoryDescriptor &gt; MemoryDescriptorMap</div><div class="ttdoc">A map from ITensorInfo to their corresponding MemoryDescriptor. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_descriptor_8h_source.xhtml#l00071">MemoryDescriptor.h:71</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">arm_compute::experimental::dynamic_fusion::GpuComponentServices</a></div><div class="ttdoc">Services that are used throughout the creation phase of workload code. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_component_services_8h_source.xhtml#l00037">GpuComponentServices.h:37</a></div></div>
<div class="ttc" id="_gpu_kernel_component_graph_8h_xhtml"><div class="ttname"><a href="_gpu_kernel_component_graph_8h.xhtml">GpuKernelComponentGraph.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">arm_compute::experimental::dynamic_fusion::MemoryType::User</a></div><div class="ttdoc">Memory coming directly from users, e.g. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2d4e55a769c00f49c595e282f5f3b1cd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">arm_compute::test::validation::success</a></div><div class="ttdeci">const auto success</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00267">Integration_OperatorFuseMovenetSubGraph1.cpp:267</a></div></div>
<div class="ttc" id="namespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_df94d166e0e6f49d063cb29fea25a88b.xhtml">gpu</a></li><li class="navelem"><a class="el" href="_gpu_kernel_component_graph_8cpp.xhtml">GpuKernelComponentGraph.cpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:53 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
