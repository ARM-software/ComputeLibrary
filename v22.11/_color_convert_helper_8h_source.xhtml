<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/ColorConvertHelper.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_color_convert_helper_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ColorConvertHelper.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_color_convert_helper_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_VALIDATION_COLOR_CONVERT_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_VALIDATION_COLOR_CONVERT_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper.xhtml">   33</a></span>&#160;<span class="keyword">namespace </span>colorconvert_helper</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml">   35</a></span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">   37</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">red_coef_bt709</a>    = 1.5748F;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">   38</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">green_coef_bt709</a>  = -0.1873f;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">   39</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">green_coef2_bt709</a> = -0.4681f;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">   40</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">blue_coef_bt709</a>   = 1.8556f;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a14139aa360487fbed344f5556a9fb91d">   42</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a14139aa360487fbed344f5556a9fb91d">rgb2yuv_bt709_kr</a> = 0.2126f;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a821b044a6b2074763716791045d83560">   43</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a821b044a6b2074763716791045d83560">rgb2yuv_bt709_kb</a> = 0.0722f;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// K_g = 1 - K_r - K_b</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a0801967f8d38766ae40f0eb608966d97">   45</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a0801967f8d38766ae40f0eb608966d97">rgb2yuv_bt709_kg</a> = 0.7152f;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">// C_u = 1 / (2 * (1 - K_b))</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a7b7c28051a725e523cc3554a6e84d0ac">   47</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a7b7c28051a725e523cc3554a6e84d0ac">rgb2yuv_bt709_cu</a> = 0.5389f;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">// C_v = 1 / (2 * (1 - K_r))</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#af3dd0ec6de6bf7d3d4657ad6c7416120">   49</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#af3dd0ec6de6bf7d3d4657ad6c7416120">rgb2yuv_bt709_cv</a> = 0.6350f;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a02c398becdd5ec3871c921111be463b0">   51</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a02c398becdd5ec3871c921111be463b0">rgb2u8_red_coef</a>   = 0.2126f;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a4ca7fc48708836259d66d299e302ace4">   52</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a4ca7fc48708836259d66d299e302ace4">rgb2u8_green_coef</a> = 0.7152f;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a212c4b6cc3384fc8a6daefc25b40efb1">   53</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a212c4b6cc3384fc8a6daefc25b40efb1">rgb2u8_blue_coef</a>  = 0.0722f;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2e81f75558ad85ac6c1ac3972e113542">   56</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2e81f75558ad85ac6c1ac3972e113542">store_rgb_from_src</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;rvec, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;gvec, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;bvec)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">int</span> width  = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">int</span> height = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> vec_coord{ x, y };</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keyword">auto</span>       *rvec_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(rvec(vec_coord));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keyword">auto</span>       *gvec_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(gvec(vec_coord));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">auto</span>       *bvec_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(bvec(vec_coord));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            rvec_pixel[0] = src_pixel[0]; <span class="comment">// NOLINT</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            gvec_pixel[0] = src_pixel[1];</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            bvec_pixel[0] = src_pixel[2];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad37cb1ddab526d6cd50c79355cb48238">   81</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad37cb1ddab526d6cd50c79355cb48238">rgb_to_yuv_calculation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> rvec, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> gvec, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> bvec, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;yvec, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;uvec_top, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;uvec_bottom,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                   <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;vvec_top, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;vvec_bottom)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">int</span> width  = rvec.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">int</span> height = rvec.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">int</span>         uvec_coord_x = 0;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">int</span>         uvec_coord_y = 0;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uvec_coord{ uvec_coord_x, uvec_coord_y };</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x += 2)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ x, y };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">auto</span>       *yvec_pixel        = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yvec(coord));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keyword">auto</span>       *uvec_top_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec_top(uvec_coord));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">auto</span>       *uvec_bottom_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec_bottom(uvec_coord));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">auto</span>       *vvec_top_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec_top(uvec_coord));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keyword">auto</span>       *vvec_bottom_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec_bottom(uvec_coord));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            T     border_value(0);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordtype">int</span>   rvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(rvec, coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordtype">int</span>   gvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(gvec, coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordtype">int</span>   bvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(bvec, coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordtype">float</span> result   = rvec_val * rgb2yuv_bt709_kr + gvec_val * rgb2yuv_bt709_kg + bvec_val * <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a821b044a6b2074763716791045d83560">rgb2yuv_bt709_kb</a>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            yvec_pixel[0]     = result;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            uvec_top_pixel[0] = (bvec_val - result) * rgb2yuv_bt709_cu + 128.f;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            vvec_top_pixel[0] = (rvec_val - result) * rgb2yuv_bt709_cv + 128.f;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            coord.set(0, x + 1);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            rvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(rvec, coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            gvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(gvec, coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            bvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(bvec, coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            result   = rvec_val * rgb2yuv_bt709_kr + gvec_val * rgb2yuv_bt709_kg + bvec_val * <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a821b044a6b2074763716791045d83560">rgb2yuv_bt709_kb</a>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            yvec_pixel[1]        = result;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            uvec_bottom_pixel[0] = (bvec_val - result) * rgb2yuv_bt709_cu + 128.f;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            vvec_bottom_pixel[0] = (rvec_val - result) * rgb2yuv_bt709_cv + 128.f;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            uvec_coord.set(0, ++uvec_coord_x);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a99b8d9c2d8305c4d51da543c1f609299">  126</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a99b8d9c2d8305c4d51da543c1f609299">compute_rgb_value</a>(<span class="keywordtype">int</span> y_value, <span class="keywordtype">int</span> v_value, <span class="keywordtype">int</span> u_value, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> channel_idx)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">float</span> result = 0.f;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">switch</span>(channel_idx)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> red = (v_value - 128.f) * red_coef_bt709;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            result          = y_value + red;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> green = (u_value - 128.f) * green_coef_bt709 + (v_value - 128.f) * <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">green_coef2_bt709</a>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            result            = y_value + green;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> blue = (u_value - 128.f) * blue_coef_bt709;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            result           = y_value + blue;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="comment">//Assuming Alpha channel</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> 255;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> std::min(std::max(0.f, result), 255.f);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">  159</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yyvec, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dst_width  = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dst_height = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; dst_height; ++y)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordtype">int</span> x_coord = 0;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; dst_width; x += 2, ++x_coord)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keyword">auto</span>             *dst_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(dst_coord));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keyword">const</span> T           border_value(0);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>         yvec_val  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(yvec, { x_coord, y }, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>         vvec_val  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec, { x_coord, y }, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>         yyvec_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(yyvec, { x_coord, y }, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>         uvec_val  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec, { x_coord, y }, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="comment">//Compute first RGB value using Y plane</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> channel_idx = 0; channel_idx &lt; dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(); ++channel_idx)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> channel_value = <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a99b8d9c2d8305c4d51da543c1f609299">compute_rgb_value</a>(yvec_val, vvec_val, uvec_val, channel_idx);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                dst_pixel[channel_idx]    = channel_value;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="comment">//Compute second RGB value using YY plane</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord2</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                x + 1, y</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            dst_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(dst_coord2));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> channel_idx = 0; channel_idx &lt; dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(); ++channel_idx)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> channel_value = <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a99b8d9c2d8305c4d51da543c1f609299">compute_rgb_value</a>(yyvec_val, vvec_val, uvec_val, channel_idx);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                dst_pixel[channel_idx]    = channel_value;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a919efb34e3e214d436bb42e874e56690">  197</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a919efb34e3e214d436bb42e874e56690">colorconvert_rgb_to_rgbx</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> channel_idx = 0; channel_idx &lt; dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(); ++channel_idx)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> width  = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> height = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keyword">auto</span>       *dst_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(dst_coord));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">if</span>(channel_idx == 3)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    dst_pixel[channel_idx] = 255;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                dst_pixel[channel_idx] = src_pixel[channel_idx];</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad486334bc0542c5a70b7de5e0f3ccb4c">  226</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad486334bc0542c5a70b7de5e0f3ccb4c">colorconvert_rgb_to_u8</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width  = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keyword">auto</span>       *dst_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(dst_coord));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> result = rgb2u8_red_coef * src_pixel[0] + rgb2u8_green_coef * src_pixel[1] + rgb2u8_blue_coef * src_pixel[2];</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            dst_pixel[0] = utility::clamp&lt;float&gt;(result, 0, 255);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a9f946d571e7fe2fed0aee64adcfc9e3f">  249</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a9f946d571e7fe2fed0aee64adcfc9e3f">colorconvert_rgbx_to_rgb</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> channel_idx = 0; channel_idx &lt; dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(); ++channel_idx)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> width  = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> height = dst.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keyword">auto</span>       *dst_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(dst_coord));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                dst_pixel[channel_idx] = src_pixel[channel_idx];</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aab80900114531c21cf2260c5f61d7991">  273</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aab80900114531c21cf2260c5f61d7991">colorconvert_yuyv_to_rgb</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yyvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> step_x = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">Format::YUYV422</a> == format || <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">Format::UYVY422</a> == format) ? 2 : 1;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">Format::YUYV422</a> == format) ? 0 : 1;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> elem_coord{ 0, 0 };</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   width  = yvec.shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   height = yvec.shape().y();</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x * step_x, y };</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *src_pixel   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">auto</span>             *yvec_pixel  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yvec(elem_coord));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keyword">auto</span>             *uvec_pixel  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec(elem_coord));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keyword">auto</span>             *yyvec_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yyvec(elem_coord));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keyword">auto</span>             *vvec_pixel  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec(elem_coord));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            yvec_pixel[x]                 = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            uvec_pixel[x]                 = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            yyvec_pixel[x]                = src_pixel[2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            vvec_pixel[x]                 = src_pixel[3 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        elem_coord.set(1, y + 1);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec, vvec, yyvec, uvec, dst);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ae5035a982d39c4905c9ed3ac150f9917">  309</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ae5035a982d39c4905c9ed3ac150f9917">colorconvert_iyuv_to_rgb</a>(<span class="keyword">const</span> std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;tensor_planes, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yyvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> elem_coord{ 0, 0 };</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   yvec_width  = yvec.shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   yvec_height = yvec.shape().y();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; yvec_height; ++y)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; yvec_width; ++x)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *src_pixel   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(tensor_planes[0](src_coord));</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keyword">auto</span>             *yvec_pixel  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yvec(elem_coord));</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keyword">auto</span>             *yyvec_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yyvec(elem_coord));</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            yvec_pixel[x]                 = src_pixel[x];</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            yyvec_pixel[x]                = src_pixel[x + 1];</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        elem_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, y + 1);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> uvec_width  = uvec.shape().x();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> uvec_height = uvec.shape().y();</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> top_elem_coord{ 0, 0 };</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> bottom_elem_coord{ 0, 1 };</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; uvec_height; y += 2)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; uvec_width; ++x)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y / 2 };</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *u_pixel        = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(tensor_planes[1](src_coord));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *v_pixel        = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(tensor_planes[2](src_coord));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keyword">auto</span>             *uvec_pixel_top = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec(top_elem_coord));</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keyword">auto</span>             *vvec_pixel_top = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec(top_elem_coord));</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keyword">auto</span> *uvec_pixel_bottom = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec(bottom_elem_coord));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keyword">auto</span> *vvec_pixel_bottom = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec(bottom_elem_coord));</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            uvec_pixel_top[x]       = u_pixel[0];</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            vvec_pixel_top[x]       = v_pixel[0];</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            uvec_pixel_bottom[x]    = u_pixel[0];</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            vvec_pixel_bottom[x]    = v_pixel[0];</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        top_elem_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, y + 2);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        bottom_elem_coord.set(1, top_elem_coord.y() + 1);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec, vvec, yyvec, uvec, dst);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aa7f62a47d22df7af67294e743f2dd3da">  364</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aa7f62a47d22df7af67294e743f2dd3da">colorconvert_nv12_to_rgb</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <span class="keyword">const</span> std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;tensor_planes, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yyvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ tensor_planes[0].shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / 2, tensor_planes[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">Format::NV12</a> == format) ? 0 : 1;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> elem_coord{ 0, 0 };</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   yvec_width  = yvec.shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   yvec_height = yvec.shape().y();</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; yvec_height; ++y)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; yvec_width; ++x)</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *src_pixel   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(tensor_planes[0](src_coord));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keyword">auto</span>             *yvec_pixel  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yvec(elem_coord));</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keyword">auto</span>             *yyvec_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(yyvec(elem_coord));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            yvec_pixel[x]                 = src_pixel[x];</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            yyvec_pixel[x]                = src_pixel[x + 1];</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        elem_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, y + 1);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> uvec_width  = uvec.shape().x();</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> uvec_height = uvec.shape().y();</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> top_elem_coord{ 0, 0 };</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> bottom_elem_coord{ 0, 1 };</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; uvec_height; y += 2)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; uvec_width; ++x)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y / 2 };</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *src_pixel      = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(tensor_planes[1](src_coord));</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="keyword">auto</span>             *uvec_pixel_top = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec(top_elem_coord));</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="keyword">auto</span>             *vvec_pixel_top = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec(top_elem_coord));</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keyword">auto</span> *uvec_pixel_bottom = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvec(bottom_elem_coord));</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keyword">auto</span> *vvec_pixel_bottom = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vvec(bottom_elem_coord));</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            uvec_pixel_top[x]       = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            vvec_pixel_top[x]       = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            uvec_pixel_bottom[x]    = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            vvec_pixel_bottom[x]    = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        top_elem_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, y + 2);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        bottom_elem_coord.set(1, top_elem_coord.y() + 1);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">yuyv_to_rgb_calculation</a>(yvec, vvec, yyvec, uvec, dst);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#acad6d1cab5b189722e9848aea8f79ae5">  420</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#acad6d1cab5b189722e9848aea8f79ae5">colorconvert_rgb_to_nv12</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;{</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> rvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> gvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> bvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordtype">int</span> vec_shape_x = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() * src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a> }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2e81f75558ad85ac6c1ac3972e113542">store_rgb_from_src</a>(src, rvec, gvec, bvec);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad37cb1ddab526d6cd50c79355cb48238">rgb_to_yuv_calculation</a>(rvec, gvec, bvec, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0], uvec_top, uvec_bottom, vvec_top, vvec_bottom);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> utmp(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vtmp(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    uint32_t utmp_width  = utmp.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    uint32_t utmp_height = utmp.shape().y();</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    uint32_t    uvec_coord_x = 0;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    uint32_t    uvec_coord_y = 0;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uvec_coord{ uvec_coord_x, uvec_coord_y };</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">for</span>(uint32_t y = 0; y &lt; utmp_height; y++)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">for</span>(uint32_t x = 0; x &lt; utmp_width; x++)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ x, y };</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keyword">auto</span>       *utmp_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(utmp(coord));</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="keyword">auto</span>       *vtmp_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vtmp(coord));</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            T   border_value(0);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordtype">int</span> uvec_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec_top, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordtype">int</span> uvec_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec_bottom, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordtype">int</span> vvec_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec_top, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="keywordtype">int</span> vvec_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec_bottom, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            utmp_pixel[0] = std::ceil(<span class="keywordtype">float</span>(uvec_top_val + uvec_bottom_val) / 2);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            vtmp_pixel[0] = std::ceil(<span class="keywordtype">float</span>(vvec_top_val + vvec_bottom_val) / 2);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            uvec_coord.set(0, ++uvec_coord_x);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    uint32_t second_plane_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().x();</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    uint32_t second_plane_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().y();</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    uint32_t utmp_coord_x = 0;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    uint32_t utmp_coord_y = 0;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">for</span>(uint32_t y = 0; y &lt; second_plane_y; y++)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">for</span>(uint32_t x = 0; x &lt; second_plane_x; x++)</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ x, y };</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> utmp_top_coord{ utmp_coord_x, utmp_coord_y };</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> utmp_bottom_coord{ utmp_coord_x, utmp_coord_y + 1 };</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keyword">auto</span> *dst_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1](coord));</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            T   border_value(0);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordtype">int</span> utmp_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(utmp, utmp_top_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keywordtype">int</span> utmp_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(utmp, utmp_bottom_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordtype">int</span> result   = (utmp_top_val + utmp_bottom_val) / 2;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            dst_pixel[0] = result;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordtype">int</span> vtmp_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vtmp, utmp_top_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="keywordtype">int</span> vtmp_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vtmp, utmp_bottom_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            result       = (vtmp_top_val + vtmp_bottom_val) / 2;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            dst_pixel[1] = result;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            utmp_coord_x++;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">if</span>(utmp_coord_x &gt;= utmp_width)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                utmp_coord_x = 0;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                utmp_coord_y += 2;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;}</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00508"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a54c4999e22c2e329278b62088e78bd42">  508</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a54c4999e22c2e329278b62088e78bd42">colorconvert_rgb_to_iyuv</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;{</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> rvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> gvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> bvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keywordtype">int</span> vec_shape_x = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() * src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a> }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2e81f75558ad85ac6c1ac3972e113542">store_rgb_from_src</a>(src, rvec, gvec, bvec);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad37cb1ddab526d6cd50c79355cb48238">rgb_to_yuv_calculation</a>(rvec, gvec, bvec, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0], uvec_top, uvec_bottom, vvec_top, vvec_bottom);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> utmp(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vtmp(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() / 2, src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    uint32_t        utmp_width  = utmp.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    uint32_t        utmp_height = utmp.shape().y();</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    uint32_t    uvec_coord_x = 0;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    uint32_t    uvec_coord_y = 0;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uvec_coord{ uvec_coord_x, uvec_coord_y };</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">for</span>(uint32_t y = 0; y &lt; utmp_height; y++)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    {</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keywordflow">for</span>(uint32_t x = 0; x &lt; utmp_width; x++)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        {</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ x, y };</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            <span class="keyword">auto</span>       *utmp_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(utmp(coord));</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keyword">auto</span>       *vtmp_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(vtmp(coord));</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            T   border_value(0);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            <span class="keywordtype">int</span> uvec_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec_top, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            <span class="keywordtype">int</span> uvec_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec_bottom, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <span class="keywordtype">int</span> vvec_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec_top, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <span class="keywordtype">int</span> vvec_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec_bottom, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            utmp_pixel[0] = std::ceil(<span class="keywordtype">float</span>(uvec_top_val + uvec_bottom_val) / 2);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            vtmp_pixel[0] = std::ceil(<span class="keywordtype">float</span>(vvec_top_val + vvec_bottom_val) / 2);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            uvec_coord.set(0, ++uvec_coord_x);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    uint32_t second_plane_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().x();</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    uint32_t second_plane_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().y();</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    uint32_t utmp_coord_x = 0;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    uint32_t utmp_coord_y = 0;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keywordflow">for</span>(uint32_t y = 0; y &lt; second_plane_y; y++)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    {</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="keywordflow">for</span>(uint32_t x = 0; x &lt; second_plane_x; x++)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ x, y };</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> utmp_top_coord{ utmp_coord_x, utmp_coord_y };</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> utmp_bottom_coord{ utmp_coord_x, utmp_coord_y + 1 };</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keyword">auto</span> *u_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1](coord));</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keyword">auto</span> *v_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[2](coord));</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            T   border_value(0);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordtype">int</span> utmp_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(utmp, utmp_top_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordtype">int</span> utmp_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(utmp, utmp_bottom_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            <span class="keywordtype">int</span> result = (utmp_top_val + utmp_bottom_val) / 2;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            u_pixel[0] = result;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            <span class="keywordtype">int</span> vtmp_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vtmp, utmp_top_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="keywordtype">int</span> vtmp_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vtmp, utmp_bottom_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            result     = (vtmp_top_val + vtmp_bottom_val) / 2;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            v_pixel[0] = result;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            utmp_coord_x++;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="keywordflow">if</span>(utmp_coord_x &gt;= utmp_width)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                utmp_coord_x = 0;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                utmp_coord_y += 2;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    }</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;}</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00596"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad9f1a5f6d7600e7795e6ec649b7949e1">  596</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad9f1a5f6d7600e7795e6ec649b7949e1">colorconvert_rgb_to_yuv4</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;{</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> rvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> gvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> bvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> yvec(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordtype">int</span> vec_shape_x = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x() * src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a> }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> vvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ vec_shape_x, 1U }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordtype">int</span> width  = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordtype">int</span> height = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2e81f75558ad85ac6c1ac3972e113542">store_rgb_from_src</a>(src, rvec, gvec, bvec);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad37cb1ddab526d6cd50c79355cb48238">rgb_to_yuv_calculation</a>(rvec, gvec, bvec, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0], uvec_top, uvec_bottom, vvec_top, vvec_bottom);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uvec_coord{ 0, 0 };</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; y++)</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    {</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x += 2)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ x, y };</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            <span class="keyword">auto</span>       *plane_1_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1](coord));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keyword">auto</span>       *plane_2_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[2](coord));</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            T   border_value(0);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="keywordtype">int</span> uvec_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec_top, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            <span class="keywordtype">int</span> uvec_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(uvec_bottom, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            plane_1_pixel[0] = uvec_top_val;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            plane_1_pixel[1] = uvec_bottom_val;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            <span class="keywordtype">int</span> vvec_top_val    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec_top, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="keywordtype">int</span> vvec_bottom_val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">validation::tensor_elem_at</a>(vvec_bottom, uvec_coord, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            plane_2_pixel[0] = vvec_top_val;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            plane_2_pixel[1] = vvec_bottom_val;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            uvec_coord.increment(0);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        }</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    }</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;}</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00645"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1fe7737fbf524eeb6811368867fece26">  645</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1fe7737fbf524eeb6811368867fece26">colorconvert_yuyv_to_nv12</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;{</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() / 2 }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() / 2 }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">Format::YUYV422</a> == format) ? 0 : 1;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordtype">int</span> width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x();</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordtype">int</span> height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y();</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x++)</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        {</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uv_coord{ x, y / 2 };</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(dst_coord));</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keyword">auto</span>       *y_pixel            = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0](dst_coord));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="keyword">auto</span>       *uvvec_top_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_top(uv_coord));</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            <span class="keyword">auto</span>       *uvvec_bottom_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_bottom(uv_coord));</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            y_pixel[0] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="keywordflow">if</span>(y % 2 == 0)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                uvvec_top_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                uvvec_bottom_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    }</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().x();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().y();</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keywordtype">int</span> uv_coord_x = 0;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordtype">int</span> uv_coord_y = 0;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    {</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x++)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        {</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uv_coord{ uv_coord_x, uv_coord_y };</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            <span class="keyword">auto</span>       *uv_pixel           = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1](dst_coord));</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *uvvec_top_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_top(uv_coord));</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *uvvec_bottom_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_bottom(uv_coord));</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            uv_pixel[0] = (uvvec_top_pixel[0] + uvvec_bottom_pixel[0]) / 2;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            uv_pixel[1] = (uvvec_top_pixel[1] + uvvec_bottom_pixel[1]) / 2;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            uv_coord_x += 2;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        }</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        uv_coord_x = 0;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        uv_coord_y++;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    }</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;}</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00707"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#abed1623fbc88721689817ef115e317f2">  707</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#abed1623fbc88721689817ef115e317f2">colorconvert_yuyv_to_iyuv</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;{</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvvec_top(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() / 2 }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> uvvec_bottom(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y() / 2 }, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">Format::YUYV422</a> == format) ? 0 : 1;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordtype">int</span> width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x();</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordtype">int</span> height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y();</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x++)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uv_coord{ x, y / 2 };</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(dst_coord));</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <span class="keyword">auto</span>       *y_pixel            = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0](dst_coord));</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <span class="keyword">auto</span>       *uvvec_top_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_top(uv_coord));</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keyword">auto</span>       *uvvec_bottom_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_bottom(uv_coord));</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            y_pixel[0] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            <span class="keywordflow">if</span>(y % 2 == 0)</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                uvvec_top_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            }</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            {</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                uvvec_bottom_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            }</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        }</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().x();</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1].shape().y();</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordtype">int</span> uv_coord_x = 0;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keywordtype">int</span> uv_coord_y = 0;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x++)</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        {</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> uv_coord{ uv_coord_x, uv_coord_y };</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keyword">auto</span>       *u_pixel            = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1](dst_coord));</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <span class="keyword">auto</span>       *v_pixel            = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[2](dst_coord));</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *uvvec_top_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_top(uv_coord));</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *uvvec_bottom_pixel = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(uvvec_bottom(uv_coord));</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            u_pixel[0] = (uvvec_top_pixel[0] + uvvec_bottom_pixel[0]) / 2;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            v_pixel[0] = (uvvec_top_pixel[1] + uvvec_bottom_pixel[1]) / 2;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            uv_coord_x += 2;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        }</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        uv_coord_x = 0;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        uv_coord_y++;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    }</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;}</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00770"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1984a60611e2c95a52539c433477a300">  770</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1984a60611e2c95a52539c433477a300">nv_to_iyuv</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src_format, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;nv1, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;nv2)</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;{</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordtype">int</span> width  = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keywordtype">int</span> height = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">Format::NV12</a> == src_format) ? 1 : 0;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x++)</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        {</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keyword">auto</span>             *u_pixel   = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(nv1(src_coord));</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="keyword">auto</span>             *v_pixel   = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(nv2(src_coord));</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            u_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            v_pixel[0] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        }</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;}</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00793"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad4e53eefecbe0923391dd7130fc3b847">  793</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad4e53eefecbe0923391dd7130fc3b847">nv_to_yuv4</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src_format, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;nv1, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;nv2)</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;{</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="keywordtype">int</span> width  = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keywordtype">int</span> height = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">Format::NV12</a> == src_format) ? 1 : 0;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; x++)</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        {</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> src_coord{ x, y };</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>       dst_coord{ x * 2, y * 2 };</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>(src_coord));</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="keyword">auto</span>             *u_pixel   = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(nv1(dst_coord));</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            <span class="keyword">auto</span>             *v_pixel   = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(nv2(dst_coord));</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            u_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            u_pixel[1] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            v_pixel[0] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            v_pixel[1] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            dst_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, y * 2 + 1);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            u_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(nv1(dst_coord));</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            v_pixel    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(nv2(dst_coord));</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            u_pixel[0] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            u_pixel[1] = src_pixel[1 - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            v_pixel[0] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            v_pixel[1] = src_pixel[0 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        }</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    }</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;}</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00829"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a31c5dd66341f73cd38ae96d876c9d2a3">  829</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a31c5dd66341f73cd38ae96d876c9d2a3">colorconvert_nv_to_iyuv</a>(<span class="keyword">const</span> std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src_format, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;{</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <span class="keywordtype">int</span> width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x();</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="keywordtype">int</span> height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y();</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    {</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        {</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>[0](dst_coord));</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <span class="keyword">auto</span>       *y_pixel   = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0](dst_coord));</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            y_pixel[0] = src_pixel[0];</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        }</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    }</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1984a60611e2c95a52539c433477a300">nv_to_iyuv</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>[1], src_format, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[2]);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;}</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00851"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aca7296d0c60571db65670528b8e088c4">  851</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aca7296d0c60571db65670528b8e088c4">colorconvert_nv_to_yuv4</a>(<span class="keyword">const</span> std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src_format, std::vector&lt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;{</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keywordtype">int</span> width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().x();</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordtype">int</span> height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0].shape().y();</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; height; ++y)</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    {</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; width; ++x)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        {</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ x, y };</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> *src_pixel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>[0](dst_coord));</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            <span class="keyword">auto</span>       *y_pixel   = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[0](dst_coord));</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            y_pixel[0] = src_pixel[0];</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        }</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    }</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad4e53eefecbe0923391dd7130fc3b847">nv_to_yuv4</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>[1], src_format, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[2]);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;}</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;} <span class="comment">// color_convert_helper</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/*ARM_COMPUTE_TEST_VALIDATION_COLOR_CONVERT_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00076">Dimensions.h:76</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01084">helpers.h:1084</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a2e81f75558ad85ac6c1ac3972e113542"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2e81f75558ad85ac6c1ac3972e113542">arm_compute::test::colorconvert_helper::detail::store_rgb_from_src</a></div><div class="ttdeci">void store_rgb_from_src(const SimpleTensor&lt; T &gt; src, SimpleTensor&lt; T &gt; &amp;rvec, SimpleTensor&lt; T &gt; &amp;gvec, SimpleTensor&lt; T &gt; &amp;bvec)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00056">ColorConvertHelper.h:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a99b8d9c2d8305c4d51da543c1f609299"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a99b8d9c2d8305c4d51da543c1f609299">arm_compute::test::colorconvert_helper::detail::compute_rgb_value</a></div><div class="ttdeci">float compute_rgb_value(int y_value, int v_value, int u_value, unsigned char channel_idx)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00126">ColorConvertHelper.h:126</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">arm_compute::Format::UYVY422</a></div><div class="ttdoc">A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f489943d8618d47b1ad4611f0b9b7ff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">arm_compute::test::validation::tensor_elem_at</a></div><div class="ttdeci">T tensor_elem_at(const SimpleTensor&lt; T &gt; &amp;src, Coordinates coord, BorderMode border_mode, T constant_border_value)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">Utils.h:63</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ab7d52900468f442e85c01d73722d181c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a></div><div class="ttdeci">constexpr float blue_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00040">ColorConvertHelper.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="tests_2validation_2reference_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_abed1623fbc88721689817ef115e317f2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#abed1623fbc88721689817ef115e317f2">arm_compute::test::colorconvert_helper::detail::colorconvert_yuyv_to_iyuv</a></div><div class="ttdeci">void colorconvert_yuyv_to_iyuv(const SimpleTensor&lt; T &gt; src, const Format format, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00707">ColorConvertHelper.h:707</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a5e59bd8be31e871da2db7572e8b788ce"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a></div><div class="ttdeci">constexpr float green_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00038">ColorConvertHelper.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a31c5dd66341f73cd38ae96d876c9d2a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a31c5dd66341f73cd38ae96d876c9d2a3">arm_compute::test::colorconvert_helper::detail::colorconvert_nv_to_iyuv</a></div><div class="ttdeci">void colorconvert_nv_to_iyuv(const std::vector&lt; SimpleTensor&lt; T &gt;&gt; src, const Format src_format, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00829">ColorConvertHelper.h:829</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ad4e53eefecbe0923391dd7130fc3b847"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad4e53eefecbe0923391dd7130fc3b847">arm_compute::test::colorconvert_helper::detail::nv_to_yuv4</a></div><div class="ttdeci">void nv_to_yuv4(const SimpleTensor&lt; T &gt; src, const Format src_format, SimpleTensor&lt; T &gt; &amp;nv1, SimpleTensor&lt; T &gt; &amp;nv2)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00793">ColorConvertHelper.h:793</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a1fe7737fbf524eeb6811368867fece26"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1fe7737fbf524eeb6811368867fece26">arm_compute::test::colorconvert_helper::detail::colorconvert_yuyv_to_nv12</a></div><div class="ttdeci">void colorconvert_yuyv_to_nv12(const SimpleTensor&lt; T &gt; src, const Format format, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00645">ColorConvertHelper.h:645</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_aab80900114531c21cf2260c5f61d7991"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aab80900114531c21cf2260c5f61d7991">arm_compute::test::colorconvert_helper::detail::colorconvert_yuyv_to_rgb</a></div><div class="ttdeci">void colorconvert_yuyv_to_rgb(const SimpleTensor&lt; T &gt; src, const Format format, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00273">ColorConvertHelper.h:273</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a14139aa360487fbed344f5556a9fb91d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a14139aa360487fbed344f5556a9fb91d">arm_compute::test::colorconvert_helper::detail::rgb2yuv_bt709_kr</a></div><div class="ttdeci">constexpr float rgb2yuv_bt709_kr</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00042">ColorConvertHelper.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a0801967f8d38766ae40f0eb608966d97"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a0801967f8d38766ae40f0eb608966d97">arm_compute::test::colorconvert_helper::detail::rgb2yuv_bt709_kg</a></div><div class="ttdeci">constexpr float rgb2yuv_bt709_kg</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00045">ColorConvertHelper.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">arm_compute::Format::NV12</a></div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_aca7296d0c60571db65670528b8e088c4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aca7296d0c60571db65670528b8e088c4">arm_compute::test::colorconvert_helper::detail::colorconvert_nv_to_yuv4</a></div><div class="ttdeci">void colorconvert_nv_to_yuv4(const std::vector&lt; SimpleTensor&lt; T &gt;&gt; src, const Format src_format, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00851">ColorConvertHelper.h:851</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ae5035a982d39c4905c9ed3ac150f9917"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ae5035a982d39c4905c9ed3ac150f9917">arm_compute::test::colorconvert_helper::detail::colorconvert_iyuv_to_rgb</a></div><div class="ttdeci">void colorconvert_iyuv_to_rgb(const std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;tensor_planes, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00309">ColorConvertHelper.h:309</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00320">SimpleTensor.h:320</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a02c398becdd5ec3871c921111be463b0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a02c398becdd5ec3871c921111be463b0">arm_compute::test::colorconvert_helper::detail::rgb2u8_red_coef</a></div><div class="ttdeci">constexpr float rgb2u8_red_coef</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00051">ColorConvertHelper.h:51</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a27e073d020236f5a325762985b10f8d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a></div><div class="ttdeci">constexpr float green_coef2_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00039">ColorConvertHelper.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a1984a60611e2c95a52539c433477a300"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a1984a60611e2c95a52539c433477a300">arm_compute::test::colorconvert_helper::detail::nv_to_iyuv</a></div><div class="ttdeci">void nv_to_iyuv(const SimpleTensor&lt; T &gt; src, const Format src_format, SimpleTensor&lt; T &gt; &amp;nv1, SimpleTensor&lt; T &gt; &amp;nv2)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00770">ColorConvertHelper.h:770</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00087">Dimensions.h:87</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a2a36a93e164b484404fe908cefd6099a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a2a36a93e164b484404fe908cefd6099a">arm_compute::test::colorconvert_helper::detail::yuyv_to_rgb_calculation</a></div><div class="ttdeci">void yuyv_to_rgb_calculation(const SimpleTensor&lt; T &gt; yvec, const SimpleTensor&lt; T &gt; vvec, const SimpleTensor&lt; T &gt; yyvec, const SimpleTensor&lt; T &gt; uvec, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00159">ColorConvertHelper.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a212c4b6cc3384fc8a6daefc25b40efb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a212c4b6cc3384fc8a6daefc25b40efb1">arm_compute::test::colorconvert_helper::detail::rgb2u8_blue_coef</a></div><div class="ttdeci">constexpr float rgb2u8_blue_coef</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00053">ColorConvertHelper.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_acad6d1cab5b189722e9848aea8f79ae5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#acad6d1cab5b189722e9848aea8f79ae5">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_nv12</a></div><div class="ttdeci">void colorconvert_rgb_to_nv12(const SimpleTensor&lt; T &gt; src, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00420">ColorConvertHelper.h:420</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ac3138daaa2a074986406b22ec6f3d909"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a></div><div class="ttdeci">constexpr float red_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00037">ColorConvertHelper.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a9f946d571e7fe2fed0aee64adcfc9e3f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a9f946d571e7fe2fed0aee64adcfc9e3f">arm_compute::test::colorconvert_helper::detail::colorconvert_rgbx_to_rgb</a></div><div class="ttdeci">void colorconvert_rgbx_to_rgb(const SimpleTensor&lt; T &gt; src, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00249">ColorConvertHelper.h:249</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ad37cb1ddab526d6cd50c79355cb48238"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad37cb1ddab526d6cd50c79355cb48238">arm_compute::test::colorconvert_helper::detail::rgb_to_yuv_calculation</a></div><div class="ttdeci">void rgb_to_yuv_calculation(const SimpleTensor&lt; T &gt; rvec, const SimpleTensor&lt; T &gt; gvec, const SimpleTensor&lt; T &gt; bvec, SimpleTensor&lt; T &gt; &amp;yvec, SimpleTensor&lt; T &gt; &amp;uvec_top, SimpleTensor&lt; T &gt; &amp;uvec_bottom, SimpleTensor&lt; T &gt; &amp;vvec_top, SimpleTensor&lt; T &gt; &amp;vvec_bottom)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00081">ColorConvertHelper.h:81</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00370">SimpleTensor.h:370</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ad486334bc0542c5a70b7de5e0f3ccb4c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad486334bc0542c5a70b7de5e0f3ccb4c">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_u8</a></div><div class="ttdeci">void colorconvert_rgb_to_u8(const SimpleTensor&lt; T &gt; src, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00226">ColorConvertHelper.h:226</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a4ca7fc48708836259d66d299e302ace4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a4ca7fc48708836259d66d299e302ace4">arm_compute::test::colorconvert_helper::detail::rgb2u8_green_coef</a></div><div class="ttdeci">constexpr float rgb2u8_green_coef</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00052">ColorConvertHelper.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a919efb34e3e214d436bb42e874e56690"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a919efb34e3e214d436bb42e874e56690">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_rgbx</a></div><div class="ttdeci">void colorconvert_rgb_to_rgbx(const SimpleTensor&lt; T &gt; src, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00197">ColorConvertHelper.h:197</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a54c4999e22c2e329278b62088e78bd42"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a54c4999e22c2e329278b62088e78bd42">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_iyuv</a></div><div class="ttdeci">void colorconvert_rgb_to_iyuv(const SimpleTensor&lt; T &gt; src, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00508">ColorConvertHelper.h:508</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_aa7f62a47d22df7af67294e743f2dd3da"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#aa7f62a47d22df7af67294e743f2dd3da">arm_compute::test::colorconvert_helper::detail::colorconvert_nv12_to_rgb</a></div><div class="ttdeci">void colorconvert_nv12_to_rgb(const Format format, const std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;tensor_planes, SimpleTensor&lt; T &gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00364">ColorConvertHelper.h:364</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ad9f1a5f6d7600e7795e6ec649b7949e1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ad9f1a5f6d7600e7795e6ec649b7949e1">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_yuv4</a></div><div class="ttdeci">void colorconvert_rgb_to_yuv4(const SimpleTensor&lt; T &gt; src, std::vector&lt; SimpleTensor&lt; T &gt;&gt; &amp;dst)</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00596">ColorConvertHelper.h:596</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_af3dd0ec6de6bf7d3d4657ad6c7416120"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#af3dd0ec6de6bf7d3d4657ad6c7416120">arm_compute::test::colorconvert_helper::detail::rgb2yuv_bt709_cv</a></div><div class="ttdeci">constexpr float rgb2yuv_bt709_cv</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00049">ColorConvertHelper.h:49</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">arm_compute::Format::YUYV422</a></div><div class="ttdoc">A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a7b7c28051a725e523cc3554a6e84d0ac"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a7b7c28051a725e523cc3554a6e84d0ac">arm_compute::test::colorconvert_helper::detail::rgb2yuv_bt709_cu</a></div><div class="ttdeci">constexpr float rgb2yuv_bt709_cu</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00047">ColorConvertHelper.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a821b044a6b2074763716791045d83560"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a821b044a6b2074763716791045d83560">arm_compute::test::colorconvert_helper::detail::rgb2yuv_bt709_kb</a></div><div class="ttdeci">constexpr float rgb2yuv_bt709_kb</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00043">ColorConvertHelper.h:43</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="_color_convert_helper_8h.xhtml">ColorConvertHelper.h</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
