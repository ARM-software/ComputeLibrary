<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/gemm_hybrid_indirect.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemm__hybrid__indirect_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_hybrid_indirect.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__hybrid__indirect_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if !defined(_WIN64) &amp;&amp; !defined(__OpenBSD__)</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;alloca.h&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(_WIN64) &amp;&amp; !defined(__OpenBSD__) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bias__adder_8hpp.xhtml">bias_adder.hpp</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="convolver_8hpp.xhtml">convolver.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="kernel__weight__format_8hpp.xhtml">kernel_weight_format.hpp</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ndrange_8hpp.xhtml">ndrange.hpp</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="performance__parameters_8hpp.xhtml">performance_parameters.hpp</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="transform_8hpp.xhtml">transform.hpp</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;profiler.hpp&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#ifndef UNUSED</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="gemm__hybrid__indirect_8hpp.xhtml#a6edcfa861914086db045065ea9183ab1">   47</a></span>&#160;<span class="preprocessor">#define __I_DEFINED_UNUSED</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="gemm__hybrid__indirect_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">   48</a></span>&#160;<span class="preprocessor">#define UNUSED(x)  ((void)(x))</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">// We need to invoke the kernel differently for quantizing and non-quantizing cases, so here is a shim class to do</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">// that.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputStage, <span class="keywordtype">bool</span> SeparateQuantize, <span class="keywordtype">bool</span> FixedFormat&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">class </span>run_hybrid_kernel {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> Tlo, <span class="keyword">typename</span> Tro, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run</a> (</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;#endif</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_strings, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *string_ptr, IndirectInputArg&lt;Tlo&gt; A_arg, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k, <span class="keyword">const</span> Tro *b_ptr, <span class="keywordtype">size_t</span> b_stride, IndirectOutputArg&lt;Tr&gt; output_arg, <span class="keyword">const</span> Tr *bias_ptr, Activation act, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> OutputStage &amp;os, <span class="keyword">const</span> int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0 );</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;};</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> Tlo, <span class="keyword">typename</span> Tro, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;Nothing, false, false&gt;::run</a>(</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;#endif</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_strings, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *string_ptr, IndirectInputArg&lt;Tlo&gt; A_arg, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k, <span class="keyword">const</span> Tro *b_ptr, <span class="keywordtype">size_t</span>, IndirectOutputArg&lt;Tr&gt; output_arg, <span class="keyword">const</span> Tr *bias_ptr, Activation act, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">const</span> Nothing &amp;, <span class="keyword">const</span> int32_t *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)M * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(N, strategy::out_width()));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="gemm__hybrid__indirect_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(kern_k);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">/* Indirect hybrid kernels read the full width of the bias.  So we need to detect the case where we are writing</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     * a partial block and pad the bias for that block. */</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span> (bias_ptr &amp;&amp; !accumulate &amp;&amp; (N % strategy::out_width() != 0)) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">/* Break N into &quot;N_bulk&quot; (a multiple of output width) and &quot;N_remainder&quot; */</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N_remainder = N % strategy::out_width();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N_bulk = N - N_remainder;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="comment">/* Output argument to be used for the tail */</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        IndirectOutputArg&lt;Tr&gt; offset_output = output_arg;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">/* If there is a &quot;bulk&quot; to be processed, handle that and update &quot;offset_output&quot; appropriately. */</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> (N_bulk &gt; 0) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            strat.kernel(num_strings, string_ptr, A_arg, M, N_bulk, b_ptr, output_arg, bias_ptr, act, accumulate);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">if</span> (output_arg.is_indirect) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                offset_output = IndirectOutputArg&lt;Tr&gt;(output_arg.indirect.ptr, output_arg.indirect.offset + N_bulk);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                offset_output = IndirectOutputArg&lt;Tr&gt;(output_arg.direct.base + N_bulk, output_arg.direct.stride);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">/* Pad the bias buffer for the remainder */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        Tr *bias_pad_buffer = <span class="keyword">reinterpret_cast&lt;</span>Tr *<span class="keyword">&gt;</span>(alloca(strategy::out_width() * <span class="keyword">sizeof</span>(Tr)));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        memcpy(bias_pad_buffer, bias_ptr + N_bulk, N_remainder * <span class="keyword">sizeof</span>(Tr));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">/* Process the remainder, offsetting the B pointer as needed. */</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        strat.kernel(num_strings, string_ptr, A_arg, M, N_remainder, b_ptr + (N_bulk * kern_k), offset_output, bias_pad_buffer, act, accumulate);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        strat.kernel(num_strings, string_ptr, A_arg, M, N, b_ptr, output_arg, bias_ptr, act, accumulate);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> Tlo, <span class="keyword">typename</span> Tro, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;Nothing, false, true&gt;::run</a>(</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;#endif</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_strings, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *string_ptr, IndirectInputArg&lt;Tlo&gt; A_arg, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> M, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k, <span class="keyword">const</span> Tro *b_ptr, <span class="keywordtype">size_t</span> b_stride, IndirectOutputArg&lt;Tr&gt; output_arg, <span class="keyword">const</span> Tr *bias_ptr, Activation act, <span class="keywordtype">bool</span> accumulate,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">const</span> Nothing &amp;, <span class="keyword">const</span> int32_t *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)M * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(N, strategy::out_width()));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="gemm__hybrid__indirect_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(kern_k);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">/* Indirect hybrid kernels read the full width of the bias.  So we need to detect the case where we are writing</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * a partial block and pad the bias for that block. */</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> (bias_ptr &amp;&amp; !accumulate &amp;&amp; (N % strategy::out_width() != 0)) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">/* Break N into &quot;N_bulk&quot; (a multiple of output width) and &quot;N_remainder&quot; */</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N_remainder = N % strategy::out_width();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N_bulk = N - N_remainder;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">/* Output argument to be used for the tail */</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        IndirectOutputArg&lt;Tr&gt; offset_output = output_arg;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">/* If there is a &quot;bulk&quot; to be processed, handle that and update &quot;offset_output&quot; appropriately. */</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> (N_bulk &gt; 0) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            strat.kernel(num_strings, string_ptr, A_arg, M, N_bulk, b_ptr, b_stride, output_arg, bias_ptr, act, accumulate);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">if</span> (output_arg.is_indirect) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                offset_output = IndirectOutputArg&lt;Tr&gt;(output_arg.indirect.ptr, output_arg.indirect.offset + N_bulk);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                offset_output = IndirectOutputArg&lt;Tr&gt;(output_arg.direct.base + N_bulk, output_arg.direct.stride);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">/* Pad the bias buffer for the remainder */</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        Tr *bias_pad_buffer = <span class="keyword">reinterpret_cast&lt;</span>Tr *<span class="keyword">&gt;</span>(alloca(strategy::out_width() * <span class="keyword">sizeof</span>(Tr)));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        memcpy(bias_pad_buffer, bias_ptr + N_bulk, N_remainder * <span class="keyword">sizeof</span>(Tr));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="comment">/* Process the remainder, offsetting the B pointer as needed. */</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        strat.kernel(num_strings, string_ptr, A_arg, M, N_remainder,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                     b_ptr + (N_bulk / strategy::stripe_width()) * b_stride, b_stride, offset_output,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                     bias_pad_buffer, act, accumulate);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        strat.kernel(num_strings, string_ptr, A_arg, M, N, b_ptr, b_stride, output_arg, bias_ptr, act, accumulate);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> Tlo, <span class="keyword">typename</span> Tro, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;Requantize32, false, false&gt;::run</a>(</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;#endif</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_strings, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *string_ptr, IndirectInputArg&lt;Tlo&gt; A_arg, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> M, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k, <span class="keyword">const</span> Tro *b_ptr, <span class="keywordtype">size_t</span>, IndirectOutputArg&lt;Tr&gt; output_arg, <span class="keyword">const</span> Tr *, Activation, <span class="keywordtype">bool</span>,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> Requantize32 &amp;os, <span class="keyword">const</span> int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0 ) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)M * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(N, strategy::out_width()));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="gemm__hybrid__indirect_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(kern_k);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    strat.kernel(num_strings, string_ptr, A_arg, M, N, b_ptr, output_arg, &amp;os, col_bias + n_0, n_0);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> Tlo, <span class="keyword">typename</span> Tro, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;Requantize32, true, false&gt;::run</a>(</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;#endif</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_strings, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *string_ptr, IndirectInputArg&lt;Tlo&gt; A_arg, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> M, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k, <span class="keyword">const</span> Tro *b_ptr, <span class="keywordtype">size_t</span>, IndirectOutputArg&lt;Tr&gt; output_arg, <span class="keyword">const</span> Tr *, Activation, <span class="keywordtype">bool</span>,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> Requantize32 &amp;os, <span class="keyword">const</span> int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0 ) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="gemm__hybrid__indirect_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(kern_k);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// On this route we will only process one kernel height at a time and will make sure this happens in the driver loop.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    assert(M &lt;= strategy::out_height());</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// We don&#39;t yet support indirect output (as the quantizer can&#39;t do it).</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    assert(output_arg.is_indirect == <span class="keyword">false</span>);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// We need a row sum buffer and intermediate output buffer.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// These go on the stack as they are not too large, using an automatic array and alloca() respectively.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    int32_t row_sums[strategy::out_height()];</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">typename</span> strategy::result_type *result_buffer;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(N, strategy::out_width());</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    result_buffer = <span class="keyword">reinterpret_cast&lt;</span>typename strategy::result_type *<span class="keyword">&gt;</span>(alloca(output_width * strategy::out_height() * <span class="keyword">sizeof</span>(<span class="keyword">typename</span> strategy::result_type)));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)M * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(N, strategy::out_width()));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// Perform the GEMM, into the output buffer.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        strat.kernel(num_strings, string_ptr, A_arg, M, N, b_ptr, IndirectOutputArg&lt;typename strategy::result_type&gt;(result_buffer, output_width), <span class="keyword">nullptr</span>, Activation(), <span class="keyword">false</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">if</span> (os.b_offset != 0) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_ROWSUMS, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)M * kern_k);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <a class="code" href="namespacearm__gemm.xhtml#a54b323e0b5dc791fba941f9c19a61cbc">row_sums_indirect</a>(num_strings, string_ptr, A_arg, M, row_sums, &amp;os);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        memset(row_sums, 0, <span class="keyword">sizeof</span>(int32_t) * strategy::out_height());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_QUANTIZE, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)M * N);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="comment">// Quantize</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">requantize_block_32</a>(os, N, M, result_buffer, output_width, output_arg.direct.base, output_arg.direct.stride, row_sums, col_bias + n_0, n_0);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keywordtype">bool</span> FixedFormat&gt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">struct </span>stripe_width {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">get</span>() {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">return</span> strategy::stripe_width();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;};</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy&gt;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">struct </span>stripe_width&lt;strategy, false&gt; {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">get</span>() {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;};</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keywordtype">bool</span> FixedFormat&gt;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">struct </span>kernel_weight_format {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">KernelWeightFormat</a> <span class="keyword">get</span>() {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> strategy::kernel_weight_format();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;};</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy&gt;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">struct </span>kernel_weight_format&lt;strategy, false&gt; {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">KernelWeightFormat</a> <span class="keyword">get</span>() {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76aa2730bd24646daa3279918eeff467d8c">KernelWeightFormat::NON_FIXED</a>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;};</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">// Implementation of the GemmCommon abstract class.</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> OutputStage=Nothing, <span class="keywordtype">bool</span> SeparateQuantize=false, <span class="keywordtype">bool</span> FixedFormat=false&gt;</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">  264</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> : <span class="keyword">public</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon</a>&lt;To, Tr&gt; {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::lhs_operand_type Tloi;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::rhs_operand_type Troi;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::result_type Tri;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a>           _args;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    OutputStage        _os = {};</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="comment">/* Quantized support (in addition to &#39;output stage&#39; above) */</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    int32_t *_col_bias = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Ktotal;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _rounded_Ksize;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="comment">/* Blocking info */</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _k_block;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _n_block;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Mround;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">/* Pretransposed buffer. */</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> Troi *_B_transposed=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">/* Indirect parameters.  _indirect_buf doubles as a flag to indicate that &quot;indirect&quot; transform should be used. */</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> To * <span class="keyword">const</span> * <span class="keyword">const</span> * _indirect_buf = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">/* Convolver - only set up for convolution problems, so also doubles as a flag. */</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    std::unique_ptr&lt;convolver&lt;To&gt;&gt;  _convolver = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// Array of pointers to output rows</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">//    Tr * const *        _output_ptrs;</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_range.xhtml">NDRange&lt;4&gt;</a> _window_range;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_col_sum_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">return</span> _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <span class="keyword">sizeof</span>(int32_t);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_ktotal(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>) {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a> * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, strategy::k_unroll());</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> compute_k_block(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args) {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="comment">// Some kernels don&#39;t support accumulate mode - these can&#39;t do K blocking at all.</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span> (!strategy::supports_accumulate() || std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">return</span> get_ktotal(args);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a>) {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a>, strategy::k_unroll());</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="comment">// Experimental data suggests an optimal block size of 512 for FP32 (scaling accordingly for other</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="comment">// datatypes); but don&#39;t divide into blocks until we hit 1.5X this size.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> target_block_size = 2048 / <span class="keyword">sizeof</span>(To);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keyword">auto</span> ktotal = get_ktotal(args);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">if</span> (ktotal &gt; ((target_block_size*3)/2)) {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> target_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(ktotal, target_block_size);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block_size = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(ktotal, target_blocks);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            block_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(block_size, strategy::k_unroll());</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">return</span> block_size;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">return</span> ktotal;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">// New N blocking strategy: if it&#39;s narrow, or much taller than it is wide, do the full width.  Otherwise do a</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="comment">// single block.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> compute_n_block(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, <span class="keyword">const</span> OutputStage os = {}) {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a>) {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a>;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a> &lt;= 64) {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">if</span> ((args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> / args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>) &gt; 155) {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="comment">// &quot;Asymmetric&quot; quantizing GEMMs require a different approach - the tall skinny blocks we would otherwise</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="comment">// use imply a great deal of repeated work performing the row sums.  If row sums are involved, work out how</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="comment">// much &quot;column&quot; parallelism is going to be required and set the block size accordingly.</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;os);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="comment">// Row sums only needed if b_offset isn&#39;t 0</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="keywordflow">if</span> (qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a126a5e90d1af15ccd17a6efe3a47f54b">b_offset</a> != 0) {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="comment">// We can already parallelize across batches, multis and rows (in units of &#39;out_height&#39;)</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="keywordtype">int</span> multi_row_parallelism = args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a> * <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>, strategy::out_height());</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="comment">// If this isn&#39;t enough, we will need to split up the columns too.</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <span class="keywordflow">if</span> (multi_row_parallelism &lt; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a>) {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> columns_needed = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a>, multi_row_parallelism);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, columns_needed);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(n_block, strategy::out_width());</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="comment">// Multi/Batch/Row parallelism is enough - don&#39;t split up the columns.</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> &lt;= 128 &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a> &lt;= 16) {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">return</span> strategy::out_width() * 3;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">return</span> strategy::out_width();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>(<a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp; operator= (<a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">/* Constructor */</span></div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aaf3825f729cb74269c80674c27985902">  389</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aaf3825f729cb74269c80674c27985902">GemmHybridIndirect</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, <span class="keyword">const</span> OutputStage &amp;os)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;              : _args(args), _os(os), _Ktotal(get_ktotal(args)),</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Ksize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::k_unroll())),</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                _k_block(compute_k_block(args)), _n_block(compute_n_block(args, os)),</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height())),</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height()), args._nbatches,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                              <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args._Nsize, _n_block), args._nmulti)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="comment">// We take a copy of the arguments (not a pointer or reference), but there is no lifetime requirement on the</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="comment">// GemmConfig.  Clear out the pointer to avoid accidents.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">/* Constructor without OutputStage */</span></div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acf49fb074e8b7b29cb88fc2f8db0113b">  403</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acf49fb074e8b7b29cb88fc2f8db0113b">GemmHybridIndirect</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;              : _args(args), _Ktotal(get_ktotal(args)),</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Ksize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::k_unroll())),</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                _k_block(compute_k_block(args)), _n_block(compute_n_block(args)),</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height())),</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height()), args._nbatches,</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                              <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args._Nsize, _n_block), args._nmulti)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="comment">// We take a copy of the arguments (not a pointer or reference), but there is no lifetime requirement on the</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="comment">// GemmConfig.  Clear out the pointer to avoid accidents.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="comment">// Interface implementation - Compulsory functions</span></div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">  417</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_n_d_range.xhtml">ndrange_t</a> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keywordflow">return</span> { _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">total_size</a>() };</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">// This kernel can always be dynamically scheduled.</span></div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">  422</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">supports_dynamic_scheduling</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// Execute</span></div><div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1d37407e8d582183b35dedbf7fa43b43">  427</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1d37407e8d582183b35dedbf7fa43b43">execute</a>(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;work_range, <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;, <span class="keywordtype">int</span>)<span class="keyword"> override </span>{</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        profiler prof;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        std::vector&lt;const To *&gt;         in_row_ptrs;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        std::vector&lt;const To * const *&gt; in_row_strings;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        std::vector&lt;unsigned int&gt;       string_lengths;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="comment">// In convolution mode, we need input pointers.</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordflow">if</span> (_convolver) {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            in_row_ptrs = std::vector&lt;const To *&gt;(strategy::out_height() * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            in_row_strings = std::vector&lt;const To * const *&gt;(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>; i++) {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                in_row_strings[i] = &amp;(in_row_ptrs[i * strategy::out_height()]);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            }</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="comment">// In any indirect mode, we need the string lengths.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">if</span> (_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ab6f473669f97dc471c5dd2945da5f2da">_indirect_input</a>) {</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            string_lengths = std::vector&lt;unsigned int&gt;(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, 0);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        }</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        assert(FixedFormat || _B_transposed);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        static_assert(std::is_same&lt;To, Tloi&gt;::value, <span class="stringliteral">&quot;gemm_native: Operand types must be the same.&quot;</span>);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">//        static_assert(std::is_same&lt;Tr, Tri&gt;::value, &quot;gemm_native: Result types must be the same.&quot;);</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="comment">/* For now, each work item implies all the K for a given output</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">         * pixel (so we don&#39;t need to synchronize access to the output</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">         * array).  So separate the loop over K blocks here.  */</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax   = std::min(k0 + _k_block, _Ktotal);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (k0 == 0);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass = (kmax == _Ktotal);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_section = (k0 / _rounded_Ksize);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_offset  = (k0 % _rounded_Ksize);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = kern_k;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>=0;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = first_offset;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">if</span> (_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ab6f473669f97dc471c5dd2945da5f2da">_indirect_input</a>) {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                <span class="keywordflow">while</span> (kleft) {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    <span class="comment">// When chopping into sections: the amount that goes into &#39;string_lengths&#39; is the amount to be</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    <span class="comment">// processed (excluding padding).  But the amount we subtract from &#39;kleft&#39; takes account of any</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    <span class="comment">// padding applied.</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    string_lengths[<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>] = std::min(kleft, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> - offset);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    kleft -= std::min(kleft, _rounded_Ksize - offset);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    sections++;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    offset=0;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                }</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keyword">auto</span> p = _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">iterator</a>(work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">get_position</a>(0), work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">get_position_end</a>(0));</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">if</span> (p.done()) {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            }</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="comment">// Process rows either &#39;out_height&#39; rows at a time, or do all valid rows at once with a single kernel call.</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="comment">// The separate quantizer path only handles one block of rows at a time (as it has to store sums and intermediate results).</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="comment">// THe convolution path only generates the pointers for one block of rows at a time.</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> process_all_rows = (!SeparateQuantize &amp;&amp; !_convolver);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_start = p.dim(0) * strategy::out_height();</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_end   = process_all_rows ? std::min(p.dim0_max() * strategy::out_height(), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>) : std::min(m_start + strategy::out_height(), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">//                const unsigned int m_end   = std::min(m_start + strategy::out_height(), _args._Msize);</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>   = p.dim(1);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0      = p.dim(2) * _n_block;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nmax    = std::min(n0 + _n_block, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi   = p.dim(3);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keyword">const</span> Troi *b_panel;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="keywordflow">if</span> (FixedFormat) {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    b_panel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Troi *<span class="keyword">&gt;</span>(this-&gt;_Bptr) +</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                               (multi * this-&gt;_B_multi_stride) +</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                               ((n0 / stripe_width&lt;strategy, FixedFormat&gt;::get()) * this-&gt;_ldb) +</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                               (k0 * stripe_width&lt;strategy, FixedFormat&gt;::get());</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                    b_panel = _B_transposed +</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                               (multi * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * _Ktotal) +</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                               (k0 * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width())) +</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                               (n0 * kern_k);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                }</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <a class="code" href="structarm__gemm_1_1_indirect_output_arg.xhtml">IndirectOutputArg&lt;Tr&gt;</a> out_arg(this-&gt;_Cptr + (multi * this-&gt;_C_multi_stride) + (batch * this-&gt;_C_batch_stride) + (m_start * this-&gt;_ldc) + n0, this-&gt;_ldc);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(m_end - m_start) * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(nmax-n0, strategy::out_width()));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <span class="keywordflow">if</span> (_indirect_buf) {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize, FixedFormat&gt;::run</a>(</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                                 prof,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;#endif</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                 strat, sections, string_lengths.data(),</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                                 <a class="code" href="structarm__gemm_1_1_indirect_input_arg.xhtml">IndirectInputArg&lt;To&gt;</a>(_indirect_buf + (multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>) + (batch * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>) + first_section, m_start, first_offset),</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, this-&gt;_ldb, out_arg,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                 last_pass ? _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">_act</a> : <a class="code" href="structarm__gemm_1_1_activation.xhtml">Activation</a>(),</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                 !first_pass,</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                 <span class="comment">// Quantization parameters</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                 _os, _col_bias+(multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), n0);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    <span class="keyword">auto</span> conv_cols = _convolver-&gt;process_columns(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride), this-&gt;_lda, k0, kmax, _rounded_Ksize);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pos=0;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="keyword">auto</span> conv_rows = conv_cols.process_rows(m_start, m_end - m_start);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    <span class="keywordflow">while</span> (!conv_rows.finished()) {</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, conv_offset;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        assert(pos &lt; sections);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        std::tie(width, conv_offset) = conv_rows.next_block(&amp;(in_row_ptrs[pos * strategy::out_height()]));</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                        <span class="keywordflow">if</span> (pos==0) {</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                            assert(conv_offset == first_offset);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                        }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        assert(width == string_lengths[pos]);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                        pos++;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                    assert(pos == sections);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize, FixedFormat&gt;::run</a>(</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                 prof,</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;#endif</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                 strat, sections, string_lengths.data(),</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                 <a class="code" href="structarm__gemm_1_1_indirect_input_arg.xhtml">IndirectInputArg&lt;To&gt;</a>(in_row_strings.data(), 0, first_offset),</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, this-&gt;_ldb, out_arg,</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                 last_pass ? _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">_act</a> : <a class="code" href="structarm__gemm_1_1_activation.xhtml">Activation</a>(),</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                                 !first_pass,</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                 <span class="comment">// Quantization parameters</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                 _os, _col_bias+(multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), n0);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    <span class="comment">// Length to process.  This needs to exclude padding, but &#39;kmax&#39; potentially includes it.</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len = (std::min(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, kmax) - k0);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize, FixedFormat&gt;::run</a>(</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                 prof,</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;#endif</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                 strat, 1, &amp;len,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                 <a class="code" href="structarm__gemm_1_1_indirect_input_arg.xhtml">IndirectInputArg&lt;To&gt;</a>(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride) + m_start * this-&gt;_lda + k0, this-&gt;_lda),</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, this-&gt;_ldb, out_arg,</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                 last_pass ? _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">_act</a> : <a class="code" href="structarm__gemm_1_1_activation.xhtml">Activation</a>(),</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                                 !first_pass,</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                 <span class="comment">// Quantization parameters</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                                 _os, _col_bias+(multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), n0);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            } <span class="keywordflow">while</span> (process_all_rows ? p.next_dim1() : p.next_dim0());</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        }</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="comment">// Interface implementation - pretransposed</span></div><div class="line"><a name="l00591"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac5dec5063a75604fdc60555f15577b94">  591</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    }</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">  595</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>) &amp;&amp; (_B_transposed==<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    }</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae9fc7380e533c43a1d91e48a7578e412">  599</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">if</span> (FixedFormat) {</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        }</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="comment">// Start with actual pretransposed buffer...</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <span class="keywordtype">size_t</span> size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * _Ktotal * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <span class="keyword">sizeof</span>(Troi);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="comment">// Space for result row pointers (not strictly needed any more but retained for indirect output testing)</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        size += _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <span class="keyword">sizeof</span>(<span class="keyword">const</span> Tr *);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            size += get_col_sum_size();</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        }</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">return</span> size;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a0ae716040d875abeeba60aa4a6b73363">  617</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            _col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a>; i++) {</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                <span class="comment">// The input is assumed not to have any padding between sections, so straightforward Ksize * Ksections computation gets the total size.</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(*qp_ptr, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, B + (i * B_multi_stride), ldb, _col_bias + (i * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, i, 0);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            }</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        }</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    }</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae385dce1a98e03f0a3ca311f031e5110">  630</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        requantize_bias(in_buffer, B, ldb, B_multi_stride);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-transposing cases get_col_sum_size() == 0</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        Troi *buffer = <span class="keyword">reinterpret_cast&lt;</span>Troi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=0; multi&lt;_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a>; multi++) {</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax=std::min(k0 + _k_block, _Ktotal);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = kmax - k0;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                <span class="keywordflow">if</span> (_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a> &gt; 1) {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                    <span class="comment">// We need to insert padding at the end of each K section.</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="comment">// The computation needed is a little delicate - the coordinates from the block walker are expressed in</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    <span class="comment">// terms of the full, padded, _Ktotal.</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    <span class="comment">// But we need to transform each section with reference to the original, unpadded, input, letting the</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    <span class="comment">// transform pad each section as needed.</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    <span class="comment">// This is needed for computations below.</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_section_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, strategy::k_unroll());</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    <span class="comment">// The expected output format is also an entire &lt;out_width&gt; columns interleaved, then the next set of</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                    <span class="comment">// columns, and so on.  This means, as we are breaking it up vertically, we have to do it one column at</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                    <span class="comment">// a time.</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=0; x0 &lt; _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>; x0 += strategy::out_width() ){</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0 + strategy::out_width(), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                        <span class="comment">// Track where we are and how much work is left.</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kpos  = k0;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = k_size;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                        <span class="keywordflow">while</span> (kleft) {</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                            <span class="comment">// Which section are we in?  Based on the rounded-up section size.</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_section_base = kpos / rounded_section_size;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                            <span class="comment">// How far into the section are we?</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_offset = kpos - (k_section_base * rounded_section_size);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                            <span class="comment">// We will either copy the rest of this section, or to the end of the requested length.</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_length = std::min(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> - k_offset, kleft);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                            strat.transforms.PrepareB(buffer, B + (multi * B_multi_stride), ldb,</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                                      x0, xmax,</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                                      (k_section_base * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>) + k_offset,               <span class="comment">// K starting point - compute row to read based on our section and the true section length.</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                                      (k_section_base * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>) + k_offset + k_length);   <span class="comment">// K end point - starting point plus length computed above.</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                            <span class="comment">// We need to modify our position based on the ROUNDED version of what we just did.</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padded_length = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_length, strategy::k_unroll());</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                            buffer += strategy::out_width() * padded_length;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                            kpos  += padded_length;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                            kleft -= padded_length;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                        }</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                    }</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    <span class="comment">// In the single K section case, can process the whole lot in one go.</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    strat.transforms.PrepareB(buffer, B + (multi * B_multi_stride), ldb,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                              0, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, k0, std::min(kmax, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>));</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                    buffer += <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                }</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            }</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        }</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    }</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">  700</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a>(<span class="keywordtype">void</span> *in_buffer)<span class="keyword"> override </span>{</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-transposing cases get_col_sum_size() == 0</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Troi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        _col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    }</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="comment">// Estimate cycles for given problem given provided parameters.</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="comment">// &quot;perf_type&quot; is a type to pass along to get_performance_parameters to get the right set of performance</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="comment">// parameters - it&#39;s arbitrary but usually either the input or output type.</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> perf_type&gt;</div><div class="line"><a name="l00711"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1f2f50f190980ff2ee79b62300a85c20">  711</a></span>&#160;    <span class="keyword">static</span> uint64_t <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1f2f50f190980ff2ee79b62300a85c20">estimate_cycles</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, <span class="keyword">const</span> OutputStage &amp;os = {}) {</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml">PerformanceParameters</a> params = strategy::template get_performance_parameters&lt;perf_type&gt;(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="comment">// Note: Current hybrid kernels don&#39;t actually round up height (they</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="comment">// have paths for each possible height).  Might need to make this</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="comment">// configurable in future.</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        uint64_t total_macs = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * get_ktotal(args);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordtype">float</span> mac_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_macs) / params.<a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml#aae5e7478143157dcb85385f506f4f5d3">kernel_macs_cycle</a>;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="comment">// TODO: A bit of a kludge here: current hybrid kernels incur extra</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="comment">// overhead where the width is not a multiple of kernel width.  It&#39;s</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="comment">// most noticable where the overall width is quite low, so add 15%</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <span class="comment">// penalty for such widths.</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a21d4abeb421380e0af50776ed5362430">if</a> ((args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a> &lt; strategy::out_width()) || (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a> &gt; strategy::out_width() &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a> &lt; 2*strategy::out_width())) {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            mac_cycles *= 1.15f;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        uint64_t total_cycles = mac_cycles;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="comment">// Quantizing kernels with separate quantize need to add in the extra stages.</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value &amp;&amp; SeparateQuantize) {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;os);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="comment">// Row sums: need to consider each value in A (batch * multi * M * K)...</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            uint64_t rowsum_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> * get_ktotal(args);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <span class="comment">// ... but row sums are skipped if B offset==0.</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <span class="keywordflow">if</span> (qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a126a5e90d1af15ccd17a6efe3a47f54b">b_offset</a> == 0) {</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                rowsum_bytes = 0;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="comment">// Use &quot;prepare bytes per cycle&quot; to store &quot;row sum values per cycle&quot;.</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordtype">float</span> rowsum_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(rowsum_bytes) / params.<a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml#a47af75329f77f9b1fae756b7b81f1aa7">prepare_bytes_cycle</a>;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="comment">// Requantize: need to consider each value in C (batch * multi * M * N)</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            uint64_t requantize_bytes = static_cast&lt;uint64_t&gt;(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="comment">// Use &quot;merge bytes per cycle&quot; to store &quot;requantize values per cycle&quot;.</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="keywordtype">float</span> requantize_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(requantize_bytes) / params.<a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml#a3707a174d8c3b387326b6b397083c384">merge_bytes_cycle</a>;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="comment">// Recalculate total_cycles with the extra components.</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            total_cycles = mac_cycles + rowsum_cycles + requantize_cycles;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        }</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">return</span> total_cycles;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    }</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a4f282c5814fcd207308c4737a1fc567b">  759</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a4f282c5814fcd207308c4737a1fc567b">set_quantized_bias</a>(<span class="keyword">const</span> int32_t *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="keywordtype">size_t</span> bias_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a> = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#afac6d7d779e04e999149dcf095734294">bias_multi_stride</a> = bias_multi_stride;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        }</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    }</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a82b688818137467809617daf73ffdc11">  768</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a82b688818137467809617daf73ffdc11">set_indirect_parameters</a>(<span class="keywordtype">size_t</span> string_len, <span class="keyword">const</span> To * <span class="keyword">const</span> * <span class="keyword">const</span> *ptr)<span class="keyword"> override </span>{</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        assert(string_len == _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        _indirect_buf = ptr;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    }</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">  773</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">set_convolution_parameters</a>(<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a> parms)<span class="keyword"> override </span>{</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        assert(parms.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a49bc030c7b2dbe01762c4db96706f32c">input_channels</a> == _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        _convolver = std::unique_ptr&lt;convolver&lt;To&gt;&gt;(<span class="keyword">new</span> <a class="code" href="classarm__gemm_1_1convolver.xhtml">convolver&lt;To&gt;</a>(parms));</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    }</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a7cde60064c88a363415fc0639d09cc3e">  778</a></span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a7cde60064c88a363415fc0639d09cc3e">get_config</a>()<span class="keyword"> override </span>{</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> c;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a1ade5ed8fc2bd356dfe390ad634ca9e6">method</a> = <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14">GemmMethod::GEMM_HYBRID</a>;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a> = _k_block;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a> = _n_block;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a61e0e449fd7e8647d521cafd4f1d55a3">filter</a> = get_type_name&lt;strategy&gt;();</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">weight_format</a> = <a class="code" href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">get_weight_format</a>(kernel_weight_format&lt;strategy, FixedFormat&gt;::get(), <span class="keyword">sizeof</span>(To));</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    }</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;};</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> OutputStage=Nothing&gt;</div><div class="line"><a name="l00792"></a><span class="lineno"><a class="line" href="namespacearm__gemm.xhtml#a6eee168fbc228e660cd91b939bce3a28">  792</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirectFixedFormat</a> = <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect&lt;strategy, To, Tr, OutputStage, false, true&gt;</a>;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="preprocessor">#ifdef __I_DEFINED_UNUSED</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="preprocessor">#undef UNUSED</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a1d37407e8d582183b35dedbf7fa43b43"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1d37407e8d582183b35dedbf7fa43b43">arm_gemm::GemmHybridIndirect::execute</a></div><div class="ttdeci">void execute(const ndcoord_t &amp;work_range, const ndcoord_t &amp;, int) override</div><div class="ttdoc">Main execute member fucntion. </div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00427">gemm_hybrid_indirect.hpp:427</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01084">helpers.h:1084</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">arm_gemm::Requantize32::bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00172">arm_gemm.hpp:172</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a49bc030c7b2dbe01762c4db96706f32c"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a49bc030c7b2dbe01762c4db96706f32c">arm_gemm::ConvolutionParameters::input_channels</a></div><div class="ttdeci">int64_t input_channels</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00052">convolution_parameters.hpp:52</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_abb02a9fd23c6187807ad015022708985"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">arm_gemm::GemmArgs::_ci</a></div><div class="ttdeci">const CPUInfo * _ci</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00145">arm_gemm.hpp:145</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a967adad6c21766e82315265eccfd0ca5"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">arm_gemm::GemmArgs::_nmulti</a></div><div class="ttdeci">unsigned int _nmulti</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00151">arm_gemm.hpp:151</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_indirect_output_arg_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_indirect_output_arg.xhtml">arm_gemm::IndirectOutputArg</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00086">utils.hpp:86</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml_a78a5c697e8717cb27954513e8ad2a508"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">arm_gemm::NDRange::iterator</a></div><div class="ttdeci">NDRangeIterator iterator(unsigned int start, unsigned int end) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00131">ndrange.hpp:131</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a19076cd620581b8e671ad674359c1b76"><div class="ttname"><a href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">arm_gemm::KernelWeightFormat</a></div><div class="ttdeci">KernelWeightFormat</div><div class="ttdef"><b>Definition:</b> <a href="kernel__weight__format_8hpp_source.xhtml#l00042">kernel_weight_format.hpp:42</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_ae9fc7380e533c43a1d91e48a7578e412"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae9fc7380e533c43a1d91e48a7578e412">arm_gemm::GemmHybridIndirect::get_B_pretransposed_array_size</a></div><div class="ttdeci">size_t get_B_pretransposed_array_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00599">gemm_hybrid_indirect.hpp:599</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a82b688818137467809617daf73ffdc11"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a82b688818137467809617daf73ffdc11">arm_gemm::GemmHybridIndirect::set_indirect_parameters</a></div><div class="ttdeci">void set_indirect_parameters(size_t string_len, const To *const *const *ptr) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00768">gemm_hybrid_indirect.hpp:768</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_ac5c8d64b5f5a1c32846af7e260c56f04"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">arm_gemm::GemmArgs::_Nsize</a></div><div class="ttdeci">unsigned int _Nsize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00147">arm_gemm.hpp:147</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_a126a5e90d1af15ccd17a6efe3a47f54b"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#a126a5e90d1af15ccd17a6efe3a47f54b">arm_gemm::Requantize32::b_offset</a></div><div class="ttdeci">int32_t b_offset</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00175">arm_gemm.hpp:175</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a3e10740489c6494181b9bb7c3f8fb36d"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">arm_gemm::GemmArgs::_act</a></div><div class="ttdeci">Activation _act</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00153">arm_gemm.hpp:153</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">arm_gemm::GemmHybridIndirect</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00264">gemm_hybrid_indirect.hpp:264</a></div></div>
<div class="ttc" id="kernel__weight__format_8hpp_xhtml"><div class="ttname"><a href="kernel__weight__format_8hpp.xhtml">kernel_weight_format.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a7636397d7134827d6c8368ac5580c7da"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">arm_gemm::GemmArgs::_maxthreads</a></div><div class="ttdeci">int _maxthreads</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00154">arm_gemm.hpp:154</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a2ca80c12b0bbb50666d5a1a122359616"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">arm_gemm::get_weight_format</a></div><div class="ttdeci">WeightFormat get_weight_format(const KernelWeightFormat, size_t)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8cpp_source.xhtml#l00040">misc.cpp:40</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a0ae716040d875abeeba60aa4a6b73363"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a0ae716040d875abeeba60aa4a6b73363">arm_gemm::GemmHybridIndirect::requantize_bias</a></div><div class="ttdeci">void requantize_bias(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00617">gemm_hybrid_indirect.hpp:617</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml_aae5e7478143157dcb85385f506f4f5d3"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml#aae5e7478143157dcb85385f506f4f5d3">arm_gemm::PerformanceParameters::kernel_macs_cycle</a></div><div class="ttdeci">float kernel_macs_cycle</div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00029">performance_parameters.hpp:29</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00055">CpuGemmAssemblyDispatch.cpp:55</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_ae7e6d203d0e3e46ebd521951b72c6f7c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">arm_gemm::GemmHybridIndirect::set_convolution_parameters</a></div><div class="ttdeci">void set_convolution_parameters(ConvolutionParameters parms) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00773">gemm_hybrid_indirect.hpp:773</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a21d4abeb421380e0af50776ed5362430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a21d4abeb421380e0af50776ed5362430">arm_compute::test::validation::if</a></div><div class="ttdeci">if(cpu_isa.bf16)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00213">Cast.cpp:213</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_acf6183a5e4721a137bfce29c8b2febdb"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">arm_gemm::GemmArgs::_cfg</a></div><div class="ttdeci">const GemmConfig * _cfg</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00157">arm_gemm.hpp:157</a></div></div>
<div class="ttc" id="arm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_acc7f8048c4c8eb94458999a3e13fc519"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">arm_gemm::GemmConfig::inner_block_size</a></div><div class="ttdeci">unsigned int inner_block_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00110">arm_gemm.hpp:110</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a54b323e0b5dc791fba941f9c19a61cbc"><div class="ttname"><a href="namespacearm__gemm.xhtml#a54b323e0b5dc791fba941f9c19a61cbc">arm_gemm::row_sums_indirect</a></div><div class="ttdeci">void row_sums_indirect(unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg&lt; T &gt; A_arg, size_t M, int32_t *output_ptr, const Requantize32 *qp)</div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a3266f7e33a1db61de7fad71bf193d101"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">arm_gemm::GemmConfig::outer_block_size</a></div><div class="ttdeci">unsigned int outer_block_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00111">arm_gemm.hpp:111</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml_a3707a174d8c3b387326b6b397083c384"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml#a3707a174d8c3b387326b6b397083c384">arm_gemm::PerformanceParameters::merge_bytes_cycle</a></div><div class="ttdeci">float merge_bytes_cycle</div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00031">performance_parameters.hpp:31</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00106">arm_gemm.hpp:106</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00142">arm_gemm.hpp:142</a></div></div>
<div class="ttc" id="convolver_8hpp_xhtml"><div class="ttname"><a href="convolver_8hpp.xhtml">convolver.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a6e76d099f51fc0ef7f48dbd7d00214ac"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">arm_gemm::GemmHybridIndirect::set_pretransposed_B_data</a></div><div class="ttdeci">void set_pretransposed_B_data(void *in_buffer) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00700">gemm_hybrid_indirect.hpp:700</a></div></div>
<div class="ttc" id="gemm__hybrid__indirect_8hpp_xhtml_a86d500a34c624c2cae56bc25a31b12f3"><div class="ttname"><a href="gemm__hybrid__indirect_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a></div><div class="ttdeci">#define UNUSED(x)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00048">gemm_hybrid_indirect.hpp:48</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml_a9bbea489f6defd913b01a39e05e708e4"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">arm_gemm::NDCoordinate::get_position</a></div><div class="ttdeci">int_t get_position(int_t d) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00176">ndrange.hpp:176</a></div></div>
<div class="ttc" id="transform_8hpp_xhtml"><div class="ttname"><a href="transform_8hpp.xhtml">transform.hpp</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14">arm_gemm::GemmMethod::GEMM_HYBRID</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a1ade5ed8fc2bd356dfe390ad634ca9e6"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a1ade5ed8fc2bd356dfe390ad634ca9e6">arm_gemm::GemmConfig::method</a></div><div class="ttdeci">GemmMethod method</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00108">arm_gemm.hpp:108</a></div></div>
<div class="ttc" id="bias__adder_8hpp_xhtml"><div class="ttname"><a href="bias__adder_8hpp.xhtml">bias_adder.hpp</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00056">CpuGemmAssemblyDispatch.cpp:56</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a1f2f50f190980ff2ee79b62300a85c20"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1f2f50f190980ff2ee79b62300a85c20">arm_gemm::GemmHybridIndirect::estimate_cycles</a></div><div class="ttdeci">static uint64_t estimate_cycles(const GemmArgs &amp;args, const OutputStage &amp;os={})</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00711">gemm_hybrid_indirect.hpp:711</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a263ff38ffa728f5579e77ffd9c85e6dd"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">arm_gemm::GemmConfig::weight_format</a></div><div class="ttdeci">WeightFormat weight_format</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00112">arm_gemm.hpp:112</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_aaf3825f729cb74269c80674c27985902"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aaf3825f729cb74269c80674c27985902">arm_gemm::GemmHybridIndirect::GemmHybridIndirect</a></div><div class="ttdeci">GemmHybridIndirect(const GemmArgs &amp;args, const OutputStage &amp;os)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00389">gemm_hybrid_indirect.hpp:389</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_acf49fb074e8b7b29cb88fc2f8db0113b"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acf49fb074e8b7b29cb88fc2f8db0113b">arm_gemm::GemmHybridIndirect::GemmHybridIndirect</a></div><div class="ttdeci">GemmHybridIndirect(const GemmArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00403">gemm_hybrid_indirect.hpp:403</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a19076cd620581b8e671ad674359c1b76aa2730bd24646daa3279918eeff467d8c"><div class="ttname"><a href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76aa2730bd24646daa3279918eeff467d8c">arm_gemm::KernelWeightFormat::NON_FIXED</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml">arm_gemm::GemmCommon</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00161">gemm_common.hpp:161</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a85b38740fa6151d6e5fcfc48e8008d47"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">arm_gemm::GemmArgs::_Msize</a></div><div class="ttdeci">unsigned int _Msize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00146">arm_gemm.hpp:146</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a06403ad5596b5405787cfca12e5b815e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run</a></div><div class="ttdeci">lstmq run()</div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml">arm_gemm::ConvolutionParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00048">convolution_parameters.hpp:48</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_ad92c19f85e6eee3a06810736da11329d"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a></div><div class="ttdeci">unsigned int sections</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00060">CpuGemmAssemblyDispatch.cpp:60</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml">arm_gemm::PerformanceParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00028">performance_parameters.hpp:28</a></div></div>
<div class="ttc" id="classarm__gemm_1_1convolver_xhtml"><div class="ttname"><a href="classarm__gemm_1_1convolver.xhtml">arm_gemm::convolver</a></div><div class="ttdef"><b>Definition:</b> <a href="convolver_8hpp_source.xhtml#l00051">convolver.hpp:51</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a5ef9b17d8d1641178b4327a376312282"><div class="ttname"><a href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">arm_gemm::requantize_block_32</a></div><div class="ttdeci">void requantize_block_32(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const Tin *input, unsigned int in_stride, Tout *output, unsigned int out_stride, const int32_t *row_bias, const int32_t *col_bias, unsigned int start_col)</div></div>
<div class="ttc" id="structarm__gemm_1_1_indirect_input_arg_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_indirect_input_arg.xhtml">arm_gemm::IndirectInputArg</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00137">utils.hpp:137</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_ac5dec5063a75604fdc60555f15577b94"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac5dec5063a75604fdc60555f15577b94">arm_gemm::GemmHybridIndirect::B_is_pretransposed</a></div><div class="ttdeci">bool B_is_pretransposed() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00591">gemm_hybrid_indirect.hpp:591</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a59c0fe7170dec3dfc80b80a33fc48955"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">arm_compute::test::validation::batch</a></div><div class="ttdeci">const unsigned int batch</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">GEMMMatrixMultiplyNative.cpp:362</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml">arm_gemm::NDCoordinate</a></div><div class="ttdoc">NDCoordinate builds upon a range, but specifies a starting position in addition to a size which it in...</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00151">ndrange.hpp:151</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml_a2ee55bf0e2d8324a1360f6994a762e28"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">arm_gemm::NDRange::total_size</a></div><div class="ttdeci">unsigned int total_size() const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00136">ndrange.hpp:136</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a7cde60064c88a363415fc0639d09cc3e"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a7cde60064c88a363415fc0639d09cc3e">arm_gemm::GemmHybridIndirect::get_config</a></div><div class="ttdeci">GemmConfig get_config() override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00778">gemm_hybrid_indirect.hpp:778</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00169">arm_gemm.hpp:169</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a4f282c5814fcd207308c4737a1fc567b"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a4f282c5814fcd207308c4737a1fc567b">arm_gemm::GemmHybridIndirect::set_quantized_bias</a></div><div class="ttdeci">void set_quantized_bias(const int32_t *bias, size_t bias_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00759">gemm_hybrid_indirect.hpp:759</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a2ab0ad50d3c2b2be030026132b00add6"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">arm_gemm::GemmArgs::_Ksections</a></div><div class="ttdeci">unsigned int _Ksections</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00149">arm_gemm.hpp:149</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_afac6d7d779e04e999149dcf095734294"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#afac6d7d779e04e999149dcf095734294">arm_gemm::Requantize32::bias_multi_stride</a></div><div class="ttdeci">size_t bias_multi_stride</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00173">arm_gemm.hpp:173</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a8f983ca114ef72d25515a8651ea1d0e7"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">arm_gemm::GemmHybridIndirect::get_window_size</a></div><div class="ttdeci">ndrange_t get_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00417">gemm_hybrid_indirect.hpp:417</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a61e0e449fd7e8647d521cafd4f1d55a3"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a61e0e449fd7e8647d521cafd4f1d55a3">arm_gemm::GemmConfig::filter</a></div><div class="ttdeci">std::string filter</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00109">arm_gemm.hpp:109</a></div></div>
<div class="ttc" id="performance__parameters_8hpp_xhtml"><div class="ttname"><a href="performance__parameters_8hpp.xhtml">performance_parameters.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml">arm_gemm::NDRange&lt; 4 &gt;</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a1bb76b8a32e09fb5ffffd66e04d7f741"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">arm_gemm::GemmHybridIndirect::supports_dynamic_scheduling</a></div><div class="ttdeci">bool supports_dynamic_scheduling() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00422">gemm_hybrid_indirect.hpp:422</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_adb59e12af95e4ab605ffc3e12b41de58"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">arm_gemm::GemmArgs::_Ksize</a></div><div class="ttdeci">unsigned int _Ksize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00148">arm_gemm.hpp:148</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_aca00029952f2150554138015af1ac1ce"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">arm_gemm::GemmArgs::_nbatches</a></div><div class="ttdeci">unsigned int _nbatches</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00150">arm_gemm.hpp:150</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_aa7cfff39cbb2be65cd40042a75e5ae1c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">arm_gemm::GemmHybridIndirect::B_pretranspose_required</a></div><div class="ttdeci">bool B_pretranspose_required() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00595">gemm_hybrid_indirect.hpp:595</a></div></div>
<div class="ttc" id="ndrange_8hpp_xhtml"><div class="ttname"><a href="ndrange_8hpp.xhtml">ndrange.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml_a582a56796981d98bba73d4de244bd21e"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">arm_gemm::NDCoordinate::get_position_end</a></div><div class="ttdeci">int_t get_position_end(int_t d) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00190">ndrange.hpp:190</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_ab6f473669f97dc471c5dd2945da5f2da"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#ab6f473669f97dc471c5dd2945da5f2da">arm_gemm::GemmArgs::_indirect_input</a></div><div class="ttdeci">bool _indirect_input</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00152">arm_gemm.hpp:152</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00123">arm_gemm.hpp:123</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_indirect_xhtml_ae385dce1a98e03f0a3ca311f031e5110"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae385dce1a98e03f0a3ca311f031e5110">arm_gemm::GemmHybridIndirect::pretranspose_B_array</a></div><div class="ttdeci">void pretranspose_B_array(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00630">gemm_hybrid_indirect.hpp:630</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml_a47af75329f77f9b1fae756b7b81f1aa7"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml#a47af75329f77f9b1fae756b7b81f1aa7">arm_gemm::PerformanceParameters::prepare_bytes_cycle</a></div><div class="ttdeci">float prepare_bytes_cycle</div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00030">performance_parameters.hpp:30</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="gemm__hybrid__indirect_8hpp.xhtml">gemm_hybrid_indirect.hpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:51 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
