<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::cpuinfo Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1cpuinfo.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::cpuinfo Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aggregate class that contains CPU related information.  <a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU ISA (Instruction Set Architecture) information.  <a href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a720e47e8a41ea0be30c84d7b823cda31"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">CpuModel</a> = <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">arm_compute::CPUModel</a></td></tr>
<tr class="separator:a720e47e8a41ea0be30c84d7b823cda31"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8d1f363d679403ae1ad371b85e63c7a3"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a> ()</td></tr>
<tr class="memdesc:a8d1f363d679403ae1ad371b85e63c7a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Some systems have both big and small cores, this fuction computes the minimum number of cores that are exactly the same on the system.  <a href="#a8d1f363d679403ae1ad371b85e63c7a3">More...</a><br /></td></tr>
<tr class="separator:a8d1f363d679403ae1ad371b85e63c7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9abbd59830c6b78524e28478b2f78208"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#a9abbd59830c6b78524e28478b2f78208">init_cpu_isa_from_hwcaps</a> (uint32_t hwcaps, uint32_t hwcaps2, uint32_t midr)</td></tr>
<tr class="memdesc:a9abbd59830c6b78524e28478b2f78208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identify ISA related information through system information.  <a href="#a9abbd59830c6b78524e28478b2f78208">More...</a><br /></td></tr>
<tr class="separator:a9abbd59830c6b78524e28478b2f78208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9f330aea877a3ee086032da587732d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#af9f330aea877a3ee086032da587732d6">init_cpu_isa_from_regs</a> (uint64_t isar0, uint64_t isar1, uint64_t pfr0, uint64_t svefr0, uint64_t midr)</td></tr>
<tr class="memdesc:af9f330aea877a3ee086032da587732d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identify ISA related information through register information.  <a href="#af9f330aea877a3ee086032da587732d6">More...</a><br /></td></tr>
<tr class="separator:af9f330aea877a3ee086032da587732d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af40137501da64f2da7377b5288e35215"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#af40137501da64f2da7377b5288e35215">cpu_model_to_string</a> (<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> model)</td></tr>
<tr class="memdesc:af40137501da64f2da7377b5288e35215"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a CPU model value to a string.  <a href="#af40137501da64f2da7377b5288e35215">More...</a><br /></td></tr>
<tr class="separator:af40137501da64f2da7377b5288e35215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad074222de6568d252c109c49c90c3568"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#ad074222de6568d252c109c49c90c3568">model_supports_fp16</a> (<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> model)</td></tr>
<tr class="memdesc:ad074222de6568d252c109c49c90c3568"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a model supports half-precision floating point arithmetic.  <a href="#ad074222de6568d252c109c49c90c3568">More...</a><br /></td></tr>
<tr class="separator:ad074222de6568d252c109c49c90c3568"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e26897fb7a2bbc90743bd9f4839befa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#a5e26897fb7a2bbc90743bd9f4839befa">model_supports_dot</a> (<a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> model)</td></tr>
<tr class="memdesc:a5e26897fb7a2bbc90743bd9f4839befa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a model supports dot product.  <a href="#a5e26897fb7a2bbc90743bd9f4839befa">More...</a><br /></td></tr>
<tr class="separator:a5e26897fb7a2bbc90743bd9f4839befa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac48afee48f0c8e4b0e0be117385694d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">midr_to_model</a> (uint32_t midr)</td></tr>
<tr class="memdesc:ac48afee48f0c8e4b0e0be117385694d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract the model type from the MIDR value.  <a href="#ac48afee48f0c8e4b0e0be117385694d7">More...</a><br /></td></tr>
<tr class="separator:ac48afee48f0c8e4b0e0be117385694d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a720e47e8a41ea0be30c84d7b823cda31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a720e47e8a41ea0be30c84d7b823cda31">&#9670;&nbsp;</a></span>CpuModel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> =  <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">arm_compute::CPUModel</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_model_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_cpu_model_8h_source.xhtml">CpuModel.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="af40137501da64f2da7377b5288e35215"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af40137501da64f2da7377b5288e35215">&#9670;&nbsp;</a></span>cpu_model_to_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string cpu_model_to_string </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a>&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a CPU model value to a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">model</td><td>CpuModel value to be converted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representing the corresponding CpuModel </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_model_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_cpu_model_8cpp_source.xhtml">CpuModel.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_types_8h_source.xhtml#l00038">ARM_COMPUTE_CPU_MODEL_LIST</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">switch</span>(model)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#define X(MODEL)          \</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">case CpuModel::MODEL: \</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">    return #MODEL;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <a class="code" href="_c_p_p_types_8h.xhtml#aede6b5b56c3a6e01efde85e1545a4eb8">ARM_COMPUTE_CPU_MODEL_LIST</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#undef X</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;GENERIC&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="ttc" id="_c_p_p_types_8h_xhtml_aede6b5b56c3a6e01efde85e1545a4eb8"><div class="ttname"><a href="_c_p_p_types_8h.xhtml#aede6b5b56c3a6e01efde85e1545a4eb8">ARM_COMPUTE_CPU_MODEL_LIST</a></div><div class="ttdeci">#define ARM_COMPUTE_CPU_MODEL_LIST</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00038">CPPTypes.h:38</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9abbd59830c6b78524e28478b2f78208"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9abbd59830c6b78524e28478b2f78208">&#9670;&nbsp;</a></span>init_cpu_isa_from_hwcaps()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a> init_cpu_isa_from_hwcaps </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>hwcaps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>hwcaps2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>midr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Identify ISA related information through system information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hwcaps</td><td>HWCAPS feature information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hwcaps2</td><td>HWCAPS2 feature information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">midr</td><td>MIDR value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml" title="CPU ISA (Instruction Set Architecture) information. ">CpuIsaInfo</a> A populated ISA feature structure </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_isa_info_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="_cpu_isa_info_8cpp_source.xhtml">CpuIsaInfo.cpp</a>.</p>

<p class="reference">References <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00051">isa</a>, and <a class="el" href="_cpu_model_8cpp_source.xhtml#l00078">midr_to_model()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_info_8cpp_source.xhtml#l00303">CpuInfo::build()</a>.</p>
<div class="fragment"><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    CpuIsaInfo <a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    decode_hwcaps(isa, hwcaps, hwcaps2);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">CpuModel</a> model = <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">midr_to_model</a>(midr);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    allowlisted_model_features(isa, model);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpuinfo_xhtml_a720e47e8a41ea0be30c84d7b823cda31"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">arm_compute::cpuinfo::CpuModel</a></div><div class="ttdeci">arm_compute::CPUModel CpuModel</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_model_8h_source.xhtml#l00036">CpuModel.h:36</a></div></div>
<div class="ttc" id="_n_e_fuse_batch_normalization_kernel_8cpp_xhtml_a1659171e98a705cddffe279eda7c17b8"><div class="ttname"><a href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a></div><div class="ttdeci">cpuinfo::CpuIsaInfo isa</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00051">NEFuseBatchNormalizationKernel.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpuinfo_xhtml_ac48afee48f0c8e4b0e0be117385694d7"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">arm_compute::cpuinfo::midr_to_model</a></div><div class="ttdeci">CpuModel midr_to_model(uint32_t midr)</div><div class="ttdoc">Extract the model type from the MIDR value. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_model_8cpp_source.xhtml#l00078">CpuModel.cpp:78</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9f330aea877a3ee086032da587732d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9f330aea877a3ee086032da587732d6">&#9670;&nbsp;</a></span>init_cpu_isa_from_regs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a> init_cpu_isa_from_regs </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>isar0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>isar1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>pfr0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>svefr0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>midr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Identify ISA related information through register information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">isar0</td><td>Value of Instruction Set Attribute Register 0 (ID_AA64ISAR0_EL1) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isar1</td><td>Value of Instruction Set Attribute Register 1 (ID_AA64ISAR1_EL1) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pfr0</td><td>Value of Processor Feature Register 0 (ID_AA64PFR0_EL1) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">svefr0</td><td>Value of SVE feature ID register 0 (ID_AA64ZFR0_EL1) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">midr</td><td>Value of Main ID Register (MIDR)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml" title="CPU ISA (Instruction Set Architecture) information. ">CpuIsaInfo</a> A populated ISA feature structure </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_isa_info_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="_cpu_isa_info_8cpp_source.xhtml">CpuIsaInfo.cpp</a>.</p>

<p class="reference">References <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00051">isa</a>, and <a class="el" href="_cpu_model_8cpp_source.xhtml#l00078">midr_to_model()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_info_8cpp_source.xhtml#l00303">CpuInfo::build()</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    CpuIsaInfo <a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    decode_regs(isa, isar0, isar1, pfr0, svefr0);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">CpuModel</a> model = <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">midr_to_model</a>(midr);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    allowlisted_model_features(isa, model);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpuinfo_xhtml_a720e47e8a41ea0be30c84d7b823cda31"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">arm_compute::cpuinfo::CpuModel</a></div><div class="ttdeci">arm_compute::CPUModel CpuModel</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_model_8h_source.xhtml#l00036">CpuModel.h:36</a></div></div>
<div class="ttc" id="_n_e_fuse_batch_normalization_kernel_8cpp_xhtml_a1659171e98a705cddffe279eda7c17b8"><div class="ttname"><a href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a></div><div class="ttdeci">cpuinfo::CpuIsaInfo isa</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00051">NEFuseBatchNormalizationKernel.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpuinfo_xhtml_ac48afee48f0c8e4b0e0be117385694d7"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">arm_compute::cpuinfo::midr_to_model</a></div><div class="ttdeci">CpuModel midr_to_model(uint32_t midr)</div><div class="ttdoc">Extract the model type from the MIDR value. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_model_8cpp_source.xhtml#l00078">CpuModel.cpp:78</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac48afee48f0c8e4b0e0be117385694d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac48afee48f0c8e4b0e0be117385694d7">&#9670;&nbsp;</a></span>midr_to_model()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> midr_to_model </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>midr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Extract the model type from the MIDR value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">midr</td><td>MIDR information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>CpuModel a mapped CPU model </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_model_8cpp_source.xhtml#l00078">78</a> of file <a class="el" href="_cpu_model_8cpp_source.xhtml">CpuModel.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aafdba3a7b1ef15a36dd5459c291bfe1c">arm_compute::A510</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aecf3e2493afebcfefb0b9b86bd50ef0d">arm_compute::A53</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a33f91a7ec1c6be774d71fcd00ac81c92">arm_compute::A55r0</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca">arm_compute::A55r1</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a73fa480cd41e810db6072274086e05ef">arm_compute::A64FX</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aaf79f683ceaea4650b20e898d6c4c373">arm_compute::A73</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">arm_compute::GENERIC</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8">arm_compute::GENERIC_FP16</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7">arm_compute::GENERIC_FP16_DOT</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6">arm_compute::V1</a>, and <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4abb7f5ae6220c9828e5ec91faf054197c">arm_compute::X1</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_info_8cpp_source.xhtml#l00303">CpuInfo::build()</a>, <a class="el" href="_cpu_isa_info_8cpp_source.xhtml#l00131">init_cpu_isa_from_hwcaps()</a>, and <a class="el" href="_cpu_isa_info_8cpp_source.xhtml#l00143">init_cpu_isa_from_regs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">CpuModel</a> model = CpuModel::GENERIC;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Unpack variant and CPU ID</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> implementer = (midr &gt;&gt; 24) &amp; 0xFF;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> variant     = (midr &gt;&gt; 20) &amp; 0xF;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cpunum      = (midr &gt;&gt; 4) &amp; 0xFFF;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// Only CPUs we have code paths for are detected.  All other CPUs can be safely classed as &quot;GENERIC&quot;</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span>(implementer == 0x41) <span class="comment">// Arm CPUs</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">switch</span>(cpunum)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">case</span> 0xd03: <span class="comment">// A53</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">case</span> 0xd04: <span class="comment">// A35</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                model = CpuModel::A53;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">case</span> 0xd05: <span class="comment">// A55</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">if</span>(variant != 0)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    model = CpuModel::A55r1;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    model = CpuModel::A55r0;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">case</span> 0xd09: <span class="comment">// A73</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                model = CpuModel::A73;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">case</span> 0xd0a: <span class="comment">// A75</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keywordflow">if</span>(variant != 0)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    model = CpuModel::GENERIC_FP16_DOT;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    model = CpuModel::GENERIC_FP16;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">case</span> 0xd06: <span class="comment">// A65</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">case</span> 0xd0b: <span class="comment">// A76</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">case</span> 0xd0c: <span class="comment">// N1</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">case</span> 0xd0d: <span class="comment">// A77</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">case</span> 0xd0e: <span class="comment">// A76AE</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">case</span> 0xd41: <span class="comment">// A78</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">case</span> 0xd42: <span class="comment">// A78AE</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">case</span> 0xd4a: <span class="comment">// E1</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                model = CpuModel::GENERIC_FP16_DOT;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">case</span> 0xd40: <span class="comment">// V1</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                model = CpuModel::V1;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">case</span> 0xd44: <span class="comment">// X1</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                model = CpuModel::X1;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">case</span> 0xd46:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                model = CpuModel::A510;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                model = CpuModel::GENERIC;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(implementer == 0x46)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">switch</span>(cpunum)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">case</span> 0x001: <span class="comment">// A64FX</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                model = CpuModel::A64FX;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                model = CpuModel::GENERIC;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(implementer == 0x48)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">switch</span>(cpunum)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">case</span> 0xd40: <span class="comment">// A76</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                model = CpuModel::GENERIC_FP16_DOT;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                model = CpuModel::GENERIC;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(implementer == 0x51)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">switch</span>(cpunum)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">case</span> 0x800: <span class="comment">// A73</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                model = CpuModel::A73;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">case</span> 0x801: <span class="comment">// A53</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                model = CpuModel::A53;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">case</span> 0x803: <span class="comment">// A55r0</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                model = CpuModel::A55r0;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">case</span> 0x804: <span class="comment">// A76</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                model = CpuModel::GENERIC_FP16_DOT;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keywordflow">case</span> 0x805: <span class="comment">// A55r1</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                model = CpuModel::A55r1;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                model = CpuModel::GENERIC;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> model;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpuinfo_xhtml_a720e47e8a41ea0be30c84d7b823cda31"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a720e47e8a41ea0be30c84d7b823cda31">arm_compute::cpuinfo::CpuModel</a></div><div class="ttdeci">arm_compute::CPUModel CpuModel</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_model_8h_source.xhtml#l00036">CpuModel.h:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e26897fb7a2bbc90743bd9f4839befa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e26897fb7a2bbc90743bd9f4839befa">&#9670;&nbsp;</a></span>model_supports_dot()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool model_supports_dot </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a>&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a model supports dot product. </p>
<dl class="section note"><dt>Note</dt><dd>This is used in case of old kernel configurations where some capabilities are not exposed.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">model</td><td>Model to check for allowlisted capabilities </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cpu_model_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="_cpu_model_8cpp_source.xhtml">CpuModel.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aafdba3a7b1ef15a36dd5459c291bfe1c">arm_compute::A510</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca">arm_compute::A55r1</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7">arm_compute::GENERIC_FP16_DOT</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6">arm_compute::V1</a>, and <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4abb7f5ae6220c9828e5ec91faf054197c">arm_compute::X1</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">switch</span>(model)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">case</span> CpuModel::GENERIC_FP16_DOT:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">case</span> CpuModel::A55r1:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">case</span> CpuModel::A510:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">case</span> CpuModel::X1:</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">case</span> CpuModel::V1:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad074222de6568d252c109c49c90c3568"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad074222de6568d252c109c49c90c3568">&#9670;&nbsp;</a></span>model_supports_fp16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool model_supports_fp16 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a>&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a model supports half-precision floating point arithmetic. </p>
<dl class="section note"><dt>Note</dt><dd>This is used in case of old kernel configurations where some capabilities are not exposed.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">model</td><td>Model to check for allowlisted capabilities </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cpu_model_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_cpu_model_8cpp_source.xhtml">CpuModel.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aafdba3a7b1ef15a36dd5459c291bfe1c">arm_compute::A510</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca">arm_compute::A55r1</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a73fa480cd41e810db6072274086e05ef">arm_compute::A64FX</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8">arm_compute::GENERIC_FP16</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7">arm_compute::GENERIC_FP16_DOT</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6">arm_compute::V1</a>, and <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4abb7f5ae6220c9828e5ec91faf054197c">arm_compute::X1</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">switch</span>(model)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> CpuModel::GENERIC_FP16:</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> CpuModel::GENERIC_FP16_DOT:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> CpuModel::A55r1:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">case</span> CpuModel::A510:</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">case</span> CpuModel::X1:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">case</span> CpuModel::V1:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> CpuModel::A64FX:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8d1f363d679403ae1ad371b85e63c7a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d1f363d679403ae1ad371b85e63c7a3">&#9670;&nbsp;</a></span>num_threads_hint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t num_threads_hint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Some systems have both big and small cores, this fuction computes the minimum number of cores that are exactly the same on the system. </p>
<p>To maximize performance the library attempts to process workloads concurrently using as many threads as big cores are available on the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The minumum number of common cores. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_info_8cpp_source.xhtml#l00391">391</a> of file <a class="el" href="_cpu_info_8cpp_source.xhtml">CpuInfo.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_cpu_info_8h_source.xhtml#l00107">CpuInfo::cpus()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_info_8h_source.xhtml#l00107">CpuInfo::cpus()</a>, and <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00035">IScheduler::IScheduler()</a>.</p>
<div class="fragment"><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a> = 1;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#if !defined(BARE_METAL) &amp;&amp; !defined(_WIN64)</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    std::vector&lt;std::string&gt; cpus;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    cpus.reserve(64);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="comment">// CPU part regex</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    regex_t cpu_part_rgx;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    memset(&amp;cpu_part_rgx, 0, <span class="keyword">sizeof</span>(regex_t));</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordtype">int</span> ret_status = regcomp(&amp;cpu_part_rgx, R<span class="stringliteral">&quot;(.*CPU part.+/?\:[[:space:]]+([[:alnum:]]+).*)&quot;, REG_EXTENDED);</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ret_status);</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(ret_status != 0, </span><span class="stringliteral">&quot;Regex compilation failed.&quot;</span>);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// Read cpuinfo and get occurrence of each core</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    std::ifstream cpuinfo_file(<span class="stringliteral">&quot;/proc/cpuinfo&quot;</span>, std::ios::in);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">if</span>(cpuinfo_file.is_open())</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        std::string line;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">while</span>(<span class="keywordtype">bool</span>(getline(cpuinfo_file, line)))</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            std::array&lt;regmatch_t, 2&gt; match;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">if</span>(regexec(&amp;cpu_part_rgx, line.c_str(), 2, match.data(), 0) == 0)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            {</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                cpus.emplace_back(line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so)));</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    regfree(&amp;cpu_part_rgx);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="comment">// Get min number of threads</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    std::sort(std::begin(cpus), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(cpus));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">auto</span> least_frequent_cpu_occurences = [](<span class="keyword">const</span> std::vector&lt;std::string&gt; &amp;cpus) -&gt; uint32_t</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        std::unordered_map&lt;std::string, uint32_t&gt; cpus_freq;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;cpu : cpus)</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            cpus_freq[cpu]++;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        uint32_t <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">vmin</a> = cpus.size() + 1;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;cpu_freq : cpus_freq)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            vmin = std::min(vmin, cpu_freq.second);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">vmin</a>;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    };</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Set thread hint</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    num_threads_hint = cpus.empty() ? std::thread::hardware_concurrency() : least_frequent_cpu_occurences(cpus);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a>;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpuinfo_xhtml_a8d1f363d679403ae1ad371b85e63c7a3"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">arm_compute::cpuinfo::num_threads_hint</a></div><div class="ttdeci">uint32_t num_threads_hint()</div><div class="ttdoc">Some systems have both big and small cores, this fuction computes the minimum number of cores that ar...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00391">CpuInfo.cpp:391</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpuinfo.xhtml">cpuinfo</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
