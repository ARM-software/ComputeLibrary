<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Dynamic Fusion Example: Conv2d + Elementwise Addition (OpenCL target)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('example_dynamic_fusion_cl_conv2d_elementwise_add.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Dynamic Fusion Example: Conv2d + Elementwise Addition (OpenCL target) </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This example demonstrates how to fuse a Conv2d with an Addition using the new OperatorGraph API, and to run it with the Async Composite Operator</p>
<h1><a class="anchor" id="describe_workload_using_operator_graph"></a>
Describe the workload to run using OperatorGraph</h1>
<p>OperatorGraph is a graph of Tensors and Operators. Let's first default-construct it </p><div class="fragment"><div class="line">        OperatorGraph <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>;</div></div><!-- fragment --> <h2><a class="anchor" id="add_conv2d"></a>
Add the first operator (root operator) Conv2d</h2>
<p>The first operator to be added to the graph is called the "root operator" of the entire graph. </p><dl class="section note"><dt>Note</dt><dd>As of now, operators need to be inserted according to their dependency order. This is because output tensor auto-initialization occurs during construction time. Later this might be changed to allow out-of-order insertion.</dd></dl>
<p>Before we insert the operator, we need to initialize the required TensorInfo objects. We can choose not to initialize an output TensorInfo; if so, they will be auto-initialized during the construction of the OperatorGraph The "t_acc_info" is the TensorInfo of the accumulator tensor, which is the output tensor of our first operator conv2d </p><div class="fragment"><div class="line">        <span class="keyword">auto</span> t_input_info  = TensorInfo(t_input_shape, 1, data_type, data_layout);</div><div class="line">        <span class="keyword">auto</span> t_weight_info = TensorInfo(t_weight_shape, 1, data_type, data_layout);</div><div class="line">        <span class="keyword">auto</span> t_bias_info   = TensorInfo(t_bias_shape, 1, data_type, data_layout);</div><div class="line">        <span class="keyword">auto</span> t_acc_info    = TensorInfo();</div></div><!-- fragment --><p>Next we associate the TensorInfo with the OpTensor s created in the op_graph. </p><dl class="section note"><dt>Note</dt><dd>The associated TensorInfo objects must be in scope and remain valid until the ClWorkload building is completed</dd>
<dd>
The associated TensorInfo objects must be declard as non-const, since they may be updated during the OperatorGraph construction</dd></dl>
<div class="fragment"><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_input  = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_input_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_weight = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_weight_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_bias   = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_bias_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> op_t_acc    = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_acc_info);</div></div><!-- fragment --><p>Finally we add the Conv2d operator to op_graph. The Conv2dDescriptor contains all the TOSA-compliant attribute parameters The add_op... group of functions accept the OpTensors created by the add_tensor function, and return an Operator handle. This handle can be used to further query and modify the operator inside the OperatorGraph after its creation For example, here we use the handle to force the ConvolutionMethod to be Direct Convolution </p><dl class="section note"><dt>Note</dt><dd>The force_conv2d_method is only for debug purpose for now, as the end user is not expected to decide on the ConvolutionMethod</dd></dl>
<div class="fragment"><div class="line">        Conv2dDescriptor <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a562285808c3bd1107ae49be79d24d41f">conv2d_desc</a>{ Padding2D{ pad_x, pad_x, pad_y, pad_y } };</div><div class="line">        <span class="keyword">auto</span>             conv2d = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a>(op_graph, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a562285808c3bd1107ae49be79d24d41f">conv2d_desc</a>, op_t_input, op_t_weight, op_t_bias, op_t_acc);</div><div class="line">        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0500494c1c88e005019c1046023207b9">force_conv2d_method</a>(op_graph, conv2d, <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea1ea328a644e627283a35716a54108248">ConvolutionMethod::DIRECT</a>); <span class="comment">// Only for debug purposes</span></div></div><!-- fragment --><h2><a class="anchor" id="add_elementwise_add"></a>
Add the second operator Elementwise Add</h2>
<p>This is similar to adding the first operator to op_graph, except that we link the two operators together by their common tensor, namely the accumulator tensor op_t_acc, which is the output of conv2d and the input (lhs) of the addition </p><dl class="section note"><dt>Note</dt><dd>At the moment, it is recommended to always declare a separate TensorInfo (even if empty) for each OpTensor. For example, here op_t_dst could be associated with op_t_acc info as they are the same, but we still recommend creating a separate object.</dd></dl>
<div class="fragment"><div class="line">        <span class="keyword">auto</span>                  t_l1_addend_info = TensorInfo(t_l1_addend_shape, 1, data_type, data_layout);</div><div class="line">        <span class="keyword">auto</span>                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>       = TensorInfo();</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span>            op_t_l1_addend   = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, t_l1_addend_info);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span>            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a53144a6a6a841acf8ac499db4834af08">op_t_dst</a>         = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(op_graph, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line">        ElementwiseDescriptor add_desc{ <a class="code" href="elementwise__operation__quantized_8cl.xhtml#af3b709fb668cf93ca09e2a46a2a031a8">ArithmeticOperation::ADD</a> };</div><div class="line">        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6ddaa43fa5e752d3a4804654ef17890b">add_op_elementwise_op</a>(op_graph, add_desc, op_t_acc, op_t_l1_addend, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a53144a6a6a841acf8ac499db4834af08">op_t_dst</a>);</div></div><!-- fragment --><h1><a class="anchor" id="build_clworkload"></a>
Build ClWorkload</h1>
<p>ClWorkload is an intermediate object which contains all the built kernel codes and all other descriptors on how to schedule them We build ClWorkload from the op_graph object that we just described </p><div class="fragment"><div class="line">        <span class="keyword">const</span> ClWorkloadContext <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a08e850b331ef9cf5122b021b85f27af6">workload_ctx</a></div><div class="line">        {</div><div class="line">            GpuInfo{ CLScheduler::get().target() }</div><div class="line">        };</div><div class="line">        ClWorkload <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>;</div><div class="line">        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">build</a>(workload, op_graph, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a08e850b331ef9cf5122b021b85f27af6">workload_ctx</a>);</div></div><!-- fragment --> <h1><a class="anchor" id="run_fused_op_with_clcompositeoperator"></a>
Run the fused operator workload with ClCompositeOperator</h1>
<h2><a class="anchor" id="configure_and_validate_clcompositeoperator"></a>
Validate ClWorkload and Configure ClCompositeOperator</h2>
<p>After ClWorkload is built, we need to configure it with the Compute Library runtime ClCompositeOperator to run it. Optionally we can explicitly validate the workload to check if the workload has been built successfully. The validate is automatically run inside configure and would throw if it fails. </p><div class="fragment"><div class="line">    ClCompositeOperator op{};</div></div><!-- fragment --><div class="fragment"><div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">success</a> = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ClCompositeOperator::validate</a>(workload); <span class="comment">// Optional</span></div><div class="line">        op.configure(CLKernelLibrary::get().get_compile_context(), workload);</div></div><!-- fragment --> <h2><a class="anchor" id="run_clcompositeoperator"></a>
Run ClCompositeOperator</h2>
<p>Construct the runtime CLTensor s with backing memory </p><div class="fragment"><div class="line">    CLTensor t_input{};</div><div class="line">    CLTensor t_weight{};</div><div class="line">    CLTensor t_bias{};</div><div class="line">    CLTensor t_l1_addend{};</div><div class="line">    CLTensor t_dst{};</div></div><!-- fragment --><p> Initialize, allocate and fill the CLTensor objects </p><div class="fragment"><div class="line">        t_input.allocator()-&gt;init(t_input_info);</div><div class="line">        t_weight.allocator()-&gt;init(t_weight_info);</div><div class="line">        t_bias.allocator()-&gt;init(t_bias_info);</div><div class="line">        t_l1_addend.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line">        t_dst.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line"></div><div class="line">        t_input.allocator()-&gt;allocate();</div><div class="line">        t_weight.allocator()-&gt;allocate();</div><div class="line">        t_bias.allocator()-&gt;allocate();</div><div class="line">        t_l1_addend.allocator()-&gt;allocate();</div><div class="line">        t_dst.allocator()-&gt;allocate();</div><div class="line"></div><div class="line">        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_input, -1.f, 1.f);</div><div class="line">        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_weight, -1.f, 1.f);</div><div class="line">        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_l1_addend, -1.f, 1.f);</div></div><!-- fragment --><p>The OpTensorBinding creates a mapping from the OpTensor handles that we created early to the real CLTensors </p><div class="fragment"><div class="line">        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> op_tensors({ { op_t_input, &amp;t_input },</div><div class="line">            { op_t_weight, &amp;t_weight },</div><div class="line">            { op_t_bias, &amp;t_bias },</div><div class="line">            { op_t_l1_addend, &amp;t_l1_addend },</div><div class="line">            { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a53144a6a6a841acf8ac499db4834af08">op_t_dst</a>, &amp;t_dst }</div><div class="line">        });</div></div><!-- fragment --><p> Bind the CLTensor objects to the prepare_pack_map and run_pack_map, which are used to prepare and run the op This step additionally creates empty auxiliary CLTensor objects if any, and contain them inside a ClAuxTensorData aux_tensor_data </p><dl class="section note"><dt>Note</dt><dd>This step associates all the CLTensors contained in op_tensors and aux_tensor_data, with prepare_pack_map and run_pack_map Make sure these CLTensors remain valid as long as the two pack_maps are still in use</dd></dl>
<div class="fragment"><div class="line">    ClAuxTensorData aux_tensor_data{};</div></div><!-- fragment --><div class="fragment"><div class="line">    TensorPackMap prepare_pack_map{};</div><div class="line">    TensorPackMap run_pack_map{};</div></div><!-- fragment --><div class="fragment"><div class="line">        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">bind_tensors</a>(aux_tensor_data, prepare_pack_map, run_pack_map, workload, op_tensors);</div></div><!-- fragment --><p>Initialize and Allocate Auxiliary CLTensor objects. </p><div class="fragment"><div class="line">        <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor_data : aux_tensor_data.get_tensors())</div><div class="line">        {</div><div class="line">            tensor_data.tensor-&gt;allocator()-&gt;init(tensor_data.tensor_info);</div><div class="line">            tensor_data.tensor-&gt;allocator()-&gt;allocate();</div><div class="line">        }</div></div><!-- fragment --><p> Run the ClCompositeOperator prepare job. This performs any jobs that are required for the first run, like reshaping tensors for a more performant format. </p><div class="fragment"><div class="line">        op.prepare(prepare_pack_map);</div></div><!-- fragment --><p> At last, we run our operator </p><div class="fragment"><div class="line">        op.run(run_pack_map);</div></div><!-- fragment --></div></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:58 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
