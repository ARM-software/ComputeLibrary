<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: SchedulerClock&lt; output_timestamps &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">SchedulerClock&lt; output_timestamps &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance. ">Instrument</a> creating measurements based on the information returned by clGetEventProfilingInfo for each OpenCL kernel executed.  
 <a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_scheduler_timer_8h_source.xhtml">SchedulerTimer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for SchedulerClock&lt; output_timestamps &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock__coll__graph.svg" width="190" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml">kernel_info</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> information.  <a href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ac4310bc8ea513b536edc0a34db19ff9e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ac4310bc8ea513b536edc0a34db19ff9e">LayerData</a> = std::map&lt; std::string, std::string &gt;</td></tr>
<tr class="separator:ac4310bc8ea513b536edc0a34db19ff9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:afc7df496e6026b91c3f48da6821c86a9 inherit pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> = std::map&lt; std::string, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a> &gt;</td></tr>
<tr class="memdesc:afc7df496e6026b91c3f48da6821c86a9 inherit pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Map of measurements.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">More...</a><br /></td></tr>
<tr class="separator:afc7df496e6026b91c3f48da6821c86a9 inherit pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a71e1ffcc1aad7de2a9a44276ca2fcbd1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a71e1ffcc1aad7de2a9a44276ca2fcbd1">SchedulerClock</a> (<a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a> scale_factor)</td></tr>
<tr class="memdesc:a71e1ffcc1aad7de2a9a44276ca2fcbd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a <a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> timer.  <a href="#a71e1ffcc1aad7de2a9a44276ca2fcbd1">More...</a><br /></td></tr>
<tr class="separator:a71e1ffcc1aad7de2a9a44276ca2fcbd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60f8503bc8d7098d6910eede9431e5fb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a60f8503bc8d7098d6910eede9431e5fb">SchedulerClock</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> &amp;)=delete</td></tr>
<tr class="memdesc:a60f8503bc8d7098d6910eede9431e5fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy constructed.  <a href="#a60f8503bc8d7098d6910eede9431e5fb">More...</a><br /></td></tr>
<tr class="separator:a60f8503bc8d7098d6910eede9431e5fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38d3874bedeff5dfa1957112a40b08c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a38d3874bedeff5dfa1957112a40b08c9">operator=</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> &amp;)=delete</td></tr>
<tr class="memdesc:a38d3874bedeff5dfa1957112a40b08c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied.  <a href="#a38d3874bedeff5dfa1957112a40b08c9">More...</a><br /></td></tr>
<tr class="separator:a38d3874bedeff5dfa1957112a40b08c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd51d33419e5e10f03554e58d6bada4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#acd51d33419e5e10f03554e58d6bada4e">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:acd51d33419e5e10f03554e58d6bada4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the default move assignment operator.  <a href="#acd51d33419e5e10f03554e58d6bada4e">More...</a><br /></td></tr>
<tr class="separator:acd51d33419e5e10f03554e58d6bada4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9b3b08af501bf45c825a5440a327858"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ab9b3b08af501bf45c825a5440a327858">SchedulerClock</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ab9b3b08af501bf45c825a5440a327858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the default move constructor.  <a href="#ab9b3b08af501bf45c825a5440a327858">More...</a><br /></td></tr>
<tr class="separator:ab9b3b08af501bf45c825a5440a327858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000744710b5b45a7d7ef8d386adf47c0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a000744710b5b45a7d7ef8d386adf47c0">~SchedulerClock</a> ()=default</td></tr>
<tr class="memdesc:a000744710b5b45a7d7ef8d386adf47c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the default destructor.  <a href="#a000744710b5b45a7d7ef8d386adf47c0">More...</a><br /></td></tr>
<tr class="separator:a000744710b5b45a7d7ef8d386adf47c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501ef37fef441a0a6a8ea8b8e30a7181"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">id</a> () const override</td></tr>
<tr class="memdesc:a501ef37fef441a0a6a8ea8b8e30a7181"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifier for the instrument.  <a href="#a501ef37fef441a0a6a8ea8b8e30a7181">More...</a><br /></td></tr>
<tr class="separator:a501ef37fef441a0a6a8ea8b8e30a7181"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad94b6b2e29abc159c9624278938badb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ad94b6b2e29abc159c9624278938badb3">test_start</a> () override</td></tr>
<tr class="memdesc:ad94b6b2e29abc159c9624278938badb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start of the test.  <a href="#ad94b6b2e29abc159c9624278938badb3">More...</a><br /></td></tr>
<tr class="separator:ad94b6b2e29abc159c9624278938badb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">start</a> () override</td></tr>
<tr class="memdesc:a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start measuring.  <a href="#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">More...</a><br /></td></tr>
<tr class="separator:a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84eed1102b2ad191e3659dd7c49705bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a84eed1102b2ad191e3659dd7c49705bc">test_stop</a> () override</td></tr>
<tr class="memdesc:a84eed1102b2ad191e3659dd7c49705bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">End of the test.  <a href="#a84eed1102b2ad191e3659dd7c49705bc">More...</a><br /></td></tr>
<tr class="separator:a84eed1102b2ad191e3659dd7c49705bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73cabccc9d4406bf48f1db033dc35005"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a> () const override</td></tr>
<tr class="memdesc:a73cabccc9d4406bf48f1db033dc35005"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the latest measurements.  <a href="#a73cabccc9d4406bf48f1db033dc35005">More...</a><br /></td></tr>
<tr class="separator:a73cabccc9d4406bf48f1db033dc35005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae790f29ef2dea44808bc598865f04b9b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ae790f29ef2dea44808bc598865f04b9b">instrument_header</a> () const override</td></tr>
<tr class="memdesc:ae790f29ef2dea44808bc598865f04b9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return JSON formatted instrument header string.  <a href="#ae790f29ef2dea44808bc598865f04b9b">More...</a><br /></td></tr>
<tr class="separator:ae790f29ef2dea44808bc598865f04b9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:a44dfdf6c9c53e1b5c5eddfc58c31dc54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a44dfdf6c9c53e1b5c5eddfc58c31dc54">Instrument</a> ()=default</td></tr>
<tr class="memdesc:a44dfdf6c9c53e1b5c5eddfc58c31dc54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a44dfdf6c9c53e1b5c5eddfc58c31dc54">More...</a><br /></td></tr>
<tr class="separator:a44dfdf6c9c53e1b5c5eddfc58c31dc54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92db65cbe174915234b0d99b3ad4be7 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ac92db65cbe174915234b0d99b3ad4be7">Instrument</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;)=default</td></tr>
<tr class="memdesc:ac92db65cbe174915234b0d99b3ad4be7 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ac92db65cbe174915234b0d99b3ad4be7">More...</a><br /></td></tr>
<tr class="separator:ac92db65cbe174915234b0d99b3ad4be7 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda867124fd5c093788f96cb2eaf67cd inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#adda867124fd5c093788f96cb2eaf67cd">Instrument</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:adda867124fd5c093788f96cb2eaf67cd inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#adda867124fd5c093788f96cb2eaf67cd">More...</a><br /></td></tr>
<tr class="separator:adda867124fd5c093788f96cb2eaf67cd inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4a6c66ea355204cca47490247b91f5f inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae4a6c66ea355204cca47490247b91f5f">operator=</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;)=default</td></tr>
<tr class="memdesc:ae4a6c66ea355204cca47490247b91f5f inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae4a6c66ea355204cca47490247b91f5f">More...</a><br /></td></tr>
<tr class="separator:ae4a6c66ea355204cca47490247b91f5f inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550047da2682a06765be837ae570e542 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a550047da2682a06765be837ae570e542">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a550047da2682a06765be837ae570e542 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a550047da2682a06765be837ae570e542">More...</a><br /></td></tr>
<tr class="separator:a550047da2682a06765be837ae570e542 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bd8541cf37e6c439d4a6bf7296437a2 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a7bd8541cf37e6c439d4a6bf7296437a2">~Instrument</a> ()=default</td></tr>
<tr class="memdesc:a7bd8541cf37e6c439d4a6bf7296437a2 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a7bd8541cf37e6c439d4a6bf7296437a2">More...</a><br /></td></tr>
<tr class="separator:a7bd8541cf37e6c439d4a6bf7296437a2 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae92ae13a136435391be883fd6f0f5c8c inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae92ae13a136435391be883fd6f0f5c8c">stop</a> ()</td></tr>
<tr class="memdesc:ae92ae13a136435391be883fd6f0f5c8c inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop measuring.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae92ae13a136435391be883fd6f0f5c8c">More...</a><br /></td></tr>
<tr class="separator:ae92ae13a136435391be883fd6f0f5c8c inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab0f12a9ccff85982411599026baad54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#aab0f12a9ccff85982411599026baad54">test_measurements</a> () const</td></tr>
<tr class="memdesc:aab0f12a9ccff85982411599026baad54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the latest test measurements.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#aab0f12a9ccff85982411599026baad54">More...</a><br /></td></tr>
<tr class="separator:aab0f12a9ccff85982411599026baad54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memTemplParams" colspan="2">template&lt;typename T , ScaleFactor scale&gt; </td></tr>
<tr class="memitem:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memTemplItemLeft" align="right" valign="top">static std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ab6ac86ac15a8211221f1721d6a4ee889">make_instrument</a> ()</td></tr>
<tr class="memdesc:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to create an instrument of the given type.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ab6ac86ac15a8211221f1721d6a4ee889">More...</a><br /></td></tr>
<tr class="separator:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;bool output_timestamps&gt;<br />
class arm_compute::test::framework::SchedulerClock&lt; output_timestamps &gt;</h3>

<p><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance. ">Instrument</a> creating measurements based on the information returned by clGetEventProfilingInfo for each OpenCL kernel executed. </p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8h_source.xhtml#l00063">63</a> of file <a class="el" href="_scheduler_timer_8h_source.xhtml">SchedulerTimer.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ac4310bc8ea513b536edc0a34db19ff9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4310bc8ea513b536edc0a34db19ff9e">&#9670;&nbsp;</a></span>LayerData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ac4310bc8ea513b536edc0a34db19ff9e">LayerData</a> =  std::map&lt;std::string, std::string&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8h_source.xhtml#l00066">66</a> of file <a class="el" href="_scheduler_timer_8h_source.xhtml">SchedulerTimer.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a71e1ffcc1aad7de2a9a44276ca2fcbd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71e1ffcc1aad7de2a9a44276ca2fcbd1">&#9670;&nbsp;</a></span>SchedulerClock() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a>&#160;</td>
          <td class="paramname"><em>scale_factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a <a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> timer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_factor</td><td><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml" title="Generic measurement that stores values as either double or long long int. ">Measurement</a> scale factor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00139">139</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_framework_8cpp_source.xhtml#l00050">arm_compute::test::framework::instruments_info</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    : _kernels(),</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      _layer_data_map(),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      _real_scheduler(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      _real_scheduler_type(),</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      _real_graph_function(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      _scale_factor(scale_factor),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      _interceptor(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      _scheduler_users()</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">instruments_info</a> != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        _scheduler_users = <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">instruments_info</a>-&gt;_scheduler_users;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_adeaa0a402395806e538066d09bcd668b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">arm_compute::test::framework::instruments_info</a></div><div class="ttdeci">std::unique_ptr&lt; InstrumentsInfo &gt; instruments_info</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00050">Framework.cpp:50</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a60f8503bc8d7098d6910eede9431e5fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60f8503bc8d7098d6910eede9431e5fb">&#9670;&nbsp;</a></span>SchedulerClock() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a>&lt; output_timestamps &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copy constructed. </p>

</div>
</div>
<a id="ab9b3b08af501bf45c825a5440a327858"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9b3b08af501bf45c825a5440a327858">&#9670;&nbsp;</a></span>SchedulerClock() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a>&lt; output_timestamps &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use the default move constructor. </p>

</div>
</div>
<a id="a000744710b5b45a7d7ef8d386adf47c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a000744710b5b45a7d7ef8d386adf47c0">&#9670;&nbsp;</a></span>~SchedulerClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use the default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a501ef37fef441a0a6a8ea8b8e30a7181"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501ef37fef441a0a6a8ea8b8e30a7181">&#9670;&nbsp;</a></span>id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Identifier for the instrument. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a93697d33dc9325ba180a9a2a8ade6937">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_scheduler_timer_8h_source.xhtml#l00094">SchedulerClock&lt; output_timestamps &gt;::kernel_info::measurements</a>, <a class="el" href="_scheduler_timer_8h_source.xhtml#l00095">SchedulerClock&lt; output_timestamps &gt;::kernel_info::name</a>, <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">ICPPKernel::name()</a>, and <a class="el" href="_scheduler_timer_8h_source.xhtml#l00096">SchedulerClock&lt; output_timestamps &gt;::kernel_info::prefix</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span>(output_timestamps)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;SchedulerTimestamps&quot;</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;SchedulerTimer&quot;</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae790f29ef2dea44808bc598865f04b9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae790f29ef2dea44808bc598865f04b9b">&#9670;&nbsp;</a></span>instrument_header()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string instrument_header </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return JSON formatted instrument header string. </p>
<dl class="section return"><dt>Returns</dt><dd>JSON formatted string </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a4d3582d354eb3e9028f627624ad7e126">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00287">287</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::string output{ <span class="stringliteral">&quot;&quot;</span> };</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    output += R<span class="stringliteral">&quot;(&quot;layer_data&quot; : {)&quot;;</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="stringliteral">    </span><span class="keywordflow">for</span>(<span class="keyword">auto</span> i_it = _layer_data_map.cbegin(), i_end = _layer_data_map.cend(); i_it != i_end; ++i_it)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        output += <span class="stringliteral">&quot;\&quot;&quot;</span> + i_it-&gt;first + <span class="stringliteral">&quot;\&quot; : {&quot;</span>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">if</span>(i_it-&gt;second.size() != 0)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="comment">// Print for each entry in layer</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> entry_it = i_it-&gt;second.cbegin(), entry_end = i_it-&gt;second.cend(); entry_it != entry_end; ++entry_it)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                output += <span class="stringliteral">&quot;\&quot;&quot;</span> + entry_it-&gt;first + <span class="stringliteral">&quot;\&quot; : \&quot;&quot;</span> + entry_it-&gt;second + <span class="stringliteral">&quot;\&quot;&quot;</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="keywordflow">if</span>(std::next(entry_it) != entry_end)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    output += <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        output += <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">if</span>(std::next(i_it) != i_end)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            output += <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    output += <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> output;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a73cabccc9d4406bf48f1db033dc35005"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73cabccc9d4406bf48f1db033dc35005">&#9670;&nbsp;</a></span>measurements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a> measurements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the latest measurements. </p>
<dl class="section return"><dt>Returns</dt><dd>the latest measurements. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#af7d7a6fbea69e98b802398957a245488">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">arm_compute::test::validation::m</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">name</a>, and <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    kernel_number = 0;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> kernel : _kernels)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a> = kernel.prefix + kernel.name + <span class="stringliteral">&quot; #&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(kernel_number++);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span>(output_timestamps)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(kernel.measurements.size() != 2);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> : kernel.measurements)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.first.find(<span class="stringliteral">&quot;[start]&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    measurements.emplace(<span class="stringliteral">&quot;[start]&quot;</span> + name, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.second);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.first.find(<span class="stringliteral">&quot;[end]&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    measurements.emplace(<span class="stringliteral">&quot;[end]&quot;</span> + name, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.second);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Measurement not handled&quot;</span>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            measurements.emplace(name, kernel.measurements.begin()-&gt;second);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_a73cabccc9d4406bf48f1db033dc35005"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">arm_compute::test::framework::SchedulerClock::measurements</a></div><div class="ttdeci">Instrument::MeasurementsMap measurements() const override</div><div class="ttdoc">Return the latest measurements. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00251">SchedulerTimer.cpp:251</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_instrument_xhtml_afc7df496e6026b91c3f48da6821c86a9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">arm_compute::test::framework::Instrument::MeasurementsMap</a></div><div class="ttdeci">std::map&lt; std::string, Measurement &gt; MeasurementsMap</div><div class="ttdoc">Map of measurements. </div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8h_source.xhtml#l00109">Instrument.h:109</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a38d3874bedeff5dfa1957112a40b08c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38d3874bedeff5dfa1957112a40b08c9">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a>&lt; output_timestamps &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied. </p>

</div>
</div>
<a id="acd51d33419e5e10f03554e58d6bada4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd51d33419e5e10f03554e58d6bada4e">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a>&lt; output_timestamps &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use the default move assignment operator. </p>

</div>
</div>
<a id="a5d5d9ebd12cd3a7d268bc98a3fc7bf97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">&#9670;&nbsp;</a></span>start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start measuring. </p>
<p>Called just before the run of the test starts </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a62b63bddf378b0e13a4affa3e8e1bedf">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00222">222</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    _kernels.clear();</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad94b6b2e29abc159c9624278938badb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad94b6b2e29abc159c9624278938badb3">&#9670;&nbsp;</a></span>test_start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void test_start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start of the test. </p>
<p>Called before the test set up starts </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a66c51340d5301212438dd42cddd9b015">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818">Scheduler::CUSTOM</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_workload_8h_source.xhtml#l00063">TaskExecutor::execute_function</a>, <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>, <a class="el" href="_scheduler_8cpp_source.xhtml#l00094">Scheduler::get()</a>, <a class="el" href="_workload_8cpp_source.xhtml#l00075">TaskExecutor::get()</a>, <a class="el" href="_scheduler_8cpp_source.xhtml#l00089">Scheduler::get_type()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a4843c7dfdf88d463275133d3278df03a">ISchedulerUser::intercept_scheduler()</a>, <a class="el" href="_data_layer_visitor_8cpp_source.xhtml#l00161">DataLayerVisitor::layer_data()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a5a8c9bfdfbdcdddc697f438ba2244620">ISchedulerUser::scheduler()</a>, and <a class="el" href="_scheduler_8cpp_source.xhtml#l00126">Scheduler::set()</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Start intercepting tasks:</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_real_graph_function != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _real_graph_function  = <a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">graph::TaskExecutor::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">execute_function</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">auto</span> task_interceptor = [<span class="keyword">this</span>](graph::ExecutionTask &amp; task)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        Interceptor&lt;output_timestamps&gt; *scheduler = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span>(<span class="keyword">dynamic_cast&lt;</span>Interceptor&lt;output_timestamps&gt; *<span class="keyword">&gt;</span>(this-&gt;_interceptor.get()) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            scheduler = arm_compute::utils::cast::polymorphic_downcast&lt;Interceptor&lt;output_timestamps&gt; *&gt;(_interceptor.get());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">if</span>(task.node != <span class="keyword">nullptr</span> &amp;&amp; !task.node-&gt;name().empty())</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                scheduler-&gt;set_prefix(task.node-&gt;name() + <span class="stringliteral">&quot;/&quot;</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">if</span>(_layer_data_map.find(task.node-&gt;name()) == _layer_data_map.end())</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <a class="code" href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml">arm_compute::graph::DataLayerVisitor</a> dlv = {};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    task.node-&gt;accept(dlv);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    _layer_data_map[task.node-&gt;name()] = dlv.<a class="code" href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml#aa75047a3bc7c8d442c8adf116c948d10">layer_data</a>();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                scheduler-&gt;set_prefix(<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        this-&gt;_real_graph_function(task);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span>(scheduler != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            scheduler-&gt;set_prefix(<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    };</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_real_scheduler != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    _real_scheduler_type = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a3f9e730c935124966325cd7c794d3153">Scheduler::get_type</a>();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">//Note: We can&#39;t currently replace a custom scheduler</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span>(_real_scheduler_type != <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818">Scheduler::Type::CUSTOM</a>)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        _real_scheduler = &amp;<a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">Scheduler::get</a>();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        _interceptor    = std::make_shared&lt;Interceptor&lt;output_timestamps&gt;&gt;(_kernels, _layer_data_map, *_real_scheduler, _scale_factor);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">Scheduler::set</a>(std::static_pointer_cast&lt;IScheduler&gt;(_interceptor));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">graph::TaskExecutor::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">execute_function</a> = task_interceptor;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// Create an interceptor for each scheduler</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="comment">// TODO(COMPID-2638) : Allow multiple schedulers, now it assumes the same scheduler is used.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(_scheduler_users), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_scheduler_users),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                      [&amp;](ISchedulerUser * user)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span>(user != <span class="keyword">nullptr</span> &amp;&amp; user-&gt;scheduler() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                user-&gt;intercept_scheduler(std::make_unique&lt;Interceptor&lt;output_timestamps&gt;&gt;(_kernels, _layer_data_map, *user-&gt;scheduler(), _scale_factor));</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        });</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_data_layer_visitor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml">arm_compute::graph::DataLayerVisitor</a></div><div class="ttdoc">Graph printer visitor. </div><div class="ttdef"><b>Definition:</b> <a href="_data_layer_visitor_8h_source.xhtml#l00036">DataLayerVisitor.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_data_layer_visitor_xhtml_aa75047a3bc7c8d442c8adf116c948d10"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml#aa75047a3bc7c8d442c8adf116c948d10">arm_compute::graph::DataLayerVisitor::layer_data</a></div><div class="ttdeci">const LayerData &amp; layer_data() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layer_visitor_8cpp_source.xhtml#l00161">DataLayerVisitor.cpp:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_ad2fc671b2772dd9e28b81cf0e2514e85"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">arm_compute::Scheduler::set</a></div><div class="ttdeci">static void set(std::shared_ptr&lt; IScheduler &gt; scheduler)</div><div class="ttdoc">Sets the user defined scheduler and makes it the active scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00126">Scheduler.cpp:126</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818">arm_compute::Scheduler::Type::CUSTOM</a></div><div class="ttdoc">Provided by the user. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_task_executor_xhtml_a8814816f2d2940dbbc2817277eff42db"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">arm_compute::graph::TaskExecutor::get</a></div><div class="ttdeci">static TaskExecutor &amp; get()</div><div class="ttdoc">Task executor accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8cpp_source.xhtml#l00075">Workload.cpp:75</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a3f9e730c935124966325cd7c794d3153"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a3f9e730c935124966325cd7c794d3153">arm_compute::Scheduler::get_type</a></div><div class="ttdeci">static Type get_type()</div><div class="ttdoc">Returns the type of the active scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00089">Scheduler.cpp:89</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_task_executor_xhtml_af356b3757a26ca474239624e161fb49c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">arm_compute::graph::TaskExecutor::execute_function</a></div><div class="ttdeci">std::function&lt; decltype(execute_task)&gt; execute_function</div><div class="ttdoc">Function that is responsible for executing tasks. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00063">Workload.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a0d63ca713bab377aabcfb63c192b8429"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00094">Scheduler.cpp:94</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a84eed1102b2ad191e3659dd7c49705bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84eed1102b2ad191e3659dd7c49705bc">&#9670;&nbsp;</a></span>test_stop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void test_stop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>End of the test. </p>
<p>Called after the test teardown ended </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a24b0f69632f7d082aad3e0fceaf4f5b1">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00228">228</a> of file <a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_workload_8h_source.xhtml#l00063">TaskExecutor::execute_function</a>, <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>, <a class="el" href="_workload_8cpp_source.xhtml#l00075">TaskExecutor::get()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a82cd5cd76f2e24a56b7f0f502d218d5d">ISchedulerUser::restore_scheduler()</a>, and <a class="el" href="_scheduler_8cpp_source.xhtml#l00126">Scheduler::set()</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Restore real scheduler</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">Scheduler::set</a>(_real_scheduler_type);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    _real_scheduler = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    _interceptor    = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">graph::TaskExecutor::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">execute_function</a> = _real_graph_function;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    _real_graph_function                        = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Restore schedulers</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(_scheduler_users), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_scheduler_users),</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                  [&amp;](ISchedulerUser * user)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">if</span>(user != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            user-&gt;restore_scheduler();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    });</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_ad2fc671b2772dd9e28b81cf0e2514e85"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">arm_compute::Scheduler::set</a></div><div class="ttdeci">static void set(std::shared_ptr&lt; IScheduler &gt; scheduler)</div><div class="ttdoc">Sets the user defined scheduler and makes it the active scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00126">Scheduler.cpp:126</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_task_executor_xhtml_a8814816f2d2940dbbc2817277eff42db"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">arm_compute::graph::TaskExecutor::get</a></div><div class="ttdeci">static TaskExecutor &amp; get()</div><div class="ttdoc">Task executor accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8cpp_source.xhtml#l00075">Workload.cpp:75</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_task_executor_xhtml_af356b3757a26ca474239624e161fb49c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">arm_compute::graph::TaskExecutor::execute_function</a></div><div class="ttdeci">std::function&lt; decltype(execute_task)&gt; execute_function</div><div class="ttdoc">Function that is responsible for executing tasks. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00063">Workload.h:63</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/framework/instruments/<a class="el" href="_scheduler_timer_8h_source.xhtml">SchedulerTimer.h</a></li>
<li>tests/framework/instruments/<a class="el" href="_scheduler_timer_8cpp_source.xhtml">SchedulerTimer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">framework</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">SchedulerClock</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:07 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
