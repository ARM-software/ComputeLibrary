<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/gpu/GpuKernelComponentGroup.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_gpu_kernel_component_group_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GpuKernelComponentGroup.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gpu_kernel_component_group_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_DYNAMIC_FUSION_SKETCH_GPU_GPUKERNELCOMPONENTGROUP</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_DYNAMIC_FUSION_SKETCH_GPU_GPUKERNELCOMPONENTGROUP</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h.xhtml">components/Types.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/** Forward declaration */</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">class </span>ITensorInfo;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">class </span>IGpuKernelComponent;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/** A group of gpu kernel components to be fused together</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * PRECONDITIONS:</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * 1. Fusion is limited to a linear sequence of kernel components</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * INVARIANTS:</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @note These preconditions and invariants are exactly the same as fusion constraints for kernel components</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * 2. Max number of components that can be fused is @ref GpuKernelComponentGroup::max_fused_components (</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> *        excluding any output or input (if any) components.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> *        The max number of output components are bound by the maximum number of dst tensors allowed for a component / component group</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> *    )</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * 3. The fusion is subject to the pattern: (Complex + Simple * | Simple + Simple * | Un-fusable) + Output?</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * 4. All components but unfusable, have exactly 1 dst tensor</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * 5. All fused components share the same @ref IGpuKernelComponent::Properties ( @ref UnitWorkloadStage etc. )</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * 6. All fused components share the same tunable parameters like tile size</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * 7. All fused components share the same dst tensor shape</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * 8. All fused components&#39; tensors share the same @ref DataLayout</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * 9. Maximum number of dst tensors allowed for an component (including unfusable) / component group is @ref GpuKernelComponentGroup::max_dst_tensors</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> *      This has an impact on the total number of components supported, which = max_fused_components + max_dst_tensors</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">   60</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">   63</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a> *;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /** Maximum number of components that can be fused into the same component group</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">   66</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">max_fused_components</a> = 64;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /** Maximum number of dst tensors allowed for a component / component</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">   69</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">max_dst_tensors</a> = 8;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac5f8b1023bf15032ff46b8da02e3c707">GpuKernelComponentGroup</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /** Allow instances of this class to be copy constructed */</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac5f8b1023bf15032ff46b8da02e3c707">GpuKernelComponentGroup</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">    /** Allow instances of this class to be copied */</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#abbbc98c19afdf8ae5635a05ec1275092">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac5f8b1023bf15032ff46b8da02e3c707">GpuKernelComponentGroup</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#abbbc98c19afdf8ae5635a05ec1275092">operator=</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">    /** Add a component pointer into the group</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     * If the operation fails, then no change is made to the group</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     * @param[in] component Pointer to the component to be added</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     * @return true      If the operation is successful</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * @return false     If the operation fails</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac9e78ba664fd652f3336d67df62be2ab">add_component</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> component);<span class="comment"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /** Get source tensors of this group */</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    std::vector&lt;const ITensorInfo *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a73880600f769cd73e96b5346cd0c0ee8">get_src_tensors</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /** Get destination tensors of this group */</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;const ITensorInfo *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aa31e07b698bcfea9e6a3584e951b216f">get_dst_tensors</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">    /** Get tensor argument of this group</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     *  A tensor is an argument if it is a source or destination tensor to the group</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::vector&lt;const ITensorInfo *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a7c1120629a4227e1cc7798f8e418c735">get_argument_tensors</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">    /** Get the root (first) component of this group */</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /** Get the last component of this group */</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ad5e60b4ec02fd0a43876a0dd8028ef0e">get_last_component</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    /** Get the previous component to the component with id @p id</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * @param[in] id Component id of the component whose previous component is of concern</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">     * @return ComponentPtr  Pointer to the previous component of the one identified by @p id</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a240e93c8deea716a80abc60b195374f9">get_previous_component</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> <span class="keywordtype">id</span>) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">    /** Check if a @ref ITensorInfo is an &quot;intermediate&quot; tensor of the group</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * An intermediate tensor is any tensor that is not an argument.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * @param[in] tensor @ref ITensorInfo to be looked up</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * @return true  If @p tensor is an intermediate tensor</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     * @return false  Otherwise</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a74f74201ca5d876d2f64f90f3f52b615">is_intermediate_tensor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">    /** Get the number of components within the group */</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">    /** Check if the component group is empty */</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac586208dc1c63a5a9754f519365b34ff">operator[]</a>(<span class="keywordtype">size_t</span> index);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">ComponentPtr</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac586208dc1c63a5a9754f519365b34ff">operator[]</a>(<span class="keywordtype">size_t</span> index) <span class="keyword">const</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">typename</span> std::vector&lt;ComponentPtr&gt;::iterator       <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a782540c49faed11119d01b189829d0eb">begin</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">typename</span> std::vector&lt;ComponentPtr&gt;::iterator       <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#af1a0199b03ba58e496ec42659b968509">end</a>();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">typename</span> std::vector&lt;ComponentPtr&gt;::const_iterator <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a782540c49faed11119d01b189829d0eb">begin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">typename</span> std::vector&lt;ComponentPtr&gt;::const_iterator <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#af1a0199b03ba58e496ec42659b968509">end</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">typename</span> std::vector&lt;ComponentPtr&gt;::const_iterator <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a1cd59531dbc83e855eaaa950006e659d">cbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">typename</span> std::vector&lt;ComponentPtr&gt;::const_iterator <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aebfa28affbf65fe796076d20d8bfcdd0">cend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::vector&lt;const ITensorInfo *&gt; get_interm_tensors() <span class="keyword">const</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> is_tensor_in(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> std::vector&lt;const ITensorInfo *&gt; tensors);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::vector&lt;ComponentPtr&gt; _components{};</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;};</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_DYNAMIC_FUSION_SKETCH_GPU_GPUKERNELCOMPONENTGROUP */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_ac586208dc1c63a5a9754f519365b34ff"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac586208dc1c63a5a9754f519365b34ff">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::operator[]</a></div><div class="ttdeci">ComponentPtr &amp; operator[](size_t index)</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00232">GpuKernelComponentGroup.cpp:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_aebfa28affbf65fe796076d20d8bfcdd0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aebfa28affbf65fe796076d20d8bfcdd0">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::cend</a></div><div class="ttdeci">std::vector&lt; ComponentPtr &gt;::const_iterator cend() const</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00260">GpuKernelComponentGroup.cpp:260</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a7c1120629a4227e1cc7798f8e418c735"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a7c1120629a4227e1cc7798f8e418c735">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_argument_tensors</a></div><div class="ttdeci">std::vector&lt; const ITensorInfo * &gt; get_argument_tensors() const</div><div class="ttdoc">Get tensor argument of this group A tensor is an argument if it is a source or destination tensor to ...</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00167">GpuKernelComponentGroup.cpp:167</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a73880600f769cd73e96b5346cd0c0ee8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a73880600f769cd73e96b5346cd0c0ee8">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_src_tensors</a></div><div class="ttdeci">std::vector&lt; const ITensorInfo * &gt; get_src_tensors() const</div><div class="ttdoc">Get source tensors of this group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00127">GpuKernelComponentGroup.cpp:127</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_ac5f8b1023bf15032ff46b8da02e3c707"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac5f8b1023bf15032ff46b8da02e3c707">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::GpuKernelComponentGroup</a></div><div class="ttdeci">GpuKernelComponentGroup()=default</div><div class="ttdoc">Default constructor. </div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_af1a0199b03ba58e496ec42659b968509"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#af1a0199b03ba58e496ec42659b968509">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::end</a></div><div class="ttdeci">std::vector&lt; ComponentPtr &gt;::iterator end()</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00244">GpuKernelComponentGroup.cpp:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a259cb5a711406a8c3e5d937eb9350cca"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a259cb5a711406a8c3e5d937eb9350cca">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdoc">Get the number of components within the group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00224">GpuKernelComponentGroup.cpp:224</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">arm_compute::experimental::dynamic_fusion::IGpuKernelComponent</a></div><div class="ttdoc">An abstract interface of a component. </div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_kernel_component_8h_source.xhtml#l00066">IGpuKernelComponent.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_aa31e07b698bcfea9e6a3584e951b216f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aa31e07b698bcfea9e6a3584e951b216f">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_dst_tensors</a></div><div class="ttdeci">std::vector&lt; const ITensorInfo * &gt; get_dst_tensors() const</div><div class="ttdoc">Get destination tensors of this group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00152">GpuKernelComponentGroup.cpp:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a50c05c157214ae20fac43d5ee4afaf6f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::max_dst_tensors</a></div><div class="ttdeci">static constexpr size_t max_dst_tensors</div><div class="ttdoc">Maximum number of dst tensors allowed for a component / component. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00069">GpuKernelComponentGroup.h:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_ad5e60b4ec02fd0a43876a0dd8028ef0e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ad5e60b4ec02fd0a43876a0dd8028ef0e">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_last_component</a></div><div class="ttdeci">ComponentPtr get_last_component() const</div><div class="ttdoc">Get the last component of this group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00187">GpuKernelComponentGroup.cpp:187</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a782540c49faed11119d01b189829d0eb"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a782540c49faed11119d01b189829d0eb">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::begin</a></div><div class="ttdeci">std::vector&lt; ComponentPtr &gt;::iterator begin()</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00240">GpuKernelComponentGroup.cpp:240</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a240e93c8deea716a80abc60b195374f9"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a240e93c8deea716a80abc60b195374f9">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_previous_component</a></div><div class="ttdeci">ComponentPtr get_previous_component(ComponentId id) const</div><div class="ttdoc">Get the previous component to the component with id id. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00196">GpuKernelComponentGroup.cpp:196</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a74f74201ca5d876d2f64f90f3f52b615"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a74f74201ca5d876d2f64f90f3f52b615">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::is_intermediate_tensor</a></div><div class="ttdeci">bool is_intermediate_tensor(const ITensorInfo *tensor) const</div><div class="ttdoc">Check if a ITensorInfo is an &quot;intermediate&quot; tensor of the group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00219">GpuKernelComponentGroup.cpp:219</a></div></div>
<div class="ttc" id="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_xhtml"><div class="ttname"><a href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a1cd59531dbc83e855eaaa950006e659d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a1cd59531dbc83e855eaaa950006e659d">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::cbegin</a></div><div class="ttdeci">std::vector&lt; ComponentPtr &gt;::const_iterator cbegin() const</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00256">GpuKernelComponentGroup.cpp:256</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_ac9e78ba664fd652f3336d67df62be2ab"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac9e78ba664fd652f3336d67df62be2ab">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::add_component</a></div><div class="ttdeci">bool add_component(ComponentPtr component)</div><div class="ttdoc">Add a component pointer into the group If the operation fails, then no change is made to the group...</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00036">GpuKernelComponentGroup.cpp:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a644718bb2fb240de962dc3c9a1fdf0dc"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdoc">Check if the component group is empty. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00228">GpuKernelComponentGroup.cpp:228</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afff13da4ff0bb0cd14e24f19743c8225"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">arm_compute::experimental::dynamic_fusion::ComponentId</a></div><div class="ttdeci">int32_t ComponentId</div><div class="ttdoc">Uniquely identifies a kernel component within a workload. </div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00037">Types.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a818410cf1e2a1bbc959a118f52df0558"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::max_fused_components</a></div><div class="ttdeci">static constexpr size_t max_fused_components</div><div class="ttdoc">Maximum number of components that can be fused into the same component group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00066">GpuKernelComponentGroup.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a132a3a85495f9c5fe8ef684035cd94c8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_root_component</a></div><div class="ttdeci">ComponentPtr get_root_component() const</div><div class="ttdoc">Get the root (first) component of this group. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00178">GpuKernelComponentGroup.cpp:178</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_abbbc98c19afdf8ae5635a05ec1275092"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#abbbc98c19afdf8ae5635a05ec1275092">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::operator=</a></div><div class="ttdeci">GpuKernelComponentGroup &amp; operator=(const GpuKernelComponentGroup &amp;)=default</div><div class="ttdoc">Allow instances of this class to be copied. </div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup</a></div><div class="ttdoc">A group of gpu kernel components to be fused together PRECONDITIONS: </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00060">GpuKernelComponentGroup.h:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_df94d166e0e6f49d063cb29fea25a88b.xhtml">gpu</a></li><li class="navelem"><a class="el" href="_gpu_kernel_component_group_8h.xhtml">GpuKernelComponentGroup.h</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:53 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
