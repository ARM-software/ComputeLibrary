<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CPP/functions/CPPDetectionPostProcessLayer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_c_p_p_detection_post_process_layer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CPPDetectionPostProcessLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_p_p_detection_post_process_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_p_detection_post_process_layer_8h.xhtml">arm_compute/runtime/CPP/functions/CPPDetectionPostProcessLayer.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2common_2utils_2_log_8h.xhtml">src/common/utils/Log.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;ios&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;Status <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(<span class="keyword">const</span> ITensorInfo *input_box_encoding, <span class="keyword">const</span> ITensorInfo *input_class_score, <span class="keyword">const</span> ITensorInfo *input_anchors,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                          ITensorInfo *output_boxes, ITensorInfo *output_classes, ITensorInfo *output_scores, ITensorInfo *num_detection,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                          DetectionPostProcessLayerInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kBatchSize, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kNumCoordBox)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(input_box_encoding, input_class_score, input_anchors);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(input_box_encoding, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(input_box_encoding, input_anchors);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(input_box_encoding-&gt;num_dimensions() &gt; 3, <span class="stringliteral">&quot;The location input tensor shape should be [4, N, kBatchSize].&quot;</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span>(input_box_encoding-&gt;num_dimensions() &gt; 2)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="_error_8h.xhtml#ab7f9a52dc65a6a76f1576d99828fa1ea">ARM_COMPUTE_RETURN_ERROR_ON_MSG_VAR</a>(input_box_encoding-&gt;dimension(2) != kBatchSize, <span class="stringliteral">&quot;The third dimension of the input box_encoding tensor should be equal to %d.&quot;</span>, kBatchSize);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="_error_8h.xhtml#ab7f9a52dc65a6a76f1576d99828fa1ea">ARM_COMPUTE_RETURN_ERROR_ON_MSG_VAR</a>(input_box_encoding-&gt;dimension(0) != kNumCoordBox, <span class="stringliteral">&quot;The first dimension of the input box_encoding tensor should be equal to %d.&quot;</span>, kNumCoordBox);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(input_class_score-&gt;dimension(0) != (info.num_classes() + 1),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                    <span class="stringliteral">&quot;The first dimension of the input class_prediction should be equal to the number of classes plus one.&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(input_anchors-&gt;num_dimensions() &gt; 3, <span class="stringliteral">&quot;The anchors input tensor shape should be [4, N, kBatchSize].&quot;</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span>(input_anchors-&gt;num_dimensions() &gt; 2)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="_error_8h.xhtml#ab7f9a52dc65a6a76f1576d99828fa1ea">ARM_COMPUTE_RETURN_ERROR_ON_MSG_VAR</a>(input_anchors-&gt;dimension(0) != kNumCoordBox, <span class="stringliteral">&quot;The first dimension of the input anchors tensor should be equal to %d.&quot;</span>, kNumCoordBox);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>((input_box_encoding-&gt;dimension(1) != input_class_score-&gt;dimension(1))</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                    || (input_box_encoding-&gt;dimension(1) != input_anchors-&gt;dimension(1)),</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                    <span class="stringliteral">&quot;The second dimension of the inputs should be the same.&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(num_detection-&gt;num_dimensions() &gt; 1, <span class="stringliteral">&quot;The num_detection output tensor shape should be [M].&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>((info.iou_threshold() &lt;= 0.0f) || (info.iou_threshold() &gt; 1.0f), <span class="stringliteral">&quot;The intersection over union should be positive and less than 1.&quot;</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(info.max_classes_per_detection() &lt;= 0, <span class="stringliteral">&quot;The number of max classes per detection should be positive.&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_detected_boxes = info.max_detections() * info.max_classes_per_detection();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// Validate configured outputs</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span>(output_boxes-&gt;total_size() != 0)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(output_boxes-&gt;tensor_shape(), TensorShape(4U, num_detected_boxes, 1U));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output_boxes, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">if</span>(output_classes-&gt;total_size() != 0)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(output_classes-&gt;tensor_shape(), TensorShape(num_detected_boxes, 1U));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output_classes, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">if</span>(output_scores-&gt;total_size() != 0)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(output_scores-&gt;tensor_shape(), TensorShape(num_detected_boxes, 1U));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output_scores, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span>(num_detection-&gt;total_size() != 0)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(num_detection-&gt;tensor_shape(), TensorShape(1U));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(num_detection, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> DecodeBoxCorner(<a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a> &amp;box_centersize, <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a> &amp;anchor, Iterator &amp;decoded_it, DetectionPostProcessLayerInfo info)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> half_factor = 0.5f;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// BBox is equavalent to CenterSizeEncoding [y,x,h,w]</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> y_center = box_centersize[0] / info.scale_value_y() * anchor[2] + anchor[0];</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> x_center = box_centersize[1] / info.scale_value_x() * anchor[3] + anchor[1];</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> half_h   = half_factor * <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(std::exp(box_centersize[2] / info.scale_value_h())) * anchor[2];</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> half_w   = half_factor * <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(std::exp(box_centersize[3] / info.scale_value_w())) * anchor[3];</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Box Corner encoding boxes are saved as [xmin, ymin, xmax, ymax]</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">auto</span> decoded_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(decoded_it.ptr());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    *(decoded_ptr)     = x_center - half_w; <span class="comment">// xmin</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    *(1 + decoded_ptr) = y_center - half_h; <span class="comment">// ymin</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    *(2 + decoded_ptr) = x_center + half_w; <span class="comment">// xmax</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    *(3 + decoded_ptr) = y_center + half_h; <span class="comment">// ymax</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/** Decode a bbox according to a anchors and scale info.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * @param[in]  input_box_encoding The input prior bounding boxes.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @param[in]  input_anchors      The corresponding input variance.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * @param[in]  info               The detection informations</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @param[out] decoded_boxes      The decoded bboxes.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keywordtype">void</span> DecodeCenterSizeBoxes(<span class="keyword">const</span> ITensor *input_box_encoding, <span class="keyword">const</span> ITensor *input_anchors, DetectionPostProcessLayerInfo info, Tensor *decoded_boxes)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> QuantizationInfo &amp;qi_box     = input_box_encoding-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> QuantizationInfo &amp;qi_anchors = input_anchors-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>                    box_centersize{ {} };</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>                    anchor{ {} };</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    Window win;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    win.use_tensor_dimensions(input_box_encoding-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    win.set_dimension_step(0U, 4U);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    win.set_dimension_step(1U, 1U);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    Iterator box_it(input_box_encoding, win);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    Iterator anchor_it(input_anchors, win);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    Iterator decoded_it(decoded_boxes, win);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span>(input_box_encoding-&gt;info()-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> box_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(box_it.ptr());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> anchor_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(anchor_it.ptr());</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            box_centersize        = <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>({ <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*box_ptr, qi_box), <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(box_ptr + 1), qi_box),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                           <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(2 + box_ptr), qi_box), <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(3 + box_ptr), qi_box)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                         });</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            anchor = <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>({ <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*anchor_ptr, qi_anchors), <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(anchor_ptr + 1), qi_anchors),</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                            <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(2 + anchor_ptr), qi_anchors), <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(3 + anchor_ptr), qi_anchors)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                          });</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            DecodeBoxCorner(box_centersize, anchor, decoded_it, info);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        },</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        box_it, anchor_it, decoded_it);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(input_box_encoding-&gt;info()-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> box_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(box_it.ptr());</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> anchor_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(anchor_it.ptr());</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            box_centersize        = <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>({ <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*box_ptr, qi_box), <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(box_ptr + 1), qi_box),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                           <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(2 + box_ptr), qi_box), <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(3 + box_ptr), qi_box)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                         });</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            anchor = <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>({ <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*anchor_ptr, qi_anchors), <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(anchor_ptr + 1), qi_anchors),</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                            <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(2 + anchor_ptr), qi_anchors), <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(3 + anchor_ptr), qi_anchors)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                          });</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            DecodeBoxCorner(box_centersize, anchor, decoded_it, info);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        },</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        box_it, anchor_it, decoded_it);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> box_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(box_it.ptr());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> anchor_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(anchor_it.ptr());</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            box_centersize        = <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>({ *box_ptr, *(box_ptr + 1), *(2 + box_ptr), *(3 + box_ptr) });</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            anchor                = <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a>({ *anchor_ptr, *(anchor_ptr + 1), *(2 + anchor_ptr), *(3 + anchor_ptr) });</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            DecodeBoxCorner(box_centersize, anchor, decoded_it, info);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        },</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        box_it, anchor_it, decoded_it);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordtype">void</span> SaveOutputs(<span class="keyword">const</span> Tensor *decoded_boxes, <span class="keyword">const</span> std::vector&lt;int&gt; &amp;result_idx_boxes_after_nms, <span class="keyword">const</span> std::vector&lt;float&gt; &amp;result_scores_after_nms, <span class="keyword">const</span> std::vector&lt;int&gt; &amp;result_classes_after_nms,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                 std::vector&lt;unsigned int&gt; &amp;sorted_indices, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_output, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_detections, ITensor *output_boxes, ITensor *output_classes, ITensor *output_scores,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                 ITensor *num_detection)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// xmin,ymin,xmax,ymax -&gt; ymin,xmin,ymax,xmax</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">for</span>(; i &lt; num_output; ++i)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> box_in_idx = result_idx_boxes_after_nms[sorted_indices[i]];</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(0, i)))) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(decoded_boxes-&gt;ptr_to_element(Coordinates(1, box_in_idx))));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(1, i)))) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(decoded_boxes-&gt;ptr_to_element(Coordinates(0, box_in_idx))));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(2, i)))) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(decoded_boxes-&gt;ptr_to_element(Coordinates(3, box_in_idx))));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(3, i)))) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(decoded_boxes-&gt;ptr_to_element(Coordinates(2, box_in_idx))));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_classes-&gt;ptr_to_element(Coordinates(i)))) = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(result_classes_after_nms[sorted_indices[i]]);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_scores-&gt;ptr_to_element(Coordinates(i))))  = result_scores_after_nms[sorted_indices[i]];</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">for</span>(; i &lt; max_detections; ++i)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(1, i)))) = 0.0f;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(0, i)))) = 0.0f;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(3, i)))) = 0.0f;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_boxes-&gt;ptr_to_element(Coordinates(2, i)))) = 0.0f;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_classes-&gt;ptr_to_element(Coordinates(i)))) = 0.0f;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output_scores-&gt;ptr_to_element(Coordinates(i))))  = 0.0f;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(num_detection-&gt;ptr_to_element(Coordinates(0)))) = num_output;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a39f8e99aae48c88ae3b3d98692c4107f">  211</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a39f8e99aae48c88ae3b3d98692c4107f">CPPDetectionPostProcessLayer::CPPDetectionPostProcessLayer</a>(std::shared_ptr&lt;IMemoryManager&gt; memory_manager)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    : _memory_group(<a class="code" href="namespacestd.xhtml">std</a>::move(memory_manager)), _nms(), _input_box_encoding(nullptr), _input_scores(nullptr), _input_anchors(nullptr), _output_boxes(nullptr), _output_classes(nullptr),</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      _output_scores(nullptr), _num_detection(nullptr), _info(), _num_boxes(), _num_classes_with_background(), _num_max_detected_boxes(), _dequantize_scores(false), _decoded_boxes(), _decoded_scores(),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      _selected_indices(), _class_scores(), _input_scores_to_use(nullptr)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">  218</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">CPPDetectionPostProcessLayer::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_box_encoding, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_scores,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_anchors, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_boxes, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_classes,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                             <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_scores, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *num_detection, <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> info)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                           num_detection, info);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    _num_max_detected_boxes = info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>() * info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">max_classes_per_detection</a>();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_kNumCoordBox, _num_max_detected_boxes, _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output_classes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_num_max_detected_boxes, _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_num_max_detected_boxes, _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*num_detection-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">// Perform validation step</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input_anchors-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output_classes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                                  num_detection-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, _kBatchSize, _kNumCoordBox));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    _input_box_encoding          = input_box_encoding;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    _input_scores                = input_scores;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    _input_anchors               = input_anchors;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    _output_boxes                = output_boxes;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    _output_classes              = output_classes;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    _output_scores               = output_scores;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    _num_detection               = num_detection;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    _info                        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    _num_boxes                   = input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    _num_classes_with_background = _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    _dequantize_scores           = (info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9f94c4edaf37250de1a0403d0f929644">dequantize_scores</a>() &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_decoded_boxes.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_kNumCoordBox, _input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1), _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_decoded_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0), _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1), _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_selected_indices.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>() ? info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">detection_per_class</a>() : info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>()), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>));</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes_per_box = std::min(info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">max_classes_per_detection</a>(), info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>());</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_class_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>() ? <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_num_boxes) : <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(_num_boxes * num_classes_per_box), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    _input_scores_to_use = _dequantize_scores ? &amp;_decoded_scores : _input_scores;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Manage intermediate buffers</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_decoded_boxes);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_decoded_scores);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_selected_indices);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_class_scores);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    _nms.<a class="code" href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ad8387a0ef4a1e0f7382c06146857e4be">configure</a>(&amp;_decoded_boxes, &amp;_class_scores, &amp;_selected_indices, info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>() ? info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">detection_per_class</a>() : info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>(), info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">nms_score_threshold</a>(), info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">iou_threshold</a>());</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Allocate and reserve intermediate tensors and vectors</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    _decoded_boxes.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    _decoded_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    _selected_indices.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    _class_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">  272</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">CPPDetectionPostProcessLayer::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_box_encoding, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_class_score, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_anchors,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                              <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_boxes, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_classes, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_scores, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *num_detection, <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> info)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kBatchSize             = 1;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kNumCoordBox           = 4;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>       _decoded_boxes_info    = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(kNumCoordBox, input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1)), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>       _decoded_scores_info   = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1)), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>       _selected_indices_info = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>()), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ac36104d178e32cb6e30af07e69d978d4">CPPNonMaximumSuppression::validate</a>(&amp;_decoded_boxes_info, &amp;_decoded_scores_info, &amp;_selected_indices_info, info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>(), info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">nms_score_threshold</a>(),</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                                                   info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">iou_threshold</a>()));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(input_box_encoding, input_class_score, input_anchors, output_boxes, output_classes, output_scores, num_detection, info, kBatchSize, kNumCoordBox));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">  288</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">CPPDetectionPostProcessLayer::run</a>()</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes    = _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>();</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_detections = _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>();</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    DecodeCenterSizeBoxes(_input_box_encoding, _input_anchors, _info, &amp;_decoded_boxes);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Decode scores if necessary</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span>(_dequantize_scores)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span>(_input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_c = 0; idx_c &lt; _num_classes_with_background; ++idx_c)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_b = 0; idx_b &lt; _num_boxes; ++idx_b)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_decoded_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(idx_c, idx_b)))) =</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(reinterpret_cast&lt;qasymm8_t *&gt;(_input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(idx_c, idx_b)))), _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>());</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(_input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_c = 0; idx_c &lt; _num_classes_with_background; ++idx_c)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_b = 0; idx_b &lt; _num_boxes; ++idx_b)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_decoded_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(idx_c, idx_b)))) =</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(reinterpret_cast&lt;qasymm8_signed_t *&gt;(_input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(idx_c, idx_b)))), _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>());</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Regular NMS</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span>(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>())</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        std::vector&lt;int&gt;          result_idx_boxes_after_nms;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        std::vector&lt;int&gt;          result_classes_after_nms;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        std::vector&lt;float&gt;        result_scores_after_nms;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        std::vector&lt;unsigned int&gt; sorted_indices;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; num_classes; ++c)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">// For each boxes get scores of the boxes for the class c</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _num_boxes; ++i)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_class_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(i)))) =</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_input_scores_to_use-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(c + 1, i)))); <span class="comment">// i * _num_classes_with_background + c + 1</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="comment">// Run Non-maxima Suppression</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            _nms.<a class="code" href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">detection_per_class</a>(); ++i)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> selected_index = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(_selected_indices.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(i))));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="keywordflow">if</span>(selected_index == -1)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    <span class="comment">// Nms will return -1 for all the last M-elements not valid</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                result_idx_boxes_after_nms.emplace_back(selected_index);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                result_scores_after_nms.emplace_back((reinterpret_cast&lt;float *&gt;(_class_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">buffer</a>()))[selected_index]);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                result_classes_after_nms.emplace_back(c);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="comment">// We select the max detection numbers of the highest score of all classes</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> num_selected = result_scores_after_nms.size();</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> num_output   = std::min&lt;unsigned int&gt;(max_detections, num_selected);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment">// Sort selected indices based on result scores</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        sorted_indices.resize(num_selected);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        std::iota(sorted_indices.begin(), sorted_indices.end(), 0);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        std::partial_sort(sorted_indices.data(),</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                          sorted_indices.data() + num_output,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                          sorted_indices.data() + num_selected,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                          [&amp;](<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> second)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">return</span> result_scores_after_nms[first] &gt; result_scores_after_nms[second];</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        });</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        SaveOutputs(&amp;_decoded_boxes, result_idx_boxes_after_nms, result_scores_after_nms, result_classes_after_nms, sorted_indices,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    num_output, max_detections, _output_boxes, _output_classes, _output_scores, _num_detection);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// Fast NMS</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes_per_box = std::min&lt;unsigned int&gt;(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">max_classes_per_detection</a>(), _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>());</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        std::vector&lt;float&gt; max_scores;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        std::vector&lt;int&gt;   box_indices;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        std::vector&lt;int&gt;   max_score_classes;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> &lt; _num_boxes; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            std::vector&lt;float&gt; box_scores;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; num_classes; ++c)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                box_scores.emplace_back(*(reinterpret_cast&lt;float *&gt;(_input_scores_to_use-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(c + 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)))));</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            std::vector&lt;unsigned int&gt; max_score_indices;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            max_score_indices.resize(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>());</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            std::iota(max_score_indices.data(), max_score_indices.data() + _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>(), 0);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            std::partial_sort(max_score_indices.data(),</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                              max_score_indices.data() + num_classes_per_box,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                              max_score_indices.data() + num_classes,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                              [&amp;](<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> second)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            {</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                <span class="keywordflow">return</span> box_scores[first] &gt; box_scores[second];</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            });</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_classes_per_box; ++i)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> score_to_add                                                                             = box_scores[max_score_indices[i]];</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_class_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * num_classes_per_box + i)))) = score_to_add;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                max_scores.emplace_back(score_to_add);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                box_indices.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                max_score_classes.emplace_back(max_score_indices[i]);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="comment">// Run Non-maxima Suppression</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        _nms.<a class="code" href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        std::vector&lt;unsigned int&gt; selected_indices;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; max_detections; ++i)</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="comment">// NMS returns M valid indices, the not valid tail is filled with -1</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">if</span>(*(reinterpret_cast&lt;int *&gt;(_selected_indices.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(i)))) == -1)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                <span class="comment">// Nms will return -1 for all the last M-elements not valid</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            selected_indices.emplace_back(*(reinterpret_cast&lt;int *&gt;(_selected_indices.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(i)))));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="comment">// We select the max detection numbers of the highest score of all classes</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> num_output = std::min&lt;unsigned int&gt;(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>(), selected_indices.size());</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        SaveOutputs(&amp;_decoded_boxes, box_indices, max_scores, max_score_classes, selected_indices,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    num_output, max_detections, _output_boxes, _output_classes, _output_scores, _num_detection);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    }</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">Utils.h:1030</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_adbd73147d41e8a640bc299d12613c31e"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">arm_compute::ITensor::ptr_to_element</a></div><div class="ttdeci">uint8_t * ptr_to_element(const Coordinates &amp;id) const</div><div class="ttdoc">Return a pointer to the element at the passed coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00063">ITensor.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1d8253f8b422e143ab989ad2a4d29dd"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">arm_compute::dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uint8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given an unsigned 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00359">QuantizationInfo.h:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a23e83519067d74d4f1855d38741151eb"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">arm_compute::DetectionPostProcessLayerInfo::max_detections</a></div><div class="ttdeci">unsigned int max_detections() const</div><div class="ttdoc">Get max detections. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01123">Types.h:1123</a></div></div>
<div class="ttc" id="_error_8h_xhtml_ab7f9a52dc65a6a76f1576d99828fa1ea"><div class="ttname"><a href="_error_8h.xhtml#ab7f9a52dc65a6a76f1576d99828fa1ea">ARM_COMPUTE_RETURN_ERROR_ON_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG_VAR(cond, msg,...)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00227">Error.h:227</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_a08744faa3f68379fa82bcbd96bbec691"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">arm_compute::CPPDetectionPostProcessLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input_box_encoding, const ITensorInfo *input_class_score, const ITensorInfo *input_anchors, ITensorInfo *output_boxes, ITensorInfo *output_classes, ITensorInfo *output_scores, ITensorInfo *num_detection, DetectionPostProcessLayerInfo info=DetectionPostProcessLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CPPDetectionPostProcessL...</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00272">CPPDetectionPostProcessLayer.cpp:272</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_a39f8e99aae48c88ae3b3d98692c4107f"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a39f8e99aae48c88ae3b3d98692c4107f">arm_compute::CPPDetectionPostProcessLayer::CPPDetectionPostProcessLayer</a></div><div class="ttdeci">CPPDetectionPostProcessLayer(std::shared_ptr&lt; IMemoryManager &gt; memory_manager=nullptr)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00211">CPPDetectionPostProcessLayer.cpp:211</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">CpuDirectConv2dKernel.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1da797d2762c1cdbb73bfc83136c3a38"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00284">Validate.h:284</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ae1c2cc7a6c3db74d8be5f6e23aa84476"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">arm_compute::DetectionPostProcessLayerInfo::use_regular_nms</a></div><div class="ttdeci">bool use_regular_nms() const</div><div class="ttdoc">Get if use regular nms. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01153">Types.h:1153</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a634bf1faedaec956983af4d41940239e"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">arm_compute::DetectionPostProcessLayerInfo::iou_threshold</a></div><div class="ttdeci">float iou_threshold() const</div><div class="ttdoc">Get intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01143">Types.h:1143</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_adbd0cf83a8e1b335a9bf405a8e5019fa"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a47d74e4e51f9b1a636c4831bd747a97c"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">arm_compute::Tensor::info</a></div><div class="ttdeci">ITensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00033">Tensor.cpp:33</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CPPDetectionPostProcessLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00288">CPPDetectionPostProcessLayer.cpp:288</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator.cpp:132</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a0732a1286ff6a838da5c19e6d48c99cf"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">arm_compute::DetectionPostProcessLayerInfo::nms_score_threshold</a></div><div class="ttdeci">float nms_score_threshold() const</div><div class="ttdoc">Get nms threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01138">Types.h:1138</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa2b075b5da72ec6bb14f90c202443eb0"><div class="ttname"><a href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">arm_compute::BBox</a></div><div class="ttdeci">std::array&lt; float, 4 &gt; BBox</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00948">Types.h:948</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a9f94c4edaf37250de1a0403d0f929644"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9f94c4edaf37250de1a0403d0f929644">arm_compute::DetectionPostProcessLayerInfo::dequantize_scores</a></div><div class="ttdeci">bool dequantize_scores() const</div><div class="ttdoc">Get dequantize_scores value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01182">Types.h:1182</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ad54d768454ff1000504546898078d0de"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">arm_compute::DetectionPostProcessLayerInfo::max_classes_per_detection</a></div><div class="ttdeci">unsigned int max_classes_per_detection() const</div><div class="ttdoc">Get max_classes per detection. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01128">Types.h:1128</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_non_maximum_suppression_xhtml_ac36104d178e32cb6e30af07e69d978d4"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ac36104d178e32cb6e30af07e69d978d4">arm_compute::CPPNonMaximumSuppression::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *bboxes, const ITensorInfo *scores, const ITensorInfo *indices, unsigned int max_output_size, const float score_threshold, const float nms_threshold)</div><div class="ttdoc">Static function to check if given arguments will lead to a valid configuration of CPPNonMaximumSuppre...</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_non_maximum_suppression_8cpp_source.xhtml#l00043">CPPNonMaximumSuppression.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_ab8136561c7a7d555b3a2c3bf0614986c"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">arm_compute::CPPDetectionPostProcessLayer::configure</a></div><div class="ttdeci">void configure(const ITensor *input_box_encoding, const ITensor *input_score, const ITensor *input_anchors, ITensor *output_boxes, ITensor *output_classes, ITensor *output_scores, ITensor *num_detection, DetectionPostProcessLayerInfo info=DetectionPostProcessLayerInfo())</div><div class="ttdoc">Configure the detection output layer CPP function. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00218">CPPDetectionPostProcessLayer.cpp:218</a></div></div>
<div class="ttc" id="src_2common_2utils_2_log_8h_xhtml"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab8938bcb3ec0f5f8d93285eb3a28b701"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">arm_compute::qasymm8_t</a></div><div class="ttdeci">uint8_t qasymm8_t</div><div class="ttdoc">8 bit quantized asymmetric scalar value </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00039">QuantizationInfo.h:39</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00541">Validate.h:541</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a36e65a7f80a07a2393e6a1cadd974740"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">arm_compute::DetectionPostProcessLayerInfo::detection_per_class</a></div><div class="ttdeci">unsigned int detection_per_class() const</div><div class="ttdoc">Get detection per class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01133">Types.h:1133</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af486d5eb4935eb5601d9c5fcc42be220"><div class="ttname"><a href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">arm_compute::qasymm8_signed_t</a></div><div class="ttdeci">int8_t qasymm8_signed_t</div><div class="ttdoc">8 bit signed quantized asymmetric scalar value </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00038">QuantizationInfo.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">arm_compute::DetectionPostProcessLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01081">Types.h:1081</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_adda82c28c368106734620f105bb0e1e3"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">arm_compute::DetectionPostProcessLayerInfo::num_classes</a></div><div class="ttdeci">unsigned int num_classes() const</div><div class="ttdoc">Get num classes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01148">Types.h:1148</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a24954cca5108a24706441fd99a7fb04c"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">arm_compute::Tensor::buffer</a></div><div class="ttdeci">uint8_t * buffer() const override</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory. ...</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00043">Tensor.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><div class="ttname"><a href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">arm_compute::dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(int8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00372">QuantizationInfo.h:372</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="src_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_non_maximum_suppression_xhtml_ad8387a0ef4a1e0f7382c06146857e4be"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ad8387a0ef4a1e0f7382c06146857e4be">arm_compute::CPPNonMaximumSuppression::configure</a></div><div class="ttdeci">void configure(const ITensor *bboxes, const ITensor *scores, ITensor *indices, unsigned int max_output_size, const float score_threshold, const float nms_threshold)</div><div class="ttdoc">Configure the function to perform non maximal suppression. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_non_maximum_suppression_8cpp_source.xhtml#l00032">CPPNonMaximumSuppression.cpp:32</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_simple_function_xhtml_a92fe532c342ae2b07956a65520c05362"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">arm_compute::ICPPSimpleFunction::run</a></div><div class="ttdeci">void run() override final</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_simple_function_8cpp_source.xhtml#l00035">ICPPSimpleFunction.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="_c_p_p_detection_post_process_layer_8h_xhtml"><div class="ttname"><a href="_c_p_p_detection_post_process_layer_8h.xhtml">CPPDetectionPostProcessLayer.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_9240672d44dfdb0f539b385a1f058d2d.xhtml">CPP</a></li><li class="navelem"><a class="el" href="dir_8f7fe1d9d655d949f37b90c9cd0a7992.xhtml">functions</a></li><li class="navelem"><a class="el" href="_c_p_p_detection_post_process_layer_8cpp.xhtml">CPPDetectionPostProcessLayer.cpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:54 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
