<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/backends/ValidateHelpers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_validate_helpers_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ValidateHelpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_validate_helpers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_VALIDATE_HELPERS_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_VALIDATE_HELPERS_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_logger_8h.xhtml">arm_compute/graph/Logger.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_tensor_8h.xhtml">arm_compute/graph/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_nodes_8h.xhtml">arm_compute/graph/nodes/Nodes.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_info_8h.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span>backends</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/** Returns backing tensor info of a given tensor</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in] tensor Tensor to extract the backing tensor from</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @return Backing tensor tensor info if present else nullptr</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">   50</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> ((tensor == <span class="keyword">nullptr</span>) || (tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>() == <span class="keyword">nullptr</span>)) ? nullptr : tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">tensor</a>().<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/** Validates a ArgMinMax layer node</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @tparam ArgMinMax layer function type</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ArgMinMaxLayer&gt;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#abe1955ea22f2b8a4d12e57dd361a88ea">   64</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#abe1955ea22f2b8a4d12e57dd361a88ea">validate_arg_min_max_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml">ArgMinMaxLayerNode</a> &amp;node)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ArgMinMaxLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ArgMinMaxLayer::validate</a>(input, node.<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>(), output, node.<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a397a10d63c17d6505a7470fa35f344e0">reduction_operation</a>());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">/** Validates a Bounding Box Transform layer node</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * @tparam BoundingBoxTransformLayer  Bounding Box Transform layer function type</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> BoundingBoxTransformLayer&gt;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a94ce5eb74599047cd5f8b735e2464d12">   87</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a94ce5eb74599047cd5f8b735e2464d12">validate_bounding_box_transform_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a> &amp;node)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating BoundingBoxTransformLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 2);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *deltas    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *output    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> bbox_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#a7a5bf7cea9e9cf19a6cf3e5240c5fff7">info</a>();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">BoundingBoxTransformLayer::validate</a>(input, output, deltas, bbox_info);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/** Validates a Channel Shuffle layer node</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> * @tparam ChannelShuffleLayer  Channel Shuffle layer function type</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ChannelShuffleLayer&gt;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab4632d71bdb4542008ad33b7b74b7b2c">  111</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab4632d71bdb4542008ad33b7b74b7b2c">validate_channel_shuffle_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;node)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ChannelShuffle node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ChannelShuffleLayer::validate</a>(input, output, num_groups);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/** Validates a Convolution layer node</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * @tparam ConvolutionLayer          Default Convolution layer function type</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @tparam DirectConvolutionLayer    Direct Convolution layer function type</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @tparam GEMMConvolutionLayer      GEMM Convolution layer function type</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @tparam WinogradConvolutionLayer  Winograd Convolution layer function type</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConvolutionLayer, <span class="keyword">typename</span> DirectConvolutionLayer, <span class="keyword">typename</span> GEMMConvolutionLayer, <span class="keyword">typename</span> WinogradConvolutionLayer&gt;</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a84a36a0cae1ceb4313891ca841b11cb3">  137</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a84a36a0cae1ceb4313891ca841b11cb3">validate_convolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ConvolutionLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 3);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *weights = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *biases  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input-&gt;data_type()))</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a16b2c6652c4cee5b566daf018f768a42">convolution_method</a>();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>              fast_math      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">fast_math_hint</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">FastMathHint::Enabled</a>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>     = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> status{};</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">switch</span>(conv_algorithm)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">ConvolutionMethod::Direct</a>:</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(num_groups != 1, <span class="stringliteral">&quot;DirectConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">DirectConvolutionLayer::validate</a>(input, weights, biases, output, conv_info);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">ConvolutionMethod::GEMM</a>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">GEMMConvolutionLayer::validate</a>(input, weights, biases, output, conv_info,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                                    <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 1), <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), num_groups);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">ConvolutionMethod::Winograd</a>:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(num_groups != 1, <span class="stringliteral">&quot;WinogradConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">WinogradConvolutionLayer::validate</a>(input, weights, biases, output, conv_info, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), fast_math);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">ConvolutionMethod::Default</a>:</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ConvolutionLayer::validate</a>(input, weights, biases, output, conv_info,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 1), <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), fast_math, num_groups);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <a class="code" href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a>(<span class="stringliteral">&quot;Unsupported convolution method&quot;</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/** Validates a Convolution layer node</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> * @tparam GEMMConvolutionLayer      GEMM Convolution layer function type</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> GEMMConvolutionLayer&gt;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aadae509bd5e0f1cc2f9efb40185a9f94">  195</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aadae509bd5e0f1cc2f9efb40185a9f94">validate_fused_convolution_with_post_op</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">FusedConvolutionWithPostOpNode</a> &amp;node)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating fused ConvolutionLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 4);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *weights = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *biases  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input-&gt;data_type()))</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">//const ConvolutionMethod conv_algorithm = node.convolution_method();</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">//const bool              fast_math      = node.fast_math_hint() == FastMathHint::Enabled;</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">GEMMConvolutionLayer::validate</a>(input, weights, biases, output, conv_info,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                          <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 1), <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), num_groups);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">/** Validates a Depthwise Convolution layer node</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * @tparam DepthwiseConvolutionLayer    Default Depthwise Convolution layer type</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DepthwiseConvolutionLayer&gt;</div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#acdd027e9c5015bdd7102c142b553f222">  231</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#acdd027e9c5015bdd7102c142b553f222">validate_depthwise_convolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DepthwiseConvolutionLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 3);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *weights = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *biases  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> dwc_algorithm    = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a8cefd89d2de49691e778c8d5a08ac92f">depthwise_convolution_method</a>();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                        depth_multiplier = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a88e38a50a2e964b19521fe8f2e9a144f">depth_multiplier</a>();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> status{};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">switch</span>(dwc_algorithm)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">DepthwiseConvolutionMethod::Default</a>:</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">DepthwiseConvolutionMethod::Optimized3x3</a>:</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">DepthwiseConvolutionLayer::validate</a>(input, weights, biases, output, conv_info, depth_multiplier);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <a class="code" href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a>(<span class="stringliteral">&quot;Unsupported depthwise convolution method&quot;</span>);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">/** Validates a depth to space layer node</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"> * @tparam DequantizationLayer Dequantize layer type</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DepthToSpaceLayer&gt;</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afdbf17a1f637023e440bd846fc9f22e3">  270</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afdbf17a1f637023e440bd846fc9f22e3">validate_depth_to_space_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml">DepthToSpaceLayerNode</a> &amp;node)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionOutputLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">DepthToSpaceLayer::validate</a>(input, output, node.<a class="code" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a20c3747fefdcc35a82acee379098a840">block_shape</a>());</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">/** Validates a dequantize layer node</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> * @tparam DequantizationLayer Dequantize layer type</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DequantizationLayer&gt;</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a891884386a167090b520930b164870f9">  291</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a891884386a167090b520930b164870f9">validate_dequantization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a> &amp;node)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionOutputLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">DequantizationLayer::validate</a>(input, output);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">/** Validates a detection output layer node</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * @tparam DetectionOutputLayer DetectionOutput layer type</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DetectionOutputLayer&gt;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a432fd13bfda1435e0d3a8aa5b3dddf4f">  312</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a432fd13bfda1435e0d3a8aa5b3dddf4f">validate_detection_output_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;node)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionOutputLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 3);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *input0      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *input1      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *input2      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *output      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> detect_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#a4491336dccd18464fbbf617c981736cf">detection_output_info</a>();</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">DetectionOutputLayer::validate</a>(input0, input1, input2, output, detect_info);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">/** Validates a detection post process layer node</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> * @tparam DetectionPostProcessLayer DetectionOutput layer type</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DetectionPostProcessLayer&gt;</div><div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9c20f659744b7e6854294198184c60f1">  336</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9c20f659744b7e6854294198184c60f1">validate_detection_post_process_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;node)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionPostProcessLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 3);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 4);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *input0      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *input1      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *input2      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output0     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output1     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(1));</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output2     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(2));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output3     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(3));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> detect_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#a23ab280af362e61b91763038fc3194f4">detection_post_process_info</a>();</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">DetectionPostProcessLayer::validate</a>(input0, input1, input2, output0, output1, output2, output3, detect_info);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">/** Validates a Generate Proposals layer node</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> * @tparam GenerateProposalsLayer Generate Proposals layer type</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> GenerateProposalsLayer&gt;</div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a40f232193e819dfc9dc9edbabefd5b7a">  364</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a40f232193e819dfc9dc9edbabefd5b7a">validate_generate_proposals_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a> &amp;node)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating GenerateProposalsLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 3);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 3);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *scores              = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *deltas              = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *anchors             = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *proposals           = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *scores_out          = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(1));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *num_valid_proposals = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(2));</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>                = node.<a class="code" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#acfa649555ddb4df4cc5ae52b8205ee5f">info</a>();</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">GenerateProposalsLayer::validate</a>(scores, deltas, anchors, proposals, scores_out, num_valid_proposals, info);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;}</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">/** Validates a L2Normalization layer node</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment"> * @tparam L2Normalization layer type</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> L2NormalizeLayer&gt;</div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a18d72f2843c0361729c9fbf30c518c9b">  391</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a18d72f2843c0361729c9fbf30c518c9b">validate_l2_normalize_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml">L2NormalizeLayerNode</a> &amp;node)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating L2NormalizeLayerNode node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordtype">int</span>                       axis    = node.<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#a18ffaef3d2889fbba089ffbf7ea2f12d">axis</a>();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordtype">float</span>                     <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">epsilon</a>();</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">L2NormalizeLayer::validate</a>(input, output, axis, epsilon);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">/** Validates a NormalizePlanarYUV layer node</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"> * @tparam NormalizePlanarYUVLayer layer type</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> NormalizePlanarYUVLayer&gt;</div><div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad6c95a270f3275bd5711ce6ec193c4ff">  416</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad6c95a270f3275bd5711ce6ec193c4ff">validate_normalize_planar_yuv_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a> &amp;node)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;{</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating NormalizePlanarYUVLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 3);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *mean   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacestd.xhtml">std</a>    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">NormalizePlanarYUVLayer::validate</a>(input, output, mean, std);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">/** Validates a pad layer node</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment"> * @tparam PadLayer Pad layer type</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PadLayer&gt;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ada206e294c8d07093a8a50e08172c272">  441</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ada206e294c8d07093a8a50e08172c272">validate_pad_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a> &amp;node)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PadLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a>        &amp;padding = node.<a class="code" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#af98c64901f2fef6b6e26563bbb358f7e">padding</a>();</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">PadLayer::validate</a>(input, output, padding);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">/** Validates a permute layer node</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"> * @tparam PermuteLayer Permute layer type</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PermuteLayer&gt;</div><div class="line"><a name="l00464"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aeb6f53f28ef137932823d17554043056">  464</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aeb6f53f28ef137932823d17554043056">validate_permute_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;node)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PermuteLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a> &amp;perm   = node.<a class="code" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#a509cfef89595612c50bce4ef1eae181b">permutation_vector</a>();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">PermuteLayer::validate</a>(input, output, perm);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">/** Validates a PRelu layer node</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> * @tparam PReluLayer PRelu layer type</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PReluLayer&gt;</div><div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5f83a0fbf23529c0f205c6732b3c8312">  487</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5f83a0fbf23529c0f205c6732b3c8312">validate_prelu_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a> &amp;node)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PRelu node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 2);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *alpha  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">PReluLayer::validate</a>(input, alpha, output);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">/** Validates a priorbox layer node</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> * @tparam PriorBoxLayer PriorBox layer type</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PriorBoxLayer&gt;</div><div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a76682a55960d790a11357ab922a5d659">  510</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a76682a55960d790a11357ab922a5d659">validate_priorbox_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a> &amp;node)</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PriorBoxLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 2);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *input0     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *input1     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a>   prior_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#a0f62f59c57a7cdbdc20f7d850f1dfd8c">priorbox_info</a>();</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">PriorBoxLayer::validate</a>(input0, input1, output, prior_info);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;}</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">/** Validates a Quantization layer node</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> * @tparam QuantizationLayer Quantization layer type</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QuantizationLayer&gt;</div><div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a959fdd41c94dde46a21dd2bf6d50c48b">  534</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a959fdd41c94dde46a21dd2bf6d50c48b">validate_quantization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a> &amp;node)</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;{</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating QuantizationLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">QuantizationLayer::validate</a>(input, output);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;}</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">/** Validates a Reduction operation layer node</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"> * @tparam ReductionLayer Reduction layer type</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReductionLayer&gt;</div><div class="line"><a name="l00557"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5361e72d5aba950699e0596702026543">  557</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5361e72d5aba950699e0596702026543">validate_reduction_operation_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml">ReductionLayerNode</a> &amp;node)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ReductionLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ReductionLayer::validate</a>(input, output, node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>(), node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5f4e9cd96ebc9f9a93c5e35f98375199">op</a>(), node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#ab2c4ec7190acaef8abd6ddeec407d70d">keep_dims</a>());</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">/** Validates a Reorg layer node</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment"> * @tparam ReorgLayer Reorg layer type</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReorgLayer&gt;</div><div class="line"><a name="l00581"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a4451f539afe63a19da3d17ee95582277">  581</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a4451f539afe63a19da3d17ee95582277">validate_reorg_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a> &amp;node)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;{</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ReorgLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ReorgLayer::validate</a>(input, output, node.<a class="code" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#a47d010db0ab9940009209db7cf529f36">stride</a>());</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;}</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">/** Validates a Reshape layer node</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment"> * @tparam ReshapeLayer Reshape layer type</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReshapeLayer&gt;</div><div class="line"><a name="l00604"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad4cb768bba67e8ccb02d0903da459ecb">  604</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad4cb768bba67e8ccb02d0903da459ecb">validate_reshape_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;node)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;{</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ReshapeLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ReshapeLayer::validate</a>(input, output);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;}</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment">/** Validates a ROI Align layer node</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment"> * @tparam ROIAlignLayer ROIAlign layer type</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ROIAlignLayer&gt;</div><div class="line"><a name="l00627"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a366fca5f1c0a2ed6ee50e9d619d4f2e5">  627</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a366fca5f1c0a2ed6ee50e9d619d4f2e5">validate_roi_align_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a> &amp;node)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;{</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ROIAlignLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 2);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *rois      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;pool_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#a51a2c95a0b98cf92e99d06672db84060">pooling_info</a>();</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">ROIAlignLayer::validate</a>(input, rois, output, pool_info);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;}</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment">/** Validates a Slice layer node</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment"> * @tparam SliceLayer Slice layer function type</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SliceLayer&gt;</div><div class="line"><a name="l00652"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3c749cc534b2801f46ec56d78abc7fef">  652</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3c749cc534b2801f46ec56d78abc7fef">validate_slice_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a> &amp;node)</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;{</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating Slice node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>         starts = node.<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">starts</a>();</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>         ends   = node.<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">ends</a>();</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">SliceLayer::validate</a>(input, output, starts, ends);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;}</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment">/** Validates a Strided Slice layer node</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment"> * @tparam StridedSliceLayer Strided Slice layer function type</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Str<span class="keywordtype">id</span>edSliceLayer&gt;</div><div class="line"><a name="l00676"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1924390ed11084a6251d381da645d7b4">  676</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1924390ed11084a6251d381da645d7b4">validate_strided_slice_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml">StridedSliceLayerNode</a> &amp;node)</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;{</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating StridedSlice node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>           starts  = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">starts</a>();</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>           ends    = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">ends</a>();</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">BiStrides</a>             strides = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#ae42377172cf17e3ac33205018768bd62">strides</a>();</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>    = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a9ed1b4c467dc74e107d884251fab3193">strided_slice_info</a>();</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">StridedSliceLayer::validate</a>(input, output, starts, ends, strides, info.<a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a29ef3fb90fdd7ef335d67c286dd0d7f3">begin_mask</a>(), info.<a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#aa7396e4f53e9cf7a7da5d90e92c74447">end_mask</a>(), info.<a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#afa9ae68895fa738879123fbdf60447ab">shrink_axis_mask</a>());</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;}</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">/** Validates a element-wise layer node</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EltwiseLayerFunctions&gt;</div><div class="line"><a name="l00700"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a521e6f9a27d6b6ffe99d42724843992e">  700</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a521e6f9a27d6b6ffe99d42724843992e">validate_eltwise_Layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;node)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;{</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating EltwiseLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 2);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *input1         = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *input2         = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output         = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>          eltwise_op     = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#acda6687f669fe87581d7bff8fcd82ebc">eltwise_operation</a>();</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>             convert_policy = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#aa7b3781f10fc0ac73a9a4f748e22d3d4">convert_policy</a>();</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>            round_policy   = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a0f09377db195c78de49f1d2be26ee649">rounding_policy</a>();</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>       act_info       = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>          quant_info     = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#af7af5fb47f0648c30118689c9b1e022c">output_quant_info</a>();</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">EltwiseOperation::Add</a>)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">EltwiseLayerFunctions::ArithmeticAddition::validate</a>(input1, input2, output, convert_policy, act_info);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    }</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">EltwiseOperation::Sub</a>)</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    {</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">EltwiseLayerFunctions::ArithmeticSubtraction::validate</a>(input1, input2, output, convert_policy, act_info);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">EltwiseOperation::Mul</a>)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    {</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">EltwiseLayerFunctions::PixelWiseMultiplication::validate</a>(input1, input2, output, 1.0f, convert_policy, round_policy, act_info);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">EltwiseOperation::Max</a>)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    {</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">EltwiseLayerFunctions::ElementwiseMax::validate</a>(input1, input2, output, act_info);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    }</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">EltwiseOperation::Div</a>)</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    {</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">EltwiseLayerFunctions::ArithmeticDivision::validate</a>(input1, input2, output, act_info);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported element-wise operation!&quot;</span>);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment">/** Validates a unary element-wise layer node</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="comment"> * @param[in] node Node to validate</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment"> * @return Status</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> UnaryEltwiseLayerFunctions&gt;</div><div class="line"><a name="l00750"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afcae75468b65ea13c0ab86e97349bfc1">  750</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afcae75468b65ea13c0ab86e97349bfc1">validate_unary_eltwise_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml">UnaryEltwiseLayerNode</a> &amp;node)</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;{</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating EltwiseLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 1);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *output     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">UnaryEltwiseOperation</a> eltwise_op = node.<a class="code" href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#a2cbac381e95fd352a594977fb12754dc">eltwise_descriptor</a>().<a class="code" href="structarm__compute_1_1graph_1_1descriptors_1_1_unary_eltwise_layer_descriptor.xhtml#a36c3d2d309d852df2e5cb7df0e2332cf">op</a>;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">UnaryEltwiseOperation::Exp</a>)</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    {</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">UnaryEltwiseLayerFunctions::ExpLayer::validate</a>(input, output);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    }</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    {</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported unary element-wise operation!&quot;</span>);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    }</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;}</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;} <span class="comment">// namespace backends</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_VALIDATE_HELPERS_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns node&amp;#39;s name. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00108">INode.cpp:108</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a40f232193e819dfc9dc9edbabefd5b7a"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a40f232193e819dfc9dc9edbabefd5b7a">arm_compute::graph::backends::detail::validate_generate_proposals_layer</a></div><div class="ttdeci">Status validate_generate_proposals_layer(GenerateProposalsLayerNode &amp;node)</div><div class="ttdoc">Validates a Generate Proposals layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00364">ValidateHelpers.h:364</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aadae509bd5e0f1cc2f9efb40185a9f94"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aadae509bd5e0f1cc2f9efb40185a9f94">arm_compute::graph::backends::detail::validate_fused_convolution_with_post_op</a></div><div class="ttdeci">Status validate_fused_convolution_with_post_op(FusedConvolutionWithPostOpNode &amp;node)</div><div class="ttdoc">Validates a Convolution layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00195">ValidateHelpers.h:195</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">arm_compute::graph::EltwiseLayerNode</a></div><div class="ttdoc">Eltwise Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00034">EltwiseLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a94ce5eb74599047cd5f8b735e2464d12"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a94ce5eb74599047cd5f8b735e2464d12">arm_compute::graph::backends::detail::validate_bounding_box_transform_layer</a></div><div class="ttdeci">Status validate_bounding_box_transform_layer(BoundingBoxTransformLayerNode &amp;node)</div><div class="ttdoc">Validates a Bounding Box Transform layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00087">ValidateHelpers.h:87</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a048af4e9fc68526bf6d39e80e043a456"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">arm_compute::experimental::dynamic_fusion::validate</a></div><div class="ttdeci">Status validate(const OperatorGraph &amp;op_graph)</div><div class="ttdoc">Return the validity of op_graph, usually after performing an operation (e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00121">OperatorGraph.cpp:121</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml">arm_compute::GenerateProposalsInfo</a></div><div class="ttdoc">Generate Proposals Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01441">Types.h:1441</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00109">Types.h:109</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">arm_compute::graph::ConvolutionMethod::Direct</a></div><div class="ttdoc">Deep direct convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reorg_layer_node_xhtml_a47d010db0ab9940009209db7cf529f36"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#a47d010db0ab9940009209db7cf529f36">arm_compute::graph::ReorgLayerNode::stride</a></div><div class="ttdeci">int stride() const</div><div class="ttdoc">Stride value to use for reorganizing the values in the output tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reorg_layer_node_8cpp_source.xhtml#l00041">ReorgLayerNode.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_aa7396e4f53e9cf7a7da5d90e92c74447"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#aa7396e4f53e9cf7a7da5d90e92c74447">arm_compute::StridedSliceLayerInfo::end_mask</a></div><div class="ttdeci">int32_t end_mask() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01947">Types.h:1947</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_a0f09377db195c78de49f1d2be26ee649"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a0f09377db195c78de49f1d2be26ee649">arm_compute::graph::EltwiseLayerNode::rounding_policy</a></div><div class="ttdeci">RoundingPolicy rounding_policy() const</div><div class="ttdoc">Rounding policy accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00051">EltwiseLayerNode.cpp:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node_xhtml_a51a2c95a0b98cf92e99d06672db84060"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#a51a2c95a0b98cf92e99d06672db84060">arm_compute::graph::ROIAlignLayerNode::pooling_info</a></div><div class="ttdeci">const ROIPoolingLayerInfo &amp; pooling_info() const</div><div class="ttdoc">ROIPoolingLayerInfo accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00043">ROIAlignLayerNode.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aeb6f53f28ef137932823d17554043056"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aeb6f53f28ef137932823d17554043056">arm_compute::graph::backends::detail::validate_permute_layer</a></div><div class="ttdeci">Status validate_permute_layer(PermuteLayerNode &amp;node)</div><div class="ttdoc">Validates a permute layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00464">ValidateHelpers.h:464</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00453">Types.h:453</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a45c1ef0023ce430d009ec79c97761544"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor.cpp:55</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a807d0a897f65b2fa1f8ea92892fa2c2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">arm_compute::graph::ConvolutionLayerNode::fast_math_hint</a></div><div class="ttdeci">FastMathHint fast_math_hint() const</div><div class="ttdoc">Fast math hint accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00061">ConvolutionLayerNode.cpp:61</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a88e38a50a2e964b19521fe8f2e9a144f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a88e38a50a2e964b19521fe8f2e9a144f">arm_compute::graph::DepthwiseConvolutionLayerNode::depth_multiplier</a></div><div class="ttdeci">int depth_multiplier() const</div><div class="ttdoc">Depth multiplier accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00043">DepthwiseConvolutionLayerNode.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00404">ConvolutionLayer.cpp:404</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::ChannelShuffleLayerNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00040">ChannelShuffleLayerNode.cpp:40</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a75d7c8bdf0059bb235880f8ef8d190bc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const</div><div class="ttdoc">Returns number of outputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00184">INode.cpp:184</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_tensor_handle_xhtml_a91efb5b2e262ec5e55059ff1fd9accc6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">arm_compute::graph::ITensorHandle::tensor</a></div><div class="ttdeci">virtual arm_compute::ITensor &amp; tensor()=0</div><div class="ttdoc">Backend tensor object accessor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">arm_compute::graph::NormalizePlanarYUVLayerNode</a></div><div class="ttdoc">Batch Normalization Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_normalize_planar_y_u_v_layer_node_8h_source.xhtml#l00034">NormalizePlanarYUVLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5f83a0fbf23529c0f205c6732b3c8312"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5f83a0fbf23529c0f205c6732b3c8312">arm_compute::graph::backends::detail::validate_prelu_layer</a></div><div class="ttdeci">Status validate_prelu_layer(PReluLayerNode &amp;node)</div><div class="ttdoc">Validates a PRelu layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00487">ValidateHelpers.h:487</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_a5f4e9cd96ebc9f9a93c5e35f98375199"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5f4e9cd96ebc9f9a93c5e35f98375199">arm_compute::graph::ReductionLayerNode::op</a></div><div class="ttdeci">ReductionOperation op() const</div><div class="ttdoc">op accessor </div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00042">ReductionLayerNode.cpp:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9c20f659744b7e6854294198184c60f1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9c20f659744b7e6854294198184c60f1">arm_compute::graph::backends::detail::validate_detection_post_process_layer</a></div><div class="ttdeci">Status validate_detection_post_process_layer(DetectionPostProcessLayerNode &amp;node)</div><div class="ttdoc">Validates a detection post process layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00336">ValidateHelpers.h:336</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a18d72f2843c0361729c9fbf30c518c9b"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a18d72f2843c0361729c9fbf30c518c9b">arm_compute::graph::backends::detail::validate_l2_normalize_layer</a></div><div class="ttdeci">Status validate_l2_normalize_layer(L2NormalizeLayerNode &amp;node)</div><div class="ttdoc">Validates a L2Normalization layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00391">ValidateHelpers.h:391</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_permute_layer_node_xhtml_a509cfef89595612c50bce4ef1eae181b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#a509cfef89595612c50bce4ef1eae181b">arm_compute::graph::PermuteLayerNode::permutation_vector</a></div><div class="ttdeci">const PermutationVector &amp; permutation_vector() const</div><div class="ttdoc">Permutation vector accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_permute_layer_node_8cpp_source.xhtml#l00042">PermuteLayerNode.cpp:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::FastMathHint::Enabled</a></div><div class="ttdoc">Fast math enabled for Convolution layer. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reorg_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">arm_compute::graph::ReorgLayerNode</a></div><div class="ttdoc">Reorg Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_reorg_layer_node_8h_source.xhtml#l00034">ReorgLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a8cefd89d2de49691e778c8d5a08ac92f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a8cefd89d2de49691e778c8d5a08ac92f">arm_compute::graph::DepthwiseConvolutionLayerNode::depthwise_convolution_method</a></div><div class="ttdeci">DepthwiseConvolutionMethod depthwise_convolution_method() const</div><div class="ttdoc">Depthwise convolution layer method accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00053">DepthwiseConvolutionLayerNode.cpp:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_acda6687f669fe87581d7bff8fcd82ebc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#acda6687f669fe87581d7bff8fcd82ebc">arm_compute::graph::EltwiseLayerNode::eltwise_operation</a></div><div class="ttdeci">EltwiseOperation eltwise_operation() const</div><div class="ttdoc">Eltwise operation accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00041">EltwiseLayerNode.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_slice_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">arm_compute::graph::SliceLayerNode</a></div><div class="ttdoc">Slice Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8h_source.xhtml#l00036">SliceLayerNode.h:36</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01639">Types.h:1639</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_permute_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">arm_compute::graph::PermuteLayerNode</a></div><div class="ttdoc">Permute Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_permute_layer_node_8h_source.xhtml#l00034">PermuteLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::ConvolutionLayerNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups in convolution accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00071">ConvolutionLayerNode.cpp:71</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">arm_compute::graph::EltwiseOperation::Sub</a></div><div class="ttdoc">Arithmetic subtraction. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">arm_compute::graph::BoundingBoxTransformLayerNode</a></div><div class="ttdoc">Bounding Box Transform Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_bounding_box_transform_layer_node_8h_source.xhtml#l00035">BoundingBoxTransformLayerNode.h:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a3c749cc534b2801f46ec56d78abc7fef"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3c749cc534b2801f46ec56d78abc7fef">arm_compute::graph::backends::detail::validate_slice_layer</a></div><div class="ttdeci">Status validate_slice_layer(SliceLayerNode &amp;node)</div><div class="ttdoc">Validates a Slice layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00652">ValidateHelpers.h:652</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node_xhtml_a2cbac381e95fd352a594977fb12754dc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#a2cbac381e95fd352a594977fb12754dc">arm_compute::graph::UnaryEltwiseLayerNode::eltwise_descriptor</a></div><div class="ttdeci">descriptors::UnaryEltwiseLayerDescriptor eltwise_descriptor() const</div><div class="ttdoc">Unary eltwise layer descriptor. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00125">EltwiseLayerNode.cpp:125</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_pad_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">arm_compute::graph::PadLayerNode</a></div><div class="ttdoc">Pad Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_node_8h_source.xhtml#l00034">PadLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02073">Types.h:2073</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">arm_compute::graph::UnaryEltwiseOperation::Exp</a></div><div class="ttdoc">Exp. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a4451f539afe63a19da3d17ee95582277"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a4451f539afe63a19da3d17ee95582277">arm_compute::graph::backends::detail::validate_reorg_layer</a></div><div class="ttdeci">Status validate_reorg_layer(ReorgLayerNode &amp;node)</div><div class="ttdoc">Validates a Reorg layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00581">ValidateHelpers.h:581</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">arm_compute::graph::ConvolutionLayerNode</a></div><div class="ttdoc">Convolution Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8h_source.xhtml#l00034">ConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">arm_compute::graph::EltwiseOperation::Div</a></div><div class="ttdoc">Arithmetic division. </div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00071">QuantizationInfo.h:71</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::ConvolutionMethod::GEMM</a></div><div class="ttdoc">GEMM based convolution. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a521e6f9a27d6b6ffe99d42724843992e"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a521e6f9a27d6b6ffe99d42724843992e">arm_compute::graph::backends::detail::validate_eltwise_Layer</a></div><div class="ttdeci">Status validate_eltwise_Layer(EltwiseLayerNode &amp;node)</div><div class="ttdoc">Validates a element-wise layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00700">ValidateHelpers.h:700</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_pad_layer_node_xhtml_af98c64901f2fef6b6e26563bbb358f7e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#af98c64901f2fef6b6e26563bbb358f7e">arm_compute::graph::PadLayerNode::padding</a></div><div class="ttdeci">const PaddingList &amp; padding() const</div><div class="ttdoc">Padding list accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_node_8cpp_source.xhtml#l00042">PadLayerNode.cpp:42</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml_acd39aa81617eab4d3482fa904d5dee87"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">arm_compute::graph::L2NormalizeLayerNode::epsilon</a></div><div class="ttdeci">float epsilon() const</div><div class="ttdoc">epsilon accessors </div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8cpp_source.xhtml#l00080">L2NormalizeLayerNode.cpp:80</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a432fd13bfda1435e0d3a8aa5b3dddf4f"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a432fd13bfda1435e0d3a8aa5b3dddf4f">arm_compute::graph::backends::detail::validate_detection_output_layer</a></div><div class="ttdeci">Status validate_detection_output_layer(DetectionOutputLayerNode &amp;node)</div><div class="ttdoc">Validates a detection output layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00312">ValidateHelpers.h:312</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_af7af5fb47f0648c30118689c9b1e022c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#af7af5fb47f0648c30118689c9b1e022c">arm_compute::graph::EltwiseLayerNode::output_quant_info</a></div><div class="ttdeci">QuantizationInfo output_quant_info() const</div><div class="ttdoc">Returns output quantization info. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00061">EltwiseLayerNode.cpp:61</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_a5c86a49e3cc9c3c03c1c3fb1e027e22b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">arm_compute::graph::ReductionLayerNode::axis</a></div><div class="ttdeci">unsigned int axis() const</div><div class="ttdoc">axis accessor </div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00047">ReductionLayerNode.cpp:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_ab2c4ec7190acaef8abd6ddeec407d70d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#ab2c4ec7190acaef8abd6ddeec407d70d">arm_compute::graph::ReductionLayerNode::keep_dims</a></div><div class="ttdeci">bool keep_dims() const</div><div class="ttdoc">keep_dims accessor </div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00052">ReductionLayerNode.cpp:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_quantization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">arm_compute::graph::QuantizationLayerNode</a></div><div class="ttdoc">Quantization Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_layer_node_8h_source.xhtml#l00034">QuantizationLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a366fca5f1c0a2ed6ee50e9d619d4f2e5"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a366fca5f1c0a2ed6ee50e9d619d4f2e5">arm_compute::graph::backends::detail::validate_roi_align_layer</a></div><div class="ttdeci">Status validate_roi_align_layer(ROIAlignLayerNode &amp;node)</div><div class="ttdoc">Validates a ROI Align layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00627">ValidateHelpers.h:627</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a836dbfcb541878d045cac29f9b35d5cb"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">arm_compute::graph::StridedSliceLayerNode::ends</a></div><div class="ttdeci">Coordinates ends() const</div><div class="ttdoc">End coordinates accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00050">StridedSliceLayerNode.cpp:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00159">INode.cpp:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::EltwiseLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00056">EltwiseLayerNode.cpp:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_prior_box_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">arm_compute::graph::PriorBoxLayerNode</a></div><div class="ttdoc">PriorBox Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_prior_box_layer_node_8h_source.xhtml#l00034">PriorBoxLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_dequantization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">arm_compute::graph::DequantizationLayerNode</a></div><div class="ttdoc">Dequantize Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_dequantization_layer_node_8h_source.xhtml#l00038">DequantizationLayerNode.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">arm_compute::graph::DepthwiseConvolutionMethod</a></div><div class="ttdeci">DepthwiseConvolutionMethod</div><div class="ttdoc">Supported Depthwise Convolution layer methods. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00135">Types.h:135</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">arm_compute::graph::EltwiseOperation::Max</a></div><div class="ttdoc">Arithmetic maximum. </div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_slice_layer_node_xhtml_a476f08a0729f8861bec63b7e62c7b514"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">arm_compute::graph::SliceLayerNode::starts</a></div><div class="ttdeci">Coordinates starts() const</div><div class="ttdoc">Start coordinates accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8cpp_source.xhtml#l00042">SliceLayerNode.cpp:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_detection_post_process_layer_node_xhtml_a23ab280af362e61b91763038fc3194f4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#a23ab280af362e61b91763038fc3194f4">arm_compute::graph::DetectionPostProcessLayerNode::detection_post_process_info</a></div><div class="ttdeci">DetectionPostProcessLayerInfo detection_post_process_info() const</div><div class="ttdoc">DetectionPostProcess metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_node_8cpp_source.xhtml#l00042">DetectionPostProcessLayerNode.cpp:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_slice_layer_node_xhtml_a836dbfcb541878d045cac29f9b35d5cb"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">arm_compute::graph::SliceLayerNode::ends</a></div><div class="ttdeci">Coordinates ends() const</div><div class="ttdoc">End coordinates accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8cpp_source.xhtml#l00047">SliceLayerNode.cpp:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::DepthwiseConvolutionLayerNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00058">DepthwiseConvolutionLayerNode.cpp:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5ea90a25ef8059df2d2e51b82991ebf3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const</div><div class="ttdoc">Returns node&amp;#39;s ID. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00103">INode.cpp:103</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_rounding_8h_source.xhtml#l00030">Rounding.h:30</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_afdbf17a1f637023e440bd846fc9f22e3"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afdbf17a1f637023e440bd846fc9f22e3">arm_compute::graph::backends::detail::validate_depth_to_space_layer</a></div><div class="ttdeci">Status validate_depth_to_space_layer(DepthToSpaceLayerNode &amp;node)</div><div class="ttdoc">Validates a depth to space layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00270">ValidateHelpers.h:270</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1descriptors_1_1_unary_eltwise_layer_descriptor_xhtml_a36c3d2d309d852df2e5cb7df0e2332cf"><div class="ttname"><a href="structarm__compute_1_1graph_1_1descriptors_1_1_unary_eltwise_layer_descriptor.xhtml#a36c3d2d309d852df2e5cb7df0e2332cf">arm_compute::graph::descriptors::UnaryEltwiseLayerDescriptor::op</a></div><div class="ttdeci">UnaryEltwiseOperation op</div><div class="ttdoc">Unary element-wise operation to perform. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_descriptors_8h_source.xhtml#l00110">LayerDescriptors.h:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ad4cb768bba67e8ccb02d0903da459ecb"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad4cb768bba67e8ccb02d0903da459ecb">arm_compute::graph::backends::detail::validate_reshape_layer</a></div><div class="ttdeci">Status validate_reshape_layer(ReshapeLayerNode &amp;node)</div><div class="ttdoc">Validates a Reshape layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00604">ValidateHelpers.h:604</a></div></div>
<div class="ttc" id="graph_2_tensor_8h_xhtml"><div class="ttname"><a href="graph_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml">arm_compute::PriorBoxLayerInfo</a></div><div class="ttdoc">PriorBox layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00825">Types.h:825</a></div></div>
<div class="ttc" id="_i_tensor_info_8h_xhtml"><div class="ttname"><a href="_i_tensor_info_8h.xhtml">ITensorInfo.h</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml"><div class="ttname"><a href="graph_2_logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">arm_compute::graph::ChannelShuffleLayerNode</a></div><div class="ttdoc">Channel Shuffle Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_channel_shuffle_layer_node_8h_source.xhtml#l00034">ChannelShuffleLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::EltwiseOperation::Add</a></div><div class="ttdoc">Arithmetic addition. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reshape_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">arm_compute::graph::ReshapeLayerNode</a></div><div class="ttdoc">Reshape Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_reshape_layer_node_8h_source.xhtml#l00034">ReshapeLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::ConvolutionLayerNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00669">Types.h:669</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml">arm_compute::graph::ArgMinMaxLayerNode</a></div><div class="ttdoc">Arg Min/Max Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8h_source.xhtml#l00034">ArgMinMaxLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_detection_output_layer_node_xhtml_a4491336dccd18464fbbf617c981736cf"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#a4491336dccd18464fbbf617c981736cf">arm_compute::graph::DetectionOutputLayerNode::detection_output_info</a></div><div class="ttdeci">DetectionOutputLayerInfo detection_output_info() const</div><div class="ttdoc">DetectionOutput metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_output_layer_node_8cpp_source.xhtml#l00042">DetectionOutputLayerNode.cpp:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ada206e294c8d07093a8a50e08172c272"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ada206e294c8d07093a8a50e08172c272">arm_compute::graph::backends::detail::validate_pad_layer</a></div><div class="ttdeci">Status validate_pad_layer(PadLayerNode &amp;node)</div><div class="ttdoc">Validates a pad layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00441">ValidateHelpers.h:441</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml_a18ffaef3d2889fbba089ffbf7ea2f12d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#a18ffaef3d2889fbba089ffbf7ea2f12d">arm_compute::graph::L2NormalizeLayerNode::axis</a></div><div class="ttdeci">int axis() const</div><div class="ttdoc">axis accessors </div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8cpp_source.xhtml#l00075">L2NormalizeLayerNode.cpp:75</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml">arm_compute::BoundingBoxTransformInfo</a></div><div class="ttdoc">Bounding Box Transform information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01572">Types.h:1572</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_ae42377172cf17e3ac33205018768bd62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#ae42377172cf17e3ac33205018768bd62">arm_compute::graph::StridedSliceLayerNode::strides</a></div><div class="ttdeci">BiStrides strides() const</div><div class="ttdoc">Strides vector accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00055">StridedSliceLayerNode.cpp:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a9ebcdce876b4cd07736afa47d50154de"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">arm_compute::ITensorInfo::set_data_type</a></div><div class="ttdeci">virtual ITensorInfo &amp; set_data_type(DataType data_type)=0</div><div class="ttdoc">Set the data type to the specified value. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a891884386a167090b520930b164870f9"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a891884386a167090b520930b164870f9">arm_compute::graph::backends::detail::validate_dequantization_layer</a></div><div class="ttdeci">Status validate_dequantization_layer(DequantizationLayerNode &amp;node)</div><div class="ttdoc">Validates a dequantize layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00291">ValidateHelpers.h:291</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml">arm_compute::graph::L2NormalizeLayerNode</a></div><div class="ttdoc">L2Normalize Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8h_source.xhtml#l00034">L2NormalizeLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depth_to_space_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml">arm_compute::graph::DepthToSpaceLayerNode</a></div><div class="ttdoc">DepthToSpace Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_depth_to_space_layer_node_8h_source.xhtml#l00034">DepthToSpaceLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml">arm_compute::StridedSliceLayerInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01926">Types.h:1926</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reduction_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml">arm_compute::graph::ReductionLayerNode</a></div><div class="ttdoc">Reduction Operation node. </div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8h_source.xhtml#l00034">ReductionLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01052">Utils.h:1052</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5361e72d5aba950699e0596702026543"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5361e72d5aba950699e0596702026543">arm_compute::graph::backends::detail::validate_reduction_operation_layer</a></div><div class="ttdeci">Status validate_reduction_operation_layer(ReductionLayerNode &amp;node)</div><div class="ttdoc">Validates a Reduction operation layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00557">ValidateHelpers.h:557</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">arm_compute::graph::ROIAlignLayerNode</a></div><div class="ttdoc">ROI Align node. </div><div class="ttdef"><b>Definition:</b> <a href="_r_o_i_align_layer_node_8h_source.xhtml#l00036">ROIAlignLayerNode.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_p_relu_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">arm_compute::graph::PReluLayerNode</a></div><div class="ttdoc">PRelu Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_p_relu_layer_node_8h_source.xhtml#l00034">PReluLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a16b2c6652c4cee5b566daf018f768a42"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a16b2c6652c4cee5b566daf018f768a42">arm_compute::graph::ConvolutionLayerNode::convolution_method</a></div><div class="ttdeci">ConvolutionMethod convolution_method() const</div><div class="ttdoc">Convolution layer method accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode.cpp:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::FusedConvolutionWithPostOpNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00066">FusedConvolutionWithPostOpNode.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml">arm_compute::DetectionOutputLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00962">Types.h:962</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_detection_post_process_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">arm_compute::graph::DetectionPostProcessLayerNode</a></div><div class="ttdoc">DetectionPostProcess Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_node_8h_source.xhtml#l00034">DetectionPostProcessLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node_xhtml_a7a5bf7cea9e9cf19a6cf3e5240c5fff7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#a7a5bf7cea9e9cf19a6cf3e5240c5fff7">arm_compute::graph::BoundingBoxTransformLayerNode::info</a></div><div class="ttdeci">const BoundingBoxTransformInfo &amp; info() const</div><div class="ttdoc">BoundingBoxTransformInfo accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00042">BoundingBoxTransformLayerNode.cpp:42</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a9561091f3566e78ad3aa39259bc4126a"><div class="ttname"><a href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_MSG(...)</div><div class="ttdoc">An error is returned with the given description. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00194">Error.h:194</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_detection_output_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">arm_compute::graph::DetectionOutputLayerNode</a></div><div class="ttdoc">DetectionOutput Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_output_layer_node_8h_source.xhtml#l00034">DetectionOutputLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a76682a55960d790a11357ab922a5d659"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a76682a55960d790a11357ab922a5d659">arm_compute::graph::backends::detail::validate_priorbox_layer</a></div><div class="ttdeci">Status validate_priorbox_layer(PriorBoxLayerNode &amp;node)</div><div class="ttdoc">Validates a priorbox layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00510">ValidateHelpers.h:510</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a959fdd41c94dde46a21dd2bf6d50c48b"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a959fdd41c94dde46a21dd2bf6d50c48b">arm_compute::graph::backends::detail::validate_quantization_layer</a></div><div class="ttdeci">Status validate_quantization_layer(QuantizationLayerNode &amp;node)</div><div class="ttdoc">Validates a Quantization layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00534">ValidateHelpers.h:534</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_afa9ae68895fa738879123fbdf60447ab"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#afa9ae68895fa738879123fbdf60447ab">arm_compute::StridedSliceLayerInfo::shrink_axis_mask</a></div><div class="ttdeci">int32_t shrink_axis_mask() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01953">Types.h:1953</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a1924390ed11084a6251d381da645d7b4"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1924390ed11084a6251d381da645d7b4">arm_compute::graph::backends::detail::validate_strided_slice_layer</a></div><div class="ttdeci">Status validate_strided_slice_layer(StridedSliceLayerNode &amp;node)</div><div class="ttdoc">Validates a Strided Slice layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00676">ValidateHelpers.h:676</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">arm_compute::ROIPoolingLayerInfo</a></div><div class="ttdoc">ROI Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01398">Types.h:1398</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml">arm_compute::graph::UnaryEltwiseLayerNode</a></div><div class="ttdoc">Unary Eltwise Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00091">EltwiseLayerNode.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ab4632d71bdb4542008ad33b7b74b7b2c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab4632d71bdb4542008ad33b7b74b7b2c">arm_compute::graph::backends::detail::validate_channel_shuffle_layer</a></div><div class="ttdeci">Status validate_channel_shuffle_layer(ChannelShuffleLayerNode &amp;node)</div><div class="ttdoc">Validates a Channel Shuffle layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00111">ValidateHelpers.h:111</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::FusedConvolutionWithPostOpNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups in convolution accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00071">FusedConvolutionWithPostOpNode.cpp:71</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::graph::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Supported Convolution layer methods. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00126">Types.h:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">arm_compute::DetectionPostProcessLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01081">Types.h:1081</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_abe0cb3e4411a1c289e3e40e3f9d79fec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const</div><div class="ttdoc">Returns number of inputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00179">INode.cpp:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml_a397a10d63c17d6505a7470fa35f344e0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a397a10d63c17d6505a7470fa35f344e0">arm_compute::graph::ArgMinMaxLayerNode::reduction_operation</a></div><div class="ttdeci">ReductionOperation reduction_operation() const</div><div class="ttdoc">Operator accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8cpp_source.xhtml#l00042">ArgMinMaxLayerNode.cpp:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a9ed1b4c467dc74e107d884251fab3193"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a9ed1b4c467dc74e107d884251fab3193">arm_compute::graph::StridedSliceLayerNode::strided_slice_info</a></div><div class="ttdeci">StridedSliceLayerInfo strided_slice_info() const</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00060">StridedSliceLayerNode.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_generate_proposals_layer_node_xhtml_acfa649555ddb4df4cc5ae52b8205ee5f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#acfa649555ddb4df4cc5ae52b8205ee5f">arm_compute::graph::GenerateProposalsLayerNode::info</a></div><div class="ttdeci">const GenerateProposalsInfo &amp; info() const</div><div class="ttdoc">GenerateProposalsInfo accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_generate_proposals_layer_node_8cpp_source.xhtml#l00042">GenerateProposalsLayerNode.cpp:42</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_generate_proposals_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">arm_compute::graph::GenerateProposalsLayerNode</a></div><div class="ttdoc">Generate Proposals Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_generate_proposals_layer_node_8h_source.xhtml#l00035">GenerateProposalsLayerNode.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_aa7b3781f10fc0ac73a9a4f748e22d3d4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#aa7b3781f10fc0ac73a9a4f748e22d3d4">arm_compute::graph::EltwiseLayerNode::convert_policy</a></div><div class="ttdeci">ConvertPolicy convert_policy() const</div><div class="ttdoc">Convert policy accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00046">EltwiseLayerNode.cpp:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">arm_compute::graph::DepthwiseConvolutionMethod::Default</a></div><div class="ttdoc">Default approach using internal heuristics. </div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_acdd027e9c5015bdd7102c142b553f222"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#acdd027e9c5015bdd7102c142b553f222">arm_compute::graph::backends::detail::validate_depthwise_convolution_layer</a></div><div class="ttdeci">Status validate_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &amp;node)</div><div class="ttdoc">Validates a Depthwise Convolution layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00231">ValidateHelpers.h:231</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">arm_compute::graph::DepthwiseConvolutionLayerNode</a></div><div class="ttdoc">Depthwise Convolution Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8h_source.xhtml#l00034">DepthwiseConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="_nodes_8h_xhtml"><div class="ttname"><a href="_nodes_8h.xhtml">Nodes.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml">arm_compute::graph::StridedSliceLayerNode</a></div><div class="ttdoc">Slice Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8h_source.xhtml#l00036">StridedSliceLayerNode.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">arm_compute::graph::ConvolutionMethod::Default</a></div><div class="ttdoc">Default approach using internal heuristics. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a84a36a0cae1ceb4313891ca841b11cb3"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a84a36a0cae1ceb4313891ca841b11cb3">arm_compute::graph::backends::detail::validate_convolution_layer</a></div><div class="ttdeci">Status validate_convolution_layer(ConvolutionLayerNode &amp;node)</div><div class="ttdoc">Validates a Convolution layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00137">ValidateHelpers.h:137</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">arm_compute::graph::ConvolutionMethod::Winograd</a></div><div class="ttdoc">Winograd based convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml_a5c86a49e3cc9c3c03c1c3fb1e027e22b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">arm_compute::graph::ArgMinMaxLayerNode::axis</a></div><div class="ttdeci">unsigned int axis() const</div><div class="ttdoc">Axis accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8cpp_source.xhtml#l00047">ArgMinMaxLayerNode.cpp:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::EltwiseOperation::Mul</a></div><div class="ttdoc">Arithmetic multiplication. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">arm_compute::graph::DepthwiseConvolutionMethod::Optimized3x3</a></div><div class="ttdoc">Optimized 3x3 direct depthwise convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00151">INode.cpp:151</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depth_to_space_layer_node_xhtml_a20c3747fefdcc35a82acee379098a840"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a20c3747fefdcc35a82acee379098a840">arm_compute::graph::DepthToSpaceLayerNode::block_shape</a></div><div class="ttdeci">int block_shape() const</div><div class="ttdoc">Block shape policy accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_depth_to_space_layer_node_8cpp_source.xhtml#l00042">DepthToSpaceLayerNode.cpp:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">arm_compute::graph::FusedConvolutionWithPostOpNode</a></div><div class="ttdoc">Convolution node. </div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8h_source.xhtml#l00036">FusedConvolutionWithPostOpNode.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a476f08a0729f8861bec63b7e62c7b514"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">arm_compute::graph::StridedSliceLayerNode::starts</a></div><div class="ttdeci">Coordinates starts() const</div><div class="ttdoc">Start coordinates accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00045">StridedSliceLayerNode.cpp:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_a29ef3fb90fdd7ef335d67c286dd0d7f3"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a29ef3fb90fdd7ef335d67c286dd0d7f3">arm_compute::StridedSliceLayerInfo::begin_mask</a></div><div class="ttdeci">int32_t begin_mask() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01941">Types.h:1941</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00404">Types.h:404</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ad6c95a270f3275bd5711ce6ec193c4ff"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad6c95a270f3275bd5711ce6ec193c4ff">arm_compute::graph::backends::detail::validate_normalize_planar_yuv_layer</a></div><div class="ttdeci">Status validate_normalize_planar_yuv_layer(NormalizePlanarYUVLayerNode &amp;node)</div><div class="ttdoc">Validates a NormalizePlanarYUV layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00416">ValidateHelpers.h:416</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_afcae75468b65ea13c0ab86e97349bfc1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afcae75468b65ea13c0ab86e97349bfc1">arm_compute::graph::backends::detail::validate_unary_eltwise_layer</a></div><div class="ttdeci">Status validate_unary_eltwise_layer(UnaryEltwiseLayerNode &amp;node)</div><div class="ttdoc">Validates a unary element-wise layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00750">ValidateHelpers.h:750</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_prior_box_layer_node_xhtml_a0f62f59c57a7cdbdc20f7d850f1dfd8c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#a0f62f59c57a7cdbdc20f7d850f1dfd8c">arm_compute::graph::PriorBoxLayerNode::priorbox_info</a></div><div class="ttdeci">PriorBoxLayerInfo priorbox_info() const</div><div class="ttdoc">PriorBox metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_prior_box_layer_node_8cpp_source.xhtml#l00042">PriorBoxLayerNode.cpp:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a3805b9005b1d842bad30e09846e1f4e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">arm_compute::graph::UnaryEltwiseOperation</a></div><div class="ttdeci">UnaryEltwiseOperation</div><div class="ttdoc">Supported Unary Element-wise operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00120">Types.h:120</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_abe1955ea22f2b8a4d12e57dd361a88ea"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#abe1955ea22f2b8a4d12e57dd361a88ea">arm_compute::graph::backends::detail::validate_arg_min_max_layer</a></div><div class="ttdeci">Status validate_arg_min_max_layer(ArgMinMaxLayerNode &amp;node)</div><div class="ttdoc">Validates a ArgMinMax layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00064">ValidateHelpers.h:64</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_59b2231210c554f4cc243709030bf1f8.xhtml">backends</a></li><li class="navelem"><a class="el" href="_validate_helpers_8h.xhtml">ValidateHelpers.h</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:47 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
