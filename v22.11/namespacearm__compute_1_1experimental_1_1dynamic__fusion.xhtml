<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::experimental::dynamic_fusion Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::experimental::dynamic_fusion Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a generic class that packs the arguments of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">AuxMemoryInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> Info for a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_workload_tensor.xhtml">WorkloadTensor</a> of Auxiliary memory type.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_activation_kernel_descriptor.xhtml">ClActivationKernelDescriptor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml">ClAuxTensorData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holder of any auxiliary CLTensors required by a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml" title="Workload for Cl backend. ">ClWorkload</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context.xhtml">ClCodeBuilderContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">All information required for building the <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml">ClComponentDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml">ClComponentDirectConv2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_store.xhtml">ClComponentStore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_kernel.xhtml">ClCompositeKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml">ClCompositeOperator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> runtime to run a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_direct_conv2d_kernel.xhtml">ClDirectConv2dKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_direct_conv2d_kernel_descriptor.xhtml">ClDirectConv2dKernelDescriptor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_direct_convolution_kernel_component.xhtml">ClDirectConvolutionKernelComponent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_elementwise_kernel.xhtml">ClElementwiseKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_elementwise_kernel_component.xhtml">ClElementwiseKernelComponent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_elementwise_kernel_descriptor.xhtml">ClElementwiseKernelDescriptor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">ClExecutionDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor containing information required to run a single <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml" title="Workload for Cl backend. ">ClWorkload</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_floor_kernel.xhtml">ClFloorKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_floor_kernel_component.xhtml">ClFloorKernelComponent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_floor_kernel_descriptor.xhtml">ClFloorKernelDescriptor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml">ClKernelArgDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes all the info required to add a kernel argument at run time.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Intermediate representation of the final, complete kernel source.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contains kernel code to be compiled and run in a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_unit_workload.xhtml" title="The basic atomic unit in a ClWorkload. ">ClUnitWorkload</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_config.xhtml">ClKernelConfig</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configurations for <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_config.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A const view of a subgraph of the <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> to be fused together.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml">ClKernelRuntime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL runtime to run a single kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_tensor.xhtml">ClKernelTensor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_store_block_boundary_aware_kernel_component.xhtml">ClStoreBlockBoundaryAwareKernelComponent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_store_indirect_width_select_kernel_component.xhtml">ClStoreIndirectWidthSelectKernelComponent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_direct_conv2d.xhtml">ClTemplateDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_store.xhtml">ClTemplateStore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_writer.xhtml">ClTemplateWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use a templated-string-based method to write kernel code It stitches the component code templates together based on the valid fusion configuration.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_unit_workload.xhtml">ClUnitWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The basic atomic unit in a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_unit_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Workload for Cl backend.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Context (device capabilities, platform details) associated with a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml" title="Workload for Cl backend. ">ClWorkload</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL runtime to run a workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_tensor.xhtml">ClWorkloadTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A descriptor of <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml" title="Workload for Cl backend. ">ClWorkload</a> Tensors.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">Conv2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_content.xhtml">Conv2dContent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor for <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml" title="Descriptor for Conv2dDescriptor operation. ">Conv2dDescriptor</a> operation.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The dependency graph of a workload, where the nodes are of 2 types: <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> or <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> Represented as a doubly-linked adjacency list with the differentiation between source and destination.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_content.xhtml">ElementwiseContent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor for Elementwise binary operation.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_content.xhtml">FloorContent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor for Floor operation.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Services that are used throughout the creation phase of workload code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_conv2d.xhtml">GpuConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_info.xhtml">GpuInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">GPU information for <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml">GpuKernelArgument</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> argument information linked with its corresponding <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contain information required to set up a kernel argument at run time.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml">GpuKernelComponentFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory class that creates new instances of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a> by assigning new component ids.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-input (tensors), multi-output (tensors) acyclic directed graph of gpu kernel components Its main purposes are:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A group of gpu kernel components to be fused together PRECONDITIONS:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A linear sequence of component groups serialized from the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> Each component group in the stream denotes a complete kernel that may consist of multiple components.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of kernel code to be compiled and run in a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_variable_table.xhtml">GpuKernelVariableTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A table of all the variables used in the kernel Since fusion is restricted to a linear sequence of components in a kernel, only a single "intermediate variable" (the accumulator) is allowed.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_variable_table.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml">GpuLogicalKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper-processor of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> It adds the load (if any) and store components to the component group The <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml">GpuLogicalKernel</a> represents a complete kernel, and can proceed to invoke any kernel writer to generate the full kernel code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml">GpuOperatorGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A linear sequence of operators to be fused in a workload For the time being, this class is only used for validating operator fusion INVARIANTS:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The atomic unit in a Gpu workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes all the info related to a kernel in order to:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml">GpuWorkloadContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide context necessary for the creation and configuration of a workload e.g.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml">GpuWorkloadSketch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A descriptor of a workload of operators.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hold the generated kernel source code and other information required to compile and run the workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">IClKernelComponent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An abstract interface of a component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_writer.xhtml">IGpuKernelWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An interface that can write a gpu kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_template_component_writer.xhtml">IGpuTemplateComponentWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An interface used by <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_writer.xhtml">ClTemplateWriter</a> to write source code for a kernel component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_template_component_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml">ITensorDescPack</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload.xhtml">IWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run-time-agnostic, platform-specific graph that describes everything required to run a workload It can be configured into an Arm Compute Library runtime, integrated into the runtime of another framework, or integrated into the compilation flow.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Properties common to all kernel component types.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor of a workload tensor memory.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> Handle This can be used to further modify an existing operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_content.xhtml">OperatorContent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Graph of operators to execute within a Workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> Handle This can be either an argument tensor, or an intermediate tensor linking 2 <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> s.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml">OpTensorContent</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">SharedVarLink</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies a shared variable link for a component.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">SharedVarTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A table of all the variables used in the kernel / blueprint Because we limit the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml" title="The dependency graph of a workload, where the nodes are of 2 types: Tensor or Operator Represented as...">DependencyGraph</a> in the blueprint to a Linear Sequence for now, we only allow ** a single global variable (the accumulator) **.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml">TagVal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tag value will substitute a tag in a string template during its instantiation.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Map a kernel (as identified by its unit workload id) to its corresponding tensor pack.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">TileDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component: Store.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload.xhtml">UnitWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The basic atomic unit in an <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload.xhtml">IWorkload</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes when a Unit Workload is run.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_workload_tensor.xhtml">WorkloadTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A descriptor for <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload.xhtml" title="Run-time-agnostic, platform-specific graph that describes everything required to run a workload It ca...">IWorkload</a> Tensors.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_workload_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aa9587b64a9fbf98bfe730f42dea9c09e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa9587b64a9fbf98bfe730f42dea9c09e">ClKernelArgList</a> = std::map&lt; int, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml">ClKernelArgDescriptor</a> &gt;</td></tr>
<tr class="separator:aa9587b64a9fbf98bfe730f42dea9c09e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1fe48a2d01ec15359623bc0bed03798"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af1fe48a2d01ec15359623bc0bed03798">AuxMemoryLifetime</a> = <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83">MemoryLifetime</a></td></tr>
<tr class="separator:af1fe48a2d01ec15359623bc0bed03798"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37e4969b4b21379046bb4d89690af049"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a37e4969b4b21379046bb4d89690af049">GpuTarget</a> = ::<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></td></tr>
<tr class="memdesc:a37e4969b4b21379046bb4d89690af049"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gpu Information such as the Gpu target (for example, G76)  <a href="#a37e4969b4b21379046bb4d89690af049">More...</a><br /></td></tr>
<tr class="separator:a37e4969b4b21379046bb4d89690af049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe5718c3616edd5134e3058a1bb50b76"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> = std::map&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> &gt;</td></tr>
<tr class="memdesc:abe5718c3616edd5134e3058a1bb50b76"><td class="mdescLeft">&#160;</td><td class="mdescRight">A map from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to their corresponding <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>.  <a href="#abe5718c3616edd5134e3058a1bb50b76">More...</a><br /></td></tr>
<tr class="separator:abe5718c3616edd5134e3058a1bb50b76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c2a91a85b564dbc8e52229582e982a9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> = std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> * &gt;</td></tr>
<tr class="memdesc:a7c2a91a85b564dbc8e52229582e982a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Map <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> handles to their corresponding <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor. ">ITensor</a> memory.  <a href="#a7c2a91a85b564dbc8e52229582e982a9">More...</a><br /></td></tr>
<tr class="separator:a7c2a91a85b564dbc8e52229582e982a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17988896270878f90fb442bb42b0297c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a></td></tr>
<tr class="separator:a17988896270878f90fb442bb42b0297c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e1b7c599411e580eaed97443d281691"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a></td></tr>
<tr class="separator:a4e1b7c599411e580eaed97443d281691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae13e792ef802118ab6d86fb46fa47e5c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">ComponentList</a> = std::vector&lt; <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> &gt;</td></tr>
<tr class="separator:ae13e792ef802118ab6d86fb46fa47e5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bd7da02c0f6b7c585eeacec9f377cc8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2bd7da02c0f6b7c585eeacec9f377cc8">ComponentUniquePtr</a> = std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">IClKernelComponent</a> &gt;</td></tr>
<tr class="separator:a2bd7da02c0f6b7c585eeacec9f377cc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa5a1a59ec40b6fac78fa4fc6458e281"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afa5a1a59ec40b6fac78fa4fc6458e281">Id</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a></td></tr>
<tr class="separator:afa5a1a59ec40b6fac78fa4fc6458e281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a179c3070e74dc09cbb8bf4ab5c28448d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a179c3070e74dc09cbb8bf4ab5c28448d">Settings</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml">ClComponentDirectConv2dSettings</a></td></tr>
<tr class="separator:a179c3070e74dc09cbb8bf4ab5c28448d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afff13da4ff0bb0cd14e24f19743c8225"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> = int32_t</td></tr>
<tr class="memdesc:afff13da4ff0bb0cd14e24f19743c8225"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniquely identifies a kernel component within a workload.  <a href="#afff13da4ff0bb0cd14e24f19743c8225">More...</a><br /></td></tr>
<tr class="separator:afff13da4ff0bb0cd14e24f19743c8225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a165147f9bae84df3fd14dda9e8894051"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a165147f9bae84df3fd14dda9e8894051">GpuKernelArgumentList</a> = std::map&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml">GpuKernelArgument</a> &gt;</td></tr>
<tr class="memdesc:a165147f9bae84df3fd14dda9e8894051"><td class="mdescLeft">&#160;</td><td class="mdescRight">The argument list of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a>.  <a href="#a165147f9bae84df3fd14dda9e8894051">More...</a><br /></td></tr>
<tr class="separator:a165147f9bae84df3fd14dda9e8894051"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c53fb0e6cdb59d291688a586922ae57"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">DependencyGraph::OperatorId</a></td></tr>
<tr class="separator:a7c53fb0e6cdb59d291688a586922ae57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d71b29724606979807dcfc1ad80ef6c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> = int32_t</td></tr>
<tr class="memdesc:a4d71b29724606979807dcfc1ad80ef6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniquely identifies a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> within a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>.  <a href="#a4d71b29724606979807dcfc1ad80ef6c">More...</a><br /></td></tr>
<tr class="separator:a4d71b29724606979807dcfc1ad80ef6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af037c70dc8c0318e30d3a5138776337e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a> = std::string</td></tr>
<tr class="memdesc:af037c70dc8c0318e30d3a5138776337e"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tag used in a string template is a placeholder string to be substituted by real values during template instantiation.  <a href="#af037c70dc8c0318e30d3a5138776337e">More...</a><br /></td></tr>
<tr class="separator:af037c70dc8c0318e30d3a5138776337e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afacfec8193ed701f3646c22bc2d35455"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> = std::unordered_map&lt; <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml">TagVal</a> &gt;</td></tr>
<tr class="memdesc:afacfec8193ed701f3646c22bc2d35455"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tag lookup table.  <a href="#afacfec8193ed701f3646c22bc2d35455">More...</a><br /></td></tr>
<tr class="separator:afacfec8193ed701f3646c22bc2d35455"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a6072e09c65444602fbe6cc6027d369c7"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7">ClKernelTensorArgType</a> : int { <br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7af60357a8d17e45793298323f1b372a74">Scalar</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a57dea6f5039281b7fee517fc43bf3110">Vector</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7abe53a0541a6d36f6ecb879fa2c584b08">Image</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a61de9daebcac10786dff102d741a99db">Image_Reinterpret_As_3D</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a836beefb9de19f8c238c707251af46a7">Image_Export_To_ClImage2D</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54">Image_3D</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0">Image_3D_Export_To_ClImage2D</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a30bd3b885ab6a7786a0117197346c49c">Tensor_3D</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a73d5ced9c9cf7e7cdffe9016d463c2b4">Tensor_4D</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd">Tensor_4D_t_Buffer</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928">Tensor_4D_t_Image</a>
<br />
 }<tr class="memdesc:a6072e09c65444602fbe6cc6027d369c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verbose and explicit way to enumerate all the tensor arguments variants used by all kernel implementations.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a6072e09c65444602fbe6cc6027d369c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462bfa9dfea81692463ecb192183dd01"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">Core</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1
 }<tr class="memdesc:a462bfa9dfea81692463ecb192183dd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of memory used by a Workload Tensor.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a462bfa9dfea81692463ecb192183dd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa334134c2d2596d8de13df6f9cb67d1d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">GpuLanguage</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">OpenCL</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>
 }<tr class="memdesc:aa334134c2d2596d8de13df6f9cb67d1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gpu Language.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:aa334134c2d2596d8de13df6f9cb67d1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462bfa9dfea81692463ecb192183dd01"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">Core</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1
 }<tr class="memdesc:a462bfa9dfea81692463ecb192183dd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of memory used by a workload tensor.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a462bfa9dfea81692463ecb192183dd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72fd310d933d46bd03b9d33fbb283ee9"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">SharedVarIO</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">Output</a>
 }<tr class="memdesc:a72fd310d933d46bd03b9d33fbb283ee9"><td class="mdescLeft">&#160;</td><td class="mdescRight">We introduce the concept of <em>Shared Variables</em> in the context of kernel building.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a72fd310d933d46bd03b9d33fbb283ee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4b4b738b88d9f339fa9154f4305f6d4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">SharedVarGroup</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">Argument</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">Automatic</a>
 }</td></tr>
<tr class="separator:ae4b4b738b88d9f339fa9154f4305f6d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81f78fc173dedefe5a049c0aa3eed2c0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0">ComponentType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72">Store</a>
 }</td></tr>
<tr class="separator:a81f78fc173dedefe5a049c0aa3eed2c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe5ece05d566f71af093d15bd4531459"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459">ClippingStrategy</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a747385047b85ae751f83adb36435a3c1">TOP_LEFT</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0">TOP_RIGHT</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e">BOTTOM_LEFT</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def">BOTTOM_RIGHT</a>
 }</td></tr>
<tr class="separator:afe5ece05d566f71af093d15bd4531459"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a204edbd0a54dd4c773a4f5a0e14f450c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450c">StoreType</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca009740daa8d09d010c72040a63191456">VStore</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450caaa55927055c87fe4627fcff353f826a4">VStorePartial</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca9671d940573ff3b188afbb50e6d45e4b">StoreRow</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca2f7d9ebf458bcc56c7db8d09b419332f">ConvertStoreRow</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca7184144ea67e407be08953db2573c89b">StoreBlock</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca0278870a9e417b2f6b1a10a12b1322ad">ConvertStoreBlock</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cafee89e76e08fb425ddb06f801508b8b9">StoreRowPartial</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca852d27b6a0aae650e40dda6caa14f8d4">StoreBlockPartial</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cad34cb78a48b094ebad5ec1ec8ca57a09">StoreBlockBoundaryAware</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450caaeb24f654855cd208dfcc0bf9cc14f34">StoreVectorSelect</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca230c8bbd95d90b28049617d5e793bb5f">TStoreIndirectWidthSelect</a>
<br />
 }</td></tr>
<tr class="separator:a204edbd0a54dd4c773a4f5a0e14f450c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1be225b6ce99897e03ffa3732d2bbe11"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a1be225b6ce99897e03ffa3732d2bbe11">Complexity</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a1be225b6ce99897e03ffa3732d2bbe11a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a1be225b6ce99897e03ffa3732d2bbe11a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>
 }</td></tr>
<tr class="separator:a1be225b6ce99897e03ffa3732d2bbe11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add46c47c06ea70a8be0a2b3d67723bff"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#add46c47c06ea70a8be0a2b3d67723bff">OperatorComplexity</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#add46c47c06ea70a8be0a2b3d67723bffa10b4eb76294b70d7fd6df997ff06edb1">Complex</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#add46c47c06ea70a8be0a2b3d67723bffa1fbb1e3943c2c6c560247ac8f9289780">Simple</a>
 }</td></tr>
<tr class="separator:add46c47c06ea70a8be0a2b3d67723bff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab26c0327042b802ca8cff46a9bc67670"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">GpuComponentType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">Output</a>
 }<tr class="memdesc:ab26c0327042b802ca8cff46a9bc67670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component type in the context of fusion Its main purpose is to inform the optimizer how to perform fusion.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:ab26c0327042b802ca8cff46a9bc67670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17730d14d0e88d5aed17a12e872c4efe"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>
 }<tr class="memdesc:a17730d14d0e88d5aed17a12e872c4efe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contain properties common to all operator types.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a17730d14d0e88d5aed17a12e872c4efe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a0ba70c7ef99250a96e87378c163f2b0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">build</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;workload, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;op_graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a0ba70c7ef99250a96e87378c163f2b0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> from an <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a>.  <a href="#a0ba70c7ef99250a96e87378c163f2b0e">More...</a><br /></td></tr>
<tr class="separator:a0ba70c7ef99250a96e87378c163f2b0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab05719fb0811c6eb8a452864575501e2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab05719fb0811c6eb8a452864575501e2"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab05719fb0811c6eb8a452864575501e2">is_in</a> (const T &amp;v, const std::vector&lt; T &gt; &amp;vec)</td></tr>
<tr class="separator:ab05719fb0811c6eb8a452864575501e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048af4e9fc68526bf6d39e80e043a456"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">validate</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;op_graph)</td></tr>
<tr class="memdesc:a048af4e9fc68526bf6d39e80e043a456"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the validity of <code>op_graph</code>, usually after performing an operation (e.g.  <a href="#a048af4e9fc68526bf6d39e80e043a456">More...</a><br /></td></tr>
<tr class="separator:a048af4e9fc68526bf6d39e80e043a456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8924eaffc5f48d813b7665ef7ffd214"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab8924eaffc5f48d813b7665ef7ffd214">operator&lt;</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;t0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;t1)</td></tr>
<tr class="memdesc:ab8924eaffc5f48d813b7665ef7ffd214"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide order of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> by checking if <code>t0</code> is "lower than" <code>t1</code>.  <a href="#ab8924eaffc5f48d813b7665ef7ffd214">More...</a><br /></td></tr>
<tr class="separator:ab8924eaffc5f48d813b7665ef7ffd214"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aad35ee7c2bfa06456fade719732d21"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a8aad35ee7c2bfa06456fade719732d21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Associate a <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">TensorInfo</a> with a newly created <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> in the <code>graph</code>.  <a href="#a8aad35ee7c2bfa06456fade719732d21">More...</a><br /></td></tr>
<tr class="separator:a8aad35ee7c2bfa06456fade719732d21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61e490117b62035a67b5ccfd4a0553ec"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a61e490117b62035a67b5ccfd4a0553ec">operator&lt;</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;op0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;op1)</td></tr>
<tr class="memdesc:a61e490117b62035a67b5ccfd4a0553ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide order of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> by checking if <code>op0</code> is "lower than" <code>op1</code>.  <a href="#a61e490117b62035a67b5ccfd4a0553ec">More...</a><br /></td></tr>
<tr class="separator:a61e490117b62035a67b5ccfd4a0553ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a859ce0f92e55dabcfe0ce42b4d0be85e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;desc, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> input, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> weights, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> dst)</td></tr>
<tr class="memdesc:a859ce0f92e55dabcfe0ce42b4d0be85e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add op Conv2d to <code>graph</code>.  <a href="#a859ce0f92e55dabcfe0ce42b4d0be85e">More...</a><br /></td></tr>
<tr class="separator:a859ce0f92e55dabcfe0ce42b4d0be85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f35f393fb5fcab516529f5dd5dcbdeb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3f35f393fb5fcab516529f5dd5dcbdeb">add_op_conv2d</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;desc, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> input, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> weights, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> dst)</td></tr>
<tr class="separator:a3f35f393fb5fcab516529f5dd5dcbdeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0500494c1c88e005019c1046023207b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0500494c1c88e005019c1046023207b9">force_conv2d_method</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> conv2d, <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> method)</td></tr>
<tr class="memdesc:a0500494c1c88e005019c1046023207b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">(Only for Debuging and Testing) Force a conv2d method  <a href="#a0500494c1c88e005019c1046023207b9">More...</a><br /></td></tr>
<tr class="separator:a0500494c1c88e005019c1046023207b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ddaa43fa5e752d3a4804654ef17890b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6ddaa43fa5e752d3a4804654ef17890b">add_op_elementwise_op</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;desc, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> lhs, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> rhs, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> dst)</td></tr>
<tr class="memdesc:a6ddaa43fa5e752d3a4804654ef17890b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add op Elementwise to <code>graph</code>, and optionally describes fusion through passing of intermediate <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> s.  <a href="#a6ddaa43fa5e752d3a4804654ef17890b">More...</a><br /></td></tr>
<tr class="separator:a6ddaa43fa5e752d3a4804654ef17890b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f7c5a493aa563a630eaec1042f95071"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3f7c5a493aa563a630eaec1042f95071">add_op_floor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;desc, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> src, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> dst)</td></tr>
<tr class="memdesc:a3f7c5a493aa563a630eaec1042f95071"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add op Floor to <code>graph</code>, and optionally describes fusion through passing of intermediate <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> s.  <a href="#a3f7c5a493aa563a630eaec1042f95071">More...</a><br /></td></tr>
<tr class="separator:a3f7c5a493aa563a630eaec1042f95071"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af08b2231cd81fad5422b1d7240d26806"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af08b2231cd81fad5422b1d7240d26806">operator==</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;t0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;t1)</td></tr>
<tr class="separator:af08b2231cd81fad5422b1d7240d26806"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac997944688479da60b47ca8bb8ecc0a9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ac997944688479da60b47ca8bb8ecc0a9">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;conv2d0, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;conv2d1)</td></tr>
<tr class="separator:ac997944688479da60b47ca8bb8ecc0a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72adb28e3acb2a0197af3763e92929e1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72adb28e3acb2a0197af3763e92929e1">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;)</td></tr>
<tr class="separator:a72adb28e3acb2a0197af3763e92929e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a724446ab270739141433cc8682bc2648"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a724446ab270739141433cc8682bc2648">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;)</td></tr>
<tr class="separator:a724446ab270739141433cc8682bc2648"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d7c1c3d9ad0be83d4dd2dc9d444ad32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">bind_tensors</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml">ClAuxTensorData</a> &amp;aux_tensor_data, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;prepare_pack_map, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;run_pack_map, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;workload, const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> &amp;op_tensors)</td></tr>
<tr class="memdesc:a0d7c1c3d9ad0be83d4dd2dc9d444ad32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind tensor memory to packs used by prepare and run methods.  <a href="#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">More...</a><br /></td></tr>
<tr class="separator:a0d7c1c3d9ad0be83d4dd2dc9d444ad32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b34a241db1e77fd83e15283136132de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a1b34a241db1e77fd83e15283136132de">add_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;kernel_blueprint, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> merge_point)</td></tr>
<tr class="separator:a1b34a241db1e77fd83e15283136132de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa72df514647819356a6be8cd971f7ba3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa72df514647819356a6be8cd971f7ba3">add_kcomp_eltwise_op</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_elementwise_kernel_descriptor.xhtml">ClElementwiseKernelDescriptor</a> &amp;, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> src0_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> src1_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;dst_id)</td></tr>
<tr class="memdesc:aa72df514647819356a6be8cd971f7ba3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component: Eltwise <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a>.  <a href="#aa72df514647819356a6be8cd971f7ba3">More...</a><br /></td></tr>
<tr class="separator:aa72df514647819356a6be8cd971f7ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad32cffcf6d3ef2e7a762e3547ee74890"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ad32cffcf6d3ef2e7a762e3547ee74890">add_kcomp_floor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_floor_kernel_descriptor.xhtml">ClFloorKernelDescriptor</a> &amp;, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> src_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;dst_id)</td></tr>
<tr class="memdesc:ad32cffcf6d3ef2e7a762e3547ee74890"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component: Floor.  <a href="#ad32cffcf6d3ef2e7a762e3547ee74890">More...</a><br /></td></tr>
<tr class="separator:ad32cffcf6d3ef2e7a762e3547ee74890"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acae1e653bd15a1b7e22cd0e75bff5d6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#acae1e653bd15a1b7e22cd0e75bff5d6a">add_kcomp_activation</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_activation_kernel_descriptor.xhtml">ClActivationKernelDescriptor</a> &amp;, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> src_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;dst_id)</td></tr>
<tr class="memdesc:acae1e653bd15a1b7e22cd0e75bff5d6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component: Activation.  <a href="#acae1e653bd15a1b7e22cd0e75bff5d6a">More...</a><br /></td></tr>
<tr class="separator:acae1e653bd15a1b7e22cd0e75bff5d6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b31d93990607b364102fb5f830de297"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5b31d93990607b364102fb5f830de297">add_kcomp_direct_conv2d</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_direct_conv2d_kernel_descriptor.xhtml">ClDirectConv2dKernelDescriptor</a> &amp;, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> src_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> weight_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> bias_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;dst_id)</td></tr>
<tr class="memdesc:a5b31d93990607b364102fb5f830de297"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component: Direct Convolution.  <a href="#a5b31d93990607b364102fb5f830de297">More...</a><br /></td></tr>
<tr class="separator:a5b31d93990607b364102fb5f830de297"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f46e60fa2d4e77d485d6a1f6c3631b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6f46e60fa2d4e77d485d6a1f6c3631b9">add_kcomp_store</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;kernel_blueprint, const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450c">StoreType</a> &amp;store_type, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> src_tile, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> dst_tile)</td></tr>
<tr class="separator:a6f46e60fa2d4e77d485d6a1f6c3631b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13ef6b46310330560a9de9e9b4ff4b2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a13ef6b46310330560a9de9e9b4ff4b2b">update_merge_point</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> t_id, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> merge_point)</td></tr>
<tr class="memdesc:a13ef6b46310330560a9de9e9b4ff4b2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update existing merge tensor <code>merge_point</code> to point to <code>t_id</code>.  <a href="#a13ef6b46310330560a9de9e9b4ff4b2b">More...</a><br /></td></tr>
<tr class="separator:a13ef6b46310330560a9de9e9b4ff4b2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bf3f564acec14f99a8233408a295d34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8bf3f564acec14f99a8233408a295d34">set_tile_info</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;bp, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">TileDescriptor</a> &amp;tile_info)</td></tr>
<tr class="separator:a8bf3f564acec14f99a8233408a295d34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2723f1bf866ae789021e51854e92e48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae2723f1bf866ae789021e51854e92e48">build</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;code, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context.xhtml">ClCodeBuilderContext</a> &amp;, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;)</td></tr>
<tr class="memdesc:ae2723f1bf866ae789021e51854e92e48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build final kernel source from KernelBlueprint.  <a href="#ae2723f1bf866ae789021e51854e92e48">More...</a><br /></td></tr>
<tr class="separator:ae2723f1bf866ae789021e51854e92e48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d6179df3e79fcbbcef0e5aabfb1fce4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6179df3e79fcbbcef0e5aabfb1fce4">get_dependency_graph</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;blueprint)</td></tr>
<tr class="memdesc:a8d6179df3e79fcbbcef0e5aabfb1fce4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dependency graph.  <a href="#a8d6179df3e79fcbbcef0e5aabfb1fce4">More...</a><br /></td></tr>
<tr class="separator:a8d6179df3e79fcbbcef0e5aabfb1fce4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb1dd1ab605c42c005d9ddde1e23109e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abb1dd1ab605c42c005d9ddde1e23109e">tune_static</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">ClExecutionDescriptor</a> &amp;, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;)</td></tr>
<tr class="separator:abb1dd1ab605c42c005d9ddde1e23109e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac22ae0b39a8e2c53ed4fcbec12e49731"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ac22ae0b39a8e2c53ed4fcbec12e49731">export_to_cl_image_support</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> gpu_target, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout)</td></tr>
<tr class="separator:ac22ae0b39a8e2c53ed4fcbec12e49731"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bb10dc03b6b05622410e1950beeeb64"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3bb10dc03b6b05622410e1950beeeb64">operator&lt;&lt;</a> (::std::ostream &amp;os, const CLBuildOptions::StringSet &amp;build_opts)</td></tr>
<tr class="separator:a3bb10dc03b6b05622410e1950beeeb64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7664671c81e08e34e267f3ea70fb73f3"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7664671c81e08e34e267f3ea70fb73f3">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;cl_build_opts)</td></tr>
<tr class="separator:a7664671c81e08e34e267f3ea70fb73f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4de2494f0551776a532a883d3b190b33"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">to_string</a> (const <a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;cl_build_opts)</td></tr>
<tr class="separator:a4de2494f0551776a532a883d3b190b33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f650ef6322843ee4f8cc8643fe921e"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa9f650ef6322843ee4f8cc8643fe921e">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;code)</td></tr>
<tr class="separator:aa9f650ef6322843ee4f8cc8643fe921e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3a405c94c316860d0341c38fbefe59a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ac3a405c94c316860d0341c38fbefe59a">to_string</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;code)</td></tr>
<tr class="separator:ac3a405c94c316860d0341c38fbefe59a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e5a222683b4e850a681a8b7f593f9c3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> &amp;group)</td></tr>
<tr class="separator:a0e5a222683b4e850a681a8b7f593f9c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a803c9c75014f6a9ae0d7aa9c532bf42b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a803c9c75014f6a9ae0d7aa9c532bf42b">traverse</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;graph)</td></tr>
<tr class="separator:a803c9c75014f6a9ae0d7aa9c532bf42b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5523818c3f589d14e258c437dfdfdf9c"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">traverse</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;graph)</td></tr>
<tr class="separator:a5523818c3f589d14e258c437dfdfdf9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a124185cc0f16b8bc162cf4845c91d1d2"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a124185cc0f16b8bc162cf4845c91d1d2">init_fusion_graph</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;kernel_graph)</td></tr>
<tr class="separator:a124185cc0f16b8bc162cf4845c91d1d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa11c975459908699abf6078773ae19b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa11c975459908699abf6078773ae19b3">fuse</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;fused_kernel_graph)</td></tr>
<tr class="separator:aa11c975459908699abf6078773ae19b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d6a9002a9d5c0fc67a8c4d547b37491"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">generate_store</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;bp, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;fused_kernel_graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> &amp;fg)</td></tr>
<tr class="separator:a8d6a9002a9d5c0fc67a8c4d547b37491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ee8e10e12b8d521a028c681b8ba31ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ee8e10e12b8d521a028c681b8ba31ad">generate</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;workload, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a> &amp;ctx, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;fused_kernel_graph)</td></tr>
<tr class="separator:a0ee8e10e12b8d521a028c681b8ba31ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34946401556c6a801732d70f26e47599"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a34946401556c6a801732d70f26e47599">traverse</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;graph)</td></tr>
<tr class="separator:a34946401556c6a801732d70f26e47599"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec492d539c50089ec30b929c15d55e17"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aec492d539c50089ec30b929c15d55e17">traverse</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;graph)</td></tr>
<tr class="separator:aec492d539c50089ec30b929c15d55e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae81a1f9c76f1814031ee484d5fc47341"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_content.xhtml">OperatorContent</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae81a1f9c76f1814031ee484d5fc47341">traverse</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> &amp;graph)</td></tr>
<tr class="separator:ae81a1f9c76f1814031ee484d5fc47341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55a89c3f2ec8366e76bdf87983cd8fc7"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_content.xhtml">OperatorContent</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a55a89c3f2ec8366e76bdf87983cd8fc7">traverse</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> &amp;graph)</td></tr>
<tr class="separator:a55a89c3f2ec8366e76bdf87983cd8fc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d17b6e1662f7d156474fbb3d2288347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7d17b6e1662f7d156474fbb3d2288347">translate</a> (<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;kernel_graph, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> &amp;op_graph)</td></tr>
<tr class="separator:a7d17b6e1662f7d156474fbb3d2288347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bf4bff4857d4c4853192a2ad42f3328"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7bf4bff4857d4c4853192a2ad42f3328">operator==</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;config0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;config1)</td></tr>
<tr class="separator:a7bf4bff4857d4c4853192a2ad42f3328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59d422703eb311f8538f35e041b0bbcf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a59d422703eb311f8538f35e041b0bbcf">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;info0, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;info1)</td></tr>
<tr class="separator:a59d422703eb311f8538f35e041b0bbcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d8c915c15145d6e31f8123d349cd895"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d8c915c15145d6e31f8123d349cd895">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage0, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage1)</td></tr>
<tr class="separator:a4d8c915c15145d6e31f8123d349cd895"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a17988896270878f90fb442bb42b0297c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17988896270878f90fb442bb42b0297c">&#9670;&nbsp;</a></span>ArgumentID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8h_source.xhtml">ClKernelBuildingAPI.h</a>.</p>

</div>
</div>
<a id="af1fe48a2d01ec15359623bc0bed03798"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1fe48a2d01ec15359623bc0bed03798">&#9670;&nbsp;</a></span>AuxMemoryLifetime</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83">AuxMemoryLifetime</a> =  <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83">MemoryLifetime</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_workload_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_i_workload_8h_source.xhtml">IWorkload.h</a>.</p>

</div>
</div>
<a id="aa9587b64a9fbf98bfe730f42dea9c09e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9587b64a9fbf98bfe730f42dea9c09e">&#9670;&nbsp;</a></span>ClKernelArgList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa9587b64a9fbf98bfe730f42dea9c09e">ClKernelArgList</a> =  std::map&lt;int, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml">ClKernelArgDescriptor</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_workload_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_cl_workload_8h_source.xhtml">ClWorkload.h</a>.</p>

</div>
</div>
<a id="afff13da4ff0bb0cd14e24f19743c8225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afff13da4ff0bb0cd14e24f19743c8225">&#9670;&nbsp;</a></span>ComponentId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uniquely identifies a kernel component within a workload. </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00037">37</a> of file <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a4e1b7c599411e580eaed97443d281691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e1b7c599411e580eaed97443d281691">&#9670;&nbsp;</a></span>ComponentID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00254">254</a> of file <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml">Common.h</a>.</p>

</div>
</div>
<a id="ae13e792ef802118ab6d86fb46fa47e5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae13e792ef802118ab6d86fb46fa47e5c">&#9670;&nbsp;</a></span>ComponentList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">ComponentList</a> =  std::vector&lt;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00255">255</a> of file <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml">Common.h</a>.</p>

</div>
</div>
<a id="a2bd7da02c0f6b7c585eeacec9f377cc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bd7da02c0f6b7c585eeacec9f377cc8">&#9670;&nbsp;</a></span>ComponentUniquePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2bd7da02c0f6b7c585eeacec9f377cc8">ComponentUniquePtr</a> =  std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">IClKernelComponent</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00414">414</a> of file <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml">Common.h</a>.</p>

</div>
</div>
<a id="a165147f9bae84df3fd14dda9e8894051"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a165147f9bae84df3fd14dda9e8894051">&#9670;&nbsp;</a></span>GpuKernelArgumentList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a165147f9bae84df3fd14dda9e8894051">GpuKernelArgumentList</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml">GpuKernelArgument</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The argument list of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml">GpuKernelSourceCode.h</a>.</p>

</div>
</div>
<a id="a37e4969b4b21379046bb4d89690af049"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37e4969b4b21379046bb4d89690af049">&#9670;&nbsp;</a></span>GpuTarget</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GpuTarget</a> =  ::<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gpu Information such as the Gpu target (for example, G76) </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_context_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_gpu_workload_context_8h_source.xhtml">GpuWorkloadContext.h</a>.</p>

</div>
</div>
<a id="afa5a1a59ec40b6fac78fa4fc6458e281"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa5a1a59ec40b6fac78fa4fc6458e281">&#9670;&nbsp;</a></span>Id</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afa5a1a59ec40b6fac78fa4fc6458e281">Id</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00250">250</a> of file <a class="el" href="_cl_kernel_graph_8h_source.xhtml">ClKernelGraph.h</a>.</p>

</div>
</div>
<a id="abe5718c3616edd5134e3058a1bb50b76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe5718c3616edd5134e3058a1bb50b76">&#9670;&nbsp;</a></span>MemoryDescriptorMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A map from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to their corresponding <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>. </p>

<p class="definition">Definition at line <a class="el" href="_memory_descriptor_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_memory_descriptor_8h_source.xhtml">MemoryDescriptor.h</a>.</p>

</div>
</div>
<a id="a7c53fb0e6cdb59d291688a586922ae57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c53fb0e6cdb59d291688a586922ae57">&#9670;&nbsp;</a></span>OperatorId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">DependencyGraph::OperatorId</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a>.</p>

</div>
</div>
<a id="a7c2a91a85b564dbc8e52229582e982a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c2a91a85b564dbc8e52229582e982a9">&#9670;&nbsp;</a></span>OpTensorBinding</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Map <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> handles to their corresponding <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor. ">ITensor</a> memory. </p>

<p class="definition">Definition at line <a class="el" href="_cl_composite_operator_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_cl_composite_operator_8h_source.xhtml">ClCompositeOperator.h</a>.</p>

</div>
</div>
<a id="a179c3070e74dc09cbb8bf4ab5c28448d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a179c3070e74dc09cbb8bf4ab5c28448d">&#9670;&nbsp;</a></span>Settings</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a179c3070e74dc09cbb8bf4ab5c28448d">Settings</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml">ClComponentDirectConv2dSettings</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml">ClComponentDirectConv2d.cpp</a>.</p>

</div>
</div>
<a id="af037c70dc8c0318e30d3a5138776337e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af037c70dc8c0318e30d3a5138776337e">&#9670;&nbsp;</a></span>Tag</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a> =  std::string</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A tag used in a string template is a placeholder string to be substituted by real values during template instantiation. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml#l00127">127</a> of file <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml">GpuKernelVariableTable.h</a>.</p>

</div>
</div>
<a id="afacfec8193ed701f3646c22bc2d35455"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afacfec8193ed701f3646c22bc2d35455">&#9670;&nbsp;</a></span>TagLUT</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> =  std::unordered_map&lt;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml">TagVal</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tag lookup table. </p>
<p>It is used to instantiate a string template </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml#l00130">130</a> of file <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml">GpuKernelVariableTable.h</a>.</p>

</div>
</div>
<a id="a4d71b29724606979807dcfc1ad80ef6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d71b29724606979807dcfc1ad80ef6c">&#9670;&nbsp;</a></span>UnitWorkloadId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uniquely identifies a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> within a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="afe5ece05d566f71af093d15bd4531459"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe5ece05d566f71af093d15bd4531459">&#9670;&nbsp;</a></span>ClippingStrategy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459">ClippingStrategy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="afe5ece05d566f71af093d15bd4531459a747385047b85ae751f83adb36435a3c1"></a>TOP_LEFT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0"></a>TOP_RIGHT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e"></a>BOTTOM_LEFT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def"></a>BOTTOM_RIGHT&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_descriptors_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_cl_kernel_descriptors_8h_source.xhtml">ClKernelDescriptors.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">TOP_LEFT</a>,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0">TOP_RIGHT</a>,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e">BOTTOM_LEFT</a>,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def">BOTTOM_RIGHT</a>,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0">arm_compute::experimental::dynamic_fusion::ClippingStrategy::TOP_RIGHT</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def">arm_compute::experimental::dynamic_fusion::ClippingStrategy::BOTTOM_RIGHT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">arm_compute::SamplingPolicy::TOP_LEFT</a></div><div class="ttdoc">Samples are taken at pixel top left corner. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e">arm_compute::experimental::dynamic_fusion::ClippingStrategy::BOTTOM_LEFT</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6072e09c65444602fbe6cc6027d369c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6072e09c65444602fbe6cc6027d369c7">&#9670;&nbsp;</a></span>ClKernelTensorArgType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7">ClKernelTensorArgType</a> : int</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Verbose and explicit way to enumerate all the tensor arguments variants used by all kernel implementations. </p>
<p>This avoids any ambiguity in what kernel arguments are passed </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7af60357a8d17e45793298323f1b372a74"></a>Scalar&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a57dea6f5039281b7fee517fc43bf3110"></a>Vector&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7abe53a0541a6d36f6ecb879fa2c584b08"></a>Image&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a61de9daebcac10786dff102d741a99db"></a>Image_Reinterpret_As_3D&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a836beefb9de19f8c238c707251af46a7"></a>Image_Export_To_ClImage2D&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54"></a>Image_3D&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0"></a>Image_3D_Export_To_ClImage2D&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a30bd3b885ab6a7786a0117197346c49c"></a>Tensor_3D&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a73d5ced9c9cf7e7cdffe9016d463c2b4"></a>Tensor_4D&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd"></a>Tensor_4D_t_Buffer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928"></a>Tensor_4D_t_Image&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_cl_workload_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_cl_workload_8h_source.xhtml">ClWorkload.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                 : <span class="keywordtype">int</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7af60357a8d17e45793298323f1b372a74">Scalar</a>,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6ded2cf071c127e518317e3c451af3ef">Vector</a>,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a9082e6aa9fd1705dc218cf44bc5a9d66">Image</a>,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a61de9daebcac10786dff102d741a99db">Image_Reinterpret_As_3D</a>,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a836beefb9de19f8c238c707251af46a7">Image_Export_To_ClImage2D</a>,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54">Image_3D</a>, <span class="comment">// 3D Tensor represented as a 2D Image + stride_z</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0">Image_3D_Export_To_ClImage2D</a>,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a30bd3b885ab6a7786a0117197346c49c">Tensor_3D</a>,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a73d5ced9c9cf7e7cdffe9016d463c2b4">Tensor_4D</a>,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd">Tensor_4D_t_Buffer</a>,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928">Tensor_4D_t_Image</a></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image_3D</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image_3D_Export_To_ClImage2D</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a9082e6aa9fd1705dc218cf44bc5a9d66"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a9082e6aa9fd1705dc218cf44bc5a9d66">Image</a></div><div class="ttdeci">struct Image Image</div><div class="ttdoc">Structure to hold Image information. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Tensor_4D_t_Image</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a836beefb9de19f8c238c707251af46a7"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a836beefb9de19f8c238c707251af46a7">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image_Export_To_ClImage2D</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a30bd3b885ab6a7786a0117197346c49c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a30bd3b885ab6a7786a0117197346c49c">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Tensor_3D</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7af60357a8d17e45793298323f1b372a74"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7af60357a8d17e45793298323f1b372a74">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Scalar</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a6ded2cf071c127e518317e3c451af3ef"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6ded2cf071c127e518317e3c451af3ef">Vector</a></div><div class="ttdeci">struct Vector Vector</div><div class="ttdoc">Structure to hold Vector information. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a73d5ced9c9cf7e7cdffe9016d463c2b4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a73d5ced9c9cf7e7cdffe9016d463c2b4">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Tensor_4D</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Tensor_4D_t_Buffer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a61de9daebcac10786dff102d741a99db"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a61de9daebcac10786dff102d741a99db">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image_Reinterpret_As_3D</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1be225b6ce99897e03ffa3732d2bbe11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1be225b6ce99897e03ffa3732d2bbe11">&#9670;&nbsp;</a></span>Complexity</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a1be225b6ce99897e03ffa3732d2bbe11">Complexity</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a1be225b6ce99897e03ffa3732d2bbe11a1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a1be225b6ce99897e03ffa3732d2bbe11a10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_cl_kernel_graph_8h_source.xhtml">ClKernelGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::ComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::ComponentType::Complex</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a81f78fc173dedefe5a049c0aa3eed2c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81f78fc173dedefe5a049c0aa3eed2c0">&#9670;&nbsp;</a></span>ComponentType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0">ComponentType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72"></a>Store&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00247">247</a> of file <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml">Common.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72">Store</a></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72">arm_compute::experimental::dynamic_fusion::ComponentType::Store</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::ComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::ComponentType::Complex</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab26c0327042b802ca8cff46a9bc67670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab26c0327042b802ca8cff46a9bc67670">&#9670;&nbsp;</a></span>GpuComponentType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">GpuComponentType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Component type in the context of fusion Its main purpose is to inform the optimizer how to perform fusion. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"></a>Unfusable&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54"></a>Output&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00042">42</a> of file <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::ComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::ComponentType::Complex</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuComponentType::Unfusable</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa334134c2d2596d8de13df6f9cb67d1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa334134c2d2596d8de13df6f9cb67d1d">&#9670;&nbsp;</a></span>GpuLanguage</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">GpuLanguage</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gpu Language. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"></a>OpenCL&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa334134c2d2596d8de13df6f9cb67d1da88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_context_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_gpu_workload_context_8h_source.xhtml">GpuWorkloadContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">OpenCL</a>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">arm_compute::experimental::dynamic_fusion::GpuLanguage::OpenCL</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">acl::DataType::Unknown</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a17730d14d0e88d5aed17a12e872c4efe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17730d14d0e88d5aed17a12e872c4efe">&#9670;&nbsp;</a></span>GpuOperatorType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Contain properties common to all operator types. </p>
<p><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> type in the context of fusion </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"><p>Simple operators are operators that: </p>
<ol type="1">
<li>Have a 1-to-1 mapping between the input elements and output elements, like elementwise</li>
<li>Have exactly 1 output </li>
</ol>
</td></tr>
<tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efea10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"><p>Complex operators are operators that are not simple but are still fusable with simple ones. </p>
</td></tr>
<tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c"></a>Unfusable&#160;</td><td class="fielddoc"><p>Unfusable operators are operators that cannot be fused with any other types of operators. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_properties_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_gpu_operator_properties_8h_source.xhtml">GpuOperatorProperties.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /** Simple operators are operators that:</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">     *  1. Have a 1-to-1 mapping between the input elements and output elements, like elementwise</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">     *  2. Have exactly 1 output</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Complex operators are operators that are not simple but are still fusable with simple ones</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** Unfusable operators are operators that cannot be fused with any other types of operators</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::ComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::ComponentType::Complex</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuComponentType::Unfusable</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a462bfa9dfea81692463ecb192183dd01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a462bfa9dfea81692463ecb192183dd01">&#9670;&nbsp;</a></span>MemoryType <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Type of memory used by a workload tensor. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153"></a>Core&#160;</td><td class="fielddoc"><p>Core memory used by the Workload <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a>, e.g. </p>
<p>for argument tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"></a>Auxiliary&#160;</td><td class="fielddoc"><p>Auxiliary memory required by the Workload <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a>, e.g. </p>
<p>for temporary tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"></a>User&#160;</td><td class="fielddoc"><p><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> coming directly from users, e.g. </p>
<p>for argument tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"></a>Auxiliary&#160;</td><td class="fielddoc"><p>Additional memory required by the workload tensor, e.g. </p>
<p>for temporary tensors </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_memory_descriptor_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_memory_descriptor_8h_source.xhtml">MemoryDescriptor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a>      = 0, <span class="comment">/**&lt; Memory coming directly from users, e.g. for argument tensors */</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1, <span class="comment">/**&lt; Additional memory required by the workload tensor, e.g. for temporary tensors */</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">arm_compute::experimental::dynamic_fusion::MemoryType::Auxiliary</a></div><div class="ttdoc">Auxiliary memory required by the Workload Tensor, e.g. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">arm_compute::experimental::dynamic_fusion::MemoryType::User</a></div><div class="ttdoc">Memory coming directly from users, e.g. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a462bfa9dfea81692463ecb192183dd01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a462bfa9dfea81692463ecb192183dd01">&#9670;&nbsp;</a></span>MemoryType <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Type of memory used by a Workload <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a>. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153"></a>Core&#160;</td><td class="fielddoc"><p>Core memory used by the Workload <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a>, e.g. </p>
<p>for argument tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"></a>Auxiliary&#160;</td><td class="fielddoc"><p>Auxiliary memory required by the Workload <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a>, e.g. </p>
<p>for temporary tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"></a>User&#160;</td><td class="fielddoc"><p><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> coming directly from users, e.g. </p>
<p>for argument tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"></a>Auxiliary&#160;</td><td class="fielddoc"><p>Additional memory required by the workload tensor, e.g. </p>
<p>for temporary tensors </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_i_workload_8h_source.xhtml#l00059">59</a> of file <a class="el" href="_i_workload_8h_source.xhtml">IWorkload.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">Core</a>      = 0, <span class="comment">/**&lt; Core memory used by the Workload Tensor, e.g. for argument tensors */</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1, <span class="comment">/**&lt; Auxiliary memory required by the Workload Tensor, e.g. for temporary tensors */</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">arm_compute::experimental::dynamic_fusion::MemoryType::Core</a></div><div class="ttdoc">Core memory used by the Workload Tensor, e.g. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">arm_compute::experimental::dynamic_fusion::MemoryType::Auxiliary</a></div><div class="ttdoc">Auxiliary memory required by the Workload Tensor, e.g. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="add46c47c06ea70a8be0a2b3d67723bff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add46c47c06ea70a8be0a2b3d67723bff">&#9670;&nbsp;</a></span>OperatorComplexity</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#add46c47c06ea70a8be0a2b3d67723bff">OperatorComplexity</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="add46c47c06ea70a8be0a2b3d67723bffa10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="add46c47c06ea70a8be0a2b3d67723bffa1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_operator_graph_impl_8h_source.xhtml">OperatorGraphImpl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a> = 0,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::ComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::ComponentType::Complex</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae4b4b738b88d9f339fa9154f4305f6d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4b4b738b88d9f339fa9154f4305f6d4">&#9670;&nbsp;</a></span>SharedVarGroup</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">SharedVarGroup</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb"></a>Argument&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d"></a>Automatic&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00065">65</a> of file <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml">Common.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">Argument</a>, <span class="comment">// Parameters to a kernel function  == dst or src tensors of the whole blueprint graph</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">Automatic</a> <span class="comment">// Automatic variables declared within the kernel body == intermediate tensors of the whole blueprint graph</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">arm_compute::experimental::dynamic_fusion::SharedVarGroup::Automatic</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">arm_compute::experimental::dynamic_fusion::SharedVarGroup::Argument</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a72fd310d933d46bd03b9d33fbb283ee9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72fd310d933d46bd03b9d33fbb283ee9">&#9670;&nbsp;</a></span>SharedVarIO</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">SharedVarIO</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>We introduce the concept of <em>Shared Variables</em> in the context of kernel building. </p>
<p>They are variables that can be accessed / shared among all the kernel components within a single kernel. For now we consider 2 groups of shared variables: Argument: The argument variables (parameters) of a kernel Automatic: The automatic variables declared inside a kernel All Shared Variables have the same kernel scope, and are thus visible to all kernel components </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5"></a>Input&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54"></a>Output&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00059">59</a> of file <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml">Common.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::NodeType::Input</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a204edbd0a54dd4c773a4f5a0e14f450c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a204edbd0a54dd4c773a4f5a0e14f450c">&#9670;&nbsp;</a></span>StoreType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450c">StoreType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca009740daa8d09d010c72040a63191456"></a>VStore&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450caaa55927055c87fe4627fcff353f826a4"></a>VStorePartial&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca9671d940573ff3b188afbb50e6d45e4b"></a>StoreRow&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca2f7d9ebf458bcc56c7db8d09b419332f"></a>ConvertStoreRow&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca7184144ea67e407be08953db2573c89b"></a>StoreBlock&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca0278870a9e417b2f6b1a10a12b1322ad"></a>ConvertStoreBlock&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450cafee89e76e08fb425ddb06f801508b8b9"></a>StoreRowPartial&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca852d27b6a0aae650e40dda6caa14f8d4"></a>StoreBlockPartial&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450cad34cb78a48b094ebad5ec1ec8ca57a09"></a>StoreBlockBoundaryAware&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450caaeb24f654855cd208dfcc0bf9cc14f34"></a>StoreVectorSelect&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a204edbd0a54dd4c773a4f5a0e14f450ca230c8bbd95d90b28049617d5e793bb5f"></a>TStoreIndirectWidthSelect&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_descriptors_8h_source.xhtml#l00103">103</a> of file <a class="el" href="_cl_kernel_descriptors_8h_source.xhtml">ClKernelDescriptors.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca009740daa8d09d010c72040a63191456">VStore</a>,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450caaa55927055c87fe4627fcff353f826a4">VStorePartial</a>,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca9671d940573ff3b188afbb50e6d45e4b">StoreRow</a>,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca2f7d9ebf458bcc56c7db8d09b419332f">ConvertStoreRow</a>,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca7184144ea67e407be08953db2573c89b">StoreBlock</a>,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca0278870a9e417b2f6b1a10a12b1322ad">ConvertStoreBlock</a>,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cafee89e76e08fb425ddb06f801508b8b9">StoreRowPartial</a>,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca852d27b6a0aae650e40dda6caa14f8d4">StoreBlockPartial</a>,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cad34cb78a48b094ebad5ec1ec8ca57a09">StoreBlockBoundaryAware</a>,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450caaeb24f654855cd208dfcc0bf9cc14f34">StoreVectorSelect</a>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca230c8bbd95d90b28049617d5e793bb5f">TStoreIndirectWidthSelect</a></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450caaa55927055c87fe4627fcff353f826a4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450caaa55927055c87fe4627fcff353f826a4">arm_compute::experimental::dynamic_fusion::StoreType::VStorePartial</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca0278870a9e417b2f6b1a10a12b1322ad"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca0278870a9e417b2f6b1a10a12b1322ad">arm_compute::experimental::dynamic_fusion::StoreType::ConvertStoreBlock</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450cad34cb78a48b094ebad5ec1ec8ca57a09"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cad34cb78a48b094ebad5ec1ec8ca57a09">arm_compute::experimental::dynamic_fusion::StoreType::StoreBlockBoundaryAware</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca9671d940573ff3b188afbb50e6d45e4b"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca9671d940573ff3b188afbb50e6d45e4b">arm_compute::experimental::dynamic_fusion::StoreType::StoreRow</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca7184144ea67e407be08953db2573c89b"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca7184144ea67e407be08953db2573c89b">arm_compute::experimental::dynamic_fusion::StoreType::StoreBlock</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450cafee89e76e08fb425ddb06f801508b8b9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cafee89e76e08fb425ddb06f801508b8b9">arm_compute::experimental::dynamic_fusion::StoreType::StoreRowPartial</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca009740daa8d09d010c72040a63191456"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca009740daa8d09d010c72040a63191456">arm_compute::experimental::dynamic_fusion::StoreType::VStore</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca852d27b6a0aae650e40dda6caa14f8d4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca852d27b6a0aae650e40dda6caa14f8d4">arm_compute::experimental::dynamic_fusion::StoreType::StoreBlockPartial</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca2f7d9ebf458bcc56c7db8d09b419332f"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca2f7d9ebf458bcc56c7db8d09b419332f">arm_compute::experimental::dynamic_fusion::StoreType::ConvertStoreRow</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450ca230c8bbd95d90b28049617d5e793bb5f"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca230c8bbd95d90b28049617d5e793bb5f">arm_compute::experimental::dynamic_fusion::StoreType::TStoreIndirectWidthSelect</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a204edbd0a54dd4c773a4f5a0e14f450caaeb24f654855cd208dfcc0bf9cc14f34"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450caaeb24f654855cd208dfcc0bf9cc14f34">arm_compute::experimental::dynamic_fusion::StoreType::StoreVectorSelect</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="acae1e653bd15a1b7e22cd0e75bff5d6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acae1e653bd15a1b7e22cd0e75bff5d6a">&#9670;&nbsp;</a></span>add_kcomp_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> add_kcomp_activation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_activation_kernel_descriptor.xhtml">ClActivationKernelDescriptor</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Component: Activation. </p>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5b31d93990607b364102fb5f830de297"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b31d93990607b364102fb5f830de297">&#9670;&nbsp;</a></span>add_kcomp_direct_conv2d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> add_kcomp_direct_conv2d </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_blueprint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_direct_conv2d_kernel_descriptor.xhtml">ClDirectConv2dKernelDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>direct_conv2d_desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>src_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>weight_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>bias_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;&#160;</td>
          <td class="paramname"><em>dst_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Component: Direct Convolution. </p>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00465">ClKernelBlueprint::Implementation::add_component()</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">Output</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00039">ClDirectConv2dKernel::generate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    kernel_blueprint.impl().add_component(</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        std::make_unique&lt;ClDirectConvolutionKernelComponent&gt;(</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            &amp;kernel_blueprint,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            direct_conv2d_desc,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            SharedVarLink{ src_id, SharedVarIO::Input },</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            SharedVarLink{ weight_id, SharedVarIO::Input },</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            SharedVarLink{ dst_id, SharedVarIO::Output },</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            SharedVarLink{ bias_id, SharedVarIO::Input }));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa72df514647819356a6be8cd971f7ba3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa72df514647819356a6be8cd971f7ba3">&#9670;&nbsp;</a></span>add_kcomp_eltwise_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> add_kcomp_eltwise_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_blueprint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_elementwise_kernel_descriptor.xhtml">ClElementwiseKernelDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>src0_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>src1_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;&#160;</td>
          <td class="paramname"><em>dst_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Component: Eltwise <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a>. </p>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00465">ClKernelBlueprint::Implementation::add_component()</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">Output</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00127">ClElementwiseKernel::generate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    kernel_blueprint.impl().add_component(</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        std::make_unique&lt;ClElementwiseKernelComponent&gt;(</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            &amp;kernel_blueprint,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            desc,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            SharedVarLink{ src0_id, SharedVarIO::Input },</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            SharedVarLink{ src1_id, SharedVarIO::Input },</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            SharedVarLink{ dst_id, SharedVarIO::Output }));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad32cffcf6d3ef2e7a762e3547ee74890"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad32cffcf6d3ef2e7a762e3547ee74890">&#9670;&nbsp;</a></span>add_kcomp_floor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> add_kcomp_floor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_blueprint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_floor_kernel_descriptor.xhtml">ClFloorKernelDescriptor</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>src_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;&#160;</td>
          <td class="paramname"><em>dst_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Component: Floor. </p>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00465">ClKernelBlueprint::Implementation::add_component()</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">Output</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00195">ClFloorKernel::generate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    kernel_blueprint.impl().add_component(</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        std::make_unique&lt;ClFloorKernelComponent&gt;(</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            &amp;kernel_blueprint,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            SharedVarLink{ src_id, SharedVarIO::Input },</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            SharedVarLink{ dst_id, SharedVarIO::Output }));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6f46e60fa2d4e77d485d6a1f6c3631b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f46e60fa2d4e77d485d6a1f6c3631b9">&#9670;&nbsp;</a></span>add_kcomp_store()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> add_kcomp_store </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_blueprint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450c">StoreType</a> &amp;&#160;</td>
          <td class="paramname"><em>store_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>src_tile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>dst_tile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00465">ClKernelBlueprint::Implementation::add_component()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">Output</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450cad34cb78a48b094ebad5ec1ec8ca57a09">StoreBlockBoundaryAware</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204edbd0a54dd4c773a4f5a0e14f450ca230c8bbd95d90b28049617d5e793bb5f">TStoreIndirectWidthSelect</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">generate_store()</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">switch</span>(store_type)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">case</span> StoreType::StoreBlockBoundaryAware:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            kernel_blueprint.impl().add_component(</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                std::make_unique&lt;ClStoreBlockBoundaryAwareKernelComponent&gt;(</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    &amp;kernel_blueprint,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    SharedVarLink{ src_tile, SharedVarIO::Input },</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    SharedVarLink{ dst_tile, SharedVarIO::Output }));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">case</span> StoreType::TStoreIndirectWidthSelect:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            kernel_blueprint.impl().add_component(</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                std::make_unique&lt;ClStoreIndirectWidthSelectKernelComponent&gt;(</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    &amp;kernel_blueprint,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    SharedVarLink{ src_tile, SharedVarIO::Input },</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    SharedVarLink{ dst_tile, SharedVarIO::Output }));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Store mode not yet supported.&quot;</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a859ce0f92e55dabcfe0ce42b4d0be85e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a859ce0f92e55dabcfe0ce42b4d0be85e">&#9670;&nbsp;</a></span>add_op_conv2d() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> add_op_conv2d </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add op Conv2d to <code>graph</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">graph</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml" title="Graph of operators to execute within a Workload. ">OperatorGraph</a> where the operator is added to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> descriptor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias</td><td>(Optional) bias <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dst</td><td>Destination <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a21">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00134">134</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">arm_compute::ACL_DST_0</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">arm_compute::ACL_SRC_0</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">arm_compute::ACL_SRC_1</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">arm_compute::ACL_SRC_2</a>, <a class="el" href="_i_tensor_desc_pack_8h_source.xhtml#l00104">ITensorDescPack&lt; TDesc &gt;::add_const_tensor()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00212">OperatorGraph::Implementation::add_node()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00796">Padding2D::bottom</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00713">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::FLOOR</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">DependencyGraph::get_root_ops()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00074">OpTensorContent::get_tensor_info()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00079">OpTensor::id()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00793">Padding2D::left</a>, <a class="el" href="_operator_graph_8h_source.xhtml#l00136">Conv2dDescriptor::pad</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00794">Padding2D::right</a>, <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::RUNTIME_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00238">OperatorGraph::Implementation::status</a>, <a class="el" href="_operator_graph_8h_source.xhtml#l00137">Conv2dDescriptor::stride</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00237">OperatorGraph::Implementation::tensors</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00795">Padding2D::top</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00075">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00084">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_operator_graph_8cpp_source.xhtml#l00190">add_op_conv2d()</a>, and <a class="el" href="_arbitrary_elementwise_fusion_8cpp_source.xhtml#l00251">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Check if map is empty as a complex operator can only be root</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span>(!graph.impl()-&gt;graph.get_root_ops().empty())</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        graph.impl()-&gt;status = Status{ ErrorCode::RUNTIME_ERROR, <span class="stringliteral">&quot;Cannot add multiple complex operators&quot;</span> };</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a>{};</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::pair&lt;Status, DependencyGraph::Id&gt; status_id;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.id() == -1)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        status_id = graph.impl()-&gt;graph.add_operator({ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.id(), weights.id() }, { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id() });</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        status_id = graph.impl()-&gt;graph.add_operator({ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.id(), weights.id(), <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.id() }, { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id() });</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    check_dependency_graph_op_success(graph, status_id.first);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a> op_node(status_id.second);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Infer TensorInfo</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    OpTensorContent *dst_tensor = graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id()].get();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span>(dst_tensor-&gt;get_tensor_info()-&gt;total_size() == 0)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>   = graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.id()]-&gt;get_tensor_info();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">auto</span> wts   = graph.impl()-&gt;tensors[weights.id()]-&gt;get_tensor_info();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">misc::shape_calculator::compute_deep_convolution_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout(), wts-&gt;tensor_shape(), PadStrideInfo(desc.stride.x(), desc.stride.y(), desc.pad.left,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                                                            desc.pad.right,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                                                            desc.pad.top, desc.pad.bottom, DimensionRoundingType::FLOOR)); <span class="comment">// use the default DimensionRoundingType</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*(dst_tensor-&gt;get_tensor_info()), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;clone()-&gt;set_tensor_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Check execution space</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">auto</span> dst_info = dst_tensor-&gt;get_tensor_info();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    check_execution_shape(graph, *dst_info);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    ITensorDescPack&lt;OpTensorContent&gt; tensors;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.id()].get());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, graph.impl()-&gt;tensors[weights.id()].get());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.id() != -1)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">ACL_SRC_2</a>, graph.impl()-&gt;tensors[<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.id()].get());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>, graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id()].get());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    graph.impl()-&gt;add_node&lt;Conv2dContent&gt;(status_id.second, desc, tensors);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    check_multiple_roots(graph);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> op_node;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">arm_compute::detail::ObjectType::Operator</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ac93cc76b563b366f030b8310a46046c3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">arm_compute::misc::shape_calculator::compute_deep_convolution_shape</a></div><div class="ttdeci">TensorShape compute_deep_convolution_shape(const TensorShape &amp;input_shape, DataLayout input_data_layout, const TensorShape &amp;weights_shape, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the deep convolution shape output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00713">ShapeCalculator.h:713</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f35f393fb5fcab516529f5dd5dcbdeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f35f393fb5fcab516529f5dd5dcbdeb">&#9670;&nbsp;</a></span>add_op_conv2d() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> add_op_conv2d </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00190">190</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8cpp_source.xhtml#l00134">add_op_conv2d()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a>(graph, desc, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, OpTensor(-1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a859ce0f92e55dabcfe0ce42b4d0be85e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">arm_compute::experimental::dynamic_fusion::add_op_conv2d</a></div><div class="ttdeci">Operator add_op_conv2d(OperatorGraph &amp;graph, const Conv2dDescriptor &amp;desc, OpTensor input, OpTensor weights, OpTensor bias, OpTensor dst)</div><div class="ttdoc">Add op Conv2d to graph. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00134">OperatorGraph.cpp:134</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6ddaa43fa5e752d3a4804654ef17890b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ddaa43fa5e752d3a4804654ef17890b">&#9670;&nbsp;</a></span>add_op_elementwise_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> add_op_elementwise_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add op Elementwise to <code>graph</code>, and optionally describes fusion through passing of intermediate <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> s. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">graph</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml" title="Graph of operators to execute within a Workload. ">OperatorGraph</a> where the operator is added to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> descriptor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>Lhs <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Rhs <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dst</td><td>Destination <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a28">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00201">201</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">arm_compute::ACL_DST_0</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">arm_compute::ACL_SRC_0</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">arm_compute::ACL_SRC_1</a>, <a class="el" href="_i_tensor_desc_pack_8h_source.xhtml#l00104">ITensorDescPack&lt; TDesc &gt;::add_const_tensor()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00212">OperatorGraph::Implementation::add_node()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00317">ITensorInfo::broadcast_shape_and_valid_region()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00074">OpTensorContent::get_tensor_info()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00079">OpTensor::id()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00237">OperatorGraph::Implementation::tensors</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arbitrary_elementwise_fusion_8cpp_source.xhtml#l00056">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">auto</span> <span class="keywordtype">id</span> = graph.impl()-&gt;graph.add_operator({ rhs.id(), lhs.id() }, { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id() });</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    check_dependency_graph_op_success(graph, <span class="keywordtype">id</span>.first);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a> op_node(<span class="keywordtype">id</span>.second);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Infer TensorInfo</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">auto</span>             node_lhs = graph.impl()-&gt;tensors[lhs.id()]-&gt;get_tensor_info();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">auto</span>             node_rhs = graph.impl()-&gt;tensors[rhs.id()]-&gt;get_tensor_info();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    OpTensorContent *node_dst = graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id()].get();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span>(node_dst-&gt;get_tensor_info()-&gt;total_size() == 0)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keyword">const</span> std::pair&lt;TensorShape, ValidRegion&gt; broadcast_pair = ITensorInfo::broadcast_shape_and_valid_region(*node_rhs, *node_lhs);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*(node_dst-&gt;get_tensor_info()), node_lhs-&gt;clone()-&gt;set_tensor_shape(broadcast_pair.first));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Check execution space</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">auto</span> dst_info = node_dst-&gt;get_tensor_info();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    check_execution_shape(graph, *dst_info);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    ITensorDescPack&lt;OpTensorContent&gt; tensors;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, graph.impl()-&gt;tensors[lhs.id()].get());</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, graph.impl()-&gt;tensors[rhs.id()].get());</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>, graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id()].get());</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    graph.impl()-&gt;add_node&lt;ElementwiseContent&gt;(<span class="keywordtype">id</span>.second, desc, tensors);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    check_multiple_roots(graph);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> op_node;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">arm_compute::detail::ObjectType::Operator</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f7c5a493aa563a630eaec1042f95071"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f7c5a493aa563a630eaec1042f95071">&#9670;&nbsp;</a></span>add_op_floor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> add_op_floor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add op Floor to <code>graph</code>, and optionally describes fusion through passing of intermediate <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> s. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">graph</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml" title="Graph of operators to execute within a Workload. ">OperatorGraph</a> where the operator is added to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> descriptor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Source <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dst</td><td>Destination <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">arm_compute::ACL_DST_0</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">arm_compute::ACL_SRC_0</a>, <a class="el" href="_i_tensor_desc_pack_8h_source.xhtml#l00104">ITensorDescPack&lt; TDesc &gt;::add_const_tensor()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00212">OperatorGraph::Implementation::add_node()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00074">OpTensorContent::get_tensor_info()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00079">OpTensor::id()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00237">OperatorGraph::Implementation::tensors</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">auto</span> <span class="keywordtype">id</span> = graph.impl()-&gt;graph.add_operator({ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.id() }, { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id() });</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    check_dependency_graph_op_success(graph, <span class="keywordtype">id</span>.first);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a> op_node(<span class="keywordtype">id</span>.second);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Infer TensorInfo</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">auto</span>             node_src = graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.id()]-&gt;get_tensor_info();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    OpTensorContent *node_dst = graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id()].get();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span>(node_dst-&gt;get_tensor_info()-&gt;total_size() == 0)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*(node_dst-&gt;get_tensor_info()), *node_src);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Check execution space</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">auto</span> dst_info = node_dst-&gt;get_tensor_info();</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    check_execution_shape(graph, *dst_info);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    ITensorDescPack&lt;OpTensorContent&gt; tensors;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.id()].get());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    tensors.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>, graph.impl()-&gt;tensors[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.id()].get());</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    graph.impl()-&gt;add_node&lt;FloorContent&gt;(<span class="keywordtype">id</span>.second, desc, tensors);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    check_multiple_roots(graph);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> op_node;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">arm_compute::detail::ObjectType::Operator</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1b34a241db1e77fd83e15283136132de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b34a241db1e77fd83e15283136132de">&#9670;&nbsp;</a></span>add_tensor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> add_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_blueprint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>merge_point</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00430">ClKernelBlueprint::Implementation::add_kernel_tensor()</a>, and <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">id</span> = kernel_blueprint.impl().add_kernel_tensor(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, merge_point);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8aad35ee7c2bfa06456fade719732d21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8aad35ee7c2bfa06456fade719732d21">&#9670;&nbsp;</a></span>add_tensor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> add_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Associate a <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">TensorInfo</a> with a newly created <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> in the <code>graph</code>. </p>
<dl class="section note"><dt>Note</dt><dd><code>info</code> needs to remain in scope and valid until the workload has finished building </dd>
<dd>
Can pass in an empty <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">TensorInfo</a> for a destination <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a>, in which case <code>info</code> will be inferred from the source tensors</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">graph</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml" title="Graph of operators to execute within a Workload. ">OperatorGraph</a> where the tensor is added </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">TensorInfo</a> to be associated</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a17">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00126">126</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00061">DependencyGraph::add_tensor()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00218">OperatorGraph::Implementation::add_tensor()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, and <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00039">ClDirectConv2dKernel::generate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00127">ClElementwiseKernel::generate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00195">ClFloorKernel::generate()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">generate_store()</a>, and <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">auto</span>     <span class="keywordtype">id</span> = graph.impl()-&gt;graph.add_tensor();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    OpTensor op_tensor(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    graph.impl()-&gt;add_tensor(<span class="keywordtype">id</span>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> op_tensor;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0d7c1c3d9ad0be83d4dd2dc9d444ad32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">&#9670;&nbsp;</a></span>bind_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> bind_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml">ClAuxTensorData</a> &amp;&#160;</td>
          <td class="paramname"><em>aux_tensor_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;&#160;</td>
          <td class="paramname"><em>prepare_pack_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;&#160;</td>
          <td class="paramname"><em>run_pack_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> &amp;&#160;</td>
          <td class="paramname"><em>op_tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bind tensor memory to packs used by prepare and run methods. </p>
<p>Create auxiliary tensor objects and their memory requirements if needed</p>
<dl class="section note"><dt>Note</dt><dd>This is the only method for external user to create <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml" title="Holder of any auxiliary CLTensors required by a ClWorkload. ">ClAuxTensorData</a>, and the prepare and run TensorPackMaps</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">aux_tensor_data</td><td>Auxiliary Tensors required by the workload </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">prepare_pack_map</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml" title="Map a kernel (as identified by its unit workload id) to its corresponding tensor pack. ">TensorPackMap</a> used by the prepare method </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">run_pack_map</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml" title="Map a kernel (as identified by its unit workload id) to its corresponding tensor pack. ">TensorPackMap</a> used by the run method </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml" title="Workload for Cl backend. ">ClWorkload</a> to bind the tensors to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op_tensors</td><td><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml" title="Basic implementation of the OpenCL tensor interface. ">CLTensor</a> memory objects mapped from Core OpTensors</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a41">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00104">104</a> of file <a class="el" href="_cl_composite_operator_8cpp_source.xhtml">ClCompositeOperator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00138">ClAuxTensorData::add_aux_tensor()</a>, <a class="el" href="_error_8h_source.xhtml#l00159">ARM_COMPUTE_CREATE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">Core</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">memory_info</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00201">ClWorkload::op_tensor_id_lut</a>, <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::RUNTIME_ERROR</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor_info</a>, and <a class="el" href="_cl_workload_8h_source.xhtml#l00200">ClWorkload::tensors</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.tensors)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> wk_tensor_id  = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.first; <span class="comment">// workload tensor id</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        ICLTensor *tensor_object = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.second.memory_type == MemoryType::Core)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> op_tensor_id   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.op_tensor_id_lut.at(wk_tensor_id);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">auto</span>       op_tensor_find = op_tensors.find(op_tensor_id);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span>(op_tensor_find == op_tensors.end())</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(ErrorCode::RUNTIME_ERROR, <span class="stringliteral">&quot;Cannot find binding for some operator tensor&quot;</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            tensor_object = utils::cast::polymorphic_downcast&lt;ICLTensor *&gt;(op_tensor_find-&gt;second);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.second.memory_type == MemoryType::Auxiliary)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="comment">// Create aux tensor CLTensor object</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keyword">const</span> TensorInfo <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> = *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.second.info;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       <a class="code" href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a> = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.second.memory_info;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            tensor_object                = aux_tensor_data.add_aux_tensor(wk_tensor_id, tensor_info, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(ErrorCode::RUNTIME_ERROR, <span class="stringliteral">&quot;Unsupported tensor memory type&quot;</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = add_tensor_to_tensor_pack(wk_tensor_id, tensor_object, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>, prepare_pack_map, run_pack_map);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(st);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_abd1839b751c3e3abfec78177d70b8cb4"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a></div><div class="ttdeci">AuxMemoryInfo memory_info</div><div class="ttdoc">Memory requirement. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00068">ClWorkloadRuntime.cpp:68</a></div></div>
<div class="ttc" id="_error_8h_xhtml_af1b8ff8eb557a2ad11272f1505f45d34"><div class="ttname"><a href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_CREATE_ERROR(error_code, msg)</div><div class="ttdoc">Creates an error with a given message. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00159">Error.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad001edc7e4d1ea972be09f232c6e7729"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">arm_compute::test::validation::workload</a></div><div class="ttdeci">ClWorkload workload</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00266">Integration_OperatorFuseMovenetSubGraph1.cpp:266</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2723f1bf866ae789021e51854e92e48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2723f1bf866ae789021e51854e92e48">&#9670;&nbsp;</a></span>build() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> build </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;&#160;</td>
          <td class="paramname"><em>code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context.xhtml">ClCodeBuilderContext</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_blueprint</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Build final kernel source from KernelBlueprint. </p>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00140">140</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_8h_source.xhtml#l00112">ClKernelCode::arguments</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00559">ClKernelBlueprint::Implementation::build_code()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00642">ClKernelBlueprint::Implementation::build_config_id()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00547">ClKernelBlueprint::Implementation::build_kernel_name()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00110">ClKernelCode::build_options</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00653">ClKernelBlueprint::Implementation::build_options()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00108">ClKernelCode::code</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00109">ClKernelCode::config_id</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00724">ClKernelBlueprint::Implementation::finalize()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00684">ClKernelBlueprint::Implementation::get_arguments()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00671">ClKernelBlueprint::Implementation::get_execution_window()</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00107">ClKernelCode::name</a>, and <a class="el" href="_cl_workload_8h_source.xhtml#l00111">ClKernelCode::window</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    kernel_blueprint.impl().finalize();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    code.name = kernel_blueprint.impl().build_kernel_name();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    code.code = kernel_blueprint.impl().build_code();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    code.config_id     = kernel_blueprint.impl().build_config_id();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    code.build_options = kernel_blueprint.impl().build_options();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    code.window        = kernel_blueprint.impl().get_execution_window();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    code.arguments     = kernel_blueprint.impl().get_arguments();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0ba70c7ef99250a96e87378c163f2b0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ba70c7ef99250a96e87378c163f2b0e">&#9670;&nbsp;</a></span>build() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> build </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>op_graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Build a <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> from an <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">workload</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op_graph</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a35">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_cl_workload_8cpp_source.xhtml">ClWorkload.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00198">ClWorkload::context</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00181">DependencyGraph::dst_tensors()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00096">fuse()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">generate()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00140">DependencyGraph::get_merge_points()</a>, <a class="el" href="_i_workload_8h_source.xhtml#l00125">IWorkload::graph</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00246">ClKernelGraph::graph</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00083">init_fusion_graph()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00201">ClWorkload::op_tensor_id_lut</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00402">ClFusedKernelGraph::original_graph</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00175">DependencyGraph::src_tensors()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00202">ClWorkload::status</a>, <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00410">translate()</a>, and <a class="el" href="_operator_graph_8cpp_source.xhtml#l00121">validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00127">Program::binary()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">generate()</a>, and <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.context = ctx;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    ClKernelGraph kernel_graph;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7d17b6e1662f7d156474fbb3d2288347">translate</a>(kernel_graph, *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>.impl());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    ClFusedKernelGraph fused_k_graph;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::tie(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status, fused_k_graph) = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a124185cc0f16b8bc162cf4845c91d1d2">init_fusion_graph</a>(kernel_graph);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa11c975459908699abf6078773ae19b3">fuse</a>(fused_k_graph);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ee8e10e12b8d521a028c681b8ba31ad">generate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>, ctx, fused_k_graph);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Get operator tensor id to workload tensor id map</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> op_tensor_to_kernel_tensor       = fused_k_graph.original_graph-&gt;graph.get_merge_points();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kernel_tensor_to_workload_tensor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.graph.get_merge_points();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> op_t : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>.impl()-&gt;graph.src_tensors())</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> kernel_t                   = op_tensor_to_kernel_tensor.at(op_t);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> workload_t                 = kernel_tensor_to_workload_tensor.at(kernel_t);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.op_tensor_id_lut[workload_t] = op_t;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> op_t : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>.impl()-&gt;graph.dst_tensors())</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> kernel_t                   = op_tensor_to_kernel_tensor.at(op_t);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> workload_t                 = kernel_tensor_to_workload_tensor.at(kernel_t);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.op_tensor_id_lut[workload_t] = op_t;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.status;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a048af4e9fc68526bf6d39e80e043a456"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">arm_compute::experimental::dynamic_fusion::validate</a></div><div class="ttdeci">Status validate(const OperatorGraph &amp;op_graph)</div><div class="ttdoc">Return the validity of op_graph, usually after performing an operation (e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00121">OperatorGraph.cpp:121</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a7d17b6e1662f7d156474fbb3d2288347"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7d17b6e1662f7d156474fbb3d2288347">arm_compute::experimental::dynamic_fusion::translate</a></div><div class="ttdeci">Status translate(ClKernelGraph &amp;kernel_graph, const OperatorGraph::Implementation &amp;op_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8cpp_source.xhtml#l00410">OperatorGraphImpl.cpp:410</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0ee8e10e12b8d521a028c681b8ba31ad"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ee8e10e12b8d521a028c681b8ba31ad">arm_compute::experimental::dynamic_fusion::generate</a></div><div class="ttdeci">Status generate(ClWorkload &amp;workload, const ClWorkloadContext &amp;ctx, const ClFusedKernelGraph &amp;fused_kernel_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">ClFusedKernelGraph.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa11c975459908699abf6078773ae19b3"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa11c975459908699abf6078773ae19b3">arm_compute::experimental::dynamic_fusion::fuse</a></div><div class="ttdeci">Status fuse(ClFusedKernelGraph &amp;fused_kernel_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00096">ClFusedKernelGraph.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad001edc7e4d1ea972be09f232c6e7729"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">arm_compute::test::validation::workload</a></div><div class="ttdeci">ClWorkload workload</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00266">Integration_OperatorFuseMovenetSubGraph1.cpp:266</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad471f4eec82e65ca35e1cf32bda90200"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">arm_compute::test::validation::op_graph</a></div><div class="ttdeci">OperatorGraph op_graph</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00253">Integration_OperatorFuseMovenetSubGraph1.cpp:253</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a124185cc0f16b8bc162cf4845c91d1d2"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a124185cc0f16b8bc162cf4845c91d1d2">arm_compute::experimental::dynamic_fusion::init_fusion_graph</a></div><div class="ttdeci">std::pair&lt; Status, ClFusedKernelGraph &gt; init_fusion_graph(const ClKernelGraph &amp;kernel_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00083">ClFusedKernelGraph.cpp:83</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac22ae0b39a8e2c53ed4fcbec12e49731"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac22ae0b39a8e2c53ed4fcbec12e49731">&#9670;&nbsp;</a></span>export_to_cl_image_support()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::export_to_cl_image_support </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>gpu_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml">ClDirectConvolutionKernelComponent.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">arm_compute::G71</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00240">arm_compute::get_arch_from_target()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00379">arm_compute::get_cl_image_pitch_alignment()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00069">CLKernelLibrary::get_device()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00374">arm_compute::image2d_from_buffer_supported()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">arm_compute::is_data_type_float()</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::MIDGARD</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00328">ClDirectConvolutionKernelComponent::allocate_shared_vars()</a>, <a class="el" href="_gpu_conv2d_8cpp_source.xhtml#l00172">GpuConv2d::create_op()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00294">ClDirectConvolutionKernelComponent::generate_build_options()</a>, and <a class="el" href="_gpu_conv2d_8cpp_source.xhtml#l00092">GpuConv2d::validate_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[0] % 4 || (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> != DataLayout::NHWC))</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// If not floating point</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;data_type()))</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span>(gpu_target == GPUTarget::G71 || <a class="code" href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">get_arch_from_target</a>(gpu_target) == GPUTarget::MIDGARD)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="comment">// Check if the cl_khr_image2d_from_buffer extension is supported on the target platform</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">image2d_from_buffer_supported</a>(CLKernelLibrary::get().get_device()))</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Check cl image pitch alignment</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">get_cl_image_pitch_alignment</a>(CLKernelLibrary::get().get_device()) == 0)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_w     = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[0] / 4;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_h     = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[1] * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[2] * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;tensor_shape()[3];</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_w = CLKernelLibrary::get().get_device().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_WIDTH&gt;();</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_h = CLKernelLibrary::get().get_device().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_HEIGHT&gt;();</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">if</span>(image_w &gt; max_image_w || image_h &gt; max_image_h)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a777eb2ab77bdf5aea2d25c31b4acee2c"><div class="ttname"><a href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">arm_compute::image2d_from_buffer_supported</a></div><div class="ttdeci">bool image2d_from_buffer_supported(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to check whether the cl_khr_image2d_from_buffer extension is supported. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00374">CLHelpers.cpp:374</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00403">ConvolutionLayer.cpp:403</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2355c2bf5d1950088937416baea24fe6"><div class="ttname"><a href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">arm_compute::get_arch_from_target</a></div><div class="ttdeci">GPUTarget get_arch_from_target(GPUTarget target)</div><div class="ttdoc">Helper function to get the GPU arch. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00240">GPUTarget.cpp:240</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a97428e76ac2940d45fc9772854b7fd8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">arm_compute::get_cl_image_pitch_alignment</a></div><div class="ttdeci">size_t get_cl_image_pitch_alignment(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the cl_image pitch alignment in pixels. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00379">CLHelpers.cpp:379</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">Utils.h:1010</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0500494c1c88e005019c1046023207b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0500494c1c88e005019c1046023207b9">&#9670;&nbsp;</a></span>force_conv2d_method()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void force_conv2d_method </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>&#160;</td>
          <td class="paramname"><em>conv2d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>&#160;</td>
          <td class="paramname"><em>method</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>(Only for Debuging and Testing) Force a conv2d method </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">graph</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml" title="Graph of operators to execute within a Workload. ">OperatorGraph</a> where conv2d op is located </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv2d</td><td>Conv2d Op </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">method</td><td>Forced ConvolutionMethod </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a22">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00195">195</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8cpp_source.xhtml#l00094">Operator::id()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>, and <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00236">OperatorGraph::Implementation::operators</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arbitrary_elementwise_fusion_8cpp_source.xhtml#l00251">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">auto</span> node = utils::cast::polymorphic_downcast&lt;Conv2dContent *&gt;(graph.impl()-&gt;operators[conv2d.id()].get());</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    node-&gt;set_method(method);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa11c975459908699abf6078773ae19b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa11c975459908699abf6078773ae19b3">&#9670;&nbsp;</a></span>fuse()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> fuse </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>fused_kernel_graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00319">ClFusedKernelGraph::can_fuse()</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00181">ClFusedKernelGraph::fuse()</a>, and <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">traverse()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">build()</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// A naive fusion algorithm that&#39;s guaranteed to find optimal pattern if there are no branches</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// If there are branches, the algorithm cannot guanrantee optimality as it doesn&#39;t perform any searches</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">bool</span> fusion_found = <span class="keyword">false</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">do</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        fusion_found          = <span class="keyword">false</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> sorted_fgs = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">traverse</a>(fused_kernel_graph);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span>(sorted_fgs.size() &lt;= 1)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="comment">// Only one or zero fusion group, thus no need to perform fusion</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">auto</span> fgs_combo = get_combinations(sorted_fgs);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> fgs : fgs_combo)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">auto</span>       fg0 = fgs.first;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">auto</span>       fg1 = fgs.second;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> st  = fused_kernel_graph.can_fuse(*fg0, *fg1);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> st = fused_kernel_graph.fuse(*fg0, *fg1);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                fusion_found = <span class="keyword">true</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">while</span>(fusion_found);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a5523818c3f589d14e258c437dfdfdf9c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">arm_compute::experimental::dynamic_fusion::traverse</a></div><div class="ttdeci">std::vector&lt; ClKernelFusionGroup * &gt; traverse(ClFusedKernelGraph &amp;graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00072">ClFusedKernelGraph.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0ee8e10e12b8d521a028c681b8ba31ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ee8e10e12b8d521a028c681b8ba31ad">&#9670;&nbsp;</a></span>generate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> generate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>fused_kernel_graph</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">170</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_8h_source.xhtml#l00184">ClWorkload::add_unit_workload()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00175">ClWorkload::add_workload_tensor()</a>, <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">build()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00198">ClWorkload::context</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00181">DependencyGraph::dst_tensors()</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00403">ClFusedKernelGraph::fg_dependency</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">generate_store()</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00153">get_dependency_graph()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00237">ClKernelGraph::get_tensor()</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00168">ClWorkloadContext::gpu_info</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00402">ClFusedKernelGraph::original_graph</a>, <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00135">set_tile_info()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00175">DependencyGraph::src_tensors()</a>, and <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">traverse()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">build()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00131">ClDirectConv2dKernel::ClDirectConv2dKernel()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00151">ClElementwiseKernel::ClElementwiseKernel()</a>, and <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00171">ClFloorKernel::ClFloorKernel()</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.context = ctx;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;fg : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">traverse</a>(fused_kernel_graph))</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        ClKernelBlueprint bp{};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;kernel : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">traverse</a>(*fg))</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> st = kernel-&gt;generate(bp);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">auto</span> st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8bf3f564acec14f99a8233408a295d34">set_tile_info</a>(bp, fg-&gt;get_root_kernel()-&gt;config().tile_desc);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">generate_store</a>(bp, fused_kernel_graph, *fg);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        ClKernelCode code{};</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">build</a>(code, ClCodeBuilderContext{ ctx.gpu_info }, bp);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bp_graph = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6179df3e79fcbbcef0e5aabfb1fce4">get_dependency_graph</a>(bp);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">// Get tensor info</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        std::vector&lt;Id&gt; workload_src_tensors{};</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;src_t_id : fused_kernel_graph.fg_dependency.src_tensors(fg-&gt;id))</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> src_t = fused_kernel_graph.original_graph-&gt;get_tensor(src_t_id);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="comment">// Get corresponding kernel arg descriptor</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_desc    = code.arguments.at(bp_graph.get_merge_points().at(src_t-&gt;id));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> kernel_t_id = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.add_workload_tensor(src_t-&gt;desc, src_t-&gt;memory_type, src_t-&gt;memory_info, arg_desc, src_t-&gt;id);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            workload_src_tensors.push_back(kernel_t_id);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        std::vector&lt;Id&gt; workload_dst_tensors{};</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;dst_t_id : fused_kernel_graph.fg_dependency.dst_tensors(fg-&gt;id))</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> dst_t = fused_kernel_graph.original_graph-&gt;get_tensor(dst_t_id);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// Get corresponding kernel arg descriptor</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_desc    = code.arguments.at(bp_graph.get_merge_points().at(dst_t-&gt;id));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> kernel_t_id = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.add_workload_tensor(dst_t-&gt;desc, dst_t-&gt;memory_type, dst_t-&gt;memory_info, arg_desc, dst_t-&gt;id);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            workload_dst_tensors.push_back(kernel_t_id);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>.add_unit_workload(fg-&gt;get_root_kernel()-&gt;config().stage, code, workload_src_tensors, workload_dst_tensors);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8d6179df3e79fcbbcef0e5aabfb1fce4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6179df3e79fcbbcef0e5aabfb1fce4">arm_compute::experimental::dynamic_fusion::get_dependency_graph</a></div><div class="ttdeci">DependencyGraph get_dependency_graph(const ClKernelBlueprint &amp;blueprint)</div><div class="ttdoc">Get dependency graph. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00153">ClKernelBuildingAPI.cpp:153</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a5523818c3f589d14e258c437dfdfdf9c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">arm_compute::experimental::dynamic_fusion::traverse</a></div><div class="ttdeci">std::vector&lt; ClKernelFusionGroup * &gt; traverse(ClFusedKernelGraph &amp;graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00072">ClFusedKernelGraph.cpp:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0ba70c7ef99250a96e87378c163f2b0e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">arm_compute::experimental::dynamic_fusion::build</a></div><div class="ttdeci">Status build(ClWorkload &amp;workload, const OperatorGraph &amp;op_graph, const ClWorkloadContext &amp;ctx)</div><div class="ttdoc">Build a ClWorkload from an OperatorGraph. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8cpp_source.xhtml#l00036">ClWorkload.cpp:36</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad001edc7e4d1ea972be09f232c6e7729"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">arm_compute::test::validation::workload</a></div><div class="ttdeci">ClWorkload workload</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00266">Integration_OperatorFuseMovenetSubGraph1.cpp:266</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8bf3f564acec14f99a8233408a295d34"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8bf3f564acec14f99a8233408a295d34">arm_compute::experimental::dynamic_fusion::set_tile_info</a></div><div class="ttdeci">Status set_tile_info(ClKernelBlueprint &amp;bp, const TileDescriptor &amp;tile_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00135">ClKernelBuildingAPI.cpp:135</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8d6a9002a9d5c0fc67a8c4d547b37491"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">arm_compute::experimental::dynamic_fusion::generate_store</a></div><div class="ttdeci">Status generate_store(ClKernelBlueprint &amp;bp, const ClFusedKernelGraph &amp;fused_kernel_graph, const ClKernelFusionGroup &amp;fg)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">ClFusedKernelGraph.cpp:132</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d6a9002a9d5c0fc67a8c4d547b37491"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d6a9002a9d5c0fc67a8c4d547b37491">&#9670;&nbsp;</a></span>generate_store()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> generate_store </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>bp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>fused_kernel_graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> &amp;&#160;</td>
          <td class="paramname"><em>fg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>NOTE: dst tensor must have already been added to the blueprint at this point</p>
<p>NOTE: the extra dst tensor is needed as the store kcomp requires 2 tensors. But this is irrelevant to the fused kernel graph since both tensors share the exact same info and kernel arg descriptor</p>
<p>NOTE: Update the merge point map to link dst_dst_id with dst_t-&gt;id instead. This is required because the get_arguments() returned by the blueprint returns the dst tensor added by the store component </p>

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00105">add_kcomp_store()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00126">add_tensor()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00110">ClKernel::config()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00181">DependencyGraph::dst_tensors()</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00403">ClFusedKernelGraph::fg_dependency</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00094">ClKernelFusionGroup::get_root_kernel()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00237">ClKernelGraph::get_tensor()</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00126">ClKernelFusionGroup::id</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00402">ClFusedKernelGraph::original_graph</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00058">ClKernelConfig::store_type</a>, and <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00130">update_merge_point()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">generate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    Status st{};</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;dst_t_id : fused_kernel_graph.fg_dependency.dst_tensors(fg.id))</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_t = fused_kernel_graph.original_graph-&gt;get_tensor(dst_t_id);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">        /// NOTE: dst tensor must have already been added to the blueprint at this point</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span>        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> dst_id;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(bp, dst_t-&gt;desc, dst_id, dst_t-&gt;id);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">        /// NOTE: the extra dst tensor is needed as the store kcomp requires 2 tensors. But this is irrelevant to the fused kernel graph</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">        /// since both tensors share the exact same info and kernel arg descriptor</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span>        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> dst_dst_id;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(bp, dst_t-&gt;desc, dst_dst_id);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">        /// NOTE: Update the merge point map to link dst_dst_id with dst_t-&gt;id instead.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">        /// This is required because the get_arguments() returned by the blueprint returns the dst tensor added by the store component</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span>        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a13ef6b46310330560a9de9e9b4ff4b2b">update_merge_point</a>(bp, dst_dst_id, dst_t-&gt;id);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6f46e60fa2d4e77d485d6a1f6c3631b9">add_kcomp_store</a>(bp, fg.get_root_kernel()-&gt;config().store_type, dst_id, dst_dst_id);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a13ef6b46310330560a9de9e9b4ff4b2b"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a13ef6b46310330560a9de9e9b4ff4b2b">arm_compute::experimental::dynamic_fusion::update_merge_point</a></div><div class="ttdeci">Status update_merge_point(ClKernelBlueprint &amp;bp, ArgumentID t_id, ArgumentID merge_point)</div><div class="ttdoc">Update existing merge tensor merge_point to point to t_id. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00130">ClKernelBuildingAPI.cpp:130</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8aad35ee7c2bfa06456fade719732d21"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">arm_compute::experimental::dynamic_fusion::add_tensor</a></div><div class="ttdeci">OpTensor add_tensor(OperatorGraph &amp;graph, ITensorInfo &amp;info)</div><div class="ttdoc">Associate a TensorInfo with a newly created OpTensor in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00126">OperatorGraph.cpp:126</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a17988896270878f90fb442bb42b0297c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">arm_compute::experimental::dynamic_fusion::ArgumentID</a></div><div class="ttdeci">DependencyGraph::Id ArgumentID</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00041">ClKernelBuildingAPI.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6f46e60fa2d4e77d485d6a1f6c3631b9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6f46e60fa2d4e77d485d6a1f6c3631b9">arm_compute::experimental::dynamic_fusion::add_kcomp_store</a></div><div class="ttdeci">Status add_kcomp_store(ClKernelBlueprint &amp;kernel_blueprint, const StoreType &amp;store_type, ArgumentID src_tile, ArgumentID dst_tile)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00105">ClKernelBuildingAPI.cpp:105</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d6179df3e79fcbbcef0e5aabfb1fce4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d6179df3e79fcbbcef0e5aabfb1fce4">&#9670;&nbsp;</a></span>get_dependency_graph()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> get_dependency_graph </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>blueprint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dependency graph. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml" title="The dependency graph of a workload, where the nodes are of 2 types: Tensor or Operator Represented as...">DependencyGraph</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00730">ClKernelBlueprint::Implementation::get_graph()</a>, and <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">generate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> blueprint.impl().get_graph();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a124185cc0f16b8bc162cf4845c91d1d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a124185cc0f16b8bc162cf4845c91d1d2">&#9670;&nbsp;</a></span>init_fusion_graph()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &gt; init_fusion_graph </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00083">83</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00402">ClFusedKernelGraph::original_graph</a>, and <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">traverse()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">build()</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    ClFusedKernelGraph fused_kernel_graph{};</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    fused_kernel_graph.original_graph = &amp;kernel_graph; <span class="comment">// Create a copy of the original kernel graph</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    fused_kernel_graph.fg_dependency  = DependencyGraph();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Initialize all fusion groups</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;kernel : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">traverse</a>(kernel_graph))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        fused_kernel_graph.add_fusion_group({ kernel });</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> { Status{}, fused_kernel_graph };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a5523818c3f589d14e258c437dfdfdf9c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">arm_compute::experimental::dynamic_fusion::traverse</a></div><div class="ttdeci">std::vector&lt; ClKernelFusionGroup * &gt; traverse(ClFusedKernelGraph &amp;graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00072">ClFusedKernelGraph.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab05719fb0811c6eb8a452864575501e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab05719fb0811c6eb8a452864575501e2">&#9670;&nbsp;</a></span>is_in()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_in </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2experimental_2_dependency_graph_8h_source.xhtml#l00041">41</a> of file <a class="el" href="arm__compute_2core_2experimental_2_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00319">ClFusedKernelGraph::can_fuse()</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00181">ClFusedKernelGraph::fuse()</a>, <a class="el" href="src_2dynamic__fusion_2sketch_2utils_2_dependency_graph_8h_source.xhtml#l00424">DependencyGraph::get_root_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">DependencyGraph::path_exists_from_op_to_op()</a>, <a class="el" href="src_2dynamic__fusion_2sketch_2utils_2_dependency_graph_8h_source.xhtml#l00303">DependencyGraph::topological_partition()</a>, and <a class="el" href="src_2dynamic__fusion_2sketch_2utils_2_dependency_graph_8h_source.xhtml#l00094">DependencyGraph::try_add_operator_as_linear()</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> std::find(std::begin(vec), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(vec), v) != <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(vec);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab8924eaffc5f48d813b7665ef7ffd214"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8924eaffc5f48d813b7665ef7ffd214">&#9670;&nbsp;</a></span>operator<() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provide order of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> by checking if <code>t0</code> is "lower than" <code>t1</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t0</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t1</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml" title="Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...">OpTensor</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>t0</code> is lower than <code>t1</code> </dd>
<dd>
false otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8cpp_source.xhtml#l00079">OpTensor::id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> t0.id() &lt; t1.id();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a61e490117b62035a67b5ccfd4a0553ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61e490117b62035a67b5ccfd4a0553ec">&#9670;&nbsp;</a></span>operator<() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;&#160;</td>
          <td class="paramname"><em>op0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;&#160;</td>
          <td class="paramname"><em>op1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provide order of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> by checking if <code>op0</code> is "lower than" <code>op1</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op0</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op1</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>op0</code> is lower than <code>op1</code> </dd>
<dd>
false otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8cpp_source.xhtml#l00094">Operator::id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> op0.id() &lt; op1.id();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3bb10dc03b6b05622410e1950beeeb64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bb10dc03b6b05622410e1950beeeb64">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::experimental::dynamic_fusion::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const CLBuildOptions::StringSet &amp;&#160;</td>
          <td class="paramname"><em>build_opts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml#l00037">37</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;opt : build_opts)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        os &lt;&lt; opt &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7664671c81e08e34e267f3ea70fb73f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7664671c81e08e34e267f3ea70fb73f3">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::experimental::dynamic_fusion::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>cl_build_opts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml#l00045">45</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00072">CLBuildOptions::options()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    os &lt;&lt; cl_build_opts.options();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa9f650ef6322843ee4f8cc8643fe921e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9f650ef6322843ee4f8cc8643fe921e">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::experimental::dynamic_fusion::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;&#160;</td>
          <td class="paramname"><em>code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml#l00057">57</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_8h_source.xhtml#l00110">ClKernelCode::build_options</a>, <a class="el" href="_cl_workload_8h_source.xhtml#l00108">ClKernelCode::code</a>, and <a class="el" href="_cl_workload_8h_source.xhtml#l00107">ClKernelCode::name</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;name: &quot;</span> &lt;&lt; code.name &lt;&lt; std::endl;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;code: &quot;</span> &lt;&lt; code.code &lt;&lt; std::endl;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;build_opts: &quot;</span> &lt;&lt; code.build_options &lt;&lt; std::endl;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a59d422703eb311f8538f35e041b0bbcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59d422703eb311f8538f35e041b0bbcf">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_argument_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_gpu_kernel_argument_8cpp_source.xhtml">GpuKernelArgument.cpp</a>.</p>

<p class="reference">References <a class="el" href="_gpu_kernel_argument_8h_source.xhtml#l00065">GpuKernelArgumentInfo::type</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> info0.type == info1.type;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7bf4bff4857d4c4853192a2ad42f3328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bf4bff4857d4c4853192a2ad42f3328">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>config0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>config1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml">IGpuKernelComponent.h</a>.</p>

<p class="reference">References <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00042">KernelProperties::stage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> config0.stage() == config1.stage();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4d8c915c15145d6e31f8123d349cd895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d8c915c15145d6e31f8123d349cd895">&#9670;&nbsp;</a></span>operator==() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

<p class="reference">References <a class="el" href="_i_workload_8h_source.xhtml#l00050">UnitWorkloadStage::stage</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> stage0.stage == stage1.stage;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af08b2231cd81fad5422b1d7240d26806"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af08b2231cd81fad5422b1d7240d26806">&#9670;&nbsp;</a></span>operator==() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8cpp_source.xhtml#l00079">OpTensor::id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00131">ClDirectConv2dKernel::ClDirectConv2dKernel()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00151">ClElementwiseKernel::ClElementwiseKernel()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00171">ClFloorKernel::ClFloorKernel()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00120">Conv2dContent::Conv2dContent()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00164">ElementwiseContent::ElementwiseContent()</a>, and <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00188">FloorContent::FloorContent()</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(t0.id()) == std::make_tuple(t1.id());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac997944688479da60b47ca8bb8ecc0a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac997944688479da60b47ca8bb8ecc0a9">&#9670;&nbsp;</a></span>operator==() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>conv2d0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>conv2d1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8h_source.xhtml#l00138">Conv2dDescriptor::dilation</a>, and <a class="el" href="_operator_graph_8h_source.xhtml#l00137">Conv2dDescriptor::stride</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(conv2d0.stride, conv2d0.dilation) == std::make_tuple(conv2d1.stride, conv2d1.dilation);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a72adb28e3acb2a0197af3763e92929e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72adb28e3acb2a0197af3763e92929e1">&#9670;&nbsp;</a></span>operator==() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>ed0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>ed1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8h_source.xhtml#l00172">ElementwiseDescriptor::op</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> ed0.op == ed1.op; <span class="comment">// Compare Arithmatic Operations of two ElementwiseDescriptor objects</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a724446ab270739141433cc8682bc2648"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a724446ab270739141433cc8682bc2648">&#9670;&nbsp;</a></span>operator==() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> std::make_tuple() == std::make_tuple(); <span class="comment">// Currently two Floor ops are always the same</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8bf3f564acec14f99a8233408a295d34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bf3f564acec14f99a8233408a295d34">&#9670;&nbsp;</a></span>set_tile_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> set_tile_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname"><em>bp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">TileDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>tile_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00135">135</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, and <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00440">ClKernelBlueprint::Implementation::set_tile_info()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">generate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    bp.impl().set_tile_info(tile_info);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4de2494f0551776a532a883d3b190b33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4de2494f0551776a532a883d3b190b33">&#9670;&nbsp;</a></span>to_string() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::experimental::dynamic_fusion::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>cl_build_opts</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml#l00051">51</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00730">ClKernelBlueprint::Implementation::get_graph()</a>, <a class="el" href="_cl_template_writer_8cpp_source.xhtml#l00121">ClTemplateWriter::get_tensors()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8h_source.xhtml#l00064">ClDirectConvolutionKernelComponent::name()</a>, <a class="el" href="_cl_floor_kernel_component_8h_source.xhtml#l00071">ClFloorKernelComponent::name()</a>, and <a class="el" href="_cl_elementwise_kernel_component_8h_source.xhtml#l00074">ClElementwiseKernelComponent::name()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    str &lt;&lt; cl_build_opts;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac3a405c94c316860d0341c38fbefe59a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3a405c94c316860d0341c38fbefe59a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::experimental::dynamic_fusion::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;&#160;</td>
          <td class="paramname"><em>code</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml#l00064">64</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    str &lt;&lt; code;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d17b6e1662f7d156474fbb3d2288347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d17b6e1662f7d156474fbb3d2288347">&#9670;&nbsp;</a></span>translate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> translate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> &amp;&#160;</td>
          <td class="paramname"><em>op_graph</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00410">410</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, and <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">traverse()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">build()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00174">ElementwiseContent::complexity()</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00198">FloorContent::complexity()</a>, and <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00134">Conv2dContent::set_method()</a>.</p>
<div class="fragment"><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;op : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a55a89c3f2ec8366e76bdf87983cd8fc7">traverse</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">op_graph</a>))</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = op-&gt;translate(kernel_graph);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(st);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a55a89c3f2ec8366e76bdf87983cd8fc7"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a55a89c3f2ec8366e76bdf87983cd8fc7">arm_compute::experimental::dynamic_fusion::traverse</a></div><div class="ttdeci">std::vector&lt; OperatorContent * &gt; traverse(OperatorGraph::Implementation &amp;graph)</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8cpp_source.xhtml#l00399">OperatorGraphImpl.cpp:399</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad471f4eec82e65ca35e1cf32bda90200"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad471f4eec82e65ca35e1cf32bda90200">arm_compute::test::validation::op_graph</a></div><div class="ttdeci">OperatorGraph op_graph</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00253">Integration_OperatorFuseMovenetSubGraph1.cpp:253</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e5a222683b4e850a681a8b7f593f9c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e5a222683b4e850a681a8b7f593f9c3">&#9670;&nbsp;</a></span>traverse() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> &amp;&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00128">ClKernelFusionGroup::fused_kernels</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00127">ClKernelFusionGroup::graph</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00642">ClKernelBlueprint::Implementation::build_config_id()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00547">ClKernelBlueprint::Implementation::build_kernel_name()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00653">ClKernelBlueprint::Implementation::build_options()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00096">fuse()</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00181">ClFusedKernelGraph::fuse()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">generate()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00730">ClKernelBlueprint::Implementation::get_graph()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00083">init_fusion_graph()</a>, and <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00410">translate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::vector&lt;const ClKernel *&gt; kernels;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    sorted = group.graph.topological_sort();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        kernels.push_back(group.fused_kernels.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a803c9c75014f6a9ae0d7aa9c532bf42b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a803c9c75014f6a9ae0d7aa9c532bf42b">&#9670;&nbsp;</a></span>traverse() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00403">ClFusedKernelGraph::fg_dependency</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00404">ClFusedKernelGraph::fusion_groups</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;const ClKernelFusionGroup *&gt; kernels;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                               sorted = graph.fg_dependency.topological_sort();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        kernels.push_back(graph.fusion_groups.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5523818c3f589d14e258c437dfdfdf9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5523818c3f589d14e258c437dfdfdf9c">&#9670;&nbsp;</a></span>traverse() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml">ClFusedKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00403">ClFusedKernelGraph::fg_dependency</a>, <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00404">ClFusedKernelGraph::fusion_groups</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::vector&lt;ClKernelFusionGroup *&gt; kernels;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                         sorted = graph.fg_dependency.topological_sort();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        kernels.push_back(graph.fusion_groups.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a34946401556c6a801732d70f26e47599"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34946401556c6a801732d70f26e47599">&#9670;&nbsp;</a></span>traverse() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00247">247</a> of file <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml">ClKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00246">ClKernelGraph::graph</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00247">ClKernelGraph::kernels</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    std::vector&lt;const ClKernel *&gt; kernels;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    sorted = graph.graph.topological_sort();</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        kernels.push_back(graph.kernels.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aec492d539c50089ec30b929c15d55e17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec492d539c50089ec30b929c15d55e17">&#9670;&nbsp;</a></span>traverse() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml">ClKernel</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00258">258</a> of file <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml">ClKernelGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00246">ClKernelGraph::graph</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00247">ClKernelGraph::kernels</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    std::vector&lt;ClKernel *&gt; kernels;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>              sorted = graph.graph.topological_sort();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        kernels.push_back(graph.kernels.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae81a1f9c76f1814031ee484d5fc47341"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae81a1f9c76f1814031ee484d5fc47341">&#9670;&nbsp;</a></span>traverse() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_content.xhtml">OperatorContent</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00388">388</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00236">OperatorGraph::Implementation::operators</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    std::vector&lt;const OperatorContent *&gt; ops;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                           sorted = graph.graph.topological_sort();</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        ops.push_back(graph.operators.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a55a89c3f2ec8366e76bdf87983cd8fc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55a89c3f2ec8366e76bdf87983cd8fc7">&#9670;&nbsp;</a></span>traverse() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_content.xhtml">OperatorContent</a> * &gt; traverse </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00399">399</a> of file <a class="el" href="_operator_graph_impl_8cpp_source.xhtml">OperatorGraphImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraph::Implementation::graph</a>, <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00236">OperatorGraph::Implementation::operators</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;{</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    std::vector&lt;OperatorContent *&gt; ops;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                     sorted = graph.graph.topological_sort();</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        ops.push_back(graph.operators.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abb1dd1ab605c42c005d9ddde1e23109e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb1dd1ab605c42c005d9ddde1e23109e">&#9670;&nbsp;</a></span>tune_static()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> tune_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">ClExecutionDescriptor</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00157">157</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a13ef6b46310330560a9de9e9b4ff4b2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13ef6b46310330560a9de9e9b4ff4b2b">&#9670;&nbsp;</a></span>update_merge_point()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> update_merge_point </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>t_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>&#160;</td>
          <td class="paramname"><em>merge_point</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update existing merge tensor <code>merge_point</code> to point to <code>t_id</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">t_id</td><td></td></tr>
    <tr><td class="paramname">merge_point</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00130">130</a> of file <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml">ClKernelBuildingAPI.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00043">ClKernelBlueprint::impl()</a>, and <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00425">ClKernelBlueprint::Implementation::update_merge_point()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">generate_store()</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> bp.impl().update_merge_point(t_id, merge_point);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a048af4e9fc68526bf6d39e80e043a456"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a048af4e9fc68526bf6d39e80e043a456">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>op_graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the validity of <code>op_graph</code>, usually after performing an operation (e.g. </p>
<p>add_tensor) on it</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">op_graph</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml" title="Graph of operators to execute within a Workload. ">OperatorGraph</a> to be validated</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a37">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_operator_graph_8cpp_source.xhtml#l00121">121</a> of file <a class="el" href="_operator_graph_8cpp_source.xhtml">OperatorGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph::impl()</a>, and <a class="el" href="_operator_graph_impl_8h_source.xhtml#l00238">OperatorGraph::Implementation::status</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">build()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00131">ClDirectConv2dKernel::ClDirectConv2dKernel()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00151">ClElementwiseKernel::ClElementwiseKernel()</a>, <a class="el" href="_cl_kernel_graph_8h_source.xhtml#l00171">ClFloorKernel::ClFloorKernel()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00060">CpuGemm::configure()</a>, <a class="el" href="_c_l_2_q_l_s_t_m_layer_normalization_8cpp_source.xhtml#l00096">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_cpu_depthwise_conv2d_8cpp_source.xhtml#l00478">CpuDepthwiseConv2d::get_depthwiseconvolution_function()</a>, <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00058">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_8cpp_source.xhtml#l00462">CpuDepthwiseConv2d::validate()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00106">ClDirectConv2d::validate()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00078">CLSynthetizeOperator&lt; ClGemmMatrixMultiplyReshapedOnlyRhsKernel &gt;::validate()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00078">NESynthetizeFunction&lt; K &gt;::validate()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00158">CLSynthetizeFunction&lt; K &gt;::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00064">arm_compute::graph::backends::detail::validate_arg_min_max_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00087">arm_compute::graph::backends::detail::validate_bounding_box_transform_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00111">arm_compute::graph::backends::detail::validate_channel_shuffle_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00137">arm_compute::graph::backends::detail::validate_convolution_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00270">arm_compute::graph::backends::detail::validate_depth_to_space_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00231">arm_compute::graph::backends::detail::validate_depthwise_convolution_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00291">arm_compute::graph::backends::detail::validate_dequantization_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00312">arm_compute::graph::backends::detail::validate_detection_output_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00336">arm_compute::graph::backends::detail::validate_detection_post_process_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00700">arm_compute::graph::backends::detail::validate_eltwise_Layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00195">arm_compute::graph::backends::detail::validate_fused_convolution_with_post_op()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00364">arm_compute::graph::backends::detail::validate_generate_proposals_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00391">arm_compute::graph::backends::detail::validate_l2_normalize_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00416">arm_compute::graph::backends::detail::validate_normalize_planar_yuv_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00441">arm_compute::graph::backends::detail::validate_pad_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00464">arm_compute::graph::backends::detail::validate_permute_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00487">arm_compute::graph::backends::detail::validate_prelu_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00510">arm_compute::graph::backends::detail::validate_priorbox_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00534">arm_compute::graph::backends::detail::validate_quantization_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00557">arm_compute::graph::backends::detail::validate_reduction_operation_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00581">arm_compute::graph::backends::detail::validate_reorg_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00604">arm_compute::graph::backends::detail::validate_reshape_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00627">arm_compute::graph::backends::detail::validate_roi_align_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00652">arm_compute::graph::backends::detail::validate_slice_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00676">arm_compute::graph::backends::detail::validate_strided_slice_layer()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00750">arm_compute::graph::backends::detail::validate_unary_eltwise_layer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> graph.impl()-&gt;status;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
