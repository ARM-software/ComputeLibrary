<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/gpu/cl/operators/experimental/dynamic_fusion/ClCompositeOperator.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cl_composite_operator_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ClCompositeOperator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cl_composite_operator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef ENABLE_EXPERIMENTAL_DYNAMIC_FUSION</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_composite_operator_8h.xhtml">arm_compute/runtime/experimental/ClCompositeOperator.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_workload_8h.xhtml">arm_compute/core/experimental/ClWorkload.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_types_8h.xhtml">arm_compute/core/experimental/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_composite_kernel_8h.xhtml">src/gpu/cl/kernels/experimental/dynamic_fusion/ClCompositeKernel.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;Status add_tensor_to_tensor_pack(<span class="keywordtype">int</span> wk_tensor_id, ICLTensor *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> ClWorkload &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>, TensorPackMap &amp;prepare_pack_map, TensorPackMap &amp;run_pack_map)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span>(tensor == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Trying to add a nullptr into the tensor packs&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                          bp_tensor_id = workload.tensors.at(wk_tensor_id).kernel_arg.arg_id; <span class="comment">// blueprint tensor id</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::vector&lt;ClWorkload::UnitWorkId&gt; uwk_ids{};</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                          src_uwk_ids = workload.graph.src_ops_from_tensor(wk_tensor_id);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                          dst_uwk_ids = workload.graph.dst_ops_from_tensor(wk_tensor_id);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    uwk_ids.insert(uwk_ids.end(), src_uwk_ids.begin(), src_uwk_ids.end());</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    uwk_ids.insert(uwk_ids.end(), dst_uwk_ids.begin(), dst_uwk_ids.end());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> uwk_id : uwk_ids)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        TensorPackMap *pack_map  = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>     uwk_stage = workload.unit_workloads.at(uwk_id).stage.stage;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">switch</span>(uwk_stage)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d">UnitWorkloadStage::Stage::Run</a>:</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                pack_map = &amp;run_pack_map;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1">UnitWorkloadStage::Stage::Prepare</a>:</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                pack_map = &amp;prepare_pack_map;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Unsupported workload stage&quot;</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        ITensorPack *tensor_pack = pack_map-&gt;find_tensor_pack(uwk_id);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">if</span>(tensor_pack == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            pack_map-&gt;add_tensor_pack(uwk_id, ITensorPack{ { bp_tensor_id, tensor } });</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            tensor_pack-&gt;add_tensor(bp_tensor_id, tensor);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#a637d4986b2e87832c31bd7e3f8f50e5a">   84</a></span>&#160;<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#a637d4986b2e87832c31bd7e3f8f50e5a">TensorPackMap::find_tensor_pack</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload.xhtml#afa5a1a59ec40b6fac78fa4fc6458e281">UnitWorkload::Id</a> uwk_id)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">auto</span> tensor_pack = _tensor_packs.find(uwk_id);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span>(tensor_pack != _tensor_packs.end())</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> &amp;(tensor_pack-&gt;second);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#abb4cea8e05bb7718ee9cef7b5ff0ab53">   94</a></span>&#160;<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#abb4cea8e05bb7718ee9cef7b5ff0ab53">TensorPackMap::get_tensor_pack</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload.xhtml#afa5a1a59ec40b6fac78fa4fc6458e281">UnitWorkload::Id</a> uwk_id)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> _tensor_packs.at(uwk_id);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#a6e541f2b9b593e460de6448086f95c51">   99</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#a6e541f2b9b593e460de6448086f95c51">TensorPackMap::add_tensor_pack</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload.xhtml#afa5a1a59ec40b6fac78fa4fc6458e281">UnitWorkload::Id</a> uwk_id, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensor_pack)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    _tensor_packs[uwk_id] = tensor_pack;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">  104</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">bind_tensors</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml">ClAuxTensorData</a> &amp;aux_tensor_data, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;prepare_pack_map, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;run_pack_map, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;workload, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">OpTensorBinding</a> &amp;op_tensors)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor : workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a0171e631117d8976f8f0c7d532e7a4c4">tensors</a>)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> wk_tensor_id  = tensor.first; <span class="comment">// workload tensor id</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor_object = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span>(tensor.second.memory_type == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">MemoryType::Core</a>)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> op_tensor_id   = workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a7bdd9d30fbc23162fdfc14df8822fee5">op_tensor_id_lut</a>.at(wk_tensor_id);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">auto</span>       op_tensor_find = op_tensors.find(op_tensor_id);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span>(op_tensor_find == op_tensors.end())</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Cannot find binding for some operator tensor&quot;</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            tensor_object = utils::cast::polymorphic_downcast&lt;ICLTensor *&gt;(op_tensor_find-&gt;second);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(tensor.second.memory_type == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">MemoryType::Auxiliary</a>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="comment">// Create aux tensor CLTensor object</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a> = *tensor.second.info;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       <a class="code" href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a> = tensor.second.memory_info;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            tensor_object                = aux_tensor_data.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#ae05b8b51bdf2787c2fd7e47575ab6825">add_aux_tensor</a>(wk_tensor_id, tensor_info, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Unsupported tensor memory type&quot;</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = add_tensor_to_tensor_pack(wk_tensor_id, tensor_object, workload, prepare_pack_map, run_pack_map);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(st);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#ae05b8b51bdf2787c2fd7e47575ab6825">  138</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#ae05b8b51bdf2787c2fd7e47575ab6825">ClAuxTensorData::add_aux_tensor</a>(<span class="keywordtype">int</span> tensor_id, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">AuxMemoryInfo</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a>)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">auto</span> find_tensor_pair = _owned_tensors.find(tensor_id);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span>(find_tensor_pair == _owned_tensors.end())</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">return</span> find_tensor_pair-&gt;second.get();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">auto</span> tensor        = std::make_unique&lt;CLTensor&gt;();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">auto</span> inserted_pair = _owned_tensors.emplace(tensor_id, std::move(tensor)).first;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">auto</span> new_tensor    = inserted_pair-&gt;second.get();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        _tensors.emplace_back(new_tensor, tensor_info, memory_info);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> new_tensor;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#a74e35f3b1de18630f198713fba16886f">  155</a></span>&#160;std::vector&lt;ClAuxTensorData::DataView&gt; &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#a74e35f3b1de18630f198713fba16886f">ClAuxTensorData::get_tensors</a>()</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> _tensors;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">struct </span>ClCompositeOperator::Implementation</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::map&lt;UnitWorkload::Id, std::unique_ptr&lt;ClCompositeKernel&gt;&gt; _kernels{};</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::map&lt;UnitWorkload::Id, std::unique_ptr&lt;ClCompositeKernel&gt;&gt; _kernels_prep{};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> _workload{};</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">bool</span>       _is_prepared{ <span class="keyword">false</span> };</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;};</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#af887bee7b2c4fce272f2b577d1b76d9c">  167</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#af887bee7b2c4fce272f2b577d1b76d9c">ClCompositeOperator::ClCompositeOperator</a>()</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    : _impl{ std::make_unique&lt;Implementation&gt;() }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a53764da497edd54e3660ced6c495cd8a">ClCompositeOperator::~ClCompositeOperator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#aaafe061c90d7bcd5b9a573e841fd4e4a">  174</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#aaafe061c90d7bcd5b9a573e841fd4e4a">ClCompositeOperator::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;ctx, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;workload)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a42f867173a9af2a6cb925e9b6699dc4c">ClCompositeOperator::validate</a>(workload));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    _impl-&gt;_workload = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Traverse workloads in topological order</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> sorted = workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload.xhtml#adda92e981d244d14d1266f9746bccc6d">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">topological_sort</a>().second;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;node : sorted)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">auto</span> work  = workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#afb6cd783cc38a238e203a198229d1454">unit_workloads</a>.at(node.op);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">auto</span> stage = work.stage.stage;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>     = std::make_unique&lt;ClCompositeKernel&gt;();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>-&gt;configure(ctx, work.code);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">switch</span>(stage)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d">UnitWorkloadStage::Stage::Run</a>:</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                _impl-&gt;_kernels.emplace(work.id, std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1">UnitWorkloadStage::Stage::Prepare</a>:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                _impl-&gt;_kernels_prep.emplace(work.id, std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid stage&quot;</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a42f867173a9af2a6cb925e9b6699dc4c">  203</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a42f867173a9af2a6cb925e9b6699dc4c">ClCompositeOperator::validate</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;workload)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">return</span> workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#ae29aa2d4ae440022daaed1107eb306b3">status</a>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#aab9ab60672d5e3feefa1d02c028a8bcc">  208</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#aab9ab60672d5e3feefa1d02c028a8bcc">ClCompositeOperator::prepare</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;tensor_pack_map)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">if</span>(!_impl-&gt;_is_prepared)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;id_kernel_pair : _impl-&gt;_kernels_prep)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> flush_queue = <span class="keyword">false</span>;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> uwk_id      = id_kernel_pair.first;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">auto</span>       kernel      = id_kernel_pair.second.get();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">enqueue_op</a>(*kernel, tensor_pack_map.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#abb4cea8e05bb7718ee9cef7b5ff0ab53">get_tensor_pack</a>(uwk_id), <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">ClExecutionDescriptor</a>{}, flush_queue);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        _impl-&gt;_is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a3871efa4a6ba468a7a931707f49afe50">  224</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a3871efa4a6ba468a7a931707f49afe50">ClCompositeOperator::run</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">TensorPackMap</a> &amp;tensor_pack_map)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_impl-&gt;_is_prepared, <span class="stringliteral">&quot;Operator is not prepared&quot;</span>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;id_kernel_pair : _impl-&gt;_kernels)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">// Flush the command queue on the last kernel</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> flush_queue = <span class="keyword">false</span>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> uwk_id      = id_kernel_pair.first;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">auto</span>       kernel      = id_kernel_pair.second.get();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">enqueue_op</a>(*kernel, tensor_pack_map.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#abb4cea8e05bb7718ee9cef7b5ff0ab53">get_tensor_pack</a>(uwk_id), <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">ClExecutionDescriptor</a>{}, flush_queue);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_EXPERIMENTAL_DYNAMIC_FUSION */</span><span class="preprocessor"></span></div><div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">arm_compute::experimental::dynamic_fusion::ClWorkload</a></div><div class="ttdoc">Workload for Cl backend. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00173">ClWorkload.h:173</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload_xhtml_adda92e981d244d14d1266f9746bccc6d"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_workload.xhtml#adda92e981d244d14d1266f9746bccc6d">arm_compute::experimental::dynamic_fusion::IWorkload::graph</a></div><div class="ttdeci">DependencyGraph graph</div><div class="ttdoc">Dependency graph of the workload tensors and the unit workloads. </div><div class="ttdef"><b>Definition:</b> <a href="_i_workload_8h_source.xhtml#l00125">IWorkload.h:125</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_xhtml_afa5a1a59ec40b6fac78fa4fc6458e281"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload.xhtml#afa5a1a59ec40b6fac78fa4fc6458e281">arm_compute::experimental::dynamic_fusion::UnitWorkload::Id</a></div><div class="ttdeci">DependencyGraph::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_i_workload_8h_source.xhtml#l00111">IWorkload.h:111</a></div></div>
<div class="ttc" id="_cl_workload_8h_xhtml"><div class="ttname"><a href="_cl_workload_8h.xhtml">ClWorkload.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00107">CLScheduler.cpp:107</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_a0171e631117d8976f8f0c7d532e7a4c4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a0171e631117d8976f8f0c7d532e7a4c4">arm_compute::experimental::dynamic_fusion::ClWorkload::tensors</a></div><div class="ttdeci">std::map&lt; Tid, ClWorkloadTensor &gt; tensors</div><div class="ttdoc">Workload tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00200">ClWorkload.h:200</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map_xhtml_a6e541f2b9b593e460de6448086f95c51"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#a6e541f2b9b593e460de6448086f95c51">arm_compute::experimental::dynamic_fusion::TensorPackMap::add_tensor_pack</a></div><div class="ttdeci">void add_tensor_pack(UnitWorkload::Id uwk_id, const ITensorPack &amp;tensor_pack)</div><div class="ttdoc">Add a tensor pack and associate it with unit workload Id uwk_id. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00099">ClCompositeOperator.cpp:99</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a83168e6cb289d732cc78427b51f93153">arm_compute::experimental::dynamic_fusion::MemoryType::Core</a></div><div class="ttdoc">Core memory used by the Workload Tensor, e.g. </div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a34a0357f1b58c5c5f4a45b7014efdc58"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">arm_compute::experimental::dynamic_fusion::DependencyGraph::topological_sort</a></div><div class="ttdeci">std::pair&lt; Status, std::vector&lt; OpPack &gt; &gt; topological_sort() const</div><div class="ttdoc">Sort the graph in a topological order. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph.cpp:380</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data_xhtml_ae05b8b51bdf2787c2fd7e47575ab6825"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#ae05b8b51bdf2787c2fd7e47575ab6825">arm_compute::experimental::dynamic_fusion::ClAuxTensorData::add_aux_tensor</a></div><div class="ttdeci">CLTensor * add_aux_tensor(int tensor_id, const ITensorInfo &amp;tensor_info, const AuxMemoryInfo &amp;memory_info)</div><div class="ttdoc">Add auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00138">ClCompositeOperator.cpp:138</a></div></div>
<div class="ttc" id="arm__compute_2core_2experimental_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml_aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage::Stage::Prepare</a></div><div class="ttdoc">Only run once at the beginning. </div></div>
<div class="ttc" id="_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator_xhtml_a53764da497edd54e3660ced6c495cd8a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a53764da497edd54e3660ced6c495cd8a">arm_compute::experimental::dynamic_fusion::ClCompositeOperator::~ClCompositeOperator</a></div><div class="ttdeci">~ClCompositeOperator()</div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data_xhtml_a74e35f3b1de18630f198713fba16886f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml#a74e35f3b1de18630f198713fba16886f">arm_compute::experimental::dynamic_fusion::ClAuxTensorData::get_tensors</a></div><div class="ttdeci">std::vector&lt; DataView &gt; &amp; get_tensors()</div><div class="ttdoc">Get views of all auxiliary tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00155">ClCompositeOperator.cpp:155</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::ClExecutionDescriptor</a></div><div class="ttdoc">Descriptor containing information required to run a single ClWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00091">ClWorkload.h:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator_xhtml_a3871efa4a6ba468a7a931707f49afe50"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a3871efa4a6ba468a7a931707f49afe50">arm_compute::experimental::dynamic_fusion::ClCompositeOperator::run</a></div><div class="ttdeci">void run(TensorPackMap &amp;tensor_pack_map)</div><div class="ttdoc">Enqueue run workloads. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00224">ClCompositeOperator.cpp:224</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a5c0fc6f465cae029d60ffdfc7f3e99d9"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">arm_compute::CLScheduler::enqueue_op</a></div><div class="ttdeci">void enqueue_op(ICLKernel &amp;kernel, ITensorPack &amp;tensors, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00243">CLScheduler.cpp:243</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml_aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage::Stage::Run</a></div><div class="ttdoc">Run every time after the first time. </div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">arm_compute::experimental::dynamic_fusion::MemoryType::Auxiliary</a></div><div class="ttdoc">Auxiliary memory required by the Workload Tensor, e.g. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::ErrorCode::RUNTIME_ERROR</a></div><div class="ttdoc">Generic runtime error. </div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_abd1839b751c3e3abfec78177d70b8cb4"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#abd1839b751c3e3abfec78177d70b8cb4">memory_info</a></div><div class="ttdeci">AuxMemoryInfo memory_info</div><div class="ttdoc">Memory requirement. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00068">ClWorkloadRuntime.cpp:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00204">CLCompileContext.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a73aa59d7b088082ec257a1c65edbf1d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">arm_compute::test::validation::k</a></div><div class="ttdeci">const unsigned int k</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00361">GEMMMatrixMultiplyNative.cpp:361</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_ae29aa2d4ae440022daaed1107eb306b3"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#ae29aa2d4ae440022daaed1107eb306b3">arm_compute::experimental::dynamic_fusion::ClWorkload::status</a></div><div class="ttdeci">Status status</div><div class="ttdoc">For compatibility with the IOperator validate method. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00202">ClWorkload.h:202</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00042">ICLTensor.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator_xhtml_aab9ab60672d5e3feefa1d02c028a8bcc"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#aab9ab60672d5e3feefa1d02c028a8bcc">arm_compute::experimental::dynamic_fusion::ClCompositeOperator::prepare</a></div><div class="ttdeci">void prepare(TensorPackMap &amp;tensor_pack_map)</div><div class="ttdoc">Enqueue prepare workloads. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00208">ClCompositeOperator.cpp:208</a></div></div>
<div class="ttc" id="_error_8h_xhtml_af1b8ff8eb557a2ad11272f1505f45d34"><div class="ttname"><a href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_CREATE_ERROR(error_code, msg)</div><div class="ttdoc">Creates an error with a given message. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00159">Error.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad001edc7e4d1ea972be09f232c6e7729"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">arm_compute::test::validation::workload</a></div><div class="ttdeci">ClWorkload workload</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00266">Integration_OperatorFuseMovenetSubGraph1.cpp:266</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">arm_compute::experimental::dynamic_fusion::AuxMemoryInfo</a></div><div class="ttdoc">Memory Info for a WorkloadTensor of Auxiliary memory type. </div><div class="ttdef"><b>Definition:</b> <a href="_i_workload_8h_source.xhtml#l00070">IWorkload.h:70</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a7c2a91a85b564dbc8e52229582e982a9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c2a91a85b564dbc8e52229582e982a9">arm_compute::experimental::dynamic_fusion::OpTensorBinding</a></div><div class="ttdeci">std::map&lt; OpTensor, ITensor * &gt; OpTensorBinding</div><div class="ttdoc">Map OpTensor handles to their corresponding ITensor memory. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8h_source.xhtml#l00044">ClCompositeOperator.h:44</a></div></div>
<div class="ttc" id="_cl_composite_kernel_8h_xhtml"><div class="ttname"><a href="_cl_composite_kernel_8h.xhtml">ClCompositeKernel.h</a></div></div>
<div class="ttc" id="_cl_composite_operator_8h_xhtml"><div class="ttname"><a href="_cl_composite_operator_8h.xhtml">ClCompositeOperator.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_a7bdd9d30fbc23162fdfc14df8822fee5"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a7bdd9d30fbc23162fdfc14df8822fee5">arm_compute::experimental::dynamic_fusion::ClWorkload::op_tensor_id_lut</a></div><div class="ttdeci">std::map&lt; Tid, OpTensor::Id &gt; op_tensor_id_lut</div><div class="ttdoc">Map from ClWorkloadTensor to SRC and DST Operator Tensors (no need to store &quot;intermediate&quot; Operator T...</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00201">ClWorkload.h:201</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator_xhtml_aaafe061c90d7bcd5b9a573e841fd4e4a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#aaafe061c90d7bcd5b9a573e841fd4e4a">arm_compute::experimental::dynamic_fusion::ClCompositeOperator::configure</a></div><div class="ttdeci">void configure(const CLCompileContext &amp;ctx, const ClWorkload &amp;workload)</div><div class="ttdoc">Configures a ClCompositeOperator with a ClWorkload This includes the compilation of Cl kernels inside...</div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00174">ClCompositeOperator.cpp:174</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator_xhtml_af887bee7b2c4fce272f2b577d1b76d9c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#af887bee7b2c4fce272f2b577d1b76d9c">arm_compute::experimental::dynamic_fusion::ClCompositeOperator::ClCompositeOperator</a></div><div class="ttdeci">ClCompositeOperator()</div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00167">ClCompositeOperator.cpp:167</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_aux_tensor_data.xhtml">arm_compute::experimental::dynamic_fusion::ClAuxTensorData</a></div><div class="ttdoc">Holder of any auxiliary CLTensors required by a ClWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8h_source.xhtml#l00087">ClCompositeOperator.h:87</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_afb6cd783cc38a238e203a198229d1454"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#afb6cd783cc38a238e203a198229d1454">arm_compute::experimental::dynamic_fusion::ClWorkload::unit_workloads</a></div><div class="ttdeci">std::map&lt; UnitWorkId, ClUnitWorkload &gt; unit_workloads</div><div class="ttdoc">Unit workloads to run. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00199">ClWorkload.h:199</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator_xhtml_a42f867173a9af2a6cb925e9b6699dc4c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_composite_operator.xhtml#a42f867173a9af2a6cb925e9b6699dc4c">arm_compute::experimental::dynamic_fusion::ClCompositeOperator::validate</a></div><div class="ttdeci">static Status validate(const ClWorkload &amp;workload)</div><div class="ttdoc">Validate ClWorkload workload. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00203">ClCompositeOperator.cpp:203</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml">arm_compute::experimental::dynamic_fusion::TensorPackMap</a></div><div class="ttdoc">Map a kernel (as identified by its unit workload id) to its corresponding tensor pack. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8h_source.xhtml#l00050">ClCompositeOperator.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0d7c1c3d9ad0be83d4dd2dc9d444ad32"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d7c1c3d9ad0be83d4dd2dc9d444ad32">arm_compute::experimental::dynamic_fusion::bind_tensors</a></div><div class="ttdeci">Status bind_tensors(ClAuxTensorData &amp;aux_tensor_data, TensorPackMap &amp;prepare_pack_map, TensorPackMap &amp;run_pack_map, const ClWorkload &amp;workload, const OpTensorBinding &amp;op_tensors)</div><div class="ttdoc">Bind tensor memory to packs used by prepare and run methods. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00104">ClCompositeOperator.cpp:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map_xhtml_abb4cea8e05bb7718ee9cef7b5ff0ab53"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#abb4cea8e05bb7718ee9cef7b5ff0ab53">arm_compute::experimental::dynamic_fusion::TensorPackMap::get_tensor_pack</a></div><div class="ttdeci">ITensorPack &amp; get_tensor_pack(UnitWorkload::Id uwk_id)</div><div class="ttdoc">Get a tensor pack associated with uwk_id. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00094">ClCompositeOperator.cpp:94</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map_xhtml_a637d4986b2e87832c31bd7e3f8f50e5a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tensor_pack_map.xhtml#a637d4986b2e87832c31bd7e3f8f50e5a">arm_compute::experimental::dynamic_fusion::TensorPackMap::find_tensor_pack</a></div><div class="ttdeci">ITensorPack * find_tensor_pack(UnitWorkload::Id uwk_id)</div><div class="ttdoc">Find a tensor pack associated with the unit workload Id uwk_id. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_composite_operator_8cpp_source.xhtml#l00084">ClCompositeOperator.cpp:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml#l00041">CLTensor.h:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_cf895c1ed808af158264b2f3d8d7f8f0.xhtml">gpu</a></li><li class="navelem"><a class="el" href="dir_3fd6b49eea07a5dd89d90722d8b4e77f.xhtml">cl</a></li><li class="navelem"><a class="el" href="dir_9f6e96fe293420b74afaf1a4dc4f9f82.xhtml">operators</a></li><li class="navelem"><a class="el" href="dir_768958046a68c3c10f14742ecaf48a0d.xhtml">experimental</a></li><li class="navelem"><a class="el" href="dir_1f3a6dbb582d2ace48b7d50d0dfb0d02.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="_cl_composite_operator_8cpp.xhtml">ClCompositeOperator.cpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:54 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
