<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GpuKernelComponentGraph Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GpuKernelComponentGraph Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A multi-input (tensors), multi-output (tensors) acyclic directed graph of gpu kernel components Its main purposes are:  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml">GpuKernelComponentGraph.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a43caf41f9e4cf110c168620e4cb538d3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a43caf41f9e4cf110c168620e4cb538d3">GpuKernelComponentGraph</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a> *services)</td></tr>
<tr class="memdesc:a43caf41f9e4cf110c168620e4cb538d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a43caf41f9e4cf110c168620e4cb538d3">More...</a><br /></td></tr>
<tr class="separator:a43caf41f9e4cf110c168620e4cb538d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7200f0686035fbe384042e449a680a51"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a7200f0686035fbe384042e449a680a51">GpuKernelComponentGraph</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;graph)=delete</td></tr>
<tr class="memdesc:a7200f0686035fbe384042e449a680a51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy constructed.  <a href="#a7200f0686035fbe384042e449a680a51">More...</a><br /></td></tr>
<tr class="separator:a7200f0686035fbe384042e449a680a51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5725bb34311ee38aecd2374fb61dfe43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a5725bb34311ee38aecd2374fb61dfe43">operator=</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;graph)=delete</td></tr>
<tr class="memdesc:a5725bb34311ee38aecd2374fb61dfe43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied.  <a href="#a5725bb34311ee38aecd2374fb61dfe43">More...</a><br /></td></tr>
<tr class="separator:a5725bb34311ee38aecd2374fb61dfe43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3111367306ce732f6ba99c65930530"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a3f3111367306ce732f6ba99c65930530">GpuKernelComponentGraph</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&amp;graph)=default</td></tr>
<tr class="memdesc:a3f3111367306ce732f6ba99c65930530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="#a3f3111367306ce732f6ba99c65930530">More...</a><br /></td></tr>
<tr class="separator:a3f3111367306ce732f6ba99c65930530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a837165eb4f56e0b0caf8064fede5a323"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a837165eb4f56e0b0caf8064fede5a323">operator=</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&amp;graph)=default</td></tr>
<tr class="memdesc:a837165eb4f56e0b0caf8064fede5a323"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#a837165eb4f56e0b0caf8064fede5a323">More...</a><br /></td></tr>
<tr class="separator:a837165eb4f56e0b0caf8064fede5a323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a4c73bf4a87b39c8c0a6916d33e9640"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... Args&gt; </td></tr>
<tr class="memitem:a5a4c73bf4a87b39c8c0a6916d33e9640"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#a5a4c73bf4a87b39c8c0a6916d33e9640">add_new_component</a> (Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a5a4c73bf4a87b39c8c0a6916d33e9640"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new component and add it to the component graph Component id is automatically allocated.  <a href="#a5a4c73bf4a87b39c8c0a6916d33e9640">More...</a><br /></td></tr>
<tr class="separator:a5a4c73bf4a87b39c8c0a6916d33e9640"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abba9024ebb27161d77bd0e74e5b0f779"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#abba9024ebb27161d77bd0e74e5b0f779">fuse</a> () const</td></tr>
<tr class="memdesc:abba9024ebb27161d77bd0e74e5b0f779"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform component fusion and serialize the graph into a stream of component groups.  <a href="#abba9024ebb27161d77bd0e74e5b0f779">More...</a><br /></td></tr>
<tr class="separator:abba9024ebb27161d77bd0e74e5b0f779"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A multi-input (tensors), multi-output (tensors) acyclic directed graph of gpu kernel components Its main purposes are: </p>
<ul>
<li>Perform "graph-level" optimizations like fusion of kernel components (not the fusion of operators)</li>
<li>Automatically assign memory descriptions <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> of all tensors based on graph topology </li>
</ul>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml">GpuKernelComponentGraph.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a43caf41f9e4cf110c168620e4cb538d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43caf41f9e4cf110c168620e4cb538d3">&#9670;&nbsp;</a></span>GpuKernelComponentGraph() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a> *&#160;</td>
          <td class="paramname"><em>services</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">services</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a> to be used by the graph </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml#l00078">78</a> of file <a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml">GpuKernelComponentGraph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    : _services{ services }, _components{}, _tensors{}, _dependency_graph{}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7200f0686035fbe384042e449a680a51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7200f0686035fbe384042e449a680a51">&#9670;&nbsp;</a></span>GpuKernelComponentGraph() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copy constructed. </p>

</div>
</div>
<a id="a3f3111367306ce732f6ba99c65930530"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f3111367306ce732f6ba99c65930530">&#9670;&nbsp;</a></span>GpuKernelComponentGraph() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5a4c73bf4a87b39c8c0a6916d33e9640"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a4c73bf4a87b39c8c0a6916d33e9640">&#9670;&nbsp;</a></span>add_new_component()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_new_component </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new component and add it to the component graph Component id is automatically allocated. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Component type </td></tr>
    <tr><td class="paramname">Args</td><td>Component argument types</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Component arguments except for component id, which is auto-allocated </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml#l00072">72</a> of file <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml">GpuKernelComponentGraph.h</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_gpu_component_services_8h_source.xhtml#l00043">GpuComponentServices::component_factory()</a>, <a class="el" href="_gpu_kernel_component_factory_8h_source.xhtml#l00052">GpuKernelComponentFactory::create()</a>, <a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml#l00083">GpuKernelComponentGraph::fuse()</a>, <a class="el" href="_argument_pack_8h_source.xhtml#l00222">ArgumentPack&lt; T &gt;::get_const_dst_tensors()</a>, <a class="el" href="_argument_pack_8h_source.xhtml#l00188">ArgumentPack&lt; T &gt;::get_const_src_tensors()</a>, <a class="el" href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00267">arm_compute::test::validation::success</a>, and <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">auto</span>                      comp           = _services-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml#af28e5f67aedc9320f4c2ef39bb2ad3bd">component_factory</a>().<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml#a13f05e35a458300a220160255b4e392e">create</a>&lt;T&gt;(std::forward&lt;Args&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        ArgumentPack&lt;ITensorInfo&gt; tensors        = comp-&gt;tensors();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                src_tensor_ids = get_tensor_ids(tensors.get_const_src_tensors());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                dst_tensor_ids = get_tensor_ids(tensors.get_const_dst_tensors());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordtype">bool</span>                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">success</a>        = _dependency_graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">add_operator</a>(comp-&gt;id(), src_tensor_ids, dst_tensor_ids);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(success);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!success);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        _components[comp-&gt;id()] = std::move(comp);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : tensors.get_const_src_tensors())</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            _tensors[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;id()] = <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : tensors.get_const_dst_tensors())</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            _tensors[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;id()] = <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services_xhtml_af28e5f67aedc9320f4c2ef39bb2ad3bd"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml#af28e5f67aedc9320f4c2ef39bb2ad3bd">arm_compute::experimental::dynamic_fusion::GpuComponentServices::component_factory</a></div><div class="ttdeci">GpuKernelComponentFactory &amp; component_factory()</div><div class="ttdoc">Get reference to component factory. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_component_services_8h_source.xhtml#l00043">GpuComponentServices.h:43</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a5922b6c22c15729162e749f06f7f518c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_operator</a></div><div class="ttdeci">std::pair&lt; Status, DependencyGraph::Id &gt; add_operator(const std::vector&lt; Id &gt; &amp;inputs, const std::vector&lt; Id &gt; &amp;outputs)</div><div class="ttdoc">Add a new operator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory_xhtml_a13f05e35a458300a220160255b4e392e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml#a13f05e35a458300a220160255b4e392e">arm_compute::experimental::dynamic_fusion::GpuKernelComponentFactory::create</a></div><div class="ttdeci">std::unique_ptr&lt; IGpuKernelComponent &gt; create(Args &amp;&amp;... args)</div><div class="ttdoc">Create a new kernel component. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_factory_8h_source.xhtml#l00052">GpuKernelComponentFactory.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2d4e55a769c00f49c595e282f5f3b1cd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">arm_compute::test::validation::success</a></div><div class="ttdeci">const auto success</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00267">Integration_OperatorFuseMovenetSubGraph1.cpp:267</a></div></div>
<div class="ttc" id="namespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abba9024ebb27161d77bd0e74e5b0f779"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abba9024ebb27161d77bd0e74e5b0f779">&#9670;&nbsp;</a></span>fuse()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a> fuse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform component fusion and serialize the graph into a stream of component groups. </p>
<dl class="section note"><dt>Note</dt><dd>Fusion constraints (for kernel components) are exactly the same as the invariants of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> Fusion can be framed as a mathematical optimization problem: Given fusion constraints, find the "best" fusion patterns possible "Best" is ill-defined at the moment. For now we define "best" fusion pattern as one which results in the least number of fused kernels ( <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> ) at the end</dd></dl>
<p>As the first iteration, we offer a sub-optimal algorithm here which ensures all constraints are met, but provides no guarantee that the fusion pattern is optimal </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml#l00083">83</a> of file <a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml">GpuKernelComponentGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00267">arm_compute::test::validation::success</a>, and <a class="el" href="src_2dynamic__fusion_2sketch_2utils_2_dependency_graph_8h_source.xhtml#l00303">DependencyGraph::topological_partition()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml#l00072">GpuKernelComponentGraph::add_new_component()</a>, and <a class="el" href="_gpu_workload_sketch_impl_8h_source.xhtml#l00096">GpuWorkloadSketch::Implementation::generate_source_code()</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Obtain memory descriptor map</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> mem_map = assign_memory_descriptors(_tensors, _dependency_graph);<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /// @note Fusion constraints (for kernel components) are exactly the same as the invariants of @ref GpuKernelComponentGroup</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /// Fusion can be framed as a mathematical optimization problem:</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    /// Given fusion constraints, find the &quot;best&quot; fusion patterns possible</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    /// &quot;Best&quot; is ill-defined at the moment. For now we define &quot;best&quot; fusion pattern as one</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /// which results in the least number of fused kernels ( @ref GpuKernelComponentGroup ) at the end</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /// As the first iteration, we offer a sub-optimal algorithm here which ensures all</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    /// constraints are met, but provides no guarantee that the fusion pattern is optimal</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    GpuKernelComponentStream stream{ _services, mem_map };</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Break down into linear groups of components (constraint 1), preserving topological order</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> linear_graphs = _dependency_graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5c196ee5dd001e2a2a9ea08b70fdfa31">topological_partition</a>();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Further divide up the linear groups based on rest of the fusion constraints (rely on component group&#39;s invariants)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;graph : linear_graphs)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; graph.size(); ++i)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> comp = _components.at(graph[i].op).get();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">// Each new linear graph signals a new component group in the stream</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span>(i == 0)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                stream.new_component_group();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// If it violates the component group&#39;s invariant / fusion constraint, breaks up the stream by inserting a new group</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">success</a> = stream.add_component(comp);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">if</span>(!success)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                stream.new_component_group();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                success = stream.add_component(comp);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!success);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a5c196ee5dd001e2a2a9ea08b70fdfa31"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5c196ee5dd001e2a2a9ea08b70fdfa31">arm_compute::experimental::dynamic_fusion::DependencyGraph::topological_partition</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; OpPack &gt; &gt; topological_partition() const</div><div class="ttdoc">Partition the graph into a list of linear sub-&quot;graphs&quot;, while preserving the topological order...</div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2sketch_2utils_2_dependency_graph_8h_source.xhtml#l00303">DependencyGraph.h:303</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2d4e55a769c00f49c595e282f5f3b1cd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2d4e55a769c00f49c595e282f5f3b1cd">arm_compute::test::validation::success</a></div><div class="ttdeci">const auto success</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00267">Integration_OperatorFuseMovenetSubGraph1.cpp:267</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5725bb34311ee38aecd2374fb61dfe43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5725bb34311ee38aecd2374fb61dfe43">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied. </p>

</div>
</div>
<a id="a837165eb4f56e0b0caf8064fede5a323"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a837165eb4f56e0b0caf8064fede5a323">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml">GpuKernelComponentGraph.h</a></li>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml">GpuKernelComponentGraph.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
