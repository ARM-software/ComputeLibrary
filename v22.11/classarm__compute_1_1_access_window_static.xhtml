<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: AccessWindowStatic Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_access_window_static.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">AccessWindowStatic Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Implementation of a static rectangular access pattern.  
 <a href="classarm__compute_1_1_access_window_static.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_access_window_static_8h_source.xhtml">AccessWindowStatic.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for AccessWindowStatic:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_access_window_static__coll__graph.svg" width="167" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9a7f835520e9f3b19b414f61c4f86f99"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a9a7f835520e9f3b19b414f61c4f86f99">AccessWindowStatic</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info, int start_x, int start_y, int end_x, int end_y)</td></tr>
<tr class="memdesc:a9a7f835520e9f3b19b414f61c4f86f99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor for a static access pattern.  <a href="#a9a7f835520e9f3b19b414f61c4f86f99">More...</a><br /></td></tr>
<tr class="separator:a9a7f835520e9f3b19b414f61c4f86f99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbdf53818c3318f2f6700b15aa055b5d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#adbdf53818c3318f2f6700b15aa055b5d">AccessWindowStatic</a> (const <a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;)=delete</td></tr>
<tr class="memdesc:adbdf53818c3318f2f6700b15aa055b5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#adbdf53818c3318f2f6700b15aa055b5d">More...</a><br /></td></tr>
<tr class="separator:adbdf53818c3318f2f6700b15aa055b5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c6934ef061e9aeaa31fa952c05e2730"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a5c6934ef061e9aeaa31fa952c05e2730">operator=</a> (const <a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;)=delete</td></tr>
<tr class="memdesc:a5c6934ef061e9aeaa31fa952c05e2730"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a5c6934ef061e9aeaa31fa952c05e2730">More...</a><br /></td></tr>
<tr class="separator:a5c6934ef061e9aeaa31fa952c05e2730"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39d00bd382d82a99f7b2055ff0a4c1e2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a39d00bd382d82a99f7b2055ff0a4c1e2">AccessWindowStatic</a> (<a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a39d00bd382d82a99f7b2055ff0a4c1e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="#a39d00bd382d82a99f7b2055ff0a4c1e2">More...</a><br /></td></tr>
<tr class="separator:a39d00bd382d82a99f7b2055ff0a4c1e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5312479f43d5fd6c46e4e8473049847"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#af5312479f43d5fd6c46e4e8473049847">operator=</a> (<a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:af5312479f43d5fd6c46e4e8473049847"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#af5312479f43d5fd6c46e4e8473049847">More...</a><br /></td></tr>
<tr class="separator:af5312479f43d5fd6c46e4e8473049847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a657392da3805fde373c0cef557739d08"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a657392da3805fde373c0cef557739d08">~AccessWindowStatic</a> ()=default</td></tr>
<tr class="memdesc:a657392da3805fde373c0cef557739d08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a657392da3805fde373c0cef557739d08">More...</a><br /></td></tr>
<tr class="separator:a657392da3805fde373c0cef557739d08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a729ab9364d77a28c009732b497c3b835"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a729ab9364d77a28c009732b497c3b835">set_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;input_valid_region)</td></tr>
<tr class="memdesc:a729ab9364d77a28c009732b497c3b835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region based on the static access pattern and valid region of the inputs.  <a href="#a729ab9364d77a28c009732b497c3b835">More...</a><br /></td></tr>
<tr class="separator:a729ab9364d77a28c009732b497c3b835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53fc3353f92358e4f4e36b6057bbfa71"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a53fc3353f92358e4f4e36b6057bbfa71">compute_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> input_valid_region) const</td></tr>
<tr class="memdesc:a53fc3353f92358e4f4e36b6057bbfa71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the valid region based on the static access pattern and valid region of the inputs.  <a href="#a53fc3353f92358e4f4e36b6057bbfa71">More...</a><br /></td></tr>
<tr class="separator:a53fc3353f92358e4f4e36b6057bbfa71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad9fe991410dc3550f6c4fd6e87a708"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a7ad9fe991410dc3550f6c4fd6e87a708">update_window_if_needed</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window) const override</td></tr>
<tr class="memdesc:a7ad9fe991410dc3550f6c4fd6e87a708"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shrink the window if padding is not large enough.  <a href="#a7ad9fe991410dc3550f6c4fd6e87a708">More...</a><br /></td></tr>
<tr class="separator:a7ad9fe991410dc3550f6c4fd6e87a708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69cb887416c766f20cbec0677b3c8e88"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#a69cb887416c766f20cbec0677b3c8e88">update_padding_if_needed</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window) override</td></tr>
<tr class="memdesc:a69cb887416c766f20cbec0677b3c8e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increase the padding to be large enough for the window.  <a href="#a69cb887416c766f20cbec0677b3c8e88">More...</a><br /></td></tr>
<tr class="separator:a69cb887416c766f20cbec0677b3c8e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80edc371ba9f02d756aed720040878b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml#ae80edc371ba9f02d756aed720040878b">compute_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> input_valid_region, bool border_undefined, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size) const override</td></tr>
<tr class="memdesc:ae80edc371ba9f02d756aed720040878b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the valid region based on access pattern and valid region of the inputs.  <a href="#ae80edc371ba9f02d756aed720040878b">More...</a><br /></td></tr>
<tr class="separator:ae80edc371ba9f02d756aed720040878b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_access_window"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_access_window')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_access_window.xhtml">IAccessWindow</a></td></tr>
<tr class="memitem:abc3996ab36cfa27811d661debfca5b5f inherit pub_methods_classarm__compute_1_1_i_access_window"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_access_window.xhtml#abc3996ab36cfa27811d661debfca5b5f">~IAccessWindow</a> ()=default</td></tr>
<tr class="memdesc:abc3996ab36cfa27811d661debfca5b5f inherit pub_methods_classarm__compute_1_1_i_access_window"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_access_window.xhtml#abc3996ab36cfa27811d661debfca5b5f">More...</a><br /></td></tr>
<tr class="separator:abc3996ab36cfa27811d661debfca5b5f inherit pub_methods_classarm__compute_1_1_i_access_window"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Implementation of a static rectangular access pattern. </p>
<p>In this implementation the access offsets and sizes are not relative to the current element. Instead they are considered to be absolute coordinates within the accessed tensor's shape. </p>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_access_window_static_8h_source.xhtml">AccessWindowStatic.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a9a7f835520e9f3b19b414f61c4f86f99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a7f835520e9f3b19b414f61c4f86f99">&#9670;&nbsp;</a></span>AccessWindowStatic() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>end_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor for a static access pattern. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> info of the accessed kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start_x</td><td>Start of the access in X direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start_y</td><td>Start of the access in Y direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end_x</td><td>End of the access in X direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end_y</td><td>End of the access in Y direction. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    : _info(info), _start_x(start_x), _start_y(start_y), _end_x(end_x), _end_y(end_y)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adbdf53818c3318f2f6700b15aa055b5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbdf53818c3318f2f6700b15aa055b5d">&#9670;&nbsp;</a></span>AccessWindowStatic() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a39d00bd382d82a99f7b2055ff0a4c1e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39d00bd382d82a99f7b2055ff0a4c1e2">&#9670;&nbsp;</a></span>AccessWindowStatic() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a id="a657392da3805fde373c0cef557739d08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a657392da3805fde373c0cef557739d08">&#9670;&nbsp;</a></span>~AccessWindowStatic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a53fc3353f92358e4f4e36b6057bbfa71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53fc3353f92358e4f4e36b6057bbfa71">&#9670;&nbsp;</a></span>compute_valid_region() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> compute_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td>
          <td class="paramname"><em>input_valid_region</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute the valid region based on the static access pattern and valid region of the inputs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window of the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_valid_region</td><td>Combined valid region of all inputs.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a valid region. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00265">ValidRegion::anchor</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00076">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00079">TensorShape::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00266">ValidRegion::shape</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_access_window_static_8cpp_source.xhtml#l00037">AccessWindowStatic::compute_valid_region()</a>, and <a class="el" href="_access_window_static_8cpp_source.xhtml#l00076">AccessWindowStatic::set_valid_region()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span>(_info == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> input_valid_region;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(window);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;anchor = input_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = input_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Start of the valid region is equal to the start of the static access but</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// never outside of the tensor.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(0, std::max&lt;int&gt;(0, _start_x));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 1)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, std::max&lt;int&gt;(0, _start_y));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// End of the valid region is equal to the end of the static access but</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// never outside of the tensor.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, std::min&lt;int&gt;(_end_x, _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0]));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span>(_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 1)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, std::min&lt;int&gt;(_end_y, _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1]));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> input_valid_region;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00076">Dimensions.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a1f4e725b8e1ea36b30e09dc08ae6961d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">arm_compute::ITensorInfo::num_dimensions</a></div><div class="ttdeci">virtual size_t num_dimensions() const =0</div><div class="ttdoc">The number of dimensions of the tensor (rank) </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00266">Types.h:266</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_aea5d1efe37933e02913aec84db5b9d4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00079">TensorShape.h:79</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00265">Types.h:265</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae80edc371ba9f02d756aed720040878b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae80edc371ba9f02d756aed720040878b">&#9670;&nbsp;</a></span>compute_valid_region() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> compute_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td>
          <td class="paramname"><em>input_valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the valid region based on access pattern and valid region of the inputs. </p>
<dl class="section note"><dt>Note</dt><dd>This method assumes that there is no border.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window of the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_valid_region</td><td>Combined valid region of all inputs. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>Undefined borders are excluded from the valid region. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_size</td><td>Size of the border around the XY-plane of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a valid region. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_access_window.xhtml#ae2b4aabf2a14dce92e04c0eeb0ab73b9">IAccessWindow</a>.</p>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(border_undefined);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(border_size);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_access_window_static.xhtml#a53fc3353f92358e4f4e36b6057bbfa71">compute_valid_region</a>(window, input_valid_region);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_access_window_static_xhtml_a53fc3353f92358e4f4e36b6057bbfa71"><div class="ttname"><a href="classarm__compute_1_1_access_window_static.xhtml#a53fc3353f92358e4f4e36b6057bbfa71">arm_compute::AccessWindowStatic::compute_valid_region</a></div><div class="ttdeci">ValidRegion compute_valid_region(const Window &amp;window, ValidRegion input_valid_region) const</div><div class="ttdoc">Compute the valid region based on the static access pattern and valid region of the inputs...</div><div class="ttdef"><b>Definition:</b> <a href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic.cpp:45</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5c6934ef061e9aeaa31fa952c05e2730"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c6934ef061e9aeaa31fa952c05e2730">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="af5312479f43d5fd6c46e4e8473049847"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5312479f43d5fd6c46e4e8473049847">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a729ab9364d77a28c009732b497c3b835"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a729ab9364d77a28c009732b497c3b835">&#9670;&nbsp;</a></span>set_valid_region()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>input_valid_region</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the valid region based on the static access pattern and valid region of the inputs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window of the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_valid_region</td><td>Combined valid region of all inputs. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8cpp_source.xhtml#l00076">76</a> of file <a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a>.</p>

<p class="reference">References <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">ITensorInfo::set_valid_region()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span>(_info != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">set_valid_region</a>(<a class="code" href="classarm__compute_1_1_access_window_static.xhtml#a53fc3353f92358e4f4e36b6057bbfa71">compute_valid_region</a>(window, input_valid_region));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_access_window_static_xhtml_a53fc3353f92358e4f4e36b6057bbfa71"><div class="ttname"><a href="classarm__compute_1_1_access_window_static.xhtml#a53fc3353f92358e4f4e36b6057bbfa71">arm_compute::AccessWindowStatic::compute_valid_region</a></div><div class="ttdeci">ValidRegion compute_valid_region(const Window &amp;window, ValidRegion input_valid_region) const</div><div class="ttdoc">Compute the valid region based on the static access pattern and valid region of the inputs...</div><div class="ttdef"><b>Definition:</b> <a href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic.cpp:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a9586081a29fceb532ab270bd843abee6"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">arm_compute::ITensorInfo::set_valid_region</a></div><div class="ttdeci">virtual void set_valid_region(const ValidRegion &amp;valid_region)=0</div><div class="ttdoc">Set the valid region of the tensor. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a69cb887416c766f20cbec0677b3c8e88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69cb887416c766f20cbec0677b3c8e88">&#9670;&nbsp;</a></span>update_padding_if_needed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool update_padding_if_needed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Increase the padding to be large enough for the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> used by the kernel.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the padding has been changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_access_window.xhtml#a5a5f3d4d4461121db2e4e3b4d3ee587f">IAccessWindow</a>.</p>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">160</a> of file <a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00392">BorderSize::bottom</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">ITensorInfo::extend_padding()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">ITensorInfo::is_resizable()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00393">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00391">BorderSize::right</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00390">BorderSize::top</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(window);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// Only update the padding if the tensor allows it</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span>(_info == <span class="keyword">nullptr</span> || !_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>())</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="structarm__compute_1_1_border_size.xhtml">PaddingSize</a> padding;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>   = std::max(0, -_start_x);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>  = std::max&lt;int&gt;(0, _end_x - shape[0]);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>    = std::max(0, -_start_y);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = std::max&lt;int&gt;(0, _end_y - shape[1]);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Update strides in tensor info</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">extend_padding</a>(padding);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00390">Types.h:390</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00282">Types.h:282</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00392">Types.h:392</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_af555338f11d1d28f258f259ac3da743b"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">arm_compute::ITensorInfo::is_resizable</a></div><div class="ttdeci">virtual bool is_resizable() const =0</div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed. </div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00393">Types.h:393</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00391">Types.h:391</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a0cd5aea514f03afb48ebe22581ea4c66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">arm_compute::ITensorInfo::extend_padding</a></div><div class="ttdeci">virtual bool extend_padding(const PaddingSize &amp;padding)=0</div><div class="ttdoc">Update the offset to the first element, the strides and the total size. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7ad9fe991410dc3550f6c4fd6e87a708"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ad9fe991410dc3550f6c4fd6e87a708">&#9670;&nbsp;</a></span>update_window_if_needed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool update_window_if_needed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shrink the window if padding is not large enough. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> used by the kernel.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the window has been changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_access_window.xhtml#a5b6940395e0168f3f00da892ded537aa">IAccessWindow</a>.</p>

<p class="definition">Definition at line <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">ITensorInfo::is_resizable()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// If the padding is not enough and the tensor is not resizable, shrink the window to size 0</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span>(_info == <span class="keyword">nullptr</span> || _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>())</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>                = _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a>     &amp;strides              = _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       offset_first_element = _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a>();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">bool</span> window_modified = <span class="keyword">false</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Calculate if padding is enough</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span>(_start_y &lt; 0)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> front_pad_y_available = -<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(offset_first_element / strides[1]);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span>(_start_y &lt; front_pad_y_available)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            window_modified = <span class="keyword">true</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">if</span>(!window_modified)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span>(_end_y &gt; static_cast&lt;int&gt;(shape[1]))</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> stride_z             = _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 2 ? strides[2] : _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> tail_pad_y_available = (stride_z / strides[1]) - shape[1];</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span>(static_cast&lt;int&gt;(shape[1]) + tail_pad_y_available &lt; _end_y)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                window_modified = <span class="keyword">true</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span>(!window_modified)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y = _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 1 ? strides[1] : _info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span>(_start_x &lt; 0)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> front_pad_x_available = -std::min&lt;int&gt;(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(offset_first_element), stride_y - shape[0] * strides[0]) / <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(strides[0]);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">if</span>(_start_x &lt; front_pad_x_available)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    window_modified = <span class="keyword">true</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">if</span>(!window_modified &amp;&amp; _end_x &gt; static_cast&lt;int&gt;(shape[0]))</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> tail_pad_x_available = (stride_y / strides[0]) - shape[0];</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">if</span>(static_cast&lt;int&gt;(shape[0]) + tail_pad_x_available &lt; _end_x)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    window_modified = <span class="keyword">true</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// If padding is not enough</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span>(window_modified)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(i, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 1));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> window_modified;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a1f4e725b8e1ea36b30e09dc08ae6961d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">arm_compute::ITensorInfo::num_dimensions</a></div><div class="ttdeci">virtual size_t num_dimensions() const =0</div><div class="ttdoc">The number of dimensions of the tensor (rank) </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_af555338f11d1d28f258f259ac3da743b"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">arm_compute::ITensorInfo::is_resizable</a></div><div class="ttdeci">virtual bool is_resizable() const =0</div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ad0bd5cc32e7e4c0699eccba91e5de397"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">arm_compute::ITensorInfo::offset_first_element_in_bytes</a></div><div class="ttdeci">virtual size_t offset_first_element_in_bytes() const =0</div><div class="ttdoc">The offset from the beginning of the memory allocation to the first element of the tensor...</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/core/<a class="el" href="_access_window_static_8h_source.xhtml">AccessWindowStatic.h</a></li>
<li>src/core/<a class="el" href="_access_window_static_8cpp_source.xhtml">AccessWindowStatic.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
