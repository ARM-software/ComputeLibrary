<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::utils::math Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1utils_1_1math.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::utils::math Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a788ba6c7989a35e2979dd0b315e8711f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;( std::is_integral&lt;T&gt;::value ), arm_compute::utils::requires::detail::enabler&gt;::type&gt; </td></tr>
<tr class="memitem:a788ba6c7989a35e2979dd0b315e8711f"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1math.xhtml#a788ba6c7989a35e2979dd0b315e8711f">safe_integer_add</a> (T val_a, T val_b)</td></tr>
<tr class="memdesc:a788ba6c7989a35e2979dd0b315e8711f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Safe integer addition between two integers.  <a href="#a788ba6c7989a35e2979dd0b315e8711f">More...</a><br /></td></tr>
<tr class="separator:a788ba6c7989a35e2979dd0b315e8711f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e0ef3d630d8020cfa7e09ffada9bec4"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;( std::is_integral&lt;T&gt;::value ), arm_compute::utils::requires::detail::enabler&gt;::type&gt; </td></tr>
<tr class="memitem:a1e0ef3d630d8020cfa7e09ffada9bec4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1math.xhtml#a1e0ef3d630d8020cfa7e09ffada9bec4">safe_integer_sub</a> (T val_a, T val_b)</td></tr>
<tr class="memdesc:a1e0ef3d630d8020cfa7e09ffada9bec4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Safe integer subtraction between two integers.  <a href="#a1e0ef3d630d8020cfa7e09ffada9bec4">More...</a><br /></td></tr>
<tr class="separator:a1e0ef3d630d8020cfa7e09ffada9bec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e89b90d50a678e88d7821c5a3ad8326"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;( std::is_integral&lt;T&gt;::value ), arm_compute::utils::requires::detail::enabler&gt;::type&gt; </td></tr>
<tr class="memitem:a3e89b90d50a678e88d7821c5a3ad8326"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1math.xhtml#a3e89b90d50a678e88d7821c5a3ad8326">safe_integer_mul</a> (T val_a, T val_b)</td></tr>
<tr class="memdesc:a3e89b90d50a678e88d7821c5a3ad8326"><td class="mdescLeft">&#160;</td><td class="mdescRight">Safe integer multiplication between two integers.  <a href="#a3e89b90d50a678e88d7821c5a3ad8326">More...</a><br /></td></tr>
<tr class="separator:a3e89b90d50a678e88d7821c5a3ad8326"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51d1b0d5c48f48b9605a760e1963b940"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;( std::is_integral&lt;T&gt;::value ), arm_compute::utils::requires::detail::enabler&gt;::type&gt; </td></tr>
<tr class="memitem:a51d1b0d5c48f48b9605a760e1963b940"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1math.xhtml#a51d1b0d5c48f48b9605a760e1963b940">safe_integer_div</a> (T val_a, T val_b)</td></tr>
<tr class="memdesc:a51d1b0d5c48f48b9605a760e1963b940"><td class="mdescLeft">&#160;</td><td class="mdescRight">Safe integer division between two integers.  <a href="#a51d1b0d5c48f48b9605a760e1963b940">More...</a><br /></td></tr>
<tr class="separator:a51d1b0d5c48f48b9605a760e1963b940"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a788ba6c7989a35e2979dd0b315e8711f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a788ba6c7989a35e2979dd0b315e8711f">&#9670;&nbsp;</a></span>safe_integer_add()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::utils::math::safe_integer_add </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Safe integer addition between two integers. </p>
<p>In case of an overflow the numeric max limit is return. In case of an underflow numeric max limit is return.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Integer types to add</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val_a</td><td>First value to add </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val_b</td><td>Second value to add</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The addition result </dd></dl>

<p class="definition">Definition at line <a class="el" href="_safe_ops_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_safe_ops_8h_source.xhtml">SafeOps.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_safe_integer_ops_8cpp_source.xhtml#l00040">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    T result = 0;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span>((val_b &gt; 0) &amp;&amp; (val_a &gt; std::numeric_limits&lt;T&gt;::max() - val_b))</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        result = std::numeric_limits&lt;T&gt;::max();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>((val_b &lt; 0) &amp;&amp; (val_a &lt; std::numeric_limits&lt;T&gt;::min() - val_b))</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        result = std::numeric_limits&lt;T&gt;::min();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        result = val_a + val_b;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a51d1b0d5c48f48b9605a760e1963b940"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51d1b0d5c48f48b9605a760e1963b940">&#9670;&nbsp;</a></span>safe_integer_div()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::utils::math::safe_integer_div </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Safe integer division between two integers. </p>
<p>In case of an overflow the numeric max limit is return. In case of an underflow numeric max limit is return.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Integer types to divide</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val_a</td><td>Dividend value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val_b</td><td>Divisor value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The quotient </dd></dl>

<p class="definition">Definition at line <a class="el" href="_safe_ops_8h_source.xhtml#l00164">164</a> of file <a class="el" href="_safe_ops_8h_source.xhtml">SafeOps.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_safe_integer_ops_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    T result = 0;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span>((val_b == 0) || ((val_a == std::numeric_limits&lt;T&gt;::min()) &amp;&amp; (val_b == -1)))</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        result = std::numeric_limits&lt;T&gt;::min();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        result = val_a / val_b;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3e89b90d50a678e88d7821c5a3ad8326"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e89b90d50a678e88d7821c5a3ad8326">&#9670;&nbsp;</a></span>safe_integer_mul()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::utils::math::safe_integer_mul </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Safe integer multiplication between two integers. </p>
<p>In case of an overflow the numeric max limit is return. In case of an underflow numeric max limit is return.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Integer types to multiply</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val_a</td><td>First value to multiply </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val_b</td><td>Second value to multiply</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The multiplication result </dd></dl>

<p class="definition">Definition at line <a class="el" href="_safe_ops_8h_source.xhtml#l00114">114</a> of file <a class="el" href="_safe_ops_8h_source.xhtml">SafeOps.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_safe_integer_ops_8cpp_source.xhtml#l00074">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    T result = 0;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span>(val_a &gt; 0)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span>((val_b &gt; 0) &amp;&amp; (val_a &gt; (std::numeric_limits&lt;T&gt;::max() / val_b)))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            result = std::numeric_limits&lt;T&gt;::max();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(val_b &lt; (std::numeric_limits&lt;T&gt;::min() / val_a))</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            result = std::numeric_limits&lt;T&gt;::min();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            result = val_a * val_b;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span>((val_b &gt; 0) &amp;&amp; (val_a &lt; (std::numeric_limits&lt;T&gt;::min() / val_b)))</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            result = std::numeric_limits&lt;T&gt;::max();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>((val_a != 0) &amp;&amp; (val_b &lt; (std::numeric_limits&lt;T&gt;::max() / val_a)))</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            result = std::numeric_limits&lt;T&gt;::min();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            result = val_a * val_b;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1e0ef3d630d8020cfa7e09ffada9bec4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e0ef3d630d8020cfa7e09ffada9bec4">&#9670;&nbsp;</a></span>safe_integer_sub()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::utils::math::safe_integer_sub </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val_b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Safe integer subtraction between two integers. </p>
<p>In case of an overflow the numeric max limit is return. In case of an underflow numeric max limit is return.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Integer types to subtract</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val_a</td><td>Value to subtract from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val_b</td><td>Value to subtract</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The subtraction result </dd></dl>

<p class="definition">Definition at line <a class="el" href="_safe_ops_8h_source.xhtml#l00082">82</a> of file <a class="el" href="_safe_ops_8h_source.xhtml">SafeOps.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_safe_integer_ops_8cpp_source.xhtml#l00057">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    T result = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span>((val_b &lt; 0) &amp;&amp; (val_a &gt; std::numeric_limits&lt;T&gt;::max() + val_b))</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        result = std::numeric_limits&lt;T&gt;::max();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>((val_b &gt; 0) &amp;&amp; (val_a &lt; std::numeric_limits&lt;T&gt;::min() + val_b))</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        result = std::numeric_limits&lt;T&gt;::min();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        result = val_a - val_b;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils_1_1math.xhtml">math</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:08 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
