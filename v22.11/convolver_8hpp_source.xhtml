<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/convolver.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('convolver_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">convolver.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="convolver_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="convolution__parameters_8hpp.xhtml">convolution_parameters.hpp</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// Class to assist with convolution calculations.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// This is framed as a hierarchy of objects:</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">//  - Top level object which depends only on convolution parameters.  This sets up std::vectors for the padding and</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">//    kernel offset arrays.  From this you can request:</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">//  - Mid level object (e.g. instantiated at start of &#39;ConvolutionInterleave&#39;).  This holds specifics about the</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">//    input tensor, and the desired column range.  Calculations specific to this can be done once when this is set</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">//    up.  From this you can request:</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">//  - Low level object (instantiated for each range of rows).  This contains methods to actually populate a row</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">//    pointer array.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1convolver.xhtml">   51</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1convolver.xhtml">convolver</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a>  m_params;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Vector of padding data</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;         m_pad_row;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// X/Y offsets for each kernel position</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::vector&lt;int&gt;             m_kernel_y;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::vector&lt;int&gt;             m_kernel_x;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">class </span>column_handler {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1convolver.xhtml">convolver&lt;T&gt;</a>          &amp;m_parent;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="comment">// Base/stride of input image</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> T * <span class="keyword">const</span>              m_input_base;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span>                 m_input_stride;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Starting kernel point and channel offset within that point</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           m_start_pos;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           m_start_offset;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Total length to process, rounded length of each input channel block.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           m_length;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           m_rounded_stringlen;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keyword">class </span>row_handler {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1convolver.xhtml">convolver&lt;T&gt;</a>          &amp;m_convolver;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keyword">const</span> column_handler        &amp;m_parent;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="comment">// These variables track progress through the current block of rows</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                 m_start_output_y=0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                 m_start_output_x=0;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                 m_length_remaining=0;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                 m_current_pos=0;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                 m_active_height=0;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            row_handler(<span class="keyword">const</span> column_handler &amp;parent, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_row, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_height) :</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                m_convolver(parent.m_parent),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                m_parent(parent),</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                m_start_output_y(start_row / m_convolver.m_params.output_width),</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                m_start_output_x(start_row % m_convolver.m_params.output_width),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                m_length_remaining(m_parent.m_length),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                m_current_pos(m_parent.m_start_pos),</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                m_active_height(active_height) { }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordtype">bool</span> finished()<span class="keyword"> const </span>{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">return</span> (m_length_remaining == 0);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            std::tuple&lt;unsigned int, unsigned int&gt; next_block(<span class="keyword">const</span> T ** <span class="keyword">const</span> row_ptr) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">if</span> (finished()) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="keywordflow">return</span> std::make_tuple(0, 0);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="comment">// &quot;in_width&quot; in the amount of data that will be read in (copied)</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="comment">// &quot;out_width&quot; is the total amount of data that will be produced (including padding)</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (m_current_pos == m_parent.m_start_pos) ? m_parent.m_start_offset : 0;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_width = std::min(m_length_remaining, static_cast&lt;unsigned int&gt;(m_convolver.m_params.input_channels) - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_width = std::min(m_length_remaining, m_parent.m_rounded_stringlen - offset);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_y = m_start_output_y;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_x = m_start_output_x;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row=0; row&lt;m_active_height; row++) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keywordtype">int</span> input_y = (output_y * m_convolver.m_params.output_stride_h) + m_convolver.m_kernel_y[m_current_pos];</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordtype">int</span> input_x = (output_x * m_convolver.m_params.output_stride_w) + m_convolver.m_kernel_x[m_current_pos];</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="comment">// Out-of-bounds points will read the padding data,</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="comment">// otherwise find the correct address in the input image.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="keywordflow">if</span> (input_y &lt; 0 || input_y &gt;= m_convolver.m_params.input_height || input_x &lt; 0 || input_x &gt;= m_convolver.m_params.input_width) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        row_ptr[row] = m_convolver.m_pad_row.data();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        row_ptr[row] = m_parent.m_input_base + ((input_y * m_convolver.m_params.input_width) + input_x) * m_parent.m_input_stride;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    output_x++;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    <span class="keywordflow">if</span> (output_x == m_convolver.m_params.output_width) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        output_y++;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        output_x=0;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                m_current_pos++;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                m_length_remaining-=out_width;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">return</span> std::make_tuple(in_width, offset);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }; <span class="comment">// end of &quot;row handler&quot; class</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        column_handler(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1convolver.xhtml">convolver&lt;T&gt;</a> &amp;parent, <span class="keyword">const</span> T *input_base, <span class="keywordtype">size_t</span> input_stride,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_start, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_end, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_stringlen)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                     : m_parent(parent), m_input_base(input_base), m_input_stride(input_stride),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                       m_start_pos(k_start / rounded_stringlen),</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                       m_start_offset(k_start % rounded_stringlen),</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                       m_length(k_end - k_start),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                       m_rounded_stringlen(rounded_stringlen) { }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        row_handler process_rows(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_row, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_height)<span class="keyword"> const </span>{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> row_handler(*<span class="keyword">this</span>, start_row, active_height);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }; <span class="comment">// end of &quot;column handler&quot; class</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1convolver.xhtml#aed7177a775534fc54c3e1a849583d062">  161</a></span>&#160;    <a class="code" href="classarm__gemm_1_1convolver.xhtml#aed7177a775534fc54c3e1a849583d062">convolver</a>(<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a> params) :</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        m_params (params), m_pad_row(params.input_channels, static_cast&lt;T&gt;(params.padding_value)),</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        m_kernel_y(params.kernel_width * params.kernel_height, 0),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        m_kernel_x(params.kernel_width * params.kernel_height, 0) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// Kernel points are addressed across, then down (assumed weight layout is WHIO)</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ky=0; ky&lt;params.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a6d3feaa4bf76f68289ae537b8c682b19">kernel_height</a>; ky++) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kx=0; kx&lt;params.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">kernel_width</a>; kx++) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = (ky * params.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">kernel_width</a>) + kx;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                m_kernel_y[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>] = ky - params.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a0b43a7c0dfa50b241f1bb3215f05dce7">padding_top</a>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                m_kernel_x[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>] = kx - params.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a8437e73cc2c21cfd03b1738950c1d8e1">padding_left</a>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1convolver.xhtml#a20c98d5f928f8534fc322ce311c4c6b9">  176</a></span>&#160;    column_handler <a class="code" href="classarm__gemm_1_1convolver.xhtml#a20c98d5f928f8534fc322ce311c4c6b9">process_columns</a>(<span class="keyword">const</span> T *input_base, <span class="keywordtype">size_t</span> input_stride,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_start, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_end, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_stringlen)<span class="keyword"> const </span>{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> column_handler(*<span class="keyword">this</span>, input_base, input_stride, k_start, k_end, rounded_stringlen);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;};</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01084">helpers.h:1084</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a6d3feaa4bf76f68289ae537b8c682b19"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a6d3feaa4bf76f68289ae537b8c682b19">arm_gemm::ConvolutionParameters::kernel_height</a></div><div class="ttdeci">int64_t kernel_height</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00054">convolution_parameters.hpp:54</a></div></div>
<div class="ttc" id="convolution__parameters_8hpp_xhtml"><div class="ttname"><a href="convolution__parameters_8hpp.xhtml">convolution_parameters.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1convolver_xhtml_aed7177a775534fc54c3e1a849583d062"><div class="ttname"><a href="classarm__gemm_1_1convolver.xhtml#aed7177a775534fc54c3e1a849583d062">arm_gemm::convolver::convolver</a></div><div class="ttdeci">convolver(ConvolutionParameters params)</div><div class="ttdef"><b>Definition:</b> <a href="convolver_8hpp_source.xhtml#l00161">convolver.hpp:161</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml">arm_gemm::ConvolutionParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00048">convolution_parameters.hpp:48</a></div></div>
<div class="ttc" id="classarm__gemm_1_1convolver_xhtml"><div class="ttname"><a href="classarm__gemm_1_1convolver.xhtml">arm_gemm::convolver</a></div><div class="ttdef"><b>Definition:</b> <a href="convolver_8hpp_source.xhtml#l00051">convolver.hpp:51</a></div></div>
<div class="ttc" id="classarm__gemm_1_1convolver_xhtml_a20c98d5f928f8534fc322ce311c4c6b9"><div class="ttname"><a href="classarm__gemm_1_1convolver.xhtml#a20c98d5f928f8534fc322ce311c4c6b9">arm_gemm::convolver::process_columns</a></div><div class="ttdeci">column_handler process_columns(const T *input_base, size_t input_stride, unsigned int k_start, unsigned int k_end, unsigned int rounded_stringlen) const</div><div class="ttdef"><b>Definition:</b> <a href="convolver_8hpp_source.xhtml#l00176">convolver.hpp:176</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a0b43a7c0dfa50b241f1bb3215f05dce7"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a0b43a7c0dfa50b241f1bb3215f05dce7">arm_gemm::ConvolutionParameters::padding_top</a></div><div class="ttdeci">int64_t padding_top</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00060">convolution_parameters.hpp:60</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a4d535aa242e052aebffea95dee41c0e9"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">arm_gemm::ConvolutionParameters::kernel_width</a></div><div class="ttdeci">int64_t kernel_width</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00053">convolution_parameters.hpp:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a8437e73cc2c21cfd03b1738950c1d8e1"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a8437e73cc2c21cfd03b1738950c1d8e1">arm_gemm::ConvolutionParameters::padding_left</a></div><div class="ttdeci">int64_t padding_left</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00061">convolution_parameters.hpp:61</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="convolver_8hpp.xhtml">convolver.hpp</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:56:51 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
