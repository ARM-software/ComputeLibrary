<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLDevice Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_device.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLDevice Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>OpenCL device type class.  
 <a href="classarm__compute_1_1_c_l_device.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLDevice:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_device__coll__graph.svg" width="94" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a774af460d874d0e3da143ec4ef343e7f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#a774af460d874d0e3da143ec4ef343e7f">CLDevice</a> ()</td></tr>
<tr class="memdesc:a774af460d874d0e3da143ec4ef343e7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="#a774af460d874d0e3da143ec4ef343e7f">More...</a><br /></td></tr>
<tr class="separator:a774af460d874d0e3da143ec4ef343e7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce6d190c4859d6cab3b8956c54b9091"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#a9ce6d190c4859d6cab3b8956c54b9091">CLDevice</a> (const cl::Device &amp;<a class="el" href="classarm__compute_1_1_c_l_device.xhtml#aa7d721813bb154a0ca56f8136712a19b">cl_device</a>)</td></tr>
<tr class="memdesc:a9ce6d190c4859d6cab3b8956c54b9091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a9ce6d190c4859d6cab3b8956c54b9091">More...</a><br /></td></tr>
<tr class="separator:a9ce6d190c4859d6cab3b8956c54b9091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6326ac3fd13446394faa873fa727414"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#ac6326ac3fd13446394faa873fa727414">target</a> () const</td></tr>
<tr class="memdesc:ac6326ac3fd13446394faa873fa727414"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the GPU target of the cl device.  <a href="#ac6326ac3fd13446394faa873fa727414">More...</a><br /></td></tr>
<tr class="separator:ac6326ac3fd13446394faa873fa727414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e11e435e467931ffe6d9a15d0401c19"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#a2e11e435e467931ffe6d9a15d0401c19">compute_units</a> () const</td></tr>
<tr class="memdesc:a2e11e435e467931ffe6d9a15d0401c19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of compute units available.  <a href="#a2e11e435e467931ffe6d9a15d0401c19">More...</a><br /></td></tr>
<tr class="separator:a2e11e435e467931ffe6d9a15d0401c19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7d721813bb154a0ca56f8136712a19b"><td class="memItemLeft" align="right" valign="top">const cl::Device &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#aa7d721813bb154a0ca56f8136712a19b">cl_device</a> () const</td></tr>
<tr class="memdesc:aa7d721813bb154a0ca56f8136712a19b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the underlying cl device object.  <a href="#aa7d721813bb154a0ca56f8136712a19b">More...</a><br /></td></tr>
<tr class="separator:aa7d721813bb154a0ca56f8136712a19b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f0e1a33eea82f745658928bb4550eef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">CLVersion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#a1f0e1a33eea82f745658928bb4550eef">version</a> () const</td></tr>
<tr class="memdesc:a1f0e1a33eea82f745658928bb4550eef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the device's CL version.  <a href="#a1f0e1a33eea82f745658928bb4550eef">More...</a><br /></td></tr>
<tr class="separator:a1f0e1a33eea82f745658928bb4550eef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a492b0f72e29930e8b74a866d5e21b31b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#a492b0f72e29930e8b74a866d5e21b31b">device_version</a> () const</td></tr>
<tr class="memdesc:a492b0f72e29930e8b74a866d5e21b31b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the device version as a string.  <a href="#a492b0f72e29930e8b74a866d5e21b31b">More...</a><br /></td></tr>
<tr class="separator:a492b0f72e29930e8b74a866d5e21b31b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a33f1f37494e32987c96642e456fa09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9">DeviceType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#a1a33f1f37494e32987c96642e456fa09">type</a> () const override</td></tr>
<tr class="memdesc:a1a33f1f37494e32987c96642e456fa09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device type accessor.  <a href="#a1a33f1f37494e32987c96642e456fa09">More...</a><br /></td></tr>
<tr class="separator:a1a33f1f37494e32987c96642e456fa09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75344c818b18165c299b00777cc8c52"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#aa75344c818b18165c299b00777cc8c52">supported</a> (const std::string &amp;extension) const override</td></tr>
<tr class="memdesc:aa75344c818b18165c299b00777cc8c52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if extensions on a device are supported.  <a href="#aa75344c818b18165c299b00777cc8c52">More...</a><br /></td></tr>
<tr class="separator:aa75344c818b18165c299b00777cc8c52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc567924678eb3b406f132c7ca366c87"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; bool, std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml#acc567924678eb3b406f132c7ca366c87">is_non_uniform_workgroup_supported</a> () const</td></tr>
<tr class="memdesc:acc567924678eb3b406f132c7ca366c87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether non-uniform workgroup is supported and the build options.  <a href="#acc567924678eb3b406f132c7ca366c87">More...</a><br /></td></tr>
<tr class="separator:acc567924678eb3b406f132c7ca366c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_device"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_device')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_device.xhtml">IDevice</a></td></tr>
<tr class="memitem:a9e97ffd49973ab5e97e7afbeb7d68499 inherit pub_methods_classarm__compute_1_1_i_device"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_device.xhtml#a9e97ffd49973ab5e97e7afbeb7d68499">~IDevice</a> ()=default</td></tr>
<tr class="memdesc:a9e97ffd49973ab5e97e7afbeb7d68499 inherit pub_methods_classarm__compute_1_1_i_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual Destructor.  <a href="classarm__compute_1_1_i_device.xhtml#a9e97ffd49973ab5e97e7afbeb7d68499">More...</a><br /></td></tr>
<tr class="separator:a9e97ffd49973ab5e97e7afbeb7d68499 inherit pub_methods_classarm__compute_1_1_i_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>OpenCL device type class. </p>
<p>Initializes and stores all the information about a cl device, working mainly as a cache mechanism. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a774af460d874d0e3da143ec4ef343e7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a774af460d874d0e3da143ec4ef343e7f">&#9670;&nbsp;</a></span>CLDevice() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml">CLDevice</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        : _device(cl::Device()), _options()</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a9ce6d190c4859d6cab3b8956c54b9091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ce6d190c4859d6cab3b8956c54b9091">&#9670;&nbsp;</a></span>CLDevice() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml">CLDevice</a> </td>
          <td>(</td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>cl_device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_device</td><td>OpenCL device </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="_c_l_device_8h_source.xhtml#l00112">CLDevice::cl_device()</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00058">CLDeviceOptions::compute_units</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00053">CLDeviceOptions::device_version</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00054">CLDeviceOptions::extensions</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">arm_compute::G76</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00256">arm_compute::get_cl_version()</a>, <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00186">arm_compute::get_target_from_name()</a>, <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00056">CLDeviceOptions::gpu_target</a>, and <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00057">CLDeviceOptions::version</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        : _device(), _options()</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        _device = <a class="code" href="classarm__compute_1_1_c_l_device.xhtml#aa7d721813bb154a0ca56f8136712a19b">cl_device</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Get device target</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        std::string device_name = _device.getInfo&lt;CL_DEVICE_NAME&gt;();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#aadf3b16e351860b4ba10a540a621b392">gpu_target</a>     = <a class="code" href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">get_target_from_name</a>(device_name);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// Fill extensions</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        std::string extensions = _device.getInfo&lt;CL_DEVICE_EXTENSIONS&gt;();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        std::istringstream iss(extensions);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">for</span>(std::string s; iss &gt;&gt; s;)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a9eb2fa15d7ce88549e4e0b1068f95159">extensions</a>.insert(s);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// SW workaround for G76</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">if</span>(_options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#aadf3b16e351860b4ba10a540a621b392">gpu_target</a> == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">GPUTarget::G76</a>)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a9eb2fa15d7ce88549e4e0b1068f95159">extensions</a>.insert(<span class="stringliteral">&quot;cl_arm_integer_dot_product_int8&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// Get device version</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a4df34d6126ffb0acab9506e30dae58a4">version</a> = <a class="code" href="namespacearm__compute.xhtml#a0e62ce01a7a7af6c3d059bb8534cad45">get_cl_version</a>(_device);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="comment">// Get compute units</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#ad7dd07764bb88eb7b1e7de251752a5a9">compute_units</a> = _device.getInfo&lt;CL_DEVICE_MAX_COMPUTE_UNITS&gt;();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Get device version</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a00a31527219b80fd3cf88e02a46efa40">device_version</a> = _device.getInfo&lt;CL_DEVICE_VERSION&gt;();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_ad7dd07764bb88eb7b1e7de251752a5a9"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#ad7dd07764bb88eb7b1e7de251752a5a9">arm_compute::CLDeviceOptions::compute_units</a></div><div class="ttdeci">size_t compute_units</div><div class="ttdoc">Number of compute units. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00058">CLTypes.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">arm_compute::GPUTarget::G76</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0dc6fb54ac0bbc7bf512fe0ca7414076"><div class="ttname"><a href="namespacearm__compute.xhtml#a0dc6fb54ac0bbc7bf512fe0ca7414076">arm_compute::get_target_from_name</a></div><div class="ttdeci">GPUTarget get_target_from_name(const std::string &amp;device_name)</div><div class="ttdoc">Helper function to get the GPU target from a device name. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00186">GPUTarget.cpp:186</a></div></div>
<div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_aadf3b16e351860b4ba10a540a621b392"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#aadf3b16e351860b4ba10a540a621b392">arm_compute::CLDeviceOptions::gpu_target</a></div><div class="ttdeci">GPUTarget gpu_target</div><div class="ttdoc">GPU target architecture/instance. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00056">CLTypes.h:56</a></div></div>
<div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_a9eb2fa15d7ce88549e4e0b1068f95159"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#a9eb2fa15d7ce88549e4e0b1068f95159">arm_compute::CLDeviceOptions::extensions</a></div><div class="ttdeci">std::set&lt; std::string &gt; extensions</div><div class="ttdoc">List of supported extensions. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00054">CLTypes.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0e62ce01a7a7af6c3d059bb8534cad45"><div class="ttname"><a href="namespacearm__compute.xhtml#a0e62ce01a7a7af6c3d059bb8534cad45">arm_compute::get_cl_version</a></div><div class="ttdeci">CLVersion get_cl_version(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the highest OpenCL version supported. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00256">CLHelpers.cpp:256</a></div></div>
<div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_a00a31527219b80fd3cf88e02a46efa40"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#a00a31527219b80fd3cf88e02a46efa40">arm_compute::CLDeviceOptions::device_version</a></div><div class="ttdeci">std::string device_version</div><div class="ttdoc">Device version string. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00053">CLTypes.h:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_device_xhtml_aa7d721813bb154a0ca56f8136712a19b"><div class="ttname"><a href="classarm__compute_1_1_c_l_device.xhtml#aa7d721813bb154a0ca56f8136712a19b">arm_compute::CLDevice::cl_device</a></div><div class="ttdeci">const cl::Device &amp; cl_device() const</div><div class="ttdoc">Returns the underlying cl device object. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_device_8h_source.xhtml#l00112">CLDevice.h:112</a></div></div>
<div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_a4df34d6126ffb0acab9506e30dae58a4"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#a4df34d6126ffb0acab9506e30dae58a4">arm_compute::CLDeviceOptions::version</a></div><div class="ttdeci">CLVersion version</div><div class="ttdoc">Device OpenCL version. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00057">CLTypes.h:57</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa7d721813bb154a0ca56f8136712a19b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7d721813bb154a0ca56f8136712a19b">&#9670;&nbsp;</a></span>cl_device()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const cl::Device&amp; cl_device </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the underlying cl device object. </p>
<dl class="section return"><dt>Returns</dt><dd>A cl device </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00112">112</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_device_8h_source.xhtml#l00056">CLDevice::CLDevice()</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00159">CLCompileContext::create_kernel()</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00338">CLCompileContext::default_ndrange()</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00327">CLCompileContext::get_device()</a>, and <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00368">CLCompileContext::max_local_workgroup_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> _device;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a2e11e435e467931ffe6d9a15d0401c19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e11e435e467931ffe6d9a15d0401c19">&#9670;&nbsp;</a></span>compute_units()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t compute_units </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of compute units available. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of compute units </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00103">103</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00058">CLDeviceOptions::compute_units</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00384">CLCompileContext::get_num_compute_units()</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#ad7dd07764bb88eb7b1e7de251752a5a9">compute_units</a>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_ad7dd07764bb88eb7b1e7de251752a5a9"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#ad7dd07764bb88eb7b1e7de251752a5a9">arm_compute::CLDeviceOptions::compute_units</a></div><div class="ttdeci">size_t compute_units</div><div class="ttdoc">Number of compute units. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00058">CLTypes.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a492b0f72e29930e8b74a866d5e21b31b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a492b0f72e29930e8b74a866d5e21b31b">&#9670;&nbsp;</a></span>device_version()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string device_version </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the device version as a string. </p>
<dl class="section return"><dt>Returns</dt><dd>CLVersion of the device </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00130">130</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00053">CLDeviceOptions::device_version</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00389">CLCompileContext::get_ddk_version()</a>, and <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00379">CLCompileContext::get_device_version()</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a00a31527219b80fd3cf88e02a46efa40">device_version</a>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_a00a31527219b80fd3cf88e02a46efa40"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#a00a31527219b80fd3cf88e02a46efa40">arm_compute::CLDeviceOptions::device_version</a></div><div class="ttdeci">std::string device_version</div><div class="ttdoc">Device version string. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00053">CLTypes.h:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acc567924678eb3b406f132c7ca366c87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc567924678eb3b406f132c7ca366c87">&#9670;&nbsp;</a></span>is_non_uniform_workgroup_supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt;bool, std::string&gt; is_non_uniform_workgroup_supported </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether non-uniform workgroup is supported and the build options. </p>
<p>If the feature is supported, the appropriate build options will be appended to the specified string.</p>
<dl class="section return"><dt>Returns</dt><dd>A tuple (supported, build_options) indicating whether the feature is supported and the corresponding build options to enable it. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00154">154</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">arm_compute::CL20</a>, <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">arm_compute::CL30</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00395">arm_compute::get_cl_non_uniform_work_group_supported()</a>, <a class="el" href="_c_l_device_8h_source.xhtml#l00141">CLDevice::supported()</a>, and <a class="el" href="_c_l_device_8h_source.xhtml#l00121">CLDevice::version()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00218">CLCompileContext::set_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_device.xhtml#a1f0e1a33eea82f745658928bb4550eef">version</a>() == <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">CLVersion::CL30</a> &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#a8a5bd4c63b9012c70e5defdc3b344606">get_cl_non_uniform_work_group_supported</a>(_device))</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span> {<span class="keyword">true</span>, <span class="stringliteral">&quot; -cl-std=CL3.0 &quot;</span>};</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_device.xhtml#a1f0e1a33eea82f745658928bb4550eef">version</a>() == <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">CLVersion::CL20</a>)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">return</span> {<span class="keyword">true</span>, <span class="stringliteral">&quot; -cl-std=CL2.0 &quot;</span>};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_device.xhtml#aa75344c818b18165c299b00777cc8c52">supported</a>(<span class="stringliteral">&quot;cl_arm_non_uniform_work_group_size&quot;</span>))</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">return</span> {<span class="keyword">true</span>, <span class="stringliteral">&quot; -cl-arm-non-uniform-work-group-size &quot;</span>};</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> {<span class="keyword">false</span>, <span class="stringliteral">&quot;&quot;</span>};</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea669ca03f71cf65568691007fde729fa3">arm_compute::CLVersion::CL30</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52eaba90edbc644c32afa8a7e36e87735aab">arm_compute::CLVersion::CL20</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_device_xhtml_a1f0e1a33eea82f745658928bb4550eef"><div class="ttname"><a href="classarm__compute_1_1_c_l_device.xhtml#a1f0e1a33eea82f745658928bb4550eef">arm_compute::CLDevice::version</a></div><div class="ttdeci">CLVersion version() const</div><div class="ttdoc">Returns the device&amp;#39;s CL version. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_device_8h_source.xhtml#l00121">CLDevice.h:121</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a8a5bd4c63b9012c70e5defdc3b344606"><div class="ttname"><a href="namespacearm__compute.xhtml#a8a5bd4c63b9012c70e5defdc3b344606">arm_compute::get_cl_non_uniform_work_group_supported</a></div><div class="ttdeci">bool get_cl_non_uniform_work_group_supported(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to check whether non-uniform work group is supported. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00395">CLHelpers.cpp:395</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_device_xhtml_aa75344c818b18165c299b00777cc8c52"><div class="ttname"><a href="classarm__compute_1_1_c_l_device.xhtml#aa75344c818b18165c299b00777cc8c52">arm_compute::CLDevice::supported</a></div><div class="ttdeci">bool supported(const std::string &amp;extension) const override</div><div class="ttdoc">Check if extensions on a device are supported. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_device_8h_source.xhtml#l00141">CLDevice.h:141</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa75344c818b18165c299b00777cc8c52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa75344c818b18165c299b00777cc8c52">&#9670;&nbsp;</a></span>supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool supported </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>extension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if extensions on a device are supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">extension</td><td>An extension to check if it's supported.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the extension is supported else false </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_device.xhtml#a24596885c75da5e61099be7fec468a2f">IDevice</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00141">141</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00054">CLDeviceOptions::extensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00283">CLCompileContext::fp16_supported()</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00358">CLCompileContext::int64_base_atomics_supported()</a>, <a class="el" href="_c_l_device_8h_source.xhtml#l00154">CLDevice::is_non_uniform_workgroup_supported()</a>, and <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00218">CLCompileContext::set_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">return</span> _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a9eb2fa15d7ce88549e4e0b1068f95159">extensions</a>.count(extension) != 0;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_a9eb2fa15d7ce88549e4e0b1068f95159"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#a9eb2fa15d7ce88549e4e0b1068f95159">arm_compute::CLDeviceOptions::extensions</a></div><div class="ttdeci">std::set&lt; std::string &gt; extensions</div><div class="ttdoc">List of supported extensions. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00054">CLTypes.h:54</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac6326ac3fd13446394faa873fa727414"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6326ac3fd13446394faa873fa727414">&#9670;&nbsp;</a></span>target()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&amp; target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the GPU target of the cl device. </p>
<dl class="section return"><dt>Returns</dt><dd>The GPU target </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00094">94</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00056">CLDeviceOptions::gpu_target</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00402">CLCompileContext::get_gpu_target()</a>, and <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00218">CLCompileContext::set_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#aadf3b16e351860b4ba10a540a621b392">gpu_target</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_aadf3b16e351860b4ba10a540a621b392"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#aadf3b16e351860b4ba10a540a621b392">arm_compute::CLDeviceOptions::gpu_target</a></div><div class="ttdeci">GPUTarget gpu_target</div><div class="ttdoc">GPU target architecture/instance. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00056">CLTypes.h:56</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1a33f1f37494e32987c96642e456fa09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a33f1f37494e32987c96642e456fa09">&#9670;&nbsp;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9">DeviceType</a> type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Device type accessor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1_i_device.xhtml#a6a9a87290ceb85023335d5b87b4d6013">IDevice</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00136">136</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">arm_compute::CL</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">DeviceType::CL</a>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">arm_compute::DeviceType::CL</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1f0e1a33eea82f745658928bb4550eef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f0e1a33eea82f745658928bb4550eef">&#9670;&nbsp;</a></span>version()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52e">CLVersion</a> version </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the device's CL version. </p>
<dl class="section return"><dt>Returns</dt><dd>CLVersion of the device </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_device_8h_source.xhtml#l00121">121</a> of file <a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00057">CLDeviceOptions::version</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_device_8h_source.xhtml#l00154">CLDevice::is_non_uniform_workgroup_supported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">return</span> _options.<a class="code" href="structarm__compute_1_1_c_l_device_options.xhtml#a4df34d6126ffb0acab9506e30dae58a4">version</a>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_c_l_device_options_xhtml_a4df34d6126ffb0acab9506e30dae58a4"><div class="ttname"><a href="structarm__compute_1_1_c_l_device_options.xhtml#a4df34d6126ffb0acab9506e30dae58a4">arm_compute::CLDeviceOptions::version</a></div><div class="ttdeci">CLVersion version</div><div class="ttdoc">Device OpenCL version. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00057">CLTypes.h:57</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/CL/<a class="el" href="_c_l_device_8h_source.xhtml">CLDevice.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_device.xhtml">CLDevice</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 10:57:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
